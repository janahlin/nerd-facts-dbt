{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-03-17T09:56:58.841609Z", "invocation_id": "f6bf1b47-d554-4a69-a28f-32f4a758609e", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-17T09:56:58.599327Z", "completed_at": "2025-03-17T09:56:58.614776Z"}, {"name": "execute", "started_at": "2025-03-17T09:56:58.623252Z", "completed_at": "2025-03-17T09:56:58.714501Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12310361862182617, "adapter_response": {}, "message": "Database Error in model stg_swapi_people (models/staging/swapi/stg_swapi_people.sql)\n  column \"films\" does not exist\n  LINE 34:         films,\n                   ^\n  compiled code at target/run/nerd_facts_dbt/models/staging/swapi/stg_swapi_people.sql", "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_people", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_people\n  Description: Standardizes Star Wars character data from SWAPI\n  Source: raw.swapi_people\n  \n  Notes:\n  - Species and homeworld are extracted from JSON references\n  - Force sensitivity is derived from character appearances and names\n  - Physical attributes are cleaned and converted to proper numeric types\n  - Additional derived fields are added for character analysis\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        height,\n        mass,\n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        films,\n        species,\n        vehicles,\n        starships,\n        created,\n        edited,\n        url\n    FROM \"nerd_facts\".\"raw\".\"swapi_people\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name,\n    \n    -- Extract species information with improved error handling\n    CASE \n        WHEN species IS NULL OR jsonb_array_length(species) = 0 THEN 'Human'  -- Default to Human if no species\n        WHEN jsonb_typeof(species) != 'array' THEN 'Unknown'  -- Handle unexpected JSON type\n        ELSE COALESCE(SPLIT_PART(species->0->>'url', '/', 6), 'Unknown')  -- Extract ID from URL\n    END AS species,\n    \n    -- Extract homeworld ID with error handling\n    CASE\n        WHEN homeworld IS NULL THEN NULL\n        WHEN jsonb_typeof(homeworld) != 'object' THEN NULL\n        ELSE NULLIF(SPLIT_PART(homeworld->>'url', '/', 6), '')\n    END AS homeworld_id,\n    \n    -- Clean numeric values with comprehensive error handling\n    CASE \n        WHEN height IS NULL OR lower(height) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(height, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS height_cm,\n    \n    CASE \n        WHEN mass IS NULL OR lower(mass) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(mass, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS mass_kg,\n    \n    -- Calculate BMI if both height and mass are available\n    CASE\n        WHEN height IS NOT NULL AND mass IS NOT NULL \n             AND NULLIF(REGEXP_REPLACE(height, '[^0-9\\.]', '', 'g'), '') != ''\n             AND NULLIF(REGEXP_REPLACE(mass, '[^0-9\\.]', '', 'g'), '') != ''\n             AND height::NUMERIC > 0\n        THEN (NULLIF(REGEXP_REPLACE(mass, '[^0-9\\.]', '', 'g'), '')::NUMERIC) / \n             POWER((NULLIF(REGEXP_REPLACE(height, '[^0-9\\.]', '', 'g'), '')::NUMERIC / 100), 2)\n        ELSE NULL\n    END AS bmi,\n    \n    -- Character physical attributes with standardized colors\n    LOWER(COALESCE(hair_color, 'unknown')) AS hair_color,\n    LOWER(COALESCE(skin_color, 'unknown')) AS skin_color,\n    LOWER(COALESCE(eye_color, 'unknown')) AS eye_color,\n    birth_year,\n    LOWER(COALESCE(gender, 'unknown')) AS gender,\n    \n    -- Force-user related fields with expanded detection\n    CASE\n        -- Check film appearances\n        WHEN films @> '[{\"title\": \"Return of the Jedi\"}]' \n             OR films @> '[{\"title\": \"The Empire Strikes Back\"}]'\n             OR films @> '[{\"title\": \"Revenge of the Sith\"}]'\n        -- Explicit Jedi/Sith list\n        OR LOWER(name) IN ('luke skywalker', 'darth vader', 'obi-wan kenobi', 'yoda', \n                          'emperor palpatine', 'count dooku', 'qui-gon jinn', 'mace windu',\n                          'rey', 'kylo ren')\n        THEN TRUE\n        ELSE FALSE\n    END AS force_sensitive,\n    \n    -- Force rating for known powerful force users\n    CASE\n        WHEN LOWER(name) IN ('yoda', 'emperor palpatine', 'darth vader', 'luke skywalker') THEN 5\n        WHEN LOWER(name) IN ('obi-wan kenobi', 'mace windu', 'kylo ren', 'rey') THEN 4\n        WHEN LOWER(name) IN ('qui-gon jinn', 'count dooku') THEN 3\n        WHEN force_sensitive THEN 2\n        ELSE NULL\n    END AS force_rating,\n    \n    -- Entity counts with error handling\n    COALESCE(jsonb_array_length(starships), 0) AS ships_piloted,\n    COALESCE(jsonb_array_length(vehicles), 0) AS vehicles_operated,\n    COALESCE(jsonb_array_length(films), 0) AS film_appearances,\n    \n    -- Keep raw arrays for downstream usage\n    films,\n    starships,\n    vehicles,\n    \n    -- Era classification\n    CASE\n        WHEN films @> '[{\"title\": \"The Phantom Menace\"}]' \n             OR films @> '[{\"title\": \"Attack of the Clones\"}]'\n             OR films @> '[{\"title\": \"Revenge of the Sith\"}]'\n        THEN 'Prequel Era'\n        WHEN films @> '[{\"title\": \"A New Hope\"}]'\n             OR films @> '[{\"title\": \"The Empire Strikes Back\"}]'\n             OR films @> '[{\"title\": \"Return of the Jedi\"}]'\n        THEN 'Original Trilogy Era'\n        WHEN films @> '[{\"title\": \"The Force Awakens\"}]'\n             OR films @> '[{\"title\": \"The Last Jedi\"}]'\n        THEN 'Sequel Era'\n        ELSE 'Unknown Era'\n    END AS character_era,\n    \n    -- API metadata with proper handling\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_people\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-17T09:56:58.615199Z", "completed_at": "2025-03-17T09:56:58.673251Z"}, {"name": "execute", "started_at": "2025-03-17T09:56:58.674357Z", "completed_at": "2025-03-17T09:56:58.725046Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12746095657348633, "adapter_response": {}, "message": "Database Error in model stg_swapi_species (models/staging/swapi/stg_swapi_species.sql)\n  syntax error at or near \"lek\"\n  LINE 136: ...                    'Jawa', 'Mon Calamari', 'Twi\\'lek', 'Yod...\n                                                                 ^\n  compiled code at target/run/nerd_facts_dbt/models/staging/swapi/stg_swapi_species.sql", "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_species", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_species\n  Description: Standardizes Star Wars species data from SWAPI\n  Source: raw.swapi_species\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types\n  - Color fields are parsed for analysis\n  - Homeworld references are extracted\n  - Additional derived fields help with species classification\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        classification,\n        designation,\n        average_height,\n        average_lifespan,\n        eye_colors,\n        hair_colors,\n        skin_colors,\n        homeworld,\n        language,\n        CASE WHEN people IS NULL OR people = '' THEN NULL::jsonb ELSE people::jsonb END AS people,\n        CASE WHEN films IS NULL OR films = '' THEN NULL::jsonb ELSE films::jsonb END AS films,\n        created,\n        edited,\n        CURRENT_TIMESTAMP AS _loaded_at\n    FROM \"nerd_facts\".\"raw\".\"swapi_species\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS species_name,\n    \n    -- Species classification\n    LOWER(COALESCE(classification, 'unknown')) AS classification,\n    LOWER(COALESCE(designation, 'unknown')) AS designation,\n    \n    -- Physical characteristics with proper typing\n    CASE \n        WHEN average_height IS NULL OR LOWER(average_height) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(average_height, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS average_height_cm,\n    \n    CASE \n        WHEN average_lifespan IS NULL OR LOWER(average_lifespan) = 'unknown' \n            OR LOWER(average_lifespan) = 'indefinite' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(average_lifespan, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS average_lifespan_years,\n    \n    -- Special case for indefinite lifespan\n    CASE \n        WHEN LOWER(average_lifespan) = 'indefinite' THEN TRUE\n        ELSE FALSE\n    END AS has_indefinite_lifespan,\n    \n    -- Language\n    LOWER(COALESCE(language, 'unknown')) AS language,\n    \n    -- Color attributes - standardized to arrays\n    CASE \n        WHEN eye_colors IS NULL OR eye_colors = '' THEN NULL\n        ELSE STRING_TO_ARRAY(LOWER(eye_colors), ', ') \n    END AS eye_colors_array,\n    \n    CASE \n        WHEN hair_colors IS NULL OR hair_colors = '' THEN NULL\n        ELSE STRING_TO_ARRAY(LOWER(hair_colors), ', ') \n    END AS hair_colors_array,\n    \n    CASE \n        WHEN skin_colors IS NULL OR skin_colors = '' THEN NULL\n        ELSE STRING_TO_ARRAY(LOWER(skin_colors), ', ') \n    END AS skin_colors_array,\n    \n    -- Extract homeworld with error handling\n    CASE\n        WHEN homeworld IS NULL THEN NULL\n        WHEN homeworld = 'null' THEN NULL\n        ELSE NULLIF(SPLIT_PART(homeworld->>'url', '/', 6), '')\n    END AS homeworld_id,\n    \n    -- Entity counts\n    COALESCE(jsonb_array_length(people), 0) AS character_count,\n    COALESCE(jsonb_array_length(films), 0) AS film_appearances,\n    \n    -- Keep raw arrays for downstream usage\n    people,\n    films,\n    \n    -- Derived species classifications\n    CASE\n        WHEN LOWER(classification) IN ('mammal', 'amphibian', 'reptile', 'bird') THEN TRUE\n        ELSE FALSE\n    END AS is_organic,\n    \n    CASE\n        WHEN LOWER(classification) = 'artificial' OR LOWER(name) = 'droid' THEN TRUE\n        ELSE FALSE\n    END AS is_artificial,\n    \n    -- Intelligence estimation (approximate)\n    CASE\n        WHEN LOWER(designation) = 'sentient' THEN 'High'\n        WHEN LOWER(designation) = 'semi-sentient' THEN 'Moderate'\n        ELSE 'Unknown'\n    END AS intelligence_level,\n    \n    -- Longevity classification\n    CASE\n        WHEN LOWER(average_lifespan) = 'indefinite' THEN 'Immortal'\n        WHEN average_lifespan::NUMERIC > 500 THEN 'Very Long-Lived'\n        WHEN average_lifespan::NUMERIC > 100 THEN 'Long-Lived'\n        WHEN average_lifespan::NUMERIC > 70 THEN 'Standard'\n        WHEN average_lifespan::NUMERIC > 0 THEN 'Short-Lived'\n        ELSE 'Unknown'\n    END AS longevity_class,\n    \n    -- Notable species flag\n    CASE\n        WHEN name IN ('Human', 'Wookiee', 'Droid', 'Hutt', 'Ewok', 'Gungan', \n                     'Jawa', 'Mon Calamari', 'Twi\\'lek', 'Yoda\\'s species') \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_species,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_species\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-17T09:56:58.610093Z", "completed_at": "2025-03-17T09:56:58.650673Z"}, {"name": "execute", "started_at": "2025-03-17T09:56:58.667977Z", "completed_at": "2025-03-17T09:56:58.721373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13259553909301758, "adapter_response": {}, "message": "Database Error in model stg_swapi_films (models/staging/swapi/stg_swapi_films.sql)\n  column \"characters\" does not exist\n  LINE 45:                 CASE WHEN characters IS NULL OR characters =...\n                                     ^\n  compiled code at target/run/nerd_facts_dbt/models/staging/swapi/stg_swapi_films.sql", "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_films", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_films\n  Description: Standardizes Star Wars film data from SWAPI\n  Source: raw.swapi_films\n  \n  Notes:\n  - Adds derived fields for easier analysis (release_year, trilogy)\n  - Extracts counts from related entities (characters, planets, species)\n  - Converts dates to proper DATE types and adds chronological ordering\n*/\n\n-- First, let's check what columns actually exist in the source table\nWITH column_check AS (\n    SELECT \n        column_name \n    FROM information_schema.columns \n    WHERE table_schema = 'raw' \n    AND table_name = 'swapi_films'\n),\n\nraw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        episode_id,\n        title,\n        director,\n        producer,\n        release_date,\n        opening_crawl,\n        \n        -- Dynamically handle character data - could be \"characters\" or \"people\"\n        CASE \n            -- Handle case where column is named \"characters\"\n            WHEN EXISTS (SELECT 1 FROM column_check WHERE column_name = 'characters') \n            THEN \n                CASE WHEN characters IS NULL OR characters = '' THEN NULL::jsonb \n                ELSE characters::jsonb END\n            -- Handle case where column is named \"people\" \n            WHEN EXISTS (SELECT 1 FROM column_check WHERE column_name = 'people')\n            THEN\n                CASE WHEN people IS NULL OR people = '' THEN NULL::jsonb \n                ELSE people::jsonb END\n            -- Fallback to empty array\n            ELSE '[]'::jsonb\n        END AS characters,\n        \n        -- Additional fields with safer access\n        CASE WHEN planets IS NULL OR planets = '' THEN NULL::jsonb \n             ELSE planets::jsonb END AS planets,\n        CASE WHEN starships IS NULL OR starships = '' THEN NULL::jsonb \n             ELSE starships::jsonb END AS starships,\n        CASE WHEN vehicles IS NULL OR vehicles = '' THEN NULL::jsonb \n             ELSE vehicles::jsonb END AS vehicles,\n        CASE WHEN species IS NULL OR species = '' THEN NULL::jsonb \n             ELSE species::jsonb END AS species,\n        created,\n        edited,\n        url\n    FROM \"nerd_facts\".\"raw\".\"swapi_films\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    episode_id,\n    title AS film_title,\n    \n    -- Creative team\n    director,\n    producer,\n    \n    -- Standardize dates and add derived time fields\n    CASE \n        WHEN release_date IS NULL OR release_date = '' THEN NULL\n        ELSE TO_DATE(release_date, 'YYYY-MM-DD') \n    END AS release_date,\n    \n    EXTRACT(YEAR FROM TO_DATE(release_date, 'YYYY-MM-DD')) AS release_year,\n    \n    -- Story elements\n    opening_crawl,\n    \n    -- Derived chronological order (story timeline vs. release order)\n    CASE episode_id\n        WHEN 1 THEN 1  -- The Phantom Menace\n        WHEN 2 THEN 2  -- Attack of the Clones\n        WHEN 3 THEN 3  -- Revenge of the Sith\n        WHEN 4 THEN 4  -- A New Hope\n        WHEN 5 THEN 5  -- Empire Strikes Back\n        WHEN 6 THEN 6  -- Return of the Jedi\n        WHEN 7 THEN 7  -- The Force Awakens\n        WHEN 8 THEN 8  -- The Last Jedi\n        WHEN 9 THEN 9  -- The Rise of Skywalker\n        ELSE 99        -- Unknown/other\n    END AS chronological_order,\n    \n    -- Trilogy classification\n    CASE\n        WHEN episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n        WHEN episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n        WHEN episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n        ELSE 'Anthology'\n    END AS trilogy,\n    \n    -- Entity counts with safer access\n    COALESCE(jsonb_array_length(characters), 0) AS character_count,\n    COALESCE(jsonb_array_length(planets), 0) AS planet_count,\n    COALESCE(jsonb_array_length(starships), 0) AS starship_count,\n    COALESCE(jsonb_array_length(vehicles), 0) AS vehicle_count,\n    COALESCE(jsonb_array_length(species), 0) AS species_count,\n    \n    -- Word count of opening crawl (approximate)\n    ARRAY_LENGTH(STRING_TO_ARRAY(REGEXP_REPLACE(COALESCE(opening_crawl, ''), '\\r|\\n', ' ', 'g'), ' '), 1) AS opening_crawl_word_count,\n    \n    -- API metadata with proper handling\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Data tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data\nORDER BY episode_id", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_films\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-17T09:56:58.619096Z", "completed_at": "2025-03-17T09:56:58.644407Z"}, {"name": "execute", "started_at": "2025-03-17T09:56:58.644909Z", "completed_at": "2025-03-17T09:56:58.728533Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1278226375579834, "adapter_response": {}, "message": "Database Error in model stg_swapi_planets (models/staging/swapi/stg_swapi_planets.sql)\n  syntax error at or near \"AS\"\n  LINE 150: ...face_water IS NOT NULL AND TRY_CAST(surface_water AS NUMERIC...\n                                                                 ^\n  compiled code at target/run/nerd_facts_dbt/models/staging/swapi/stg_swapi_planets.sql", "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_planets", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_planets\n  Description: Standardizes Star Wars planet data from SWAPI\n  Source: raw.swapi_planets\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types\n  - Population is handled with appropriate NULL values\n  - Derived planet classifications are added for analysis\n  - Climate and terrain are standardized for consistency\n*/\n\n-- First check what columns actually exist\nWITH column_check AS (\n    SELECT \n        column_name \n    FROM information_schema.columns \n    WHERE table_schema = 'raw' \n    AND table_name = 'swapi_planets'\n),\n\nraw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        rotation_period,\n        orbital_period,\n        diameter,\n        climate,\n        gravity,\n        terrain,\n        surface_water,\n        population,\n        \n        -- Handle various possible column names for resident data\n        CASE\n            -- Check for standard \"residents\" column\n            WHEN EXISTS (SELECT 1 FROM column_check WHERE column_name = 'residents')\n            THEN CASE WHEN residents IS NULL OR residents = '' THEN NULL::jsonb ELSE residents::jsonb END\n            \n            -- Check for alternative \"people\" column\n            WHEN EXISTS (SELECT 1 FROM column_check WHERE column_name = 'people')\n            THEN CASE WHEN people IS NULL OR people = '' THEN NULL::jsonb ELSE people::jsonb END\n            \n            -- Check for alternative \"characters\" column\n            WHEN EXISTS (SELECT 1 FROM column_check WHERE column_name = 'characters')\n            THEN CASE WHEN characters IS NULL OR characters = '' THEN NULL::jsonb ELSE characters::jsonb END\n            \n            -- Default to empty array if no matching column found\n            ELSE '[]'::jsonb\n        END AS residents,\n        \n        -- Handle films data with similar approach\n        CASE\n            WHEN EXISTS (SELECT 1 FROM column_check WHERE column_name = 'films')\n            THEN CASE WHEN films IS NULL OR films = '' THEN NULL::jsonb ELSE films::jsonb END\n            \n            -- Default to empty array if no matching column found\n            ELSE '[]'::jsonb\n        END AS films,\n        \n        created,\n        edited,\n        CURRENT_TIMESTAMP AS _loaded_at\n    FROM \"nerd_facts\".\"raw\".\"swapi_planets\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS planet_name,\n    \n    -- Physical characteristics with proper typing\n    CASE \n        WHEN rotation_period IS NULL OR lower(rotation_period) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(rotation_period, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS rotation_period,\n    \n    CASE \n        WHEN orbital_period IS NULL OR lower(orbital_period) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(orbital_period, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS orbital_period,\n    \n    CASE \n        WHEN diameter IS NULL OR lower(diameter) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(diameter, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS diameter,\n    \n    -- Environment attributes\n    LOWER(COALESCE(climate, 'unknown')) AS climate,\n    LOWER(COALESCE(gravity, 'unknown')) AS gravity,\n    LOWER(COALESCE(terrain, 'unknown')) AS terrain,\n    \n    CASE \n        WHEN surface_water IS NULL OR lower(surface_water) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(surface_water, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS surface_water,\n    \n    -- Population with proper handling\n    CASE \n        WHEN population IS NULL OR lower(population) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(population, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS population,\n    \n    -- Entity counts\n    COALESCE(jsonb_array_length(residents), 0) AS resident_count,\n    COALESCE(jsonb_array_length(films), 0) AS film_appearances,\n    \n    -- Keep raw arrays for downstream usage\n    residents,\n    films,\n    \n    -- Derived classifications\n    CASE\n        WHEN lower(climate) LIKE '%temperate%' THEN TRUE\n        ELSE FALSE\n    END AS is_temperate,\n    \n    CASE\n        WHEN lower(terrain) LIKE '%forest%' OR \n             lower(terrain) LIKE '%jungle%' OR\n             lower(terrain) LIKE '%grasslands%' THEN TRUE\n        ELSE FALSE\n    END AS has_vegetation,\n    \n    CASE\n        WHEN lower(terrain) LIKE '%ocean%' OR \n             lower(terrain) LIKE '%water%' OR\n             (surface_water IS NOT NULL AND \n              CASE WHEN surface_water ~ '^[0-9\\.]+$' \n                   THEN surface_water::NUMERIC > 50 \n                   ELSE FALSE \n              END) THEN TRUE\n        ELSE FALSE\n    END AS is_water_world,\n    \n    CASE\n        WHEN lower(terrain) LIKE '%desert%' OR \n             lower(climate) LIKE '%arid%' OR\n             (surface_water IS NOT NULL AND TRY_CAST(surface_water AS NUMERIC) < 5) THEN TRUE\n        ELSE FALSE\n    END AS is_desert_world,\n    \n    -- Planet habitability score (0-100)\n    CASE\n        WHEN lower(climate) LIKE '%temperate%' THEN\n            CASE\n                WHEN lower(terrain) LIKE '%forest%' OR \n                     lower(terrain) LIKE '%grasslands%' THEN 90\n                ELSE 75\n            END\n        WHEN lower(climate) LIKE '%tropical%' OR lower(climate) LIKE '%humid%' THEN 65\n        WHEN lower(climate) LIKE '%arid%' OR lower(climate) LIKE '%hot%' THEN 35\n        WHEN lower(climate) LIKE '%frozen%' OR lower(climate) LIKE '%frigid%' THEN 15\n        ELSE 50\n    END AS habitability_score,\n    \n    -- Notable planet flag\n    CASE\n        WHEN name IN ('Tatooine', 'Alderaan', 'Yavin IV', 'Hoth', 'Dagobah', \n                      'Bespin', 'Endor', 'Naboo', 'Coruscant', 'Kamino', 'Geonosis') \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_planet,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_planets\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-17T09:56:58.749948Z", "completed_at": "2025-03-17T09:56:58.754238Z"}, {"name": "execute", "started_at": "2025-03-17T09:56:58.755321Z", "completed_at": "2025-03-17T09:56:58.783758Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05583071708679199, "adapter_response": {}, "message": "Database Error in model stg_swapi_starships (models/staging/swapi/stg_swapi_starships.sql)\n  function jsonb_array_length(text) does not exist\n  LINE 96:     COALESCE(jsonb_array_length(pilots), 0) AS pilot_count,\n                        ^\n  HINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n  compiled code at target/run/nerd_facts_dbt/models/staging/swapi/stg_swapi_starships.sql", "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_starships", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_starships\n  Description: Standardizes Star Wars starship data from SWAPI\n  Source: raw.swapi_starships\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types\n  - Speeds and capacities have proper error handling\n  - Pilot and film references are extracted as counts\n  - Additional derived fields help with starship classification\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        model,\n        manufacturer,\n        cost_in_credits,\n        length,\n        max_atmosphering_speed,\n        crew,\n        passengers,\n        cargo_capacity,\n        consumables,\n        hyperdrive_rating,\n        MGLT,\n        starship_class,\n        pilots,\n        films,\n        created,\n        edited,\n        url\n    FROM raw.swapi_starships\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS starship_name,\n    model,\n    manufacturer,\n    starship_class,\n    \n    -- Technical specifications with improved error handling\n    CASE \n        WHEN lower(cost_in_credits) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(cost_in_credits, '[^0-9]', '', 'g'), '')::NUMERIC\n    END AS cost_in_credits,\n    \n    CASE \n        WHEN lower(length) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(length, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS length_m,\n    \n    CASE \n        WHEN lower(max_atmosphering_speed) = 'unknown' THEN NULL\n        WHEN lower(max_atmosphering_speed) = 'n/a' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(max_atmosphering_speed, '[^0-9]+.*', '', 'g'), '')::INTEGER \n    END AS max_speed,\n    \n    CASE\n        WHEN lower(hyperdrive_rating) = 'unknown' THEN NULL\n        WHEN lower(hyperdrive_rating) = 'n/a' THEN NULL\n        ELSE NULLIF(hyperdrive_rating, '')::NUMERIC\n    END AS hyperdrive_rating,\n    \n    CASE\n        WHEN lower(MGLT) = 'unknown' THEN NULL\n        WHEN lower(MGLT) = 'n/a' THEN NULL\n        ELSE NULLIF(MGLT, '')::INTEGER\n    END AS mglt,\n    \n    -- Capacity information\n    NULLIF(REGEXP_REPLACE(crew, '[^0-9]', '', 'g'), '')::INTEGER AS crew_count,\n    NULLIF(REGEXP_REPLACE(passengers, '[^0-9]', '', 'g'), '')::INTEGER AS passenger_capacity,\n    \n    CASE \n        WHEN lower(cargo_capacity) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(cargo_capacity, '[^0-9]', '', 'g'), '')::NUMERIC\n    END AS cargo_capacity,\n    \n    consumables,\n    \n    -- Entity counts with error handling\n    COALESCE(jsonb_array_length(pilots), 0) AS pilot_count,\n    COALESCE(jsonb_array_length(films), 0) AS film_appearances,\n    \n    -- Keep raw arrays for downstream usage\n    CASE WHEN pilots IS NULL OR pilots = '' THEN NULL::jsonb ELSE pilots::jsonb END AS pilots,\n    CASE WHEN films IS NULL OR films = '' THEN NULL::jsonb ELSE films::jsonb END AS films,\n    \n    -- Derived ship classification\n    CASE\n        WHEN lower(starship_class) IN ('corvette', 'frigate', 'star destroyer', 'dreadnought')\n            OR lower(name) LIKE '%star destroyer%' THEN 'Military'\n        WHEN lower(starship_class) IN ('transport', 'freighter', 'yacht') \n            OR lower(name) LIKE '%transport%' THEN 'Commercial'\n        WHEN lower(starship_class) IN ('starfighter', 'bomber', 'assault ship')\n            OR lower(name) LIKE '%fighter%' THEN 'Starfighter'\n        ELSE 'Other'\n    END AS ship_purpose,\n    \n    -- Size classification\n    CASE\n        WHEN length::NUMERIC < 30 THEN 'Small'\n        WHEN length::NUMERIC < 100 THEN 'Medium'\n        WHEN length::NUMERIC < 500 THEN 'Large'\n        WHEN length::NUMERIC < 1000 THEN 'Very Large'\n        WHEN length::NUMERIC >= 1000 THEN 'Capital'\n        ELSE 'Unknown'\n    END AS ship_size,\n    \n    -- Notable ship flag\n    CASE\n        WHEN name IN ('Millennium Falcon', 'Death Star', 'Star Destroyer', \n                     'X-wing', 'TIE Advanced x1', 'Executor', 'Slave 1') \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_ship,\n    \n    -- Total capacity (crew + passengers)\n    COALESCE(\n        NULLIF(REGEXP_REPLACE(crew, '[^0-9]', '', 'g'), '')::INTEGER, 0\n    ) + \n    COALESCE(\n        NULLIF(REGEXP_REPLACE(passengers, '[^0-9]', '', 'g'), '')::INTEGER, 0\n    ) AS total_capacity,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_starships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-17T09:56:58.738827Z", "completed_at": "2025-03-17T09:56:58.744639Z"}, {"name": "execute", "started_at": "2025-03-17T09:56:58.745338Z", "completed_at": "2025-03-17T09:56:58.818942Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08586001396179199, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_vehicles", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_vehicles\n  Description: Standardizes Star Wars vehicle data from SWAPI\n  Source: raw.swapi_vehicles\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types\n  - Speeds and capacities have proper error handling\n  - Pilot and film references are extracted as counts\n  - Additional derived fields help with vehicle classification\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        model,\n        manufacturer,\n        NULLIF(cost_in_credits, 'unknown') AS cost_in_credits,\n        NULLIF(length, 'unknown') AS length,\n        NULLIF(max_atmosphering_speed, 'unknown') AS max_atmosphering_speed,\n        NULLIF(crew, 'unknown') AS crew,\n        NULLIF(passengers, 'unknown') AS passengers,\n        NULLIF(cargo_capacity, 'unknown') AS cargo_capacity,\n        consumables,\n        vehicle_class,\n        CASE WHEN pilots IS NULL OR pilots = '' THEN NULL::jsonb ELSE pilots::jsonb END AS pilots,\n        CASE WHEN films IS NULL OR films = '' THEN NULL::jsonb ELSE films::jsonb END AS films,\n        created,\n        edited,\n        CURRENT_TIMESTAMP AS _loaded_at\n    FROM \"nerd_facts\".\"raw\".\"swapi_vehicles\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    \n    -- Technical specifications with proper error handling\n    CASE \n        WHEN lower(cost_in_credits) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(cost_in_credits, '[^0-9]', '', 'g'), '')::NUMERIC\n    END AS cost_in_credits,\n    \n    CASE \n        WHEN lower(length) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(length, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS length_m,\n    \n    CASE \n        WHEN lower(max_atmosphering_speed) = 'unknown' THEN NULL\n        WHEN lower(max_atmosphering_speed) = 'n/a' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(max_atmosphering_speed, '[^0-9]+.*', '', 'g'), '')::INTEGER \n    END AS max_speed,\n    \n    -- Capacity information with proper type conversion\n    CASE \n        WHEN lower(crew) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(crew, '[^0-9]', '', 'g'), '')::INTEGER\n    END AS crew_count,\n    \n    CASE \n        WHEN lower(passengers) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(passengers, '[^0-9]', '', 'g'), '')::INTEGER\n    END AS passenger_capacity,\n    \n    CASE \n        WHEN lower(cargo_capacity) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(cargo_capacity, '[^0-9]', '', 'g'), '')::NUMERIC\n    END AS cargo_capacity,\n    \n    consumables,\n    \n    -- Entity counts with error handling\n    COALESCE(jsonb_array_length(pilots), 0) AS pilot_count,\n    COALESCE(jsonb_array_length(films), 0) AS film_appearances,\n    \n    -- Keep raw arrays for downstream usage\n    pilots,\n    films,\n    \n    -- Derived vehicle classifications\n    CASE\n        WHEN lower(vehicle_class) IN ('assault', 'combat', 'battle') \n             OR lower(name) LIKE '%fighter%' \n             OR lower(name) LIKE '%tank%'\n             OR lower(name) LIKE '%cannon%' THEN 'Military'\n        WHEN lower(vehicle_class) IN ('transport', 'cargo', 'container') \n             OR lower(name) LIKE '%transport%'\n             OR lower(name) LIKE '%freighter%' THEN 'Transport'\n        WHEN lower(vehicle_class) IN ('speeder', 'airspeeder', 'swoop', 'landspeeder') \n             OR lower(name) LIKE '%speeder%' THEN 'Personal'\n        ELSE 'Other'\n    END AS vehicle_purpose,\n    \n    -- Size classification\n    CASE\n        WHEN length IS NULL THEN 'Unknown'\n        WHEN length::NUMERIC < 10 THEN 'Small'\n        WHEN length::NUMERIC < 25 THEN 'Medium'\n        WHEN length::NUMERIC < 100 THEN 'Large'\n        ELSE 'Very Large'\n    END AS vehicle_size,\n    \n    -- Terrain capability\n    CASE\n        WHEN lower(vehicle_class) LIKE '%walker%' \n             OR lower(name) LIKE '%walker%' THEN 'Ground Only'\n        WHEN lower(vehicle_class) LIKE '%speeder%'\n             OR lower(name) LIKE '%speeder%' THEN 'Ground & Low Altitude'\n        WHEN lower(vehicle_class) LIKE '%airspeeder%'\n             OR lower(name) LIKE '%airspeeder%' THEN 'Aerial'\n        ELSE 'Unknown'\n    END AS terrain_capability,\n    \n    -- Notable vehicle flag\n    CASE\n        WHEN name IN ('AT-AT', 'AT-ST', 'Snowspeeder', 'Speeder bike',\n                     'Sand Crawler', 'TIE bomber', 'Imperial Speeder Bike') \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_vehicle,\n    \n    -- Total capacity (crew + passengers)\n    COALESCE(\n        NULLIF(REGEXP_REPLACE(crew, '[^0-9]', '', 'g'), '')::INTEGER, 0\n    ) + \n    COALESCE(\n        NULLIF(REGEXP_REPLACE(passengers, '[^0-9]', '', 'g'), '')::INTEGER, 0\n    ) AS total_capacity,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_vehicles\"", "batch_results": null}], "elapsed_time": 0.39523816108703613, "args": {"require_nested_cumulative_type_params": false, "vars": {}, "require_explicit_package_overrides_for_builtin_materializations": true, "state_modified_compare_vars": false, "version_check": true, "indirect_selection": "eager", "exclude": [], "partial_parse": true, "log_level_file": "debug", "populate_cache": true, "project_dir": "/home/janne/nerd-facts-dbt/dbt_project", "require_batched_execution_for_custom_microbatch_strategy": false, "log_format": "default", "log_file_max_bytes": 10485760, "source_freshness_run_project_hooks": false, "log_format_file": "debug", "partial_parse_file_diff": true, "state_modified_compare_more_unrendered_values": false, "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": true, "log_level": "info", "require_resource_names_without_spaces": false, "skip_nodes_if_on_run_start_fails": false, "empty": false, "defer": false, "profiles_dir": "/home/janne/nerd-facts-dbt/dbt_project", "introspect": true, "use_colors": true, "macro_debugging": false, "print": true, "cache_selected_only": false, "show_resource_report": false, "use_colors_file": true, "require_yaml_configuration_for_mf_time_spines": false, "log_path": "/home/janne/nerd-facts-dbt/dbt_project/logs", "strict_mode": false, "invocation_command": "dbt run --models staging.swapi.*", "static_parser": true, "printer_width": 80, "favor_state": false, "write_json": true, "select": ["staging.swapi.*"], "which": "run", "quiet": false}}