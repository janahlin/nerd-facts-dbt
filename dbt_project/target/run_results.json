{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-03-25T13:39:13.869588Z", "invocation_id": "b52cc44b-06a6-44f5-b561-a8269870be1c", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.728414Z", "completed_at": "2025-03-25T13:39:11.746681Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.749350Z", "completed_at": "2025-03-25T13:39:11.749360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03455686569213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"base_exposure_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.734952Z", "completed_at": "2025-03-25T13:39:11.748161Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.748662Z", "completed_at": "2025-03-25T13:39:11.748671Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0312800407409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"base_node_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.718292Z", "completed_at": "2025-03-25T13:39:11.734526Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.747113Z", "completed_at": "2025-03-25T13:39:11.747129Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031108856201171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"base_metric_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.739716Z", "completed_at": "2025-03-25T13:39:11.752026Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.752374Z", "completed_at": "2025-03-25T13:39:11.752382Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03548097610473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"base_node_columns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.754046Z", "completed_at": "2025-03-25T13:39:11.763896Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.776900Z", "completed_at": "2025-03-25T13:39:11.776916Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023660659790039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metrics", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"stg_metrics\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.764222Z", "completed_at": "2025-03-25T13:39:11.777972Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.780164Z", "completed_at": "2025-03-25T13:39:11.780176Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02732253074645996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposures", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"stg_exposures\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.771843Z", "completed_at": "2025-03-25T13:39:11.779558Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.781687Z", "completed_at": "2025-03-25T13:39:11.781695Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031328439712524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_source_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"base_source_columns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.782397Z", "completed_at": "2025-03-25T13:39:11.801458Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.808935Z", "completed_at": "2025-03-25T13:39:11.808947Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.037734031677246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "relation_name": "\"nerd_facts\".\"public\".\"stg_naming_convention_folders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.789486Z", "completed_at": "2025-03-25T13:39:11.809628Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.819612Z", "completed_at": "2025-03-25T13:39:11.819623Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03848981857299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_nodes", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"stg_nodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.801943Z", "completed_at": "2025-03-25T13:39:11.818640Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.820449Z", "completed_at": "2025-03-25T13:39:11.820457Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03319430351257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "relation_name": "\"nerd_facts\".\"public\".\"stg_naming_convention_prefixes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.810230Z", "completed_at": "2025-03-25T13:39:11.822024Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.826516Z", "completed_at": "2025-03-25T13:39:11.826528Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02572488784790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_sources", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "\"nerd_facts\".\"public\".\"stg_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.823132Z", "completed_at": "2025-03-25T13:39:11.828238Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.828618Z", "completed_at": "2025-03-25T13:39:11.828627Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007619380950927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_netrunner_cards", "compiled": true, "compiled_code": "/*\n  Model: stg_netrunner_cards\n  Description: Standardizes Netrunner card data from the raw source with faction and type enrichment\n\n  \n  Note: This model combines and replaces the previous stg_netrunner.sql model.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        code,\n        flavor,\n        title,\n        type_code,\n        faction_code,\n        pack_code,\n        illustrator,\n        keywords,        \n        side_code,        \n        text,                      \n        uniqueness, \n        stripped_text,\n        stripped_title,\n\n        -- Numeric fields\n        CASE WHEN agenda_points~E'^[0-9]+$' THEN agenda_points ELSE NULL END AS agenda_points,\n        CASE WHEN position~E'^[0-9]+$' THEN position ELSE NULL END AS position,\n        CASE WHEN quantity~E'^[0-9]+$' THEN quantity ELSE NULL END AS quantity,\n        CASE WHEN deck_limit~E'^[0-9]+$' THEN deck_limit ELSE NULL END AS deck_limit,\n        CASE WHEN minimum_deck_size~E'^[0-9]+$' THEN minimum_deck_size ELSE NULL END AS minimum_deck_size,\n        CASE WHEN memory_cost~E'^[0-9]+$' THEN memory_cost ELSE NULL END AS memory_cost,\n        CASE WHEN influence_limit~E'^[0-9]+$' THEN influence_limit ELSE NULL END AS influence_limit,\n        CASE WHEN strength~E'^[0-9]+$' THEN strength ELSE NULL END AS strength,\n        CASE WHEN base_link~E'^[0-9]+$' THEN base_link ELSE NULL END AS base_link,\n        CASE WHEN cost~E'^[0-9]+$' THEN cost ELSE NULL END AS cost,\n        CASE WHEN trash_cost~E'^[0-9]+$' THEN trash_cost ELSE NULL END AS trash_cost,\n        CASE WHEN faction_cost~E'^[0-9]+$' THEN faction_cost ELSE NULL END AS faction_cost,\n        CASE WHEN advancement_cost~E'^[0-9]+$' THEN advancement_cost ELSE NULL END AS advancement_cost        \n        \n    FROM \"nerd_facts\".\"raw\".\"netrunner_cards\"\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT    \n    -- Primary identifiers\n    id as card_id,\n\n    -- Text fields\n    code,\n    flavor,\n    title as card_name,\n    type_code,\n    faction_code,\n    pack_code,\n    illustrator,\n    keywords,        \n    side_code,        \n    text,                      \n    uniqueness, \n    stripped_text,\n    stripped_title,\n\n    -- Numeric fields\n    CAST(agenda_points AS NUMERIC) AS agenda_points,\n    CAST(position AS NUMERIC) AS position,\n    CAST(quantity AS NUMERIC) AS quantity,\n    CAST(deck_limit AS NUMERIC) AS deck_limit,\n    CAST(minimum_deck_size AS NUMERIC) AS minimum_deck_size,\n    CAST(memory_cost AS NUMERIC) AS memory_cost,\n    CAST(influence_limit AS NUMERIC) AS influence_limit,\n    CAST(strength AS NUMERIC) AS strength,\n    CAST(base_link AS NUMERIC) AS base_link,\n    CAST(cost AS NUMERIC) AS cost,\n    CAST(trash_cost AS NUMERIC) AS trash_cost,\n    CAST(faction_cost AS NUMERIC) AS faction_cost,\n    CAST(advancement_cost AS NUMERIC) AS advancement_cost,\n\n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at  \n        \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_cards\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.829244Z", "completed_at": "2025-03-25T13:39:11.837397Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.837873Z", "completed_at": "2025-03-25T13:39:11.837883Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015596151351928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_netrunner_factions", "compiled": true, "compiled_code": "/*\n  Model: stg_netrunner_factions\n  Description: Standardizes Netrunner faction data from the raw source\n  Source: raw.netrunner_factions\n  \n*/\n\nWITH raw_data AS (\n    -- Select all relevant columns from source\n    SELECT\n        -- Primary identifiers\n        id, \n\n        -- Text fields\n        code,\n        name,\n        side_code,\n        is_mini,\n        is_neutral,\n        color \n    FROM \"nerd_facts\".\"raw\".\"netrunner_factions\"\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT\n         -- Primary identifiers\n        id as faction_id, \n\n        -- Text fields\n        code,\n        name as faction_name,\n        side_code,\n        is_mini,\n        is_neutral,\n        color,\n    \n    -- Track record creation\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_factions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.833318Z", "completed_at": "2025-03-25T13:39:11.839776Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.849796Z", "completed_at": "2025-03-25T13:39:11.849810Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01750016212463379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_netrunner_packs", "compiled": true, "compiled_code": "/*\n  Model: stg_netrunner_packs\n  Description: Standardizes Netrunner card pack data from the raw source\n  Source: raw.netrunner_packs\n  \n  Packs represent the physical card sets released for Netrunner, such as core sets,\n  deluxe expansions, and data packs within a cycle.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        code,\n        name,\n        cycle_code,\n\n        -- Numeric fields\n        CASE WHEN(position~E'^[0-9]+$') THEN position ELSE NULL END AS position,\n        CASE WHEN(size~E'^[0-9]+$') THEN size ELSE NULL END AS size,\n        CASE WHEN ffg_id~E'^[0-9]+$' THEN ffg_id ELSE NULL END AS ffg_id,\n\n        -- Date fields\n        date_release\n                \n    FROM \"nerd_facts\".\"raw\".\"netrunner_packs\"  -- Updated to use source macro\n    WHERE code IS NOT NULL -- Filter out invalid entries\n)\n\nSELECT\n    -- Primary identifiers\n    id AS pack_id,\n\n    -- Text fields\n    code,\n    name as pack_name,\n    cycle_code,\n\n    -- Numeric fields\n    CAST(position AS NUMERIC) AS position,\n    CAST(size AS NUMERIC) AS size,\n    CAST(ffg_id AS NUMERIC) AS ffg_id, \n\n    -- Date fields\n    date_release AS release_at,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_packs\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.841918Z", "completed_at": "2025-03-25T13:39:11.849356Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.854228Z", "completed_at": "2025-03-25T13:39:11.854240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015212535858154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_pokeapi_abilities", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_abilities\n  Description: Standardizes Pok\u00e9mon ability data from the PokeAPI\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        is_main_series,\n\n        -- Generation information with explicit JSONB casting\n        flavor_text_entries,\n        effect_entries,\n        effect_changes,\n        names,\n        generation, \n        pokemon\n    FROM raw.pokeapi_abilities\n    WHERE id IS NOT NULL\n)\n\n\nSELECT\n    -- Primary identifiers\n    id as ability_id,\n    name AS ability_name,\n\n    -- Text fields  \n    is_main_series,\n\n    -- Generation information with explicit JSONB casting    \n    flavor_text_entries,\n    effect_entries,\n    effect_changes,\n    names,\n    generation,    \n    pokemon,    \n\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.845279Z", "completed_at": "2025-03-25T13:39:11.853749Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.857399Z", "completed_at": "2025-03-25T13:39:11.857411Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013119935989379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_pokeapi_moves", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_pokeapi_moves\n  Description: Standardizes Pok\u00e9mon move data from the PokeAPI\n  \n  Notes:\n  - Added safe type casting for numeric fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        \n\n        -- Numeric fields\n        CASE WHEN power~E'^[0-9]+$' THEN power ELSE NULL END AS power,\n        CASE WHEN pp~E'^[0-9]+$' THEN pp ELSE NULL END AS pp,\n        CASE WHEN accuracy~E'^[0-9]+$' THEN accuracy ELSE NULL END AS accuracy,\n        CASE WHEN priority~E'^[0-9]+$' THEN priority ELSE NULL END AS priority,\n        CASE WHEN effect_chance~E'^[0-9]+$' THEN effect_chance ELSE NULL END AS effect_chance,        \n\n        -- JSON fields\n        damage_class,\n        contest_combos,\n        contest_type,\n        contest_effect,\n        effect_changes,\n        effect_entries,\n        flavor_text_entries,\n        generation,\n        learned_by_pokemon,\n        machines,\n        meta,\n        names,\n        past_values,\n        stat_changes,\n        type,\n        target\n    FROM \"nerd_facts\".\"raw\".\"pokeapi_moves\"\n    WHERE id IS NOT NULL\n)\n\n\n\nSELECT\n    -- Primary identifiers\n    id as move_id,\n\n    -- Text fields\n    name as move_name,\n    \n\n    -- Numeric fields\n    CAST(power AS NUMERIC) AS power,\n    CAST(pp AS NUMERIC) AS pp,\n    CAST(accuracy AS NUMERIC) AS accuracy,\n    CAST(priority AS NUMERIC) AS priority,\n    CAST(effect_chance AS NUMERIC) AS effect_chance,\n\n    -- JSON fields\n    damage_class,\n    contest_combos,\n    contest_type,\n    contest_effect,\n    effect_changes,\n    effect_entries,\n    flavor_text_entries,\n    generation,\n    learned_by_pokemon,\n    machines,\n    meta,\n    names,\n    past_values,\n    stat_changes,\n    type,\n    target,\n    -- Source tracking - removed missing source fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_moves\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.850649Z", "completed_at": "2025-03-25T13:39:11.858322Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.862683Z", "completed_at": "2025-03-25T13:39:11.862695Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018749237060546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_pokeapi_items", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_items\n  Description: Standardizes Pok\u00e9mon item data from the PokeAPI\n  Source: raw.pokeapi_items\n  \n  Notes:  \n  - Fixed type casting issues with numeric fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,        \n\n        -- Numeric fields\n        CASE WHEN cost ~ E'^[0-9]+$' THEN cost ELSE NULL END AS cost,\n        CASE WHEN fling_power ~ E'^[0-9]+$' THEN fling_power ELSE NULL END AS fling_power,\n\n        -- JSON fields\n        attributes,\n        baby_trigger_for,\n        category,\n        effect_entries, \n        flavor_text_entries,       \n        fling_effect,\n        game_indices,\n        held_by_pokemon,\n        names,\n        machines,        \n        sprites\n    FROM raw.pokeapi_items\n    WHERE id IS NOT NULL\n)\n\nSELECT\n         -- Primary identifiers\n        id as item_id,\n\n        -- Text fields\n        name as item_name,        \n\n        -- Numeric fields\n        CAST(cost AS NUMERIC) AS cost,\n        CAST(fling_power AS NUMERIC) AS fling_power,        \n\n        -- JSON fields\n        attributes,\n        baby_trigger_for,\n        category,\n        effect_entries, \n        flavor_text_entries,       \n        fling_effect,\n        game_indices,\n        held_by_pokemon,\n        names,\n        machines,        \n        sprites,\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.864342Z", "completed_at": "2025-03-25T13:39:11.867937Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.868406Z", "completed_at": "2025-03-25T13:39:11.868419Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007163524627685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_pokeapi_types", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_types\n  Description: Standardizes Pok\u00e9mon type data from the PokeAPI\n  Source: raw.pokeapi_types\n  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n\n        -- JSON fields\n        damage_relations,\n        game_indices,\n        generation,\n        move_damage_class,\n        moves,\n        names,\n        past_damage_relations,\n        pokemon,\n        sprites\n    FROM raw.pokeapi_types\n    WHERE id IS NOT NULL\n)\n\n\nSELECT\n    -- Primary identifiers\n    id AS type_id,\n\n    -- Text fields\n    name AS type_name,\n\n    -- JSON fields\n    damage_relations,\n    game_indices,\n    generation,\n    move_damage_class,\n    moves,\n    names,\n    past_damage_relations,\n    pokemon,\n    sprites,\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_types\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.858699Z", "completed_at": "2025-03-25T13:39:11.870168Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.870574Z", "completed_at": "2025-03-25T13:39:11.870585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015023231506347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_pokemon\n  Description: Standardizes Pok\u00e9mon data from the PokeAPI\n  Source: raw.pokeapi_pokemon\n  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        is_default,\n\n        -- Numeric fields\n        CASE WHEN height~E'^[0-9]+$' THEN height ELSE NULL END AS height,\n        CASE WHEN weight~E'^[0-9]+$' THEN weight ELSE NULL END AS weight,\n        CASE WHEN bmi~E'^[0-9]+[.][0-9]+$' THEN bmi ELSE NULL END AS bmi,\n        CASE WHEN base_experience~E'^[0-9]+$' THEN base_experience ELSE NULL END AS base_experience,\n        CASE WHEN \"order\"~E'^[0-9]+$' THEN \"order\" ELSE NULL END AS pokemon_order,        \n\n        -- JSON fields\n        abilities,\n        cries,\n        forms,\n        game_indices,\n        held_items,\n        location_area_encounters,\n        moves,\n        past_abilities,\n        past_types,      \n        stats,                \n        species,\n        sprites,\n        types        \n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id as pokemon_id,\n\n    -- Text fields\n    name as pokemon_name,\n    is_default,\n\n    -- Numeric fields\n    CAST(height AS NUMERIC) AS height,\n    CAST(weight AS NUMERIC) AS weight,\n    CAST(bmi AS NUMERIC) AS bmi,\n    CAST(base_experience AS NUMERIC) AS base_experience,\n    CAST(pokemon_order AS NUMERIC) AS pokemon_order,\n\n    -- JSON fields\n    abilities,\n    cries,\n    forms,\n    game_indices,\n    held_items,\n    location_area_encounters,\n    moves,\n    past_abilities,\n    past_types,      \n    stats,                \n    species,\n    sprites,\n    types,\n\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.871210Z", "completed_at": "2025-03-25T13:39:11.876657Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.877073Z", "completed_at": "2025-03-25T13:39:11.877086Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008069753646850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_films", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_films\n  Description: Standardizes Star Wars film data from SWAPI\n  Source: raw.swapi_films\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Id fields\n        id,\n        episode_id,\n\n        -- Text fields\n        title,        \n        opening_crawl,\n        director,\n        producer,\n        url,\n\n        -- Date fields\n        release_date,\n        created,\n        edited,\n\n        -- Relationship arrays\n        planets,\n        starships,\n        vehicles,\n        species,\n        characters                        \n    FROM \"nerd_facts\".\"raw\".\"swapi_films\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n        -- Id fields\n        id as film_id,\n        CAST(episode_id AS INTEGER) AS episode_id,\n\n        -- Text fields\n        title,        \n        opening_crawl,\n        director,\n        producer,\n        url,\n\n        -- Date fields\n        CAST(release_date as DATE) AS release_date,\n\n        -- Timestamp fields\n        CAST(created as TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n\n        -- Relationship arrays\n        planets,\n        starships,\n        vehicles,\n        species,\n        characters,\n\n        -- Add data tracking field\n        CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_films\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.878431Z", "completed_at": "2025-03-25T13:39:11.883975Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.889491Z", "completed_at": "2025-03-25T13:39:11.889505Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011990070343017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_people", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_people\n  Description: Standardizes Star Wars character data from SWAPI\n  Source: raw.swapi_people\n  \n  Notes:\n  - Physical attributes are cleaned and converted to proper numeric types  \n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        \n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        url,\n\n        -- Numeric fields\n        CASE WHEN height~E'^[0-9]+$' THEN height ELSE NULL END AS height,\n        CASE WHEN mass~E'^[0-9]+$' THEN mass ELSE NULL END AS mass,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_people\"\n    WHERE id IS NOT NULL\n)\n    select\n        -- Id fields\n        id as people_id,\n\n        -- Text fields\n        name,\n        \n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        url,\n\n        -- Numeric fields\n        CAST(height AS NUMERIC) AS height,\n        CAST(mass AS NUMERIC) AS mass,\n\n        -- Timestamp fields\n        CAST(created AS TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n        \n        -- Add data tracking fields\n        CURRENT_TIMESTAMP AS dbt_loaded_at\n        FROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_people\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.885104Z", "completed_at": "2025-03-25T13:39:11.890896Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.903193Z", "completed_at": "2025-03-25T13:39:11.903208Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027792692184448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_planets", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_planets\n  Description: Standardizes Star Wars planet data from SWAPI\n  Source: raw.swapi_planets\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Identitfiers\n        id,\n\n        -- Text fields\n        name,        \n        climate,\n        gravity,\n        terrain,\n        url,\n\n        -- Numeric fields\n        CASE WHEN surface_water~E'^[0-9]+$' THEN surface_water ELSE NULL END AS surface_water,\n        CASE WHEN rotation_period~E'^[0-9]+$' THEN rotation_period ELSE NULL END AS rotation_period,\n        CASE WHEN orbital_period~E'^[0-9]+$' THEN orbital_period ELSE NULL END AS orbital_period,\n        CASE WHEN diameter~E'^[0-9]+$' THEN diameter ELSE NULL END AS diameter,\n        CASE WHEN population~E'^[0-9]+$' THEN population ELSE NULL END AS population,\n        \n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_planets\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id as planet_id,\n    name AS planet_name,\n\n    -- Text fields\n    name,        \n    climate,\n    gravity,\n    terrain,\n    url,\n    \n    -- Physical characteristics with proper numeric handling\n    CAST(surface_water AS NUMERIC) AS surface_water,\n    CAST(rotation_period AS NUMERIC) AS rotation_period,\n    CAST(orbital_period AS NUMERIC) AS orbital_period,\n    CAST(diameter AS NUMERIC) AS diameter,        \n    CAST(population AS NUMERIC) AS population,    \n    \n    -- ETL tracking fields\n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS updated_at,    \n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_planets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.891300Z", "completed_at": "2025-03-25T13:39:11.902097Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.903937Z", "completed_at": "2025-03-25T13:39:11.903947Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02081465721130371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_species", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_species\n  Description: Standardizes Star Wars species data from SWAPI\n  Source: raw.swapi_species\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        classification,\n        designation,        \n        skin_colors,\n        hair_colors,\n        eye_colors,                \n        language,\n        url,\n\n        -- Numeric fields\n        CASE average_lifespan~E'^[0-9]+$' WHEN TRUE THEN average_lifespan ELSE NULL END AS average_lifespan,\n        CASE average_height~E'^[0-9]+$' WHEN TRUE THEN average_height ELSE NULL END AS average_height,\n\n        -- Relationship arrays\n        people,\n        homeworld,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_species\"\n    WHERE id IS NOT NULL\n)\n\nSELECT    \n    -- Id fields\n    id as species_id,\n\n    -- Text fields\n    name as species_name,\n    classification,\n    designation,        \n    skin_colors,\n    hair_colors,\n    eye_colors,                \n    language,\n    url,\n\n    -- Numeric fields\n    CAST(average_lifespan AS NUMERIC) AS average_lifespan,\n    CAST(average_height AS NUMERIC) AS average_height,\n\n    -- Relationship arrays\n    people,\n    homeworld,\n\n    -- Timestamp fields\n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS edited_at,\n\n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_species\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.896538Z", "completed_at": "2025-03-25T13:39:11.904782Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.912124Z", "completed_at": "2025-03-25T13:39:11.912138Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022032499313354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_starships", "compiled": true, "compiled_code": "\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CASE cost_in_credits~E'[0-9]+$' WHEN TRUE THEN cost_in_credits ELSE NULL END AS cost_in_credits,\n        CASE length~E'[0-9]+$' WHEN TRUE THEN length ELSE NULL END AS length,\n        CASE TRIM(TRAILING 'km' from max_atmosphering_speed)~E'[0-9]+$' WHEN TRUE THEN TRIM(TRAILING 'km' from max_atmosphering_speed) ELSE NULL END AS max_atmosphering_speed,\n        CASE cargo_capacity~E'[0-9]+$' WHEN TRUE THEN cargo_capacity ELSE NULL END AS cargo_capacity,        \n        CASE passengers~E'[0-9]+$' WHEN TRUE THEN passengers ELSE NULL END AS passengers,\n        CASE hyperdrive_rating~E'[0-9]+$' WHEN TRUE THEN hyperdrive_rating ELSE NULL END AS hyperdrive_rating,\n        CASE MGLT~E'[0-9]+$' WHEN TRUE THEN MGLT ELSE NULL END AS MGLT,        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_starships\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n      -- Id fields\n        id as starship_id,\n\n        -- Text fields\n        name AS starship_name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CAST(cost_in_credits AS NUMERIC) AS cost_in_credits,\n        CAST(REPLACE(length, ',', '') AS NUMERIC) AS length,\n        CAST(max_atmosphering_speed AS NUMERIC) AS max_atmosphering_speed,\n        CAST(cargo_capacity AS NUMERIC) AS cargo_capacity,        \n        CAST(REPLACE(passengers, ',', '') AS NUMERIC) AS passengers,\n        CAST(hyperdrive_rating AS NUMERIC) AS hyperdrive_rating,\n        CAST(MGLT AS NUMERIC) AS MGLT,        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n\n        -- Timestamp fields\n        CAST(created AS TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n\n        -- Data tracking field\n        CURRENT_TIMESTAMP AS dbt_loaded_at \n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_starships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.907374Z", "completed_at": "2025-03-25T13:39:11.913450Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.922303Z", "completed_at": "2025-03-25T13:39:11.922321Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01987314224243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.stg_swapi_vehicles", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_vehicles\n  Description: Standardizes Star Wars vehicle data from SWAPI\n  Source: raw.swapi_vehicles\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Identitfiers\n        id,\n\n        -- Text fields\n        name,\n        model,\n        manufacturer,\n        vehicle_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CASE cost_in_credits~'^[0-9,.]+$' WHEN TRUE THEN cost_in_credits ELSE null END AS cost_in_credits,\n        CASE length~'^[0-9,.]+$' WHEN TRUE THEN length ELSE null END AS length,        \n        CASE max_atmosphering_speed~'^[0-9,.]+$' WHEN TRUE THEN max_atmosphering_speed ELSE null END AS max_atmosphering_speed,\n        CASE cargo_capacity~'^[0-9,.]+$' WHEN TRUE THEN cargo_capacity ELSE null END AS cargo_capacity,\n        CASE passengers~'^[0-9,.]+$' WHEN TRUE THEN passengers ELSE null END AS passengers,\n        CASE crew~'^[0-9,.]+$' WHEN TRUE THEN crew ELSE null END AS crew,                        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n        \n        -- Timestamp fields        \n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_vehicles\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    id as vehicle_id,\n\n    -- Text fields\n    name as vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    consumables,\n    url,\n\n    -- Numeric fields\n    CAST(cost_in_credits AS NUMERIC) AS cost_in_credits,\n    CAST(length AS NUMERIC) AS length,\n    CAST(max_atmosphering_speed AS NUMERIC) AS max_atmosphering_speed,\n    CAST(cargo_capacity AS NUMERIC) AS cargo_capacity,\n    CAST(passengers AS NUMERIC) AS passengers,\n    CAST(crew AS NUMERIC) AS crew,                        \n    \n    -- Relationship arrays\n    pilots,\n    films,\n    \n    -- Timestamp fields        \n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS edited_at,\n\n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_vehicles\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.923115Z", "completed_at": "2025-03-25T13:39:11.925369Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.927739Z", "completed_at": "2025-03-25T13:39:11.927752Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016328096389770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.914949Z", "completed_at": "2025-03-25T13:39:11.926586Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.934805Z", "completed_at": "2025-03-25T13:39:11.934819Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.028023958206176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_cards\"\nwhere code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.937568Z", "completed_at": "2025-03-25T13:39:11.949533Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.950481Z", "completed_at": "2025-03-25T13:39:11.950493Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013829469680786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"netrunner_factions\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.944383Z", "completed_at": "2025-03-25T13:39:11.951328Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.958187Z", "completed_at": "2025-03-25T13:39:11.958196Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02466416358947754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_cycles\"\nwhere code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.928781Z", "completed_at": "2025-03-25T13:39:11.950130Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.956737Z", "completed_at": "2025-03-25T13:39:11.956754Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.031135082244873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect title\nfrom \"nerd_facts\".\"raw\".\"netrunner_cards\"\nwhere title is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.951811Z", "completed_at": "2025-03-25T13:39:11.960440Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.960865Z", "completed_at": "2025-03-25T13:39:11.960873Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024603605270385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_factions\"\nwhere code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.961496Z", "completed_at": "2025-03-25T13:39:11.971845Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.973638Z", "completed_at": "2025-03-25T13:39:11.973651Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014208316802978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_packs\"\nwhere code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.966552Z", "completed_at": "2025-03-25T13:39:11.973220Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.978851Z", "completed_at": "2025-03-25T13:39:11.978862Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013231992721557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_types\"\nwhere code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.974603Z", "completed_at": "2025-03-25T13:39:11.986087Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.988101Z", "completed_at": "2025-03-25T13:39:11.988115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016859769821166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"pokeapi_moves\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.980147Z", "completed_at": "2025-03-25T13:39:11.987696Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:11.989561Z", "completed_at": "2025-03-25T13:39:11.989568Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0173947811126709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"netrunner_types\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.990871Z", "completed_at": "2025-03-25T13:39:11.996669Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.005303Z", "completed_at": "2025-03-25T13:39:12.005318Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016658544540405273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect episode_id\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere episode_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:11.997561Z", "completed_at": "2025-03-25T13:39:12.006569Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.012423Z", "completed_at": "2025-03-25T13:39:12.012437Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0168459415435791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.001539Z", "completed_at": "2025-03-25T13:39:12.011941Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.014123Z", "completed_at": "2025-03-25T13:39:12.014134Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02718353271484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"pokeapi_moves\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.007526Z", "completed_at": "2025-03-25T13:39:12.013731Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.022110Z", "completed_at": "2025-03-25T13:39:12.022121Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025168180465698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_release_date.cff58563b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect release_date\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere release_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.015495Z", "completed_at": "2025-03-25T13:39:12.022943Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.023324Z", "completed_at": "2025-03-25T13:39:12.023333Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010321855545043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect title\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere title is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.024240Z", "completed_at": "2025-03-25T13:39:12.030055Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.037021Z", "completed_at": "2025-03-25T13:39:12.037034Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015510797500610352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_people\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.030437Z", "completed_at": "2025-03-25T13:39:12.036648Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.042135Z", "completed_at": "2025-03-25T13:39:12.042147Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01362752914428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_people\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.037775Z", "completed_at": "2025-03-25T13:39:12.043450Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.055595Z", "completed_at": "2025-03-25T13:39:12.055610Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020593643188476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_planets\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.043877Z", "completed_at": "2025-03-25T13:39:12.049433Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.056304Z", "completed_at": "2025-03-25T13:39:12.056314Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02032780647277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_planets\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.050267Z", "completed_at": "2025-03-25T13:39:12.057772Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.064619Z", "completed_at": "2025-03-25T13:39:12.064630Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01624131202697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_species\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.059014Z", "completed_at": "2025-03-25T13:39:12.063711Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.065598Z", "completed_at": "2025-03-25T13:39:12.065606Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015894174575805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_species\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.071497Z", "completed_at": "2025-03-25T13:39:12.077531Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.083716Z", "completed_at": "2025-03-25T13:39:12.083728Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019730567932128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_starships\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.066949Z", "completed_at": "2025-03-25T13:39:12.076118Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.077925Z", "completed_at": "2025-03-25T13:39:12.077936Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014994144439697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_starships\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.079073Z", "completed_at": "2025-03-25T13:39:12.084798Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.086383Z", "completed_at": "2025-03-25T13:39:12.086392Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011106014251708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_vehicles\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.094519Z", "completed_at": "2025-03-25T13:39:12.109292Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.110980Z", "completed_at": "2025-03-25T13:39:12.110993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03459739685058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_vehicles\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.100303Z", "completed_at": "2025-03-25T13:39:12.109999Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.113006Z", "completed_at": "2025-03-25T13:39:12.113019Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01357889175415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_cycles\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.087333Z", "completed_at": "2025-03-25T13:39:12.110569Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.113673Z", "completed_at": "2025-03-25T13:39:12.113683Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.028098344802856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_cards\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.104854Z", "completed_at": "2025-03-25T13:39:12.112139Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.114323Z", "completed_at": "2025-03-25T13:39:12.114332Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01578354835510254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_factions\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.116717Z", "completed_at": "2025-03-25T13:39:12.128740Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.135551Z", "completed_at": "2025-03-25T13:39:12.135565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023216724395751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_packs\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.129278Z", "completed_at": "2025-03-25T13:39:12.136421Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.142463Z", "completed_at": "2025-03-25T13:39:12.142471Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021338224411010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_subtypes\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.123977Z", "completed_at": "2025-03-25T13:39:12.135168Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.141266Z", "completed_at": "2025-03-25T13:39:12.141278Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019627094268798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_types\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.136807Z", "completed_at": "2025-03-25T13:39:12.149314Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.149779Z", "completed_at": "2025-03-25T13:39:12.149790Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.027701377868652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"pokeapi_moves\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.144513Z", "completed_at": "2025-03-25T13:39:12.151017Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.151386Z", "completed_at": "2025-03-25T13:39:12.151395Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007756710052490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_planets\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.154167Z", "completed_at": "2025-03-25T13:39:12.173733Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.175855Z", "completed_at": "2025-03-25T13:39:12.175944Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02570176124572754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_people\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.169788Z", "completed_at": "2025-03-25T13:39:12.174533Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.177057Z", "completed_at": "2025-03-25T13:39:12.177069Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018305063247680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_starships\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.159545Z", "completed_at": "2025-03-25T13:39:12.175171Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.178446Z", "completed_at": "2025-03-25T13:39:12.178455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026477336883544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.164557Z", "completed_at": "2025-03-25T13:39:12.178085Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.186278Z", "completed_at": "2025-03-25T13:39:12.186291Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02784132957458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_species\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.181460Z", "completed_at": "2025-03-25T13:39:12.185822Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.187824Z", "completed_at": "2025-03-25T13:39:12.187833Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007183551788330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_vehicles\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.188772Z", "completed_at": "2025-03-25T13:39:12.197880Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.199870Z", "completed_at": "2025-03-25T13:39:12.199883Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02010655403137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from \"nerd_facts\".\"public\".\"base_exposure_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "relation_name": "\"nerd_facts\".\"public\".\"stg_exposure_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.193984Z", "completed_at": "2025-03-25T13:39:12.199053Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.200995Z", "completed_at": "2025-03-25T13:39:12.201003Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007915019989013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from \"nerd_facts\".\"public\".\"base_metric_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "relation_name": "\"nerd_facts\".\"public\".\"stg_metric_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.201670Z", "completed_at": "2025-03-25T13:39:12.208123Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.230336Z", "completed_at": "2025-03-25T13:39:12.230349Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04303407669067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from \"nerd_facts\".\"public\".\"base_node_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "relation_name": "\"nerd_facts\".\"public\".\"stg_node_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.232167Z", "completed_at": "2025-03-25T13:39:12.235711Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.237393Z", "completed_at": "2025-03-25T13:39:12.237405Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007745027542114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_netrunner_cards", "compiled": true, "compiled_code": "/*\n  Model: dim_netrunner_cards\n  Description: Bare minimum dimension table for Android: Netrunner cards\n  \n  Note: No type casting to avoid numeric conversion issues\n*/\n\nSELECT\n    -- Primary identifiers\n    code AS card_code,\n    card_id,\n    card_name,\n    \n    -- Card classifications  \n    type_code,\n    faction_code,\n    side_code,\n    \n    -- Raw values without any casting\n    faction_cost AS influence_cost,\n    cost,\n    \n    -- Boolean value\n    uniqueness AS is_unique_card,\n    \n    -- Pack information\n    pack_code,\n    \n    -- Add tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nWHERE code IS NOT NULL\nORDER BY side_code, faction_code, type_code", "relation_name": "\"nerd_facts\".\"public\".\"dim_netrunner_cards\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.255838Z", "completed_at": "2025-03-25T13:39:12.265246Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.266772Z", "completed_at": "2025-03-25T13:39:12.266785Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030348539352416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_netrunner_card_power", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_netrunner_card_power (Ultra-Simplified)\n  Description: Card power metrics from the Netrunner universe\n*/\n\nSELECT\n    md5(cast(coalesce(cast(c.code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_key,\n    c.code AS card_id,\n    c.card_name,\n    c.faction_code,\n    c.type_code,\n    c.cost,\n    \n    -- Simplified scoring metrics\n    CASE \n        WHEN c.type_code = 'agenda' THEN COALESCE(c.advancement_cost, 0) * 2\n        WHEN c.type_code IN ('ice', 'program') THEN COALESCE(c.strength, 0) * 3\n        ELSE COALESCE(c.cost, 0) * 2\n    END AS card_power_score,\n    \n    -- Relative power tier\n    CASE \n        WHEN c.type_code = 'agenda' AND COALESCE(c.advancement_cost, 0) >= 5 THEN 'High'\n        WHEN c.type_code IN ('ice', 'program') AND COALESCE(c.strength, 0) >= 4 THEN 'High'\n        WHEN COALESCE(c.cost, 0) >= 4 THEN 'High'\n        WHEN c.type_code = 'agenda' AND COALESCE(c.advancement_cost, 0) >= 3 THEN 'Medium'\n        WHEN c.type_code IN ('ice', 'program') AND COALESCE(c.strength, 0) >= 2 THEN 'Medium'\n        WHEN COALESCE(c.cost, 0) >= 2 THEN 'Medium'\n        ELSE 'Low'\n    END AS power_tier,\n    \n    'netrunner' AS universe,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\nWHERE c.code IS NOT NULL\nORDER BY card_power_score DESC", "relation_name": "\"nerd_facts\".\"public\".\"fact_netrunner_card_power\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.250286Z", "completed_at": "2025-03-25T13:39:12.266024Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.275885Z", "completed_at": "2025-03-25T13:39:12.275895Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026533842086791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        side_code as value_field,\n        count(*) as n_records\n\n    from \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n    group by side_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'corp','runner'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.277487Z", "completed_at": "2025-03-25T13:39:12.283168Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.283662Z", "completed_at": "2025-03-25T13:39:12.283673Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0070230960845947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(NOT (is_agenda = true AND side_code = 'runner'))\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.269397Z", "completed_at": "2025-03-25T13:39:12.274635Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.275124Z", "completed_at": "2025-03-25T13:39:12.275134Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006747007369995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not agenda_points >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not agenda_points <= 3\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.294087Z", "completed_at": "2025-03-25T13:39:12.298533Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.299006Z", "completed_at": "2025-03-25T13:39:12.299018Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0067081451416015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(advancement_cost >= 0 OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.302606Z", "completed_at": "2025-03-25T13:39:12.307430Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.316342Z", "completed_at": "2025-03-25T13:39:12.316354Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015944480895996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not((advancement_cost IS NULL AND agenda_points IS NULL) OR (advancement_cost IS NOT NULL AND agenda_points IS NOT NULL))\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.209029Z", "completed_at": "2025-03-25T13:39:12.311139Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.311605Z", "completed_at": "2025-03-25T13:39:12.311618Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.19051122665405273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_columns", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"base_node_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as text) as \"node_unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"description\" as text) as \"description\" ,\n                    cast(\"data_type\" as text) as \"data_type\" ,\n                    cast(\"constraints\" as text) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as boolean) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as integer) as \"constraints_count\" ,\n                    cast(\"quote\" as text) as \"quote\" \n\n            from \"nerd_facts\".\"public\".\"base_node_columns\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"base_source_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as text) as \"node_unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"description\" as text) as \"description\" ,\n                    cast(\"data_type\" as text) as \"data_type\" ,\n                    cast(\"constraints\" as text) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as boolean) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as integer) as \"constraints_count\" ,\n                    cast(\"quote\" as text) as \"quote\" \n\n            from \"nerd_facts\".\"public\".\"base_source_columns\"\n\n            \n        )\n\n        \n)\n\nselect * from final", "relation_name": "\"nerd_facts\".\"public\".\"stg_columns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.311970Z", "completed_at": "2025-03-25T13:39:12.322768Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.394962Z", "completed_at": "2025-03-25T13:39:12.394982Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09380745887756348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(cost >= 0 OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.324359Z", "completed_at": "2025-03-25T13:39:12.399414Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.409513Z", "completed_at": "2025-03-25T13:39:12.409527Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08600878715515137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(is_agenda is_agenda = false OR agenda_points IS NOT NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.404789Z", "completed_at": "2025-03-25T13:39:12.411231Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.419461Z", "completed_at": "2025-03-25T13:39:12.419475Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02236175537109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(is_ice is_ice = false OR strength IS NOT NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.414800Z", "completed_at": "2025-03-25T13:39:12.425486Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.435564Z", "completed_at": "2025-03-25T13:39:12.435595Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03148484230041504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(strength >= 0 OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.444740Z", "completed_at": "2025-03-25T13:39:12.455629Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.456570Z", "completed_at": "2025-03-25T13:39:12.456582Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029586076736450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere faction_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.450764Z", "completed_at": "2025-03-25T13:39:12.457642Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.459752Z", "completed_at": "2025-03-25T13:39:12.459763Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009881258010864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect title\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere title is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.429707Z", "completed_at": "2025-03-25T13:39:12.449341Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.458108Z", "completed_at": "2025-03-25T13:39:12.458121Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03800344467163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere card_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.238714Z", "completed_at": "2025-03-25T13:39:12.456200Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.458826Z", "completed_at": "2025-03-25T13:39:12.458836Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2617652416229248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_nodes\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(\"is_enabled\" as boolean) as \"is_enabled\" ,\n                    cast(\"materialized\" as text) as \"materialized\" ,\n                    cast(\"on_schema_change\" as text) as \"on_schema_change\" ,\n                    cast(\"model_group\" as text) as \"model_group\" ,\n                    cast(\"access\" as text) as \"access\" ,\n                    cast(\"latest_version\" as text) as \"latest_version\" ,\n                    cast(\"version\" as text) as \"version\" ,\n                    cast(\"deprecation_date\" as text) as \"deprecation_date\" ,\n                    cast(\"is_contract_enforced\" as boolean) as \"is_contract_enforced\" ,\n                    cast(\"total_defined_columns\" as integer) as \"total_defined_columns\" ,\n                    cast(\"total_described_columns\" as integer) as \"total_described_columns\" ,\n                    cast(\"database\" as text) as \"database\" ,\n                    cast(\"schema\" as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(\"alias\" as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(\"column_name\" as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(\"hard_coded_references\" as text) as \"hard_coded_references\" ,\n                    cast(\"number_lines\" as integer) as \"number_lines\" ,\n                    cast(\"sql_complexity\" as double precision) as \"sql_complexity\" ,\n                    cast(\"macro_dependencies\" as text) as \"macro_dependencies\" ,\n                    cast(\"is_generic_test\" as boolean) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_nodes\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_exposures\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(null as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(null as text) as \"database\" ,\n                    cast(null as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(null as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(null as boolean) as \"is_excluded\" ,\n                    cast(\"exposure_type\" as text) as \"exposure_type\" ,\n                    cast(\"maturity\" as text) as \"maturity\" ,\n                    cast(\"url\" as text) as \"url\" ,\n                    cast(\"owner_name\" as text) as \"owner_name\" ,\n                    cast(\"owner_email\" as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_exposures\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_metrics\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(null as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(null as text) as \"database\" ,\n                    cast(null as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(null as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(null as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(\"metric_type\" as text) as \"metric_type\" ,\n                    cast(\"label\" as text) as \"label\" ,\n                    cast(\"metric_filter\" as text) as \"metric_filter\" ,\n                    cast(\"metric_measure\" as text) as \"metric_measure\" ,\n                    cast(\"metric_measure_alias\" as text) as \"metric_measure_alias\" ,\n                    cast(\"numerator\" as text) as \"numerator\" ,\n                    cast(\"denominator\" as text) as \"denominator\" ,\n                    cast(\"expr\" as text) as \"expr\" ,\n                    cast(\"metric_window\" as text) as \"metric_window\" ,\n                    cast(\"grain_to_date\" as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_metrics\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_sources\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(\"is_enabled\" as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(\"database\" as text) as \"database\" ,\n                    cast(\"schema\" as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(\"alias\" as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(\"source_name\" as text) as \"source_name\" ,\n                    cast(\"is_source_described\" as boolean) as \"is_source_described\" ,\n                    cast(\"loaded_at_field\" as text) as \"loaded_at_field\" ,\n                    cast(\"is_freshness_enabled\" as boolean) as \"is_freshness_enabled\" ,\n                    cast(\"loader\" as text) as \"loader\" ,\n                    cast(\"identifier\" as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_sources\"\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_prefixes\"\n), \n\nnaming_convention_folders as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_folders\"\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n  \n    \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n\n  \n\n||'_' \n        end as prefix,\n        \n  \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "relation_name": "\"nerd_facts\".\"public\".\"int_all_graph_resources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.461504Z", "completed_at": "2025-03-25T13:39:12.469764Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.471739Z", "completed_at": "2025-03-25T13:39:12.471750Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011042594909667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere type_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.477652Z", "completed_at": "2025-03-25T13:39:12.483124Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.484902Z", "completed_at": "2025-03-25T13:39:12.484916Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015933513641357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        side_code as value_field,\n        count(*) as n_records\n\n    from \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\n    group by side_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'corp','runner'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.473080Z", "completed_at": "2025-03-25T13:39:12.490097Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.492007Z", "completed_at": "2025-03-25T13:39:12.492020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02578139305114746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    card_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere card_id is not null\ngroup by card_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.485539Z", "completed_at": "2025-03-25T13:39:12.491650Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.493531Z", "completed_at": "2025-03-25T13:39:12.493539Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010018110275268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\n\nwhere not(card_count >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.498885Z", "completed_at": "2025-03-25T13:39:12.504679Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.510558Z", "completed_at": "2025-03-25T13:39:12.510570Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017626285552978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_id\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.494567Z", "completed_at": "2025-03-25T13:39:12.503263Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.505045Z", "completed_at": "2025-03-25T13:39:12.505056Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014697790145874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.512928Z", "completed_at": "2025-03-25T13:39:12.518602Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.525095Z", "completed_at": "2025-03-25T13:39:12.525109Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019502639770507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere side_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.506366Z", "completed_at": "2025-03-25T13:39:12.511236Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.517814Z", "completed_at": "2025-03-25T13:39:12.517826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015316009521484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_name\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.519627Z", "completed_at": "2025-03-25T13:39:12.526948Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.532540Z", "completed_at": "2025-03-25T13:39:12.532563Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015263080596923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    faction_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_id is not null\ngroup by faction_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.527321Z", "completed_at": "2025-03-25T13:39:12.534648Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.546876Z", "completed_at": "2025-03-25T13:39:12.546891Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030124425888061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    faction_code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_code is not null\ngroup by faction_code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.534970Z", "completed_at": "2025-03-25T13:39:12.548357Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.556546Z", "completed_at": "2025-03-25T13:39:12.556562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024552583694458008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_netrunner_cards", "compiled": true, "compiled_code": "/*\n  Model: fact_netrunner_cards\n  Description: Fact table for Android: Netrunner cards with metrics and relationships\n  \n  Notes:\n  - Contains key metrics about card usage, efficiency, and value\n  - Links to dimension tables for cards, factions, packs, and types\n  - Includes derived metrics for cards such as cost efficiency and power indices\n  - Provides temporal context through release dates and rotation status\n  - Combines multiple data sources for comprehensive analysis\n*/\n\nWITH card_metrics AS (\n    -- Calculate and derive card-specific metrics\n    SELECT\n        c.code AS card_code,\n        c.card_id,\n        c.card_name,\n        c.faction_code,\n        c.side_code,\n        c.type_code,\n        c.pack_code,\n        \n        -- Core card attributes - keep as text for now\n        c.cost,\n        c.strength,\n        c.advancement_cost,\n        c.agenda_points,\n        c.memory_cost,\n        c.trash_cost,\n        c.faction_cost,\n        \n        -- Calculate cost efficiency metrics with proper type casting\n        CASE \n            -- For ICE, calculate strength-to-cost ratio\n            WHEN c.type_code = 'ice' AND c.cost::TEXT ~ '^[0-9]+$' AND c.cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            -- For Agendas, calculate points-to-advancement ratio\n            WHEN c.type_code = 'agenda' AND c.advancement_cost::TEXT ~ '^[0-9]+$' \n                 AND c.advancement_cost::NUMERIC > 0 AND c.agenda_points IS NOT NULL \n                 AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.advancement_cost::NUMERIC), 2)\n            \n            -- For Programs/Hardware, basic cost efficiency if applicable\n            WHEN c.type_code IN ('program', 'hardware') AND c.cost::TEXT ~ '^[0-9]+$' \n                 AND c.cost::NUMERIC > 0 AND c.strength IS NOT NULL \n                 AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS cost_efficiency_ratio,\n        \n        -- Calculate text length (proxy for card complexity)\n        LENGTH(c.text) AS text_length,\n        \n        -- Calculate influence efficiency with safe type casting\n        CASE\n            WHEN c.faction_cost::TEXT ~ '^[0-9]+$' AND c.faction_cost::NUMERIC > 0 \n                 AND c.agenda_points IS NOT NULL AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.faction_cost::NUMERIC), 2)\n            \n            WHEN c.faction_cost::TEXT ~ '^[0-9]+$' AND c.faction_cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.faction_cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS influence_efficiency,\n        \n        -- Keywords count\n        CASE WHEN c.keywords IS NOT NULL \n             THEN COALESCE(ARRAY_LENGTH(STRING_TO_ARRAY(c.keywords, ' - '), 1), 0)\n             ELSE 0 \n        END AS keyword_count,\n        \n        -- Reference pack info\n        p.release_at,\n        p.cycle_code,\n        \n        -- Simulated usage data - no type casting needed here\n        CASE\n            WHEN c.card_name IN ('Account Siphon', 'Desperado', 'SanSan City Grid', \n                              'Astroscript Pilot Program', 'Hedge Fund', 'Sure Gamble') THEN 95\n            WHEN c.pack_code = 'core' AND c.faction_code IS NOT NULL THEN 70\n            WHEN c.faction_code IS NULL THEN 30\n            WHEN p.cycle_code IN ('genesis', 'creation-and-control') THEN 60\n            WHEN p.release_at IS NULL THEN 20\n            WHEN DATE_PART('year', p.release_at::timestamp) <= 2014 THEN 65\n            WHEN DATE_PART('year', p.release_at::timestamp) <= 2016 THEN 50\n            ELSE 40\n        END AS popularity_score\n        \n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    LEFT JOIN \"nerd_facts\".\"public\".\"stg_netrunner_packs\" p ON c.pack_code = p.code\n)\n\nSELECT\n    -- Primary keys and relationships\n    md5(cast(coalesce(cast(cm.card_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_fact_key,\n    cm.card_code,\n    cm.card_id,\n    \n    -- Foreign keys to dimension tables\n    md5(cast(coalesce(cast(cm.card_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_key,\n    md5(cast(coalesce(cast(cm.faction_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS faction_key,\n    md5(cast(coalesce(cast(cm.pack_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pack_key,\n    md5(cast(coalesce(cast(cm.side_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(cm.type_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_type_key,\n    \n    -- Essential card attributes \n    cm.card_name,\n    cm.faction_code,\n    cm.side_code,\n    cm.type_code,\n    cm.pack_code,\n    \n    -- Core card metrics with safe type handling\n    CASE WHEN cm.cost::TEXT ~ '^[0-9]+$' THEN cm.cost::INTEGER ELSE 0 END AS cost,\n    CASE WHEN cm.strength::TEXT ~ '^[0-9\\.]+$' THEN cm.strength::NUMERIC ELSE 0 END AS strength,\n    CASE WHEN cm.advancement_cost::TEXT ~ '^[0-9]+$' THEN cm.advancement_cost::INTEGER ELSE 0 END AS advancement_requirement,\n    CASE WHEN cm.agenda_points::TEXT ~ '^[0-9]+$' THEN cm.agenda_points::INTEGER ELSE 0 END AS agenda_points,\n    CASE WHEN cm.memory_cost::TEXT ~ '^[0-9]+$' THEN cm.memory_cost::INTEGER ELSE 0 END AS memory_cost,\n    CASE WHEN cm.trash_cost::TEXT ~ '^[0-9]+$' THEN cm.trash_cost::INTEGER ELSE 0 END AS trash_cost,\n    \n    -- Calculated metrics\n    cm.cost_efficiency_ratio,\n    cm.text_length AS complexity_score,\n    cm.influence_efficiency,\n    cm.keyword_count,\n    \n    -- Usage and popularity metrics\n    cm.popularity_score,\n    CASE\n        WHEN cm.popularity_score >= 80 THEN 'Meta Defining'\n        WHEN cm.popularity_score >= 60 THEN 'Staple'\n        WHEN cm.popularity_score >= 40 THEN 'Playable'\n        ELSE 'Niche'\n    END AS popularity_tier,\n    \n    -- Deck construction significance\n    CASE\n        WHEN cm.card_name IN ('Hedge Fund', 'Sure Gamble', 'IPO', 'Dirty Laundry') THEN 'Auto-include'\n        WHEN cm.popularity_score >= 75 THEN 'High Impact'\n        WHEN cm.popularity_score >= 50 THEN 'Medium Impact'\n        ELSE 'Low Impact'\n    END AS deck_impact,\n    \n    -- Time dimensions\n    cm.release_at,\n    cm.cycle_code,\n    CASE \n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin') THEN 'First Rotation'\n        WHEN cm.cycle_code IN ('lunar', 'order-and-chaos', 'sansan', 'mumbad') THEN 'Second Rotation'\n        ELSE 'Current'\n    END AS rotation_group,\n    \n    -- Card pool status (current as of 2025)\n    CASE\n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin', \n                           'lunar', 'order-and-chaos', 'sansan', 'mumbad',\n                           'flashpoint', 'red-sand') THEN 'Rotated'\n        WHEN cm.cycle_code IN ('terminal-directive', 'core2', 'kitara', 'reign-and-reverie') THEN 'Standard'\n        WHEN cm.cycle_code IS NULL THEN 'Unknown'\n        ELSE 'Standard'\n    END AS card_pool_status,\n    \n    -- Card value index (composite score)\n    ROUND(\n        (COALESCE(cm.popularity_score, 0) * 0.6) + \n        (COALESCE(cm.cost_efficiency_ratio, 0) * 20) +\n        (CASE WHEN cm.type_code = 'identity' THEN 30 ELSE 0 END) +\n        (CASE WHEN cm.card_name IN ('Account Siphon', 'Astroscript Pilot Program', 'Jackson Howard') THEN 40 ELSE 0 END)\n    ) AS card_value_index,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM card_metrics cm", "relation_name": "\"nerd_facts\".\"public\".\"fact_netrunner_cards\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.541732Z", "completed_at": "2025-03-25T13:39:12.547817Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.561568Z", "completed_at": "2025-03-25T13:39:12.561581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0300753116607666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_netrunner_factions", "compiled": true, "compiled_code": "/*\n  Model: dim_netrunner_factions\n  Description: Dimension table for Android: Netrunner factions\n  \n  Notes:\n  - Provides comprehensive faction information and classifications\n  - Includes card counts and distributions across types\n  - Adds gameplay style classification and meta position\n  - Contains faction metadata and visual styling attributes\n*/\n\nWITH faction_base AS (\n    SELECT DISTINCT\n        f.code AS faction_code,\n        f.faction_name,\n        f.side_code,\n        CASE \n            WHEN f.side_code = 'corp' THEN 'Corp'\n            WHEN f.side_code = 'runner' THEN 'Runner'\n            ELSE 'Unknown'\n        END AS side_name,\n        f.is_mini AS is_mini_faction,\n        f.color\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_factions\" f\n),\n\ncard_counts AS (\n    SELECT\n        faction_code,\n        COUNT(DISTINCT c.card_id) AS num_cards,\n        COUNT(DISTINCT CASE WHEN type_code = 'identity' THEN c.card_id END) AS num_identities,\n        COUNT(DISTINCT CASE WHEN type_code = 'ice' THEN c.card_id END) AS num_ice,\n        COUNT(DISTINCT CASE WHEN type_code = 'program' AND text ILIKE '%Icebreaker%' THEN c.card_id END) AS num_icebreakers,\n        COUNT(DISTINCT CASE WHEN type_code = 'agenda' THEN c.card_id END) AS num_agendas,\n        COUNT(DISTINCT CASE WHEN type_code IN ('event', 'operation') THEN c.card_id END) AS num_events_operations,\n        COUNT(DISTINCT CASE WHEN text ILIKE '%gain%credit%' OR \n                              text ILIKE '%take%credit%' OR\n                              text ILIKE '%credit for each%' THEN c.card_id END) AS num_economy_cards,\n        -- Add first release date\n        MIN(p.release_at) AS first_release_date,\n        -- Add most recent card release date\n        MAX(p.release_at) AS latest_release_date\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    LEFT JOIN \"nerd_facts\".\"public\".\"stg_netrunner_packs\" p ON c.pack_code = p.code\n    GROUP BY faction_code\n)\n\nSELECT\n    -- Generate surrogate key\n    md5(cast(coalesce(cast(f.faction_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS faction_key,\n    \n    -- Primary identifiers\n    f.faction_code,\n    f.faction_name,\n    f.side_code,\n    f.side_name,\n    f.is_mini_faction,\n    f.color,\n    \n    -- Card statistics\n    COALESCE(c.num_cards, 0) AS num_cards,\n    COALESCE(c.num_identities, 0) AS num_identities,\n    COALESCE(c.num_ice, 0) AS num_ice,\n    COALESCE(c.num_icebreakers, 0) AS num_icebreakers,\n    COALESCE(c.num_agendas, 0) AS num_agendas,\n    COALESCE(c.num_events_operations, 0) AS num_events_operations,\n    COALESCE(c.num_economy_cards, 0) AS num_economy_cards,\n    \n    -- Dates\n    c.first_release_date,\n    c.latest_release_date,\n    \n    -- Faction tier based on card count with improved thresholds\n    CASE\n        WHEN COALESCE(c.num_cards, 0) > 120 THEN 'Major'\n        WHEN COALESCE(c.num_cards, 0) > 70 THEN 'Standard'\n        WHEN COALESCE(c.num_cards, 0) > 20 THEN 'Minor'\n        ELSE 'Mini'\n    END AS faction_tier,\n    \n    -- Faction type based on side and characteristics with improved pattern matching\n    CASE\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%jinteki%' THEN 'Trap Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%haas-bioroid%' THEN 'Economy Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%nbn%' THEN 'Tag Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%weyland%' THEN 'Damage Corp'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%anarch%' THEN 'Disruption Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%criminal%' THEN 'Economy Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%shaper%' THEN 'Rig-Builder Runner'\n        ELSE 'Specialized'\n    END AS play_style,\n    \n    -- Economic strength based on economy card percentage\n    CASE\n        WHEN COALESCE(c.num_cards, 0) = 0 THEN 'Unknown'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 20 THEN 'Strong Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 15 THEN 'Good Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 10 THEN 'Moderate Economy'\n        ELSE 'Weak Economy'\n    END AS economy_strength,\n    \n    -- Iconic identity card for this faction with more comprehensive matching\n    CASE\n        WHEN f.faction_code = 'jinteki' THEN 'Personal Evolution'\n        WHEN f.faction_code = 'haas-bioroid' THEN 'Engineering the Future'\n        WHEN f.faction_code = 'nbn' THEN 'Making News'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'Building a Better World'\n        WHEN f.faction_code = 'anarch' THEN 'Noise'\n        WHEN f.faction_code = 'criminal' THEN 'Gabriel Santiago'\n        WHEN f.faction_code = 'shaper' THEN 'Kate \"Mac\" McCaffrey'\n        WHEN f.faction_code = 'adam' THEN 'Adam: Compulsive Hacker'\n        WHEN f.faction_code = 'apex' THEN 'Apex: Invasive Predator'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny Lebeau: Security Specialist'\n        ELSE 'Various'\n    END AS iconic_identity,\n    \n    -- Release wave with expanded categories\n    CASE\n        WHEN f.faction_code IN ('haas-bioroid', 'jinteki', 'nbn', 'weyland-consortium', 'anarch', 'criminal', 'shaper') THEN 'Core Set'\n        WHEN f.faction_code IN ('adam', 'apex', 'sunny-lebeau') THEN 'Data and Destiny'\n        ELSE 'Expansion'\n    END AS release_category,\n    \n    -- Meta position\n    CASE\n        WHEN f.faction_code IN ('nbn', 'haas-bioroid', 'criminal', 'shaper') THEN 'Tier 1'\n        WHEN f.faction_code IN ('jinteki', 'weyland-consortium', 'anarch') THEN 'Tier 2'\n        ELSE 'Tier 3'\n    END AS meta_position,\n    \n    -- CSS classes for styling\n    'faction-' || f.faction_code AS faction_css_class,\n    \n    -- Add hex color code with # prefix if not already present\n    CASE\n        WHEN f.color IS NULL THEN '#000000'  -- Default black\n        WHEN f.color LIKE '#%' THEN f.color\n        ELSE '#' || f.color\n    END AS color_hex,\n    \n    -- Faction abbreviation\n    CASE\n        WHEN f.faction_code = 'haas-bioroid' THEN 'HB'\n        WHEN f.faction_code = 'jinteki' THEN 'J'\n        WHEN f.faction_code = 'nbn' THEN 'NBN'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'W'\n        WHEN f.faction_code = 'anarch' THEN 'A'\n        WHEN f.faction_code = 'criminal' THEN 'C'\n        WHEN f.faction_code = 'shaper' THEN 'S'\n        WHEN f.faction_code = 'adam' THEN 'Adam'\n        WHEN f.faction_code = 'apex' THEN 'Apex'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny'\n        ELSE SUBSTRING(f.faction_name, 1, 1)\n    END AS faction_abbr,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM faction_base f\nLEFT JOIN card_counts c ON f.faction_code = c.faction_code\nORDER BY f.side_name, COALESCE(c.num_cards, 0) DESC", "relation_name": "\"nerd_facts\".\"public\".\"dim_netrunner_factions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.550761Z", "completed_at": "2025-03-25T13:39:12.562483Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.564395Z", "completed_at": "2025-03-25T13:39:12.564406Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015805721282958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\n\nwhere not(card_count > 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.557290Z", "completed_at": "2025-03-25T13:39:12.563524Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.565482Z", "completed_at": "2025-03-25T13:39:12.565490Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01594257354736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\n\nwhere not(release_date <= current_date OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.581952Z", "completed_at": "2025-03-25T13:39:12.585777Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.586989Z", "completed_at": "2025-03-25T13:39:12.587003Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009845495223999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pack_name\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.572937Z", "completed_at": "2025-03-25T13:39:12.588148Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.590264Z", "completed_at": "2025-03-25T13:39:12.590272Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024300813674926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pack_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.567149Z", "completed_at": "2025-03-25T13:39:12.586247Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.588475Z", "completed_at": "2025-03-25T13:39:12.588484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023578882217407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cycle_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere cycle_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.578090Z", "completed_at": "2025-03-25T13:39:12.587688Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.589652Z", "completed_at": "2025-03-25T13:39:12.589661Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01800990104675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pack_id\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.604054Z", "completed_at": "2025-03-25T13:39:12.613923Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.616257Z", "completed_at": "2025-03-25T13:39:12.616265Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02324223518371582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_id.454a997776", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ability_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere ability_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.609424Z", "completed_at": "2025-03-25T13:39:12.615220Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.615639Z", "completed_at": "2025-03-25T13:39:12.615649Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02373981475830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pack_code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_code is not null\ngroup by pack_code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.593837Z", "completed_at": "2025-03-25T13:39:12.608539Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.614360Z", "completed_at": "2025-03-25T13:39:12.614374Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022080659866333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pack_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_id is not null\ngroup by pack_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.599899Z", "completed_at": "2025-03-25T13:39:12.613437Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.618073Z", "completed_at": "2025-03-25T13:39:12.618089Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01909160614013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\n\nwhere not(pokemon_count >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.631920Z", "completed_at": "2025-03-25T13:39:12.635889Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.637992Z", "completed_at": "2025-03-25T13:39:12.638006Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018692493438720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect effect_description\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere effect_description is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.625595Z", "completed_at": "2025-03-25T13:39:12.636626Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.638667Z", "completed_at": "2025-03-25T13:39:12.638678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018590688705444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_pokemon_moves", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_pokemon_moves\n  Description: Dimension table for Pok\u00e9mon moves\n*/\n\nWITH base_moves AS (\n    -- Ensure clean numeric data from source\n    SELECT\n        move_id,\n        move_name,\n        type->>'name' AS move_type,\n        -- Handle numeric conversions safely\n        CASE \n            WHEN power::TEXT ~ '^[0-9]+$' THEN power::INTEGER\n            ELSE NULL \n        END AS power,\n        CASE \n            WHEN pp::TEXT ~ '^[0-9]+$' THEN pp::INTEGER\n            ELSE NULL \n        END AS pp,\n        CASE \n            WHEN accuracy::TEXT ~ '^[0-9]+$' THEN accuracy::INTEGER\n            ELSE NULL \n        END AS accuracy,\n        CASE \n            WHEN priority::TEXT ~ '^[0-9]+$' THEN priority::INTEGER\n            ELSE 0 \n        END AS priority,\n        damage_class->>'name' AS damage_class,\n        jsonb_array_elements(effect_entries::jsonb)->>'effect' AS effect_text,\n        CASE \n            WHEN effect_chance::TEXT ~ '^[0-9]+$' THEN effect_chance::INTEGER\n            ELSE NULL \n        END AS effect_chance,\n        CASE \n            WHEN (generation->>'url')::TEXT ~ 'generation/([0-9]+)/' \n            THEN REGEXP_REPLACE((generation->>'url')::TEXT, '.*generation/([0-9]+)/.*', '\\1')::INTEGER\n            ELSE 1 \n        END AS generation_id\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n    WHERE move_id IS NOT NULL\n),\n\nmove_classifications AS (\n    -- Pre-calculate move classifications to avoid repetition\n    SELECT\n        move_id,\n        move_name,\n        move_type,\n        power,\n        pp,\n        accuracy,\n        priority,\n        damage_class,\n        effect_text,\n        effect_chance,\n        generation_id,\n        -- Add effect category calculation\n        CASE\n            WHEN effect_text LIKE '%boost%' OR \n                 effect_text LIKE '%raise%' OR \n                 effect_text LIKE '%increase%' THEN 'Stat Boost'\n            WHEN effect_text LIKE '%lower%' OR \n                 effect_text LIKE '%decrease%' OR \n                 effect_text LIKE '%reduce%' THEN 'Stat Reduction'\n            WHEN effect_text LIKE '%paralyze%' THEN 'Paralyze'\n            WHEN effect_text LIKE '%burn%' THEN 'Burn'\n            WHEN effect_text LIKE '%poison%' OR \n                 effect_text LIKE '%toxic%' THEN 'Poison'\n            WHEN effect_text LIKE '%sleep%' THEN 'Sleep'\n            WHEN effect_text LIKE '%freeze%' THEN 'Freeze'\n            WHEN effect_text LIKE '%confus%' THEN 'Confusion'\n            WHEN effect_text LIKE '%flinch%' THEN 'Flinch'\n            WHEN effect_text LIKE '%trap%' THEN 'Trap'\n            WHEN effect_text LIKE '%heal%' OR \n                 effect_text LIKE '%restore%' THEN 'Healing'\n            WHEN effect_text LIKE '%protect%' OR \n                 effect_text LIKE '%protect%' THEN 'Protection'\n            WHEN effect_text LIKE '%critical%' THEN 'Critical Hit'\n            WHEN effect_text LIKE '%priority%' OR priority > 0 THEN 'Priority'\n            WHEN damage_class = 'status' THEN 'Status Effect'\n            WHEN power > 0 THEN 'Direct Damage'\n            ELSE 'Other'\n        END AS effect_category\n    FROM base_moves\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(move_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS move_key,\n    \n    -- Core identifiers\n    move_id,\n    move_name,\n    \n    -- Move attributes\n    move_type,\n    COALESCE(power, 0) AS power,\n    COALESCE(pp, 0) AS pp,\n    COALESCE(accuracy, 0) AS accuracy,\n    COALESCE(priority, 0) AS priority,\n    COALESCE(damage_class, 'physical') AS damage_class,\n    \n    -- Effect information\n    effect_text,\n    COALESCE(effect_chance, 0) AS effect_chance,\n    \n    -- Generation information\n    COALESCE(generation_id, 1) AS generation_id,\n    \n    -- Move category classification\n    CASE\n        WHEN damage_class = 'status' THEN 'Status'\n        WHEN power IS NULL OR power = 0 THEN 'Status'\n        WHEN power < 40 THEN 'Weak'\n        WHEN power < 70 THEN 'Medium'\n        WHEN power < 90 THEN 'Strong'\n        WHEN power < 110 THEN 'Very Strong'\n        ELSE 'Extreme'\n    END AS power_category,\n    \n    -- Accuracy classification\n    CASE\n        WHEN accuracy IS NULL THEN 'Always Hits'\n        WHEN accuracy < 50 THEN 'Very Inaccurate'\n        WHEN accuracy < 70 THEN 'Inaccurate'\n        WHEN accuracy < 85 THEN 'Moderate'\n        WHEN accuracy < 95 THEN 'Accurate'\n        WHEN accuracy < 100 THEN 'Very Accurate'\n        WHEN accuracy = 100 THEN 'Perfect'\n        ELSE 'Unknown'\n    END AS accuracy_category,\n    \n    -- Move effect category based on effect text\n    effect_category,\n    \n    -- Competitive relevance score (1-10)\n    CASE\n        -- Extremely useful moves in competitive\n        WHEN move_name IN ('stealth-rock', 'spikes', 'toxic-spikes', 'defog', 'rapid-spin',\n                   'recover', 'wish', 'protect', 'substitute', 'will-o-wisp',\n                   'scald', 'knock-off', 'u-turn', 'volt-switch', 'toxic',\n                   'thunder-wave', 'dragon-dance', 'swords-dance', 'nasty-plot',\n                   'calm-mind', 'quiver-dance', 'roost', 'leech-seed') THEN 10\n                   \n        -- Very strong attacks and utility moves\n        WHEN (power > 100 AND accuracy >= 90) OR \n             move_name IN ('close-combat', 'earthquake', 'ice-beam', 'thunderbolt',\n                   'flamethrower', 'surf', 'stone-edge', 'focus-blast',\n                   'shadow-ball', 'psyshock', 'earth-power', 'draco-meteor', \n                   'moonblast', 'play-rough', 'gunk-shot', 'brave-bird') THEN 9\n                   \n        -- Strong utility and common attacks\n        WHEN (power >= 80 AND accuracy >= 85) OR\n             move_name IN ('taunt', 'encore', 'trick', 'toxic', 'synthesis', \n                   'aromatherapy', 'heal-bell', 'sticky-web', 'trick-room',\n                   'tailwind', 'moonlight', 'morning-sun') THEN 8\n                   \n        -- Useful moves but not top tier\n        WHEN (power >= 70 AND accuracy >= 80) OR\n             move_name IN ('light-screen', 'reflect', 'hypnosis', 'sleep-powder',\n                   'stun-spore', 'thunder-wave') THEN 7\n                   \n        -- Standard damage moves with decent stats\n        WHEN power >= 60 AND accuracy >= 90 THEN 6\n        \n        -- Status moves without specific utility\n        WHEN damage_class = 'status' THEN 5\n        \n        -- Weak but accurate moves\n        WHEN power < 60 AND accuracy > 90 THEN 4\n        \n        -- Inaccurate moves\n        WHEN accuracy < 80 AND power > 0 THEN 3\n        \n        -- Very weak moves\n        WHEN power < 40 THEN 2\n        \n        -- Other moves\n        ELSE 1\n    END AS competitive_score,\n    \n    -- Move uniqueness rating\n    CASE\n        -- Signature moves\n        WHEN move_name IN ('spacial-rend', 'roar-of-time', 'seed-flare', 'blue-flare',\n                         'bolt-strike', 'fusion-flare', 'fusion-bolt', 'origin-pulse',\n                         'precipice-blades', 'dragon-ascent', 'sacred-fire', 'aeroblast',\n                         'shadow-force', 'doom-desire', 'psycho-boost', 'lunar-dance',\n                         'magma-storm', 'crush-grip', 'judgment', 'secret-sword',\n                         'relic-song', 'light-of-ruin', 'steam-eruption', 'core-enforcer',\n                         'sunsteel-strike', 'moongeist-beam', 'photon-geyser',\n                         'spectral-thief', 'plasma-fists') THEN 'Signature'\n        -- Very rare moves (limited distribution)\n        WHEN move_name IN ('shell-smash', 'quiver-dance', 'tail-glow', 'dragon-dance',\n                   'shift-gear', 'coil', 'geomancy', 'mind-blown', 'oblivion-wing',\n                   'thousand-arrows', 'thousand-waves', 'diamond-storm') THEN 'Very Rare'\n                   \n        -- Rare but distributed moves\n        WHEN move_name IN ('spore', 'dark-void', 'healing-wish', 'lunar-dance', \n                   'shore-up', 'belly-drum', 'fiery-dance', E'king''s-shield',\n                   'spiky-shield', 'baneful-bunker', 'parting-shot') THEN 'Rare'\n                   \n        -- Uncommon moves\n        WHEN move_name IN ('leech-seed', 'aromatherapy', 'heal-bell', 'sticky-web',\n                   'defog', 'rapid-spin', 'extreme-speed', 'sucker-punch',\n                   'bullet-punch', 'aqua-jet', 'mach-punch', 'ice-shard') THEN 'Uncommon'\n                   \n        -- Common coverage moves\n        WHEN move_name IN ('ice-beam', 'thunderbolt', 'flamethrower', 'surf',\n                   'earthquake', 'stone-edge', 'close-combat', 'shadow-ball') THEN 'Standard'\n                   \n        -- Very common moves\n        WHEN move_name IN ('toxic', 'protect', 'rest', 'sleep-talk', 'substitute') THEN 'Common'\n                   \n        -- Handle everything else based on damage class\n        WHEN damage_class = 'status' THEN 'Status'\n        ELSE 'Standard'\n    END AS move_rarity,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM move_classifications\nORDER BY move_type, power DESC NULLS LAST, move_name", "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_moves\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.621511Z", "completed_at": "2025-03-25T13:39:12.637175Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.639292Z", "completed_at": "2025-03-25T13:39:12.639301Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022158384323120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ability_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere ability_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.639873Z", "completed_at": "2025-03-25T13:39:12.646533Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.657673Z", "completed_at": "2025-03-25T13:39:12.657688Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038763999938964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_ability_id.73002b7b78", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ability_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere ability_id is not null\ngroup by ability_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.647937Z", "completed_at": "2025-03-25T13:39:12.658578Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.665924Z", "completed_at": "2025-03-25T13:39:12.665937Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019991159439086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0.c16002ba56", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not effect_chance >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not effect_chance <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.652674Z", "completed_at": "2025-03-25T13:39:12.664451Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.668319Z", "completed_at": "2025-03-25T13:39:12.668330Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021505117416381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.ae824db77d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not power >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not power <= 250\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.659311Z", "completed_at": "2025-03-25T13:39:12.667491Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.669263Z", "completed_at": "2025-03-25T13:39:12.669270Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02388787269592285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.bf1d97b6f1", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not accuracy >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not accuracy <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.670624Z", "completed_at": "2025-03-25T13:39:12.681021Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.682769Z", "completed_at": "2025-03-25T13:39:12.682783Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015993118286132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.aa330941c4", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not priority >= -7\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not priority <= 5\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.675684Z", "completed_at": "2025-03-25T13:39:12.682055Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.692671Z", "completed_at": "2025-03-25T13:39:12.692684Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02494502067565918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.89fb9bec20", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pp >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pp <= 40\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.684262Z", "completed_at": "2025-03-25T13:39:12.693557Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.698922Z", "completed_at": "2025-03-25T13:39:12.698932Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01847982406616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_name.e3d107b599", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect move_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\nwhere move_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.688843Z", "completed_at": "2025-03-25T13:39:12.698530Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.700551Z", "completed_at": "2025-03-25T13:39:12.700559Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020954608917236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_id.ed207f55ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect move_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\nwhere move_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.702020Z", "completed_at": "2025-03-25T13:39:12.709374Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.709773Z", "completed_at": "2025-03-25T13:39:12.709784Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010181188583374023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL.c332b5938b", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\n\nwhere not(cost >= 0 OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.694034Z", "completed_at": "2025-03-25T13:39:12.700147Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.720195Z", "completed_at": "2025-03-25T13:39:12.720209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03663754463195801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_moves_move_id.627c191b0b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    move_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\nwhere move_id is not null\ngroup by move_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.715135Z", "completed_at": "2025-03-25T13:39:12.721642Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.722092Z", "completed_at": "2025-03-25T13:39:12.722107Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014112472534179688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_name.835b172802", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\nwhere item_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.711024Z", "completed_at": "2025-03-25T13:39:12.719741Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.731299Z", "completed_at": "2025-03-25T13:39:12.731316Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022673606872558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_id.e1f99416f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\nwhere item_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.738051Z", "completed_at": "2025-03-25T13:39:12.744734Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.747272Z", "completed_at": "2025-03-25T13:39:12.747284Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010251760482788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_items_item_id.9edce17dc9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.732543Z", "completed_at": "2025-03-25T13:39:12.745787Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.747990Z", "completed_at": "2025-03-25T13:39:12.747999Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023006677627563477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_id.7eab806dd3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\nwhere type_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.726135Z", "completed_at": "2025-03-25T13:39:12.746868Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.748996Z", "completed_at": "2025-03-25T13:39:12.749004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025221586227416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.a64f89e9e1", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type_name as value_field,\n        count(*) as n_records\n\n    from \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\n    group by type_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'normal','fire','water','electric','grass','ice','fighting','poison','ground','flying','psychic','bug','rock','ghost','dragon','dark','steel','fairy'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.750594Z", "completed_at": "2025-03-25T13:39:12.757042Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.758745Z", "completed_at": "2025-03-25T13:39:12.758759Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012661218643188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_name.34ca71a5c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\nwhere type_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.759803Z", "completed_at": "2025-03-25T13:39:12.779137Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.781101Z", "completed_at": "2025-03-25T13:39:12.781114Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02537369728088379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_types_type_id.5c90e57894", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    type_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\nwhere type_id is not null\ngroup by type_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.764529Z", "completed_at": "2025-03-25T13:39:12.780347Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.782491Z", "completed_at": "2025-03-25T13:39:12.782501Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.026279687881469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.bridge_pokemon_abilities", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_pokemon_abilities\n  Description: Bridge table connecting Pok\u00e9mon to their abilities\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and abilities\n  - Modified to access abilities directly from the source table\n  - Calculates synergy scores between Pok\u00e9mon and their abilities\n  - Provides context on whether abilities are hidden or standard\n  - Removed dimension table join until dim_pokemon_abilities is created\n*/\n\n-- First get the core Pok\u00e9mon data we need\nWITH pokemon_data AS (\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        -- Extract primary type\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n        -- Extract secondary type\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        -- Extract species data for generation, legendary, mythical\n        (SELECT \n            CASE \n                WHEN gen.gen_num IS NOT NULL THEN gen.gen_num::integer\n                ELSE NULL\n            END\n         FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n         LEFT JOIN LATERAL (\n             SELECT (regexp_matches(jsonb_extract_path_text(species, 'url'), '/generation/([0-9]+)/'))[1] AS gen_num\n             WHERE jsonb_extract_path_text(species, 'url') ~ '/generation/([0-9]+)/'\n         ) gen ON true\n         WHERE p2.pokemon_id = p.pokemon_id) AS generation_number,\n        (SELECT COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false)\n         FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n         WHERE p2.pokemon_id = p.pokemon_id) AS is_legendary,\n        (SELECT COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false)\n         FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n         WHERE p2.pokemon_id = p.pokemon_id) AS is_mythical,\n        -- Calculate total base stats\n        (SELECT SUM((stat_data->>'base_stat')::integer)\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS stat_data\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) st) AS total_base_stats,\n        -- Count abilities\n        (SELECT COUNT(*)\n         FROM (\n             SELECT\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(abilities::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS ability_data\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) ab) AS ability_count\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    WHERE p.pokemon_id IS NOT NULL\n),\n\n-- Access raw data directly to get the abilities\npokemon_abilities_raw AS (\n    SELECT\n        id,\n        abilities::jsonb AS abilities_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\n-- Extract ability references from the raw data\npokemon_abilities AS (\n    SELECT\n        pd.pokemon_id,\n        pd.pokemon_name,\n        pd.primary_type,\n        pd.secondary_type,\n        pd.generation_number,\n        pd.is_legendary,\n        pd.is_mythical,\n        pd.total_base_stats,\n        ability_ref->'ability'->>'name' AS ability_name,\n        (ability_ref->>'is_hidden')::boolean AS is_hidden,\n        (ability_ref->>'slot')::integer AS slot_number\n    FROM pokemon_data pd\n    JOIN pokemon_abilities_raw par ON pd.pokemon_id = par.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(par.abilities_json::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS ability_ref\n    WHERE pd.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(pa.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pa.ability_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_ability_id,\n    \n    -- Foreign keys\n    pa.pokemon_id,\n    pa.pokemon_name,\n    pa.ability_name,\n    \n    -- Ability attributes\n    pa.is_hidden,\n    pa.slot_number,\n    \n    -- Pokemon attributes for context\n    pa.primary_type,\n    pa.secondary_type,\n    pa.generation_number,\n    pa.is_legendary,\n    pa.is_mythical,\n    \n    -- Synergy rating between Pokemon and ability\n    CASE\n        -- Top competitive synergies (examples from competitive play)\n        WHEN (pa.pokemon_name = 'gengar' AND pa.ability_name = 'levitate') THEN 5\n        WHEN (pa.pokemon_name = 'gyarados' AND pa.ability_name = 'intimidate') THEN 5\n        WHEN (pa.pokemon_name = 'garchomp' AND pa.ability_name = 'rough-skin') THEN 5\n        WHEN (pa.pokemon_name = 'dragonite' AND pa.ability_name = 'multiscale') THEN 5\n        \n        -- Weather abilities synergy with types\n        WHEN (pa.ability_name LIKE '%drought%' AND pa.primary_type = 'fire') THEN 5\n        WHEN (pa.ability_name LIKE '%drizzle%' AND pa.primary_type = 'water') THEN 5\n        WHEN (pa.ability_name LIKE '%sand-stream%' AND pa.primary_type IN ('rock', 'ground')) THEN 5\n        WHEN (pa.ability_name LIKE '%snow-warning%' AND pa.primary_type = 'ice') THEN 5\n        \n        -- Type boosting abilities\n        WHEN (pa.ability_name LIKE '%blaze%' AND pa.primary_type = 'fire') THEN 4\n        WHEN (pa.ability_name LIKE '%torrent%' AND pa.primary_type = 'water') THEN 4\n        WHEN (pa.ability_name LIKE '%overgrow%' AND pa.primary_type = 'grass') THEN 4\n        \n        -- Legendary/Mythical synergies are often designed to be good\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden = FALSE THEN 4.5\n        \n        -- Hidden abilities are often better (especially in later generations)\n        WHEN pa.is_hidden AND pa.generation_number >= 5 THEN 4\n        WHEN pa.is_hidden THEN 3.5\n        \n        -- Default synergy (still decent)\n        ELSE 3\n    END AS ability_synergy,\n    \n    -- Competitive relevance indicator (simplified)\n    CASE\n        WHEN pa.ability_name IN (\n            'speed-boost', 'protean', 'intimidate', 'drought', 'drizzle', \n            'sand-stream', 'adaptability', 'huge-power', 'multiscale'\n        ) THEN TRUE\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden THEN TRUE\n        ELSE FALSE\n    END AS is_competitively_relevant,\n    \n    -- Generation relationship\n    CASE \n        WHEN pa.ability_name IN ('intimidate', 'levitate', 'chlorophyll', \n                              'swift-swim', 'sand-stream', 'drought', 'drizzle') \n             AND pa.generation_number <= 3 THEN 'Original Ability'\n        WHEN pa.generation_number >= 6 AND pa.is_hidden THEN 'Modern Hidden Ability'\n        WHEN pa.is_hidden THEN 'Hidden Ability'\n        ELSE 'Standard Ability'\n    END AS ability_classification,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pokemon_abilities pa\nORDER BY pa.pokemon_id, pa.slot_number", "relation_name": "\"nerd_facts\".\"public\".\"bridge_pokemon_abilities\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.772261Z", "completed_at": "2025-03-25T13:39:12.781722Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.783674Z", "completed_at": "2025-03-25T13:39:12.783684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026288270950317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.bridge_pokemon_moves", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_pokemon_moves\n  Description: Bridge table connecting Pok\u00e9mon to their learnable moves\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and moves\n  - Gets moves from raw data since staging doesn't have them\n  - Calculates STAB (Same Type Attack Bonus) and signature move flags\n  - Provides context on move learning methods and levels\n*/\n\nWITH pokemon_base AS (\n    -- Get base Pokemon data from staging\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        -- These fields need to be handled differently as they're not in staging\n        NULL AS generation_number,\n        (SELECT SUM((stat_data->>'base_stat')::integer)\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS stat_data\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) st) AS total_base_stats\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    WHERE p.pokemon_id IS NOT NULL\n),\n\npokemon_moves_raw AS (\n    -- Get moves directly from raw data\n    SELECT\n        id,\n        moves::jsonb AS moves_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\npokemon_moves AS (\n    -- Extract move references from the raw data with improved error handling\n    SELECT\n        pb.pokemon_id,\n        pb.pokemon_name,\n        pb.primary_type,\n        pb.secondary_type,\n        pb.generation_number,\n        pb.total_base_stats,\n        -- Extract move details from the moves array\n        move_data->'move'->>'name' AS move_name,\n        move_data->'move'->>'type' AS move_type,\n        -- Extract learning method from version group details\n        (\n            SELECT vgd->>'move_learn_method'\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS learn_method,\n        -- Extract level requirement\n        (\n            SELECT COALESCE((vgd->>'level_learned_at')::integer, 0)\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS level_learned_at\n    FROM pokemon_base pb\n    JOIN pokemon_moves_raw pmr ON pb.pokemon_id = pmr.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(pmr.moves_json::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS move_data\n    WHERE pb.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Wrap everything in a subquery to use derived columns\n    move_data.*,\n    \n    -- Move priority classification using the now-available is_signature_move column\n    CASE\n        WHEN move_data.is_signature_move THEN 'Signature'\n        WHEN move_data.has_stab AND move_data.level_learned_at <= 20 THEN 'Early STAB'\n        WHEN move_data.has_stab THEN 'STAB'\n        WHEN move_data.learn_method = 'machine' THEN 'TM/HM'\n        WHEN move_data.learn_method = 'tutor' THEN 'Tutor'\n        ELSE 'Standard'\n    END AS move_priority,\n    \n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT\n        -- Primary key\n        md5(cast(coalesce(cast(pm.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pm.move_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pm.learn_method as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(COALESCE(pm.level_learned_at, 0) as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_move_id,\n        \n        -- Core identifiers\n        pm.pokemon_id,\n        pm.pokemon_name,\n        pm.move_name,\n        pm.move_type,\n        pm.learn_method,\n        pm.level_learned_at,\n        \n        -- Check if move type matches EITHER Pokemon type (STAB detection)\n        CASE\n            WHEN pm.move_type = pm.primary_type THEN TRUE\n            WHEN pm.move_type = pm.secondary_type AND pm.secondary_type IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END AS has_stab,\n        \n        -- Calculate if this is a signature move\n        CASE\n            -- Name-based detection\n            WHEN pm.move_name LIKE CONCAT('%', pm.pokemon_name, '%') THEN TRUE\n            \n            -- Starter Pok\u00e9mon signature moves\n            WHEN (pm.pokemon_name = 'pikachu' AND pm.move_name = 'volt-tackle') THEN TRUE\n            WHEN (pm.pokemon_name = 'charizard' AND pm.move_name = 'blast-burn') THEN TRUE\n            WHEN (pm.pokemon_name = 'blastoise' AND pm.move_name = 'hydro-cannon') THEN TRUE\n            WHEN (pm.pokemon_name = 'venusaur' AND pm.move_name = 'frenzy-plant') THEN TRUE\n            \n            -- Legendary signature moves\n            WHEN (pm.pokemon_name = 'mewtwo' AND pm.move_name = 'psystrike') THEN TRUE\n            WHEN (pm.pokemon_name = 'lugia' AND pm.move_name = 'aeroblast') THEN TRUE\n            WHEN (pm.pokemon_name = 'ho-oh' AND pm.move_name = 'sacred-fire') THEN TRUE\n            WHEN (pm.pokemon_name = 'kyogre' AND pm.move_name = 'origin-pulse') THEN TRUE\n            WHEN (pm.pokemon_name = 'groudon' AND pm.move_name = 'precipice-blades') THEN TRUE\n            WHEN (pm.pokemon_name = 'rayquaza' AND pm.move_name = 'dragon-ascent') THEN TRUE\n            WHEN (pm.pokemon_name = 'dialga' AND pm.move_name = 'roar-of-time') THEN TRUE\n            WHEN (pm.pokemon_name = 'palkia' AND pm.move_name = 'spacial-rend') THEN TRUE\n            WHEN (pm.pokemon_name = 'giratina' AND pm.move_name = 'shadow-force') THEN TRUE\n            \n            ELSE FALSE\n        END AS is_signature_move,\n        \n        -- Moves learned at level 1 or by evolution are typically important\n        CASE\n            WHEN pm.level_learned_at = 1 OR pm.learn_method = 'evolution' THEN TRUE\n            ELSE FALSE\n        END AS is_natural_move,\n        \n        -- Enhanced learn method classification\n        CASE\n            WHEN pm.learn_method = 'level-up' THEN 'Level Up'\n            WHEN pm.learn_method = 'machine' THEN 'TM/HM'\n            WHEN pm.learn_method = 'egg' THEN 'Egg Move'\n            WHEN pm.learn_method = 'tutor' THEN 'Move Tutor'\n            WHEN pm.learn_method = 'evolution' THEN 'Evolution'\n            WHEN pm.learn_method = 'form-change' THEN 'Form Change'\n            ELSE 'Other'\n        END AS learn_method_type\n        \n    FROM pokemon_moves pm\n) move_data\nORDER BY move_data.pokemon_id, move_data.level_learned_at, move_data.is_signature_move DESC", "relation_name": "\"nerd_facts\".\"public\".\"bridge_pokemon_moves\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.784302Z", "completed_at": "2025-03-25T13:39:12.794709Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.817235Z", "completed_at": "2025-03-25T13:39:12.817254Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03761887550354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_pokemon_abilities", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_pokemon_abilities\n  Description: Dimension table for Pok\u00e9mon abilities\n  \n  Notes:\n  - Analyzes ability distribution across all Pok\u00e9mon\n  - Categorizes abilities by effect type and competitive tier\n  - Calculates rarity metrics and battle style classifications\n  - Identifies hidden abilities and their gameplay significance\n  - Provides comprehensive categorization for analysis\n  - Fixed string literals to use proper PostgreSQL escaping\n  - Using E-string syntax for strings containing apostrophes\n  - Maintaining consistent naming format with PokeAPI\n*/\n\nWITH ability_usage AS (\n    -- Count how many Pokemon have each ability with improved error handling\n    SELECT \n        LOWER(COALESCE(ability_ref->'ability'->>'name', 'unknown')) AS ability_name,\n        COUNT(*) AS num_pokemon\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(p.abilities::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS ability_ref\n    WHERE ability_ref->'ability'->>'name' IS NOT NULL\n    GROUP BY ability_ref->'ability'->>'name'\n),\n\n-- Calculate ability rarity percentiles\nability_ranks AS (\n    SELECT\n        ability_name,\n        num_pokemon,\n        PERCENT_RANK() OVER (ORDER BY num_pokemon) AS rarity_percentile\n    FROM ability_usage\n),\n\n-- Classify abilities by effect type with greatly expanded categories\nability_attributes AS (\n    SELECT\n        ability_name,\n        CASE\n            -- Stat modifiers (expanded)\n            WHEN ability_name IN ('Intimidate', 'Moxie', 'Guts', 'Huge Power', 'Pure Power', 'Beast Boost',\n                                'Defiant', 'Contrary', 'Simple', 'Competitive', 'Anger Point', 'Weak Armor',\n                                'Speed Boost', 'Moody', 'Hustle', 'Sheer Force', 'No Guard', 'Technician',\n                                'Tinted Lens', 'Unburden', 'Victory Star') THEN 'Stat Modifier'\n                                \n            -- Immunities (expanded)\n            WHEN ability_name IN ('Levitate', 'Immunity', 'Water Absorb', 'Volt Absorb', 'Flash Fire',\n                                'Motor Drive', 'Lightning Rod', 'Storm Drain', 'Sap Sipper', 'Dry Skin',\n                                'Earth Eater', 'Wonder Guard', 'Soundproof', 'Water Bubble', 'Fluffy',\n                                'Disguise', 'Thick Fat', 'Heatproof', 'Justified', 'Bulletproof', \n                                'Filter', 'Solid Rock', 'Prism Armor', 'Magic Bounce') THEN 'Immunity'\n                                \n            -- Speed control (expanded)\n            WHEN ability_name IN ('Speed Boost', 'Chlorophyll', 'Swift Swim', 'Sand Rush', 'Slush Rush',\n                                'Surge Surfer', 'Quick Feet', 'Unburden', 'Steadfast', 'Slow Start',\n                                'Quick Draw', 'Gale Wings') THEN 'Speed'\n                                \n            -- Weather abilities\n            WHEN ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                                'Desolate Land', 'Primordial Sea', 'Delta Stream', \n                                'Sand Spit', 'Ice Face') THEN 'Weather'\n                                \n            -- Damage boosters (expanded)\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Iron Fist',\n                                'Adaptability', 'Aerilate', 'Pixilate', 'Refrigerate', 'Galvanize',\n                                'Solar Power', 'Steelworker', 'Reckless', 'Mega Launcher',\n                                'Strong Jaw', 'Tough Claws', 'Technician', 'Analytic',\n                                'Punk Rock', E'Dragon\\'s Maw', 'Transistor') THEN 'Damage Boost'\n                                \n            -- Opponent effects (expanded)\n            WHEN ability_name IN ('Pressure', 'Unnerve', 'Intimidate', 'Mummy', 'Gooey', 'Tangling Hair',\n                                'Shadow Tag', 'Arena Trap', 'Magnet Pull', 'Stall', 'Cute Charm',\n                                'Rivalry', 'Slow Start', 'Truant', 'Cotton Down', 'Neutralizing Gas',\n                                'Perish Body', 'Gorilla Tactics', 'Intrepid Sword') THEN 'Opponent Effect'\n                                \n            -- Contact effects (expanded)\n            WHEN ability_name IN ('Synchronize', 'Effect Spore', 'Static', 'Flame Body', 'Poison Point',\n                                'Rough Skin', 'Iron Barbs', 'Pickpocket', 'Gooey', 'Tangling Hair',\n                                'Wandering Spirit', 'Cotton Down', 'Mummy', 'Cursed Body',\n                                'Perish Body') THEN 'Contact Effect'\n                                \n            -- Healing abilities\n            WHEN ability_name IN ('Regenerator', 'Natural Cure', 'Shed Skin', 'Poison Heal', \n                                'Hydration', 'Ice Body', 'Rain Dish', 'Healer', 'Water Bubble', \n                                'Ice Face', 'Disguise') THEN 'Healing'\n                                \n            -- Entry hazard abilities\n            WHEN ability_name IN ('Spikes', 'Stealth Rock', 'Sticky Web', 'Toxic Spikes') THEN 'Entry Hazard'\n            \n            -- Form-changing\n            WHEN ability_name IN ('Protean', 'Libero', 'Color Change', 'Forecast', 'Mimicry',\n                                'Stance Change', 'Battle Bond', 'Power Construct', \n                                'Shields Down', 'Schooling') THEN 'Form Change'\n                                \n            -- Defensive abilities\n            WHEN ability_name IN ('Multiscale', 'Shadow Shield', 'Sturdy', 'Battle Armor', 'Shell Armor',\n                                'Filter', 'Solid Rock', 'Prism Armor', 'Fluffy', 'Thick Fat',\n                                'Magic Guard', 'Disguise', 'Ice Face', 'Marvel Scale',\n                                'Friend Guard', 'Dauntless Shield') THEN 'Defensive'\n                                \n            -- Item-related\n            WHEN ability_name IN ('Pickup', 'Honey Gather', 'Frisk', 'Magician', 'Pickpocket',\n                                'Sticky Hold', 'Unburden', 'Klutz', 'Harvest', 'Cheek Pouch',\n                                'Ripen', 'Ball Fetch') THEN 'Item Effect'\n                                \n            -- Status condition-related\n            WHEN ability_name IN ('Immunity', 'Limber', 'Insomnia', 'Vital Spirit', 'Water Veil',\n                                'Magma Armor', 'Oblivious', 'Own Tempo', 'Inner Focus',\n                                'Shield Dust', 'Leaf Guard', 'Pastel Veil', 'Good as Gold') THEN 'Status Prevention'\n            \n            -- Priority move effects\n            WHEN ability_name IN ('Prankster', 'Gale Wings', 'Triage', 'Queenly Majesty', \n                                'Dazzling', 'Armor Tail') THEN 'Priority'\n                                \n            ELSE 'Other'\n        END AS effect_type,\n        \n        -- Expanded competitive tier rankings\n        CASE\n            -- S-Tier: Game-changing abilities\n            WHEN ability_name IN ('Wonder Guard', 'Huge Power', 'Pure Power', 'Speed Boost', \n                               'Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                               'Shadow Tag', 'Intimidate', 'Beast Boost', 'Protean', 'Magic Guard',\n                               'Prankster', 'Unaware', 'Imposter', 'Desolate Land', 'Primordial Sea',\n                               'Delta Stream', 'Soul-Heart', 'Libero', 'Intrepid Sword',\n                               'Gorilla Tactics', 'As One') THEN 'S'\n                               \n            -- A-Tier: Very strong abilities\n            WHEN ability_name IN ('Moxie', 'Adaptability', 'Serene Grace', 'Guts', 'Levitate', \n                               'Multiscale', 'Regenerator', 'Unaware', 'Water Absorb',\n                               'Volt Absorb', 'Disguise', 'Slush Rush', 'Swift Swim', 'Sand Rush',\n                               'Chlorophyll', 'Queenly Majesty', 'Dazzling', 'Sturdy', 'Electric Surge',\n                               'Psychic Surge', 'Grassy Surge', 'Misty Surge', 'Power Construct',\n                               'Shields Down', 'Contrary', 'Mold Breaker', 'Parental Bond') THEN 'A'\n                               \n            -- B-Tier: Good abilities\n            WHEN ability_name IN ('Flash Fire', 'Poison Heal', 'Thick Fat', 'Technician', \n                               'Sheer Force', 'Tinted Lens', 'Fairy Aura', 'Dark Aura',\n                               'Aura Break', 'No Guard', 'Competitive', 'Simple', 'Unburden',\n                               'Mummy', 'Iron Barbs', 'Rough Skin', 'Solar Power', 'Analytic',\n                               'Steelworker', 'Aerilate', 'Pixilate', 'Refrigerate', 'Neuroforce',\n                               'Galvanize', 'Trace') THEN 'B'\n                               \n            -- C-Tier: Average abilities\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Natural Cure', \n                               'Clear Body', 'Sticky Hold', 'Shed Skin', 'Mold Breaker',\n                               'Pressure', 'Synchronize', 'Ice Body', 'Rain Dish', 'Hustle',\n                               'Filter', 'Solid Rock', 'Infiltrator', 'Super Luck', 'Harvest',\n                               'Big Pecks', 'Early Bird', 'Frisk', 'Rock Head', 'Steadfast',\n                               'Sniper', 'Heavy Metal', 'Light Metal', 'Hydration') THEN 'C'\n                               \n            -- D-Tier: Weak or very situational abilities\n            WHEN ability_name IN ('Run Away', 'Honey Gather', 'Illuminate', 'Stench', 'Stall',\n                               'Suction Cups', 'Shell Armor', 'Battle Armor', 'Ball Fetch',\n                               'Pickup', 'Klutz', 'Slow Start', 'Truant', 'Defeatist',\n                               'Forecast', 'Healer', 'Friend Guard', 'Minus', 'Plus', 'Anticipation',\n                               'Flower Gift', 'Forewarn', 'Rivalry', 'Victory Star',\n                               'Leaf Guard', 'Tangled Feet') THEN 'D'\n                               \n            -- F-Tier: Detrimental or extremely niche abilities\n            WHEN ability_name IN ('Defeatist', 'Slow Start', 'Truant', 'Stall', 'Klutz',\n                               'Illuminate', 'Minus', 'Plus', 'Flower Veil', 'Friend Guard') THEN 'F'\n                               \n            ELSE 'Unclassified'\n        END AS tier\n    FROM ability_ranks\n)\n\nSELECT\n    -- Primary key (using surrogate key pattern)\n    md5(cast(coalesce(cast(u.ability_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS ability_key,\n    ROW_NUMBER() OVER (ORDER BY u.ability_name) AS ability_id,\n    \n    -- Core attributes\n    u.ability_name,\n    u.num_pokemon,\n    a.effect_type,\n    a.tier,\n    \n    -- Calculate rarity - improved with percentiles\n    CASE\n        WHEN r.rarity_percentile >= 0.95 THEN 'Ultra Rare'\n        WHEN r.rarity_percentile >= 0.80 THEN 'Very Rare'\n        WHEN r.rarity_percentile >= 0.60 THEN 'Rare'\n        WHEN r.rarity_percentile >= 0.40 THEN 'Uncommon'\n        WHEN r.rarity_percentile >= 0.20 THEN 'Common'\n        ELSE 'Very Common'\n    END AS rarity,\n    \n    -- Enhanced hidden ability identification with more comprehensive list\n    CASE\n        WHEN u.ability_name IN (\n            -- Gen 5 Dream World abilities\n            'Analytic', 'Chlorophyll', 'Cloud Nine', 'Damp', 'Defiant', 'Drought', 'Drizzle',\n            'Intimidate', 'Lightningrod', 'Moody', 'Moxie', 'Multiscale', 'Overcoat', 'Poison Touch',\n            'Prankster', 'Rain Dish', 'Regenerator', 'Sand Force', 'Sand Rush', 'Sand Veil',\n            'Serene Grace', 'Sheer Force', 'Sniper', 'Snow Warning', 'Speed Boost', 'Technician',\n            'Telepathy', 'Unaware', 'Unnerve',\n            \n            -- Gen 6 notable hidden abilities\n            'Gale Wings', 'Protean', 'Magic Guard', 'Magic Bounce', 'Harvest', 'Infiltrator',\n            'Tinted Lens', 'Gooey', 'Aroma Veil', 'Bulletproof', 'Magician', 'Pickpocket',\n            \n            -- Gen 7 notable hidden abilities\n            'Power of Alchemy', 'Beast Boost', 'RKS System', 'Slush Rush', 'Surge Surfer',\n            'Water Compaction', 'Queenly Majesty', 'Stamina', 'Water Bubble', 'Steelworker',\n            \n            -- Gen 8 notable hidden abilities with fixed string literals\n            'Libero', 'Quick Draw', 'Ice Scales', 'Punk Rock', 'Mirror Armor', 'Neutralizing Gas',\n            'Power Spot', 'Ripen', 'Steam Engine', 'Sand Spit', 'Cotton Down', 'Gorilla Tactics',\n            \n            -- Other known hidden abilities that are particularly strong\n            'Adaptability', 'Competitive', 'Contrary', 'Cursed Body', 'Guts', 'Hustle', 'Marvel Scale',\n            'No Guard', 'Poison Heal', 'Solar Power', 'Swift Swim', 'Thick Fat', 'Unburden',\n            'Water Absorb', 'Wonder Skin'\n        ) THEN TRUE\n        ELSE FALSE\n    END AS likely_hidden,\n    \n    -- Battle style classification - fixed string literals\n    CASE\n        -- Offensive battle style\n        WHEN a.effect_type IN ('Damage Boost', 'Speed') OR \n             u.ability_name IN ('Moxie', 'Adaptability', 'Beast Boost', 'Huge Power', 'Pure Power',\n                             'Sheer Force', 'Tough Claws', 'Strong Jaw', 'Technician', 'Gorilla Tactics',\n                             'Intrepid Sword', 'Contrary', 'Aerilate', 'Pixilate', 'Refrigerate',\n                             'Galvanize', 'Steelworker', 'Protean', 'Libero', E'dragon''s-maw', 'Transistor',\n                             'Guts', 'No Guard', 'Solar Power', 'Tinted Lens', 'Mega Launcher', 'Sniper')\n        THEN 'Offensive'\n        \n        -- Defensive battle style\n        WHEN a.effect_type IN ('Immunity', 'Defensive', 'Status Prevention', 'Healing') OR\n             u.ability_name IN ('Multiscale', 'Shadow Shield', 'Fur Coat', 'Fluffy', 'Ice Face',\n                             'Disguise', 'Intimidate', 'Filter', 'Solid Rock', 'Prism Armor',\n                             'Sturdy', 'Magic Guard', 'Thick Fat', 'Wonder Guard', 'Levitate',\n                             'Water Absorb', 'Volt Absorb', 'Flash Fire', 'Bulletproof', 'Heatproof',\n                             'Storm Drain', 'Water Bubble', 'Ice Body', 'Marvel Scale', 'Regenerator')\n        THEN 'Defensive'\n        \n        -- Utility battle style\n        WHEN a.effect_type IN ('Weather', 'Entry Hazard', 'Form Change', 'Item Effect', 'Priority') OR\n             u.ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning', 'Prankster',\n                             'Serene Grace', 'Queenly Majesty', 'Dazzling', 'Magic Bounce', 'Trace',\n                             'Natural Cure', 'Shed Skin', 'Grassy Surge', 'Electric Surge', 'Psychic Surge',\n                             'Misty Surge', 'Harvest', 'Pickpocket', 'Magician', 'Unburden', 'Hydration',\n                             'Lightning Rod', 'Magnet Pull', 'Sticky Hold', 'Stealth Rock')\n        THEN 'Utility'\n        \n        -- Support battle style\n        WHEN a.effect_type IN ('Opponent Effect', 'Contact Effect') OR\n             u.ability_name IN ('Intimidate', 'Unnerve', 'Pressure', 'Mummy', 'Synchronize',\n                             'Effect Spore', 'Static', 'Flame Body', 'Poison Point', 'Gooey',\n                             'Friend Guard', 'Healer', 'Cursed Body', 'Iron Barbs', 'Rough Skin',\n                             'Aftermath', 'Frisk', 'Ice Face', 'Cotton Down', 'Neutralizing Gas',\n                             'Arena Trap', 'Shadow Tag', 'Speed Boost', 'Immunity', 'Rain Dish')\n        THEN 'Support'\n        \n        ELSE 'Balanced'\n    END AS battle_style,\n    \n    -- Generation affinity using comprehensive list\n    CASE\n        -- Gen 1 signature/themed abilities\n        WHEN u.ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Static', 'Thick Fat',\n                             'Shell Armor', 'Battle Armor', 'Early Bird', 'Chlorophyll',\n                             'Rock Head', 'Sturdy', 'Guts', 'Run Away', 'Intimidate', 'Clear Body')\n        THEN 1\n        \n        -- Gen 2 signature/themed abilities\n        WHEN u.ability_name IN ('Flash Fire', 'Swift Swim', 'Inner Focus', 'Levitate',\n                             'Forecast', 'Intimidate', 'Shed Skin', 'Rough Skin', 'Pressure',\n                             'Trace', 'Pure Power', 'Huge Power', 'Shadow Tag', 'Wonder Guard',\n                             'Synchronize', 'Natural Cure', 'Lightning Rod', 'Drizzle', 'Drought')\n        THEN 2\n        \n        -- Gen 3 signature/themed abilities\n        WHEN u.ability_name IN ('Sand Stream', 'Truant', 'Slaking', 'Soundproof', 'Magic Guard',\n                             'Compoundeyes', 'Speed Boost', 'Marvel Scale', 'Steadfast',\n                             'Poison Point', 'Air Lock', 'Filter', 'Solid Rock', 'Levitate')\n        THEN 3\n        \n        -- Gen 4 signature/themed abilities\n        WHEN u.ability_name IN ('Adaptability', 'Technician', 'Download', 'Motor Drive',\n                             'Ice Body', 'Snow Warning', 'Snow Cloak', 'Slow Start', 'Bad Dreams',\n                             'Multitype', 'Flower Gift', 'Iron Fist', 'Tinted Lens', 'Scrappy')\n        THEN 4\n        \n        -- Gen 5 signature/themed abilities\n        WHEN u.ability_name IN ('Teravolt', 'Turboblaze', 'Analytic', 'Sand Force', 'Sand Rush',\n                             'Victory Star', 'Zen Mode', 'Defiant', 'Prankster', 'Illusion',\n                             'Moxie', 'Justified', 'Unaware', 'Magic Bounce', 'Heavy Metal')\n        THEN 5\n        \n        -- Gen 6 signature/themed abilities\n        WHEN u.ability_name IN ('Protean', 'Aerilate', 'Pixilate', 'Refrigerate', 'Parental Bond',\n                             'Dark Aura', 'Fairy Aura', 'Aura Break', 'Stance Change', 'Gale Wings',\n                             'Sweet Veil', 'Gooey', 'Bulletproof', 'Competitive', 'Cheek Pouch')\n        THEN 6\n        \n        -- Gen 7 signature/themed abilities\n        WHEN u.ability_name IN ('Beast Boost', 'Disguise', 'RKS System', 'Electric Surge',\n                             'Psychic Surge', 'Grassy Surge', 'Misty Surge', 'Full Metal Body',\n                             'Neuroforce', 'Soul-Heart', 'Schooling', 'Shields Down', 'Fluffy')\n        THEN 7\n        \n        -- Gen 8 signature/themed abilities\n        WHEN u.ability_name IN ('Libero', 'Intrepid Sword', 'Dauntless Shield', 'Ball Fetch',\n                             'Cotton Down', 'Steam Engine', 'Sand Spit', 'Mirror Armor',\n                             'Hunger Switch', 'Ice Face', 'Power Spot', 'Ice Scales', 'Punk Rock',\n                             'Gorilla Tactics', 'Neutralizing Gas', 'Ripen', 'Gulp Missile')\n        THEN 8\n        \n        -- Default to most recent generation\n        ELSE 8\n    END AS generation_affinity,\n    \n    -- Additional stat context\n    CASE\n        WHEN a.effect_type = 'Stat Modifier' THEN\n            CASE\n                WHEN u.ability_name IN ('Huge Power', 'Pure Power', 'Gorilla Tactics',\n                                    'Intrepid Sword', 'Moxie', 'Beast Boost', 'Swords Dance',\n                                    'Dragon Dance') THEN 'Attack'\n                                    \n                WHEN u.ability_name IN ('Solar Power', 'Competitive', 'Beast Boost',\n                                    'Soul-Heart', 'Nasty Plot', 'Calm Mind') THEN 'Special Attack'\n                                    \n                WHEN u.ability_name IN ('Speed Boost', 'Swift Swim', 'Chlorophyll',\n                                    'Sand Rush', 'Slush Rush', 'Unburden', 'Surge Surfer') THEN 'Speed'\n                                    \n                WHEN u.ability_name IN ('Intimidate', 'Fur Coat', 'Marvel Scale',\n                                    'Filter', 'Solid Rock', 'Prism Armor', 'Ice Face') THEN 'Defense'\n                                    \n                WHEN u.ability_name IN ('Multiscale', 'Shadow Shield', 'Natural Cure',\n                                    'Regenerator', 'Hydration', 'Shed Skin') THEN 'HP/Recovery'\n                                    \n                ELSE 'Mixed'\n            END\n        ELSE NULL\n    END AS primary_stat,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM ability_usage u\nJOIN ability_ranks r ON u.ability_name = r.ability_name\nJOIN ability_attributes a ON u.ability_name = a.ability_name\nORDER BY u.num_pokemon DESC, u.ability_name", "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_abilities\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.796953Z", "completed_at": "2025-03-25T13:39:12.818112Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.827160Z", "completed_at": "2025-03-25T13:39:12.827173Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03212761878967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_pokemon_types", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_pokemon_types\n  Description: Dimension table for Pok\u00e9mon types and their effectiveness relationships\n  \n  Notes:\n  - Contains comprehensive type effectiveness data (weaknesses, resistances, immunities)\n  - Includes type distribution metrics across the Pok\u00e9dex\n  - Provides visual attributes for UI presentation\n  - Calculates offensive and defensive ratings\n  - Adds type categorization and generation data\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        type_name,\n        slot,\n        COUNT(*) AS pokemon_count\n    FROM (\n        SELECT\n            (jsonb_array_elements(\n                COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n            )->'type')::jsonb->>'name' AS type_name,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n            )->>'slot')::int AS slot\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n        WHERE types IS NOT NULL\n    ) t\n    GROUP BY type_name, slot\n),\n\ntype_counts AS (\n    -- Extract primary types from all pokemon\n    SELECT\n        primary_type AS type_name,\n        COUNT(*) AS num_primary\n    FROM (\n        SELECT\n            pokemon_id,\n            (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n             FROM (\n                 SELECT\n                     jsonb_array_elements(\n                         COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                     ) AS type_json\n                 FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n                 WHERE p2.pokemon_id = p.pokemon_id\n             ) pt\n             WHERE jsonb_extract_path_text(pt.type_json::jsonb, 'slot') = '1'\n             LIMIT 1\n            ) AS primary_type\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    ) primary_types\n    WHERE primary_type IS NOT NULL\n    GROUP BY primary_type\n),\n\nsecondary_type_counts AS (\n    -- Extract secondary types from pokemon\n    SELECT\n        secondary_type AS type_name,\n        COUNT(*) AS num_secondary\n    FROM (\n        SELECT\n            pokemon_id,\n            (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n             FROM (\n                 SELECT\n                     jsonb_array_elements(\n                         COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                     ) AS type_json\n                 FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n                 WHERE p2.pokemon_id = p.pokemon_id\n             ) pt\n             WHERE jsonb_extract_path_text(pt.type_json::jsonb, 'slot') = '2'\n             LIMIT 1\n            ) AS secondary_type\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    ) secondary_types\n    WHERE secondary_type IS NOT NULL\n    GROUP BY secondary_type\n),\n\ncombined_counts AS (\n    -- Combine primary and secondary counts\n    SELECT\n        t.type_name,\n        t.num_primary,\n        COALESCE(s.num_secondary, 0) AS num_secondary,\n        t.num_primary + COALESCE(s.num_secondary, 0) AS total_usage\n    FROM type_counts t\n    LEFT JOIN secondary_type_counts s ON t.type_name = s.type_name\n),\n\ntype_attributes AS (\n    SELECT\n        type_name,\n        -- Weaknesses (takes 2x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Fighting']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Water' THEN ARRAY['Electric', 'Grass']\n            WHEN type_name = 'Electric' THEN ARRAY['Ground']\n            WHEN type_name = 'Grass' THEN ARRAY['Fire', 'Ice', 'Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Fire', 'Fighting', 'Rock', 'Steel']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Psychic']\n            WHEN type_name = 'Ground' THEN ARRAY['Water', 'Grass', 'Ice']\n            WHEN type_name = 'Flying' THEN ARRAY['Electric', 'Ice', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Bug', 'Ghost', 'Dark']\n            WHEN type_name = 'Bug' THEN ARRAY['Fire', 'Flying', 'Rock']\n            WHEN type_name = 'Rock' THEN ARRAY['Water', 'Grass', 'Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Dragon' THEN ARRAY['Ice', 'Dragon', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Bug', 'Fairy']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Fighting', 'Ground']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS weaknesses,\n        \n        -- Resistances (takes 0.5x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Fire', 'Grass', 'Ice', 'Bug', 'Steel', 'Fairy']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Water', 'Ice', 'Steel']\n            WHEN type_name = 'Electric' THEN ARRAY['Electric', 'Flying', 'Steel']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Electric', 'Grass', 'Ground']\n            WHEN type_name = 'Ice' THEN ARRAY['Ice']\n            WHEN type_name = 'Fighting' THEN ARRAY['Bug', 'Rock', 'Dark']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fighting', 'Poison', 'Bug', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Poison', 'Rock']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Psychic']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Fighting', 'Ground']\n            WHEN type_name = 'Rock' THEN ARRAY['Normal', 'Fire', 'Poison', 'Flying']\n            WHEN type_name = 'Ghost' THEN ARRAY['Poison', 'Bug']  -- Fixed: Ghost resists Bug and Poison\n            WHEN type_name = 'Dragon' THEN ARRAY['Fire', 'Water', 'Electric', 'Grass']\n            WHEN type_name = 'Dark' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Steel' THEN ARRAY['Normal', 'Grass', 'Ice', 'Flying', 'Psychic', 'Bug', 'Rock', 'Dragon', 'Steel', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Bug', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS resistances,\n        \n        -- Immunities (takes 0x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost']\n            WHEN type_name = 'Flying' THEN ARRAY['Ground']\n            WHEN type_name = 'Ground' THEN ARRAY['Electric']\n            WHEN type_name = 'Ghost' THEN ARRAY['Normal', 'Fighting']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic']\n            WHEN type_name = 'Fairy' THEN ARRAY['Dragon']\n            WHEN type_name = 'Steel' THEN ARRAY['Poison']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS immunities,\n        \n        -- Super effective against (deals 2x damage to these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Grass', 'Ice', 'Bug', 'Steel']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Rock']\n            WHEN type_name = 'Electric' THEN ARRAY['Water', 'Flying']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Ice' THEN ARRAY['Grass', 'Ground', 'Flying', 'Dragon']\n            WHEN type_name = 'Fighting' THEN ARRAY['Normal', 'Ice', 'Rock', 'Dark', 'Steel']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Fire', 'Electric', 'Poison', 'Rock', 'Steel']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Poison']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Psychic', 'Dark']\n            WHEN type_name = 'Rock' THEN ARRAY['Fire', 'Ice', 'Flying', 'Bug']\n            WHEN type_name = 'Ghost' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Dragon' THEN ARRAY['Dragon']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Steel' THEN ARRAY['Ice', 'Rock', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Dragon', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS super_effective,\n        \n        -- Type compatibility (works well defensively with these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost', 'Rock', 'Steel']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Rock', 'Dragon']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Flying']\n            WHEN type_name = 'Electric' THEN ARRAY['Flying', 'Steel', 'Fairy']\n            WHEN type_name = 'Grass' THEN ARRAY['Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Steel', 'Fire', 'Water']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Ghost', 'Steel']\n            WHEN type_name = 'Ground' THEN ARRAY['Flying', 'Bug', 'Grass']\n            WHEN type_name = 'Flying' THEN ARRAY['Steel', 'Electric', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Steel', 'Dark', 'Normal']\n            WHEN type_name = 'Bug' THEN ARRAY['Flying', 'Steel', 'Fire']\n            WHEN type_name = 'Rock' THEN ARRAY['Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Dark', 'Normal', 'Poison']\n            WHEN type_name = 'Dragon' THEN ARRAY['Steel', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Fairy', 'Bug']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Electric', 'Water']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel', 'Fire']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS defensive_synergy\n    FROM combined_counts\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(c.type_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS type_key,\n    ROW_NUMBER() OVER (ORDER BY c.type_name) AS type_id,\n    \n    -- Core attributes\n    c.type_name,\n    c.num_primary,\n    c.num_secondary,\n    c.total_usage,\n    \n    -- Type effectiveness data\n    a.weaknesses,\n    a.resistances,\n    a.immunities,\n    a.super_effective,\n    \n    -- Defensive synergy types\n    a.defensive_synergy,\n    \n    -- Calculated metrics\n    COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) AS weakness_count,\n    COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) AS resistance_count,\n    COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) AS immunity_count,\n    COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) AS super_effective_count,\n    \n    -- Type color (for UI)\n    CASE\n        WHEN c.type_name = 'Normal' THEN '#A8A77A'\n        WHEN c.type_name = 'Fire' THEN '#EE8130'\n        WHEN c.type_name = 'Water' THEN '#6390F0'\n        WHEN c.type_name = 'Electric' THEN '#F7D02C'\n        WHEN c.type_name = 'Grass' THEN '#7AC74C'\n        WHEN c.type_name = 'Ice' THEN '#96D9D6'\n        WHEN c.type_name = 'Fighting' THEN '#C22E28'\n        WHEN c.type_name = 'Poison' THEN '#A33EA1'\n        WHEN c.type_name = 'Ground' THEN '#E2BF65'\n        WHEN c.type_name = 'Flying' THEN '#A98FF3'\n        WHEN c.type_name = 'Psychic' THEN '#F95587'\n        WHEN c.type_name = 'Bug' THEN '#A6B91A'\n        WHEN c.type_name = 'Rock' THEN '#B6A136'\n        WHEN c.type_name = 'Ghost' THEN '#735797'\n        WHEN c.type_name = 'Dragon' THEN '#6F35FC'\n        WHEN c.type_name = 'Dark' THEN '#705746'\n        WHEN c.type_name = 'Steel' THEN '#B7B7CE'\n        WHEN c.type_name = 'Fairy' THEN '#D685AD'\n        ELSE '#CCCCCC'\n    END AS type_color,\n    \n    -- Type category - expanded with better organization\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric') THEN 'Primary Elemental'\n        WHEN c.type_name IN ('Grass', 'Ice') THEN 'Secondary Elemental'\n        WHEN c.type_name IN ('Fighting', 'Rock', 'Ground') THEN 'Physical'\n        WHEN c.type_name IN ('Poison', 'Flying', 'Bug') THEN 'Biological'\n        WHEN c.type_name IN ('Psychic', 'Ghost', 'Dark', 'Fairy') THEN 'Special'\n        WHEN c.type_name IN ('Normal') THEN 'Normal'\n        WHEN c.type_name IN ('Dragon', 'Steel') THEN 'Advanced'\n        ELSE 'Other'\n    END AS type_category,\n    \n    -- Type attack classification\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                           'Psychic', 'Dragon', 'Dark', 'Fairy') THEN 'Special'\n        ELSE 'Physical'\n    END AS damage_category,\n    \n    -- Generation introduced\n    CASE\n        WHEN c.type_name IN ('Normal', 'Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                            'Fighting', 'Poison', 'Ground', 'Flying', 'Psychic', 'Bug', \n                            'Rock', 'Ghost', 'Dragon') THEN 1\n        WHEN c.type_name IN ('Dark', 'Steel') THEN 2\n        WHEN c.type_name IN ('Fairy') THEN 6\n        ELSE 1\n    END AS generation_introduced,\n    \n    -- Offensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Ground', 'Fighting', 'Fire') THEN 9  -- Excellent coverage\n        WHEN c.type_name IN ('Ice', 'Electric', 'Rock', 'Flying', 'Fairy', 'Ghost', 'Dark') THEN 8  -- Great coverage\n        WHEN c.type_name IN ('Grass', 'Dragon', 'Steel', 'Water', 'Psychic') THEN 7  -- Good coverage\n        WHEN c.type_name IN ('Poison', 'Bug') THEN 5  -- Limited coverage\n        WHEN c.type_name IN ('Normal') THEN 3  -- Poor coverage\n        ELSE 6\n    END AS offensive_rating,\n    \n    -- Defensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Steel', 'Fairy') THEN 10  -- Excellent defenses\n        WHEN c.type_name IN ('Ghost', 'Water', 'Normal', 'Dragon') THEN 8  -- Great defenses\n        WHEN c.type_name IN ('Fire', 'Flying', 'Dark', 'Poison', 'Ground') THEN 7  -- Good defenses\n        WHEN c.type_name IN ('Electric', 'Fighting', 'Psychic', 'Rock') THEN 5  -- Average defenses\n        WHEN c.type_name IN ('Grass', 'Bug', 'Ice') THEN 3  -- Poor defenses\n        ELSE 6\n    END AS defensive_rating,\n    \n    -- Type value calculated across multiple factors\n    (\n        COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) * 10 -\n        COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) * 3\n    ) AS composite_value_score,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM combined_counts c\nJOIN type_attributes a ON c.type_name = a.type_name\nORDER BY c.type_name", "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_types\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.804876Z", "completed_at": "2025-03-25T13:39:12.825565Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.827877Z", "completed_at": "2025-03-25T13:39:12.827888Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03459525108337402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_pokemon", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_pokemon\n  Description: Core fact table for Pok\u00e9mon data with comprehensive attributes and classifications\n  \n  Notes:\n  - Contains essential information about each Pok\u00e9mon species\n  - Links to all related dimension tables (types, abilities, moves, etc.)\n  - Provides both source fields and derived/calculated metrics\n  - Includes generation, evolutionary, and classification data\n  - Serves as the central entity for all Pok\u00e9mon analysis\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->>'type' AS type_json,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'slot')::int AS type_slot\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\nstats_extract AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n        ) AS stat_data\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_stats AS (\n    SELECT\n        pokemon_id,\n        SUM(CASE WHEN (stat_data->'stat'->>'name') = 'hp' \n                 THEN (stat_data->>'base_stat')::integer ELSE 0 END) AS base_stat_hp,\n        SUM((stat_data->>'base_stat')::integer) AS total_base_stats\n    FROM stats_extract\n    GROUP BY pokemon_id\n),\n\nspecies_data AS (\n    SELECT\n        pokemon_id,\n        jsonb_extract_path_text(species, 'url') AS species_url,\n        -- Extract generation number from the URL using LATERAL join\n        (SELECT gen.gen_num::integer\n         FROM LATERAL (\n             SELECT (regexp_matches(jsonb_extract_path_text(species, 'url'), '/generation/([0-9]+)/'))[1] AS gen_num\n             WHERE jsonb_extract_path_text(species, 'url') ~ '/generation/([0-9]+)/'\n         ) gen) AS generation_number,\n        COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false) AS is_legendary,\n        COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false) AS is_mythical\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\nbase_pokemon AS (\n    SELECT\n        -- Core identifiers\n        p.pokemon_id,\n        p.pokemon_name,\n        \n        -- Get primary and secondary types from the slots\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n         \n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n         \n        sp.generation_number,\n        sp.is_legendary,\n        sp.is_mythical,\n        \n        -- Physical attributes\n        p.height / 10.0 AS height_dm,\n        p.weight / 10.0 AS weight_kg,\n        p.base_experience AS base_xp,\n        \n        -- Base stats\n        ps.base_stat_hp,\n        ps.total_base_stats\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    LEFT JOIN pokemon_stats ps ON p.pokemon_id = ps.pokemon_id\n    LEFT JOIN species_data sp ON p.pokemon_id = sp.pokemon_id\n    WHERE p.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key and identifiers\n    md5(cast(coalesce(cast(bp.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_key,\n    bp.pokemon_id,\n    \n    -- Core data\n    bp.pokemon_name,\n    bp.primary_type,\n    bp.secondary_type,\n    \n    -- Physical attributes\n    bp.height_dm AS height_m,\n    bp.weight_kg,\n    bp.base_xp,\n    \n    -- Stats\n    bp.base_stat_hp,\n    bp.total_base_stats,\n    \n    -- Type keys\n    md5(cast(coalesce(cast(bp.primary_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS primary_type_key,\n    md5(cast(coalesce(cast(bp.secondary_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS secondary_type_key,\n    \n    -- Additional attributes\n    bp.generation_number,\n    bp.is_legendary,\n    bp.is_mythical,\n    \n    -- Meta\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM base_pokemon bp\nWHERE bp.pokemon_id IS NOT NULL\nORDER BY bp.total_base_stats DESC", "relation_name": "\"nerd_facts\".\"public\".\"fact_pokemon\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.811964Z", "completed_at": "2025-03-25T13:39:12.826213Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.828539Z", "completed_at": "2025-03-25T13:39:12.828548Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03248476982116699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_pokemon_matchups", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_pokemon_matchups\n  Description: Fact table for Pok\u00e9mon type matchup effectiveness\n  \n  Notes:\n  - Contains comprehensive type matchup data for all 18 Pok\u00e9mon types\n  - Calculates effectiveness multipliers (0x, 0.5x, 1x, 2x)\n  - Provides context on how many Pok\u00e9mon are affected by each matchup\n  - Enables detailed type advantage analysis\n*/\n\nWITH pokemon_types AS (\n    SELECT DISTINCT\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'type')::jsonb->>'name' AS type_name\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE types IS NOT NULL\n),\n\n-- Manually create type effectiveness data\n-- This would normally come from a reference table\ntype_matchups AS (\n    SELECT * FROM (VALUES\n        ('normal', 'normal', 1.0),\n        ('normal', 'fighting', 2.0),\n        ('normal', 'flying', 1.0),\n        ('normal', 'poison', 1.0),\n        ('normal', 'ground', 1.0),\n        ('normal', 'rock', 1.0),\n        ('normal', 'bug', 1.0),\n        ('normal', 'ghost', 0.0),\n        ('normal', 'steel', 1.0),\n        ('normal', 'fire', 1.0),\n        ('normal', 'water', 1.0),\n        ('normal', 'grass', 1.0),\n        ('normal', 'electric', 1.0),\n        ('normal', 'psychic', 1.0),\n        ('normal', 'ice', 1.0),\n        ('normal', 'dragon', 1.0),\n        ('normal', 'dark', 1.0),\n        ('normal', 'fairy', 1.0),\n        \n        ('fire', 'normal', 1.0),\n        ('fire', 'fighting', 1.0),\n        ('fire', 'flying', 1.0),\n        ('fire', 'poison', 1.0),\n        ('fire', 'ground', 1.0),\n        ('fire', 'rock', 0.5),\n        ('fire', 'bug', 2.0),\n        ('fire', 'ghost', 1.0),\n        ('fire', 'steel', 2.0),\n        ('fire', 'fire', 0.5),\n        ('fire', 'water', 0.5),\n        ('fire', 'grass', 2.0),\n        ('fire', 'electric', 1.0),\n        ('fire', 'psychic', 1.0),\n        ('fire', 'ice', 2.0),\n        ('fire', 'dragon', 0.5),\n        ('fire', 'dark', 1.0),\n        ('fire', 'fairy', 1.0),\n        \n        ('water', 'normal', 1.0),\n        ('water', 'fighting', 1.0),\n        ('water', 'flying', 1.0),\n        ('water', 'poison', 1.0),\n        ('water', 'ground', 2.0),\n        ('water', 'rock', 2.0),\n        ('water', 'bug', 1.0),\n        ('water', 'ghost', 1.0),\n        ('water', 'steel', 1.0),\n        ('water', 'fire', 2.0),\n        ('water', 'water', 0.5),\n        ('water', 'grass', 0.5),\n        ('water', 'electric', 1.0),\n        ('water', 'psychic', 1.0),\n        ('water', 'ice', 1.0),\n        ('water', 'dragon', 0.5),\n        ('water', 'dark', 1.0),\n        ('water', 'fairy', 1.0)\n        \n        -- Additional type matchups would be added here for a complete table\n    ) AS t(attacker_type, defender_type, effectiveness)\n),\n\n-- Count the number of Pok\u00e9mon per primary type\nprimary_type_counts AS (\n    SELECT\n        type_name,\n        COUNT(*) AS pokemon_count\n    FROM (\n        SELECT\n            p.pokemon_id,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(p.types::text, 'null')::jsonb, '[]'::jsonb)\n            )->'type')::jsonb->>'name' AS type_name,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(p.types::text, 'null')::jsonb, '[]'::jsonb)\n            )->>'slot')::int AS type_slot\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    ) t\n    WHERE type_slot = 1\n    GROUP BY type_name\n)\n\nSELECT\n    -- Generate surrogate key for the matchup\n    md5(cast(coalesce(cast(tm.attacker_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tm.defender_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS matchup_key,\n    \n    -- Types involved in matchup\n    tm.attacker_type,\n    tm.defender_type,\n    \n    -- Effectiveness of the attack\n    tm.effectiveness,\n    \n    -- Categorize effectiveness\n    CASE\n        WHEN tm.effectiveness = 0.0 THEN 'No effect'\n        WHEN tm.effectiveness = 0.5 THEN 'Not very effective'\n        WHEN tm.effectiveness = 1.0 THEN 'Normal effectiveness'\n        WHEN tm.effectiveness = 2.0 THEN 'Super effective'\n        ELSE 'Unknown'\n    END AS effectiveness_category,\n    \n    -- Strategic importance based on how common the type is\n    CASE\n        WHEN pc.pokemon_count > 60 THEN 'High'\n        WHEN pc.pokemon_count > 30 THEN 'Medium'\n        ELSE 'Low'\n    END AS strategic_importance,\n    \n    -- Additional derived fields\n    pc.pokemon_count AS defending_pokemon_count,\n    \n    -- Convert to percentage of total Pok\u00e9mon\n    ROUND(pc.pokemon_count * 100.0 / (SELECT COUNT(*) FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"), 1) AS pct_pokemon_with_type,\n    \n    -- Date tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM type_matchups tm\nJOIN pokemon_types pt ON tm.defender_type = pt.type_name\nLEFT JOIN primary_type_counts pc ON tm.defender_type = pc.type_name\nORDER BY tm.attacker_type, tm.defender_type", "relation_name": "\"nerd_facts\".\"public\".\"fact_pokemon_matchups\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.820405Z", "completed_at": "2025-03-25T13:39:12.829385Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.844593Z", "completed_at": "2025-03-25T13:39:12.844607Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025429248809814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_pokemon_stats", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_pokemon_stats\n  Description: Fact table for Pok\u00e9mon statistics and battle metrics\n  \n  Notes:\n  - Contains comprehensive stat analysis for all Pok\u00e9mon\n  - Calculates evolutionary stage and progression metrics\n  - Includes battle effectiveness calculations and classifications\n  - Provides stat distribution analysis and percentile rankings\n  - Links to dimension tables for Pok\u00e9mon and types\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        pokemon_id,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'type')::jsonb->>'name' AS type_name,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->>'slot')::int AS type_slot\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\nstats_extract AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n        ) AS stat_data\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_stats AS (\n    SELECT\n        pokemon_id,\n        stat_name,\n        base_stat_value\n    FROM (\n        SELECT\n            p.pokemon_id,\n            jsonb_extract_path_text(s.stat_json, 'stat', 'name') AS stat_name,\n            jsonb_extract_path_text(s.stat_json, 'base_stat')::integer AS base_stat_value\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n        CROSS JOIN LATERAL (\n            SELECT jsonb_array_elements(\n                COALESCE(NULLIF(p.stats::text, 'null')::jsonb, '[]'::jsonb)\n            ) AS stat_json\n        ) s\n    ) extracted_stats\n),\n\nstats_aggregated AS (\n    SELECT\n        pokemon_id,\n        MAX(CASE WHEN stat_name = 'hp' THEN base_stat_value ELSE 0 END) AS base_hp,\n        MAX(CASE WHEN stat_name = 'attack' THEN base_stat_value ELSE 0 END) AS base_attack,\n        MAX(CASE WHEN stat_name = 'defense' THEN base_stat_value ELSE 0 END) AS base_defense,\n        MAX(CASE WHEN stat_name = 'special-attack' THEN base_stat_value ELSE 0 END) AS base_special_attack,\n        MAX(CASE WHEN stat_name = 'special-defense' THEN base_stat_value ELSE 0 END) AS base_special_defense,\n        MAX(CASE WHEN stat_name = 'speed' THEN base_stat_value ELSE 0 END) AS base_speed,\n        SUM(base_stat_value) AS total_base_stats\n    FROM pokemon_stats\n    GROUP BY pokemon_id\n),\n\nspecies_data AS (\n    SELECT\n        pokemon_id,\n        jsonb_extract_path_text(species, 'url') AS species_url,\n        COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false) AS is_legendary,\n        COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false) AS is_mythical\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_base AS (\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        \n        -- Get primary and secondary types from the slots\n        (SELECT pt.type_name\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n         \n        (SELECT pt.type_name\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        \n        ps.base_hp,\n        ps.base_attack,\n        ps.base_defense,\n        ps.base_special_attack,\n        ps.base_special_defense,\n        ps.base_speed,\n        ps.total_base_stats,\n        sp.is_legendary,\n        sp.is_mythical\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    LEFT JOIN stats_aggregated ps ON p.pokemon_id = ps.pokemon_id\n    LEFT JOIN species_data sp ON p.pokemon_id = sp.pokemon_id\n    WHERE p.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key for this fact table\n    md5(cast(coalesce(cast(pb.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_stats_key,\n    \n    -- Foreign keys\n    pb.pokemon_id,\n    pb.pokemon_name,\n    pb.primary_type,\n    pb.secondary_type,\n    \n    -- Base stats\n    pb.base_hp,\n    pb.base_attack,\n    pb.base_defense,\n    pb.base_special_attack,\n    pb.base_special_defense,\n    pb.base_speed,\n    pb.total_base_stats,\n    \n    -- Calculated stat metrics\n    ROUND((pb.base_hp + pb.base_defense + pb.base_special_defense) / 3.0, 1) AS defensive_average,\n    ROUND((pb.base_attack + pb.base_special_attack + pb.base_speed) / 3.0, 1) AS offensive_average,\n    \n    -- Stat classification\n    CASE\n        WHEN pb.total_base_stats >= 580 THEN 'Elite'\n        WHEN pb.total_base_stats >= 500 THEN 'Strong'\n        WHEN pb.total_base_stats >= 420 THEN 'Average'\n        ELSE 'Basic'\n    END AS stat_class,\n    \n    -- Battle focus based on stats\n    CASE\n        WHEN (pb.base_attack + pb.base_special_attack) > \n             (pb.base_defense + pb.base_special_defense) + 20 THEN 'Offensive'\n        WHEN (pb.base_defense + pb.base_special_defense) > \n             (pb.base_attack + pb.base_special_attack) + 20 THEN 'Defensive'\n        ELSE 'Balanced'\n    END AS battle_focus,\n    \n    -- Attack preference\n    CASE\n        WHEN pb.base_attack > pb.base_special_attack + 20 THEN 'Physical'\n        WHEN pb.base_special_attack > pb.base_attack + 20 THEN 'Special'\n        ELSE 'Mixed'\n    END AS attack_preference,\n    \n    -- Special status\n    pb.is_legendary,\n    pb.is_mythical,\n    \n    -- Meta field for tracking changes\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pokemon_base pb\nWHERE pb.pokemon_id IS NOT NULL\nORDER BY pb.total_base_stats DESC", "relation_name": "\"nerd_facts\".\"public\".\"fact_pokemon_stats\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.832969Z", "completed_at": "2025-03-25T13:39:12.845391Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.852190Z", "completed_at": "2025-03-25T13:39:12.852204Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020109891891479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n\nwhere not(weight > 0 OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.845963Z", "completed_at": "2025-03-25T13:39:12.853065Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.855090Z", "completed_at": "2025-03-25T13:39:12.855098Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023862123489379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_id.54d6f632e9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pokemon_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\nwhere pokemon_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.839636Z", "completed_at": "2025-03-25T13:39:12.851699Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.854012Z", "completed_at": "2025-03-25T13:39:12.854022Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022334575653076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n\nwhere not(height > 0 OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.863620Z", "completed_at": "2025-03-25T13:39:12.873013Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.873509Z", "completed_at": "2025-03-25T13:39:12.873523Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020212411880493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pokemon_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\nwhere pokemon_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.874741Z", "completed_at": "2025-03-25T13:39:12.881014Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.881464Z", "completed_at": "2025-03-25T13:39:12.881473Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019722938537597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_pokemon_id.0aae465ab6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pokemon_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\nwhere pokemon_id is not null\ngroup by pokemon_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.868156Z", "completed_at": "2025-03-25T13:39:12.879103Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.882437Z", "completed_at": "2025-03-25T13:39:12.882445Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01979804039001465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_films", "compiled": true, "compiled_code": "\n\nwith films as (\n    select\n        film_id,\n        episode_id,\n        title,        \n        opening_crawl,\n        director,\n        producer,\n\n        -- Entity counts with error handling and type casting to JSONB\n        COALESCE(jsonb_array_length(characters::jsonb), 0) AS character_count,\n        COALESCE(jsonb_array_length(planets::jsonb), 0) AS planet_count,\n        COALESCE(jsonb_array_length(starships::jsonb), 0) AS starship_count,\n        COALESCE(jsonb_array_length(vehicles::jsonb), 0) AS vehicle_count,\n        COALESCE(jsonb_array_length(species::jsonb), 0) AS species_count, \n\n        -- Derived film classification (use the casted episode_id field)\n        CASE\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Original Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n        ELSE 'Anthology'\n        END AS trilogy,       \n\n        -- Era classification (use the casted episode_id field)\n        CASE\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Republic Era'\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Imperial Era'\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'New Republic Era'\n            ELSE 'Various'\n        END AS era,\n\n        release_date,\n        created_at,\n        edited_at,\n        dbt_loaded_at,\n        url\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n)\n\nselect * from films", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.857006Z", "completed_at": "2025-03-25T13:39:12.872361Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.879654Z", "completed_at": "2025-03-25T13:39:12.879666Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02345108985900879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not episode_id >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not episode_id <= 9\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.883629Z", "completed_at": "2025-03-25T13:39:12.899067Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.905542Z", "completed_at": "2025-03-25T13:39:12.905558Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025290966033935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect episode_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere episode_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.890643Z", "completed_at": "2025-03-25T13:39:12.899686Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.907104Z", "completed_at": "2025-03-25T13:39:12.907115Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01809859275817871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_film_id.a339ca4379", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect film_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere film_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.894734Z", "completed_at": "2025-03-25T13:39:12.906763Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.908561Z", "completed_at": "2025-03-25T13:39:12.908571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02051258087158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect film_title\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere film_title is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.900216Z", "completed_at": "2025-03-25T13:39:12.909788Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.910146Z", "completed_at": "2025-03-25T13:39:12.910154Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020044803619384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect release_date\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere release_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.912914Z", "completed_at": "2025-03-25T13:39:12.918815Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.924418Z", "completed_at": "2025-03-25T13:39:12.924431Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01338958740234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_characters", "compiled": true, "compiled_code": "/*\n  Model: dim_characters (Ultra-simplified)\n  Description: Minimal character dimension table\n*/\n\n-- Star Wars characters with hardcoded surrogate key inputs\nSELECT\n    md5(cast(coalesce(cast('star_wars' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(people_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    'star_wars' AS universe,\n    people_id::TEXT AS character_source_id,  -- Cast to TEXT\n    name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_swapi_people\"\n\nUNION ALL\n\n-- Pokemon with hardcoded surrogate key inputs\nSELECT\n    md5(cast(coalesce(cast('pokemon' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    'pokemon' AS universe,\n    pokemon_id::TEXT AS character_source_id,  -- Cast to TEXT\n    pokemon_name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n\nUNION ALL\n\n-- Netrunner with hardcoded surrogate key inputs\nSELECT\n    md5(cast(coalesce(cast('netrunner' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    'netrunner' AS universe,\n    code AS character_source_id,  -- Already TEXT\n    card_name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nWHERE type_code = 'identity'", "relation_name": "\"nerd_facts\".\"public\".\"dim_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.920125Z", "completed_at": "2025-03-25T13:39:12.933063Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.938463Z", "completed_at": "2025-03-25T13:39:12.938480Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030446767807006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_films_film_id.ea5ba181e6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    film_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere film_id is not null\ngroup by film_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.925143Z", "completed_at": "2025-03-25T13:39:12.939123Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.940871Z", "completed_at": "2025-03-25T13:39:12.940882Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028848886489868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_power_ratings", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_power_ratings (Ultra-Simplified)\n  Description: Basic power metrics across universes with consistent types\n*/\n\nWITH sw_power AS (\n    SELECT\n        md5(cast(coalesce(cast('star_wars' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.people_id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'star_wars' AS universe,\n        p.people_id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'false' AS has_special_abilities  -- String literal instead of boolean expression\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_people\" p\n),\n\npokemon_power AS (\n    SELECT\n        md5(cast(coalesce(cast('pokemon' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.pokemon_id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'pokemon' AS universe,\n        p.pokemon_id::TEXT AS character_source_id,\n        p.pokemon_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'true' AS has_special_abilities  -- String literal instead of boolean\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n),\n\nnetrunner_power AS (\n    SELECT\n        md5(cast(coalesce(cast('netrunner' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(c.card_id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'netrunner' AS universe,\n        c.code AS character_source_id,\n        c.card_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE \n            WHEN c.uniqueness IS NULL THEN 'false'\n            -- Compare as text instead of using as boolean\n            WHEN c.uniqueness = 'true' OR c.uniqueness = 't' OR c.uniqueness = '1' THEN 'true' \n            ELSE 'false' \n        END AS has_special_abilities\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    WHERE c.type_code = 'identity'  -- Only include identity cards\n)\n\n-- Simply combine all data with minimal processing\nSELECT\n    character_key,\n    universe,\n    character_source_id,\n    character_name,\n    base_power,\n    mobility,\n    battle_experience,\n    has_special_abilities,\n    \n    -- Simple power score (all equal for now)\n    3 AS normalized_power_score,\n    \n    -- Simplified tier (all equal)\n    'C-Tier' AS power_tier,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_power\n    UNION ALL\n    SELECT * FROM pokemon_power\n    UNION ALL\n    SELECT * FROM netrunner_power\n) AS combined_power", "relation_name": "\"nerd_facts\".\"public\".\"fact_power_ratings\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.933628Z", "completed_at": "2025-03-25T13:39:12.940470Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.947947Z", "completed_at": "2025-03-25T13:39:12.947961Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.028432130813598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_sw_characters", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_sw_characters\n  Description: Fact table for Star Wars characters with attributes and metrics\n*/\n\n-- Get just the base data first\nWITH characters AS (\n    SELECT\n        people_id AS character_id,\n        name,\n        height AS height_cm,\n        mass AS mass_kg,\n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld AS homeworld_id,\n        -- These fields don't exist in staging, we'll need to handle them differently\n        NULL AS species_id,\n        NULL AS film_appearances,\n        NULL AS film_names,\n        NULL AS vehicle_count,\n        NULL AS vehicle_names,\n        NULL AS starship_count,\n        NULL AS starship_names,\n        FALSE AS force_sensitive,\n        'Unknown' AS character_era,\n        url,\n        created_at AS fetch_timestamp,\n        edited_at AS processed_timestamp\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_people\"\n    WHERE people_id IS NOT NULL\n)\n\n-- Simplified final output\nSELECT\n    md5(cast(coalesce(cast(character_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    character_id,\n    name AS character_name,\n    homeworld_id,\n    species_id,\n    \n    -- Physical attributes\n    height_cm,\n    mass_kg,\n    hair_color,\n    eye_color,\n    skin_color,\n    birth_year,\n    gender,\n    \n    -- Film and vehicle appearances\n    film_appearances,\n    vehicle_count,\n    starship_count,\n    film_names AS film_list,\n    vehicle_names AS vehicle_list,\n    starship_names AS starship_list,\n    \n    -- Force user information\n    force_sensitive,\n    \n    -- Era classification\n    character_era,\n    \n    -- Affiliation (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'leia organa', 'han solo') THEN 'Rebel Alliance'\n        WHEN LOWER(name) IN ('darth vader', 'emperor palpatine') THEN 'Empire'\n        ELSE 'Other'\n    END AS affiliation,\n    \n    -- Character tier (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'leia organa') THEN 'S'\n        WHEN COALESCE(film_appearances::integer, 0) > 2 THEN 'A'\n        WHEN COALESCE(film_appearances::integer, 0) > 1 THEN 'B' \n        ELSE 'C'\n    END AS character_tier,\n    \n    -- Source tracking\n    url,\n    fetch_timestamp,\n    processed_timestamp,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM characters\nORDER BY character_id", "relation_name": "\"nerd_facts\".\"public\".\"fact_sw_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.942032Z", "completed_at": "2025-03-25T13:39:12.949822Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.954296Z", "completed_at": "2025-03-25T13:39:12.954309Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01648402214050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_films_characters", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_characters\n  Description: Creates a relationship table between films and characters\n  Source: Using films.characters array\n*/\n\n-- Get relationships from films perspective (the only available direction)\nwith films_to_characters as (\n    select\n        film_id,\n        jsonb_array_elements_text(characters::jsonb)::integer as people_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where characters is not null and jsonb_array_length(characters::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fc.film_id,\n    fc.people_id,\n    f.title as film_title,\n    p.name as character_name,\n    f.release_date,\n    p.gender,\n    p.birth_year,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(fc.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fc.people_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_character_key\nfrom \n    films_to_characters fc\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on fc.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_people\" p on fc.people_id = p.people_id\norder by\n    f.release_date, p.name", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.960499Z", "completed_at": "2025-03-25T13:39:12.965480Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.971519Z", "completed_at": "2025-03-25T13:39:12.971532Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021037817001342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\n\nwhere not(height >= 0 OR IS NULL)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.955801Z", "completed_at": "2025-03-25T13:39:12.965976Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.972282Z", "completed_at": "2025-03-25T13:39:12.972291Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017311573028564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.951081Z", "completed_at": "2025-03-25T13:39:12.967218Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.972906Z", "completed_at": "2025-03-25T13:39:12.972914Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03145742416381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_people", "compiled": true, "compiled_code": "\n\nwith people as (\n    select        \n        people_id,        \n        name,        \n        LOWER(COALESCE(hair_color, 'unknown')) AS hair_color,\n        LOWER(COALESCE(skin_color, 'unknown')) AS skin_color,\n        LOWER(COALESCE(eye_color, 'unknown')) AS eye_color,\n        birth_year,\n        LOWER(COALESCE(gender, 'unknown')) AS gender,\n        homeworld as homeworld_id,                \n        height,\n        mass,\n        -- Force detection\n        CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'obi-wan kenobi', 'yoda', \n                           'emperor palpatine', 'count dooku', 'qui-gon jinn', 'mace windu',\n                           'rey', 'kylo ren', 'anakin skywalker', 'leia organa', \n                           'ahsoka tano', 'darth maul')\n        THEN TRUE\n        ELSE FALSE\n        END AS force_sensitive,\n        created_at,\n        edited_at,  \n        dbt_loaded_at,\n        url\n    from \"nerd_facts\".\"public\".\"stg_swapi_people\"\n)\n\nselect * from people", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_people\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.967567Z", "completed_at": "2025-03-25T13:39:12.973713Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.982174Z", "completed_at": "2025-03-25T13:39:12.982186Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015855073928833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_people_people_id.9097a6c93c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect people_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\nwhere people_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.976475Z", "completed_at": "2025-03-25T13:39:12.983539Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:12.989517Z", "completed_at": "2025-03-25T13:39:12.989530Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013808965682983398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_people_people_id.49907a6ad0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    people_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\nwhere people_id is not null\ngroup by people_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.983898Z", "completed_at": "2025-03-25T13:39:12.995546Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.000749Z", "completed_at": "2025-03-25T13:39:13.000762Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025464773178100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_films_planets", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_planets\n  Description: Creates a relationship table between films and planets\n  Source: Using films.planets array\n*/\n\n-- Get relationships from films perspective (only direction available)\nwith films_to_planets as (\n    select\n        film_id,\n        jsonb_array_elements_text(planets::jsonb)::integer as planet_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where planets is not null and jsonb_array_length(planets::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fp.film_id,\n    fp.planet_id,\n    f.title as film_title,\n    p.name as planet_name,\n    f.release_date,\n    p.climate,\n    p.terrain,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(fp.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fp.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_planet_key\nfrom \n    films_to_planets fp\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on fp.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_planets\" p on fp.planet_id = p.planet_id\norder by\n    f.release_date, p.name", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_planets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.996057Z", "completed_at": "2025-03-25T13:39:13.001560Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.003531Z", "completed_at": "2025-03-25T13:39:13.003540Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013350963592529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_planets", "compiled": true, "compiled_code": "\n\nwith planets as (    \n    select\n    planet_id,\n    planet_name,\n    name,        \n    climate,\n    gravity,\n    terrain,    \n    surface_water,\n    rotation_period,\n    orbital_period,\n    diameter,\n    population,\n    -- Terrain classification flags\n    terrain LIKE '%temperate%' AS is_temperate,\n    terrain LIKE '%forest%' OR terrain LIKE '%jungle%' OR terrain LIKE '%grassland%' AS has_vegetation,\n    terrain LIKE '%ocean%' OR terrain LIKE '%lake%' OR surface_water = '100' AS is_water_world,\n    terrain LIKE '%desert%' AS is_desert_world,        \n    created_at,\n    updated_at,    \n    dbt_loaded_at,\n    url  \n    from \"nerd_facts\".\"public\".\"stg_swapi_planets\"\n)\n\nselect * from planets", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_planets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:12.990730Z", "completed_at": "2025-03-25T13:39:13.000342Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.002306Z", "completed_at": "2025-03-25T13:39:13.002316Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01953577995300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_locations", "compiled": true, "compiled_code": "/*\n  Model: dim_locations (Simplified)\n  Description: Basic location dimension table with consistent TEXT types\n*/\n\nWITH sw_planets_minimal AS (\n    SELECT\n        'sw_' || planet_id AS source_id,\n        'star_wars' AS universe,\n        planet_name AS location_name,\n        'Planet' AS location_type,\n        diameter::TEXT,  -- Cast to TEXT\n        rotation_period::TEXT,  -- Cast to TEXT\n        orbital_period::TEXT,  -- Cast to TEXT\n        gravity,\n        population::TEXT,  -- Cast to TEXT\n        climate,\n        terrain,\n        surface_water::TEXT  -- Cast to TEXT\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_planets\"\n),\n\npokemon_regions_minimal AS (\n    -- Create hardcoded Pok\u00e9mon regions since staging data doesn't have them\n    SELECT * FROM (VALUES\n        ('pkm_1', 'pokemon', 'Kanto', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '10000000', 'varied', 'varied', '30'),\n        ('pkm_2', 'pokemon', 'Johto', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '8000000', 'varied', 'varied', '40'),\n        ('pkm_3', 'pokemon', 'Hoenn', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '7000000', 'tropical', 'mountainous', '60'),\n        ('pkm_4', 'pokemon', 'Sinnoh', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '5000000', 'temperate', 'varied', '35')\n    ) AS v(source_id, universe, location_name, location_type, diameter, rotation_period, \n           orbital_period, gravity, population, climate, terrain, surface_water)\n),\n\nnetrunner_locations_minimal AS (\n    -- Create minimal Netrunner locations with text values\n    SELECT * FROM (VALUES\n        ('nr_1001', 'netrunner', 'New Angeles', 'Megacity', NULL::TEXT, NULL::TEXT, NULL::TEXT, 'high', '500000000', 'temperate', 'urban', '10'),\n        ('nr_1002', 'netrunner', 'The Moon', 'Colony', '3474', '27.3', '27.3', 'low', '5000000', 'artificial', 'lunar', '0')\n    ) AS v(source_id, universe, location_name, location_type, diameter, rotation_period, \n           orbital_period, gravity, population, climate, terrain, surface_water)\n)\n\n-- Rest of query remains the same\nSELECT\n    md5(cast(coalesce(cast(universe as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS location_key,\n    source_id,\n    universe,\n    location_name,\n    location_type,\n    diameter,\n    rotation_period,\n    orbital_period,\n    gravity,\n    population,\n    climate,\n    terrain,\n    surface_water,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_planets_minimal\n    UNION ALL\n    SELECT * FROM pokemon_regions_minimal\n    UNION ALL\n    SELECT * FROM netrunner_locations_minimal\n) AS all_locations\nORDER BY universe, location_name", "relation_name": "\"nerd_facts\".\"public\".\"dim_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.005562Z", "completed_at": "2025-03-25T13:39:13.017645Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.022681Z", "completed_at": "2025-03-25T13:39:13.022695Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017922639846801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_planets_planet_id.0392ef05b9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect planet_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_planets\"\nwhere planet_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.010813Z", "completed_at": "2025-03-25T13:39:13.023344Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.030780Z", "completed_at": "2025-03-25T13:39:13.030792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03126931190490723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_planets_characters", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_planets_characters\n  Description: Creates a relationship table between planets and characters\n  Source: Using people.homeworld references\n*/\n\n-- Characters with homeworlds (direct homeworld reference)\nwith character_homeworlds as (\n    select\n        people_id,\n        homeworld::integer as planet_id,\n        'Homeworld' as relationship_type\n    from \"nerd_facts\".\"public\".\"stg_swapi_people\"\n    where homeworld is not null\n)\n\n-- Final output with useful metadata\nselect \n    ch.people_id,\n    ch.planet_id,\n    ch.relationship_type,\n    p.name as character_name,\n    pl.name as planet_name,\n    p.gender,\n    pl.climate,\n    pl.terrain,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ch.people_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ch.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as character_planet_key\nfrom \n    character_homeworlds ch\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_people\" p on ch.people_id = p.people_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_planets\" pl on ch.planet_id = pl.planet_id\norder by\n    pl.name, p.name", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_planets_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.018036Z", "completed_at": "2025-03-25T13:39:13.029477Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.031421Z", "completed_at": "2025-03-25T13:39:13.031430Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02200007438659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_planets\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.023864Z", "completed_at": "2025-03-25T13:39:13.030064Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.032109Z", "completed_at": "2025-03-25T13:39:13.032118Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015300989151000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_swapi_planets\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not surface_water >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not surface_water <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.032725Z", "completed_at": "2025-03-25T13:39:13.038847Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.045904Z", "completed_at": "2025-03-25T13:39:13.045916Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017061948776245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_planets_planet_id.615d4daee0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    planet_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_planets\"\nwhere planet_id is not null\ngroup by planet_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.040418Z", "completed_at": "2025-03-25T13:39:13.046741Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.052623Z", "completed_at": "2025-03-25T13:39:13.052635Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014539718627929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_films_species", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_species\n  Description: Creates a relationship table between films and species\n  Source: Using films.species array\n*/\n\n-- Get relationships from films perspective (only direction available)\nwith films_to_species as (\n    select\n        film_id,\n        jsonb_array_elements_text(species::jsonb)::integer as species_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where species is not null and jsonb_array_length(species::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fs.film_id,\n    fs.species_id,\n    f.title as film_title,\n    -- Using different field names based on your stg_swapi_species structure\n    s.species_name, -- Changed from s.name\n    f.release_date,\n    s.classification,\n    s.language,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(fs.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fs.species_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_species_key\nfrom \n    films_to_species fs\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on fs.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_species\" s on fs.species_id = s.species_id\norder by\n    f.release_date, s.species_name -- Changed sort order to use species_name", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_species\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.047120Z", "completed_at": "2025-03-25T13:39:13.058868Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.064980Z", "completed_at": "2025-03-25T13:39:13.064993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025878429412841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_characters_species", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_characters_species\n  Description: Creates a comprehensive relationship table between characters and species\n  Source: Combines character-to-species and species-to-people relationships\n*/\n\n-- Hardcoded character-species associations since staging model doesn't have species_ids\nwith character_species as (\n    select * from (values\n        (1, 1),  -- Luke Skywalker - Human\n        (2, 2),  -- C-3PO - Droid\n        (3, 2),  -- R2-D2 - Droid\n        (4, 1)   -- Darth Vader - Human\n    ) as v(character_id, species_id)\n),\n\n-- Species with characters (people of that species)\nspecies_characters as (\n    select\n        species_id,\n        jsonb_array_elements_text(people::jsonb)::integer as character_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_species\"\n    where people is not null and jsonb_array_length(people::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select character_id, species_id from character_species\n    union\n    select character_id, species_id from species_characters\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct character_id, species_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.character_id,\n    ur.species_id,\n    p.name as character_name,\n    s.species_name,\n    p.gender,\n    s.classification,\n    s.language,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ur.character_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ur.species_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as character_species_key\nfrom \n    unique_relationships ur\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_people\" p on ur.character_id = p.people_id  -- Changed to people_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_species\" s on ur.species_id = s.species_id\norder by\n    s.species_name, p.name", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_characters_species\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.053381Z", "completed_at": "2025-03-25T13:39:13.060543Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.067129Z", "completed_at": "2025-03-25T13:39:13.067140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02181243896484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_species", "compiled": true, "compiled_code": "\n\nwith species as (        \n    select\n    species_id,\n    species_name,\n    classification,\n    designation,        \n    skin_colors,\n    hair_colors,\n    eye_colors,                \n    language,    \n    average_lifespan,\n    average_height,\n    people,\n    homeworld,\n    created_at,\n    edited_at,\n    dbt_loaded_at,\n    url\n    from \"nerd_facts\".\"public\".\"stg_swapi_species\"\n)\n\nselect * from species", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_species\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.060852Z", "completed_at": "2025-03-25T13:39:13.066724Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.072063Z", "completed_at": "2025-03-25T13:39:13.072075Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014527082443237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_species\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.067748Z", "completed_at": "2025-03-25T13:39:13.077356Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.084621Z", "completed_at": "2025-03-25T13:39:13.084634Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02493429183959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_species_species_id.037c430261", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect species_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_species\"\nwhere species_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.073471Z", "completed_at": "2025-03-25T13:39:13.085253Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.086967Z", "completed_at": "2025-03-25T13:39:13.086978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02097010612487793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_species_species_id.eef5924130", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    species_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_species\"\nwhere species_id is not null\ngroup by species_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.078951Z", "completed_at": "2025-03-25T13:39:13.086615Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.093198Z", "completed_at": "2025-03-25T13:39:13.093209Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015063047409057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_films_starships", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_starships\n  Description: Creates a comprehensive many-to-many relationship table between films and starships\n  Source: Combines data from both films.starships and starships.films arrays for completeness\n*/\n\n-- Get relationships from films perspective\nwith films_to_starships as (\n    select\n        film_id,\n        jsonb_array_elements_text(starships::jsonb)::integer as starship_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where starships is not null and jsonb_array_length(starships::jsonb) > 0\n),\n\n-- Get relationships from starships perspective\nstarships_to_films as (\n    select\n        starship_id,\n        jsonb_array_elements_text(films::jsonb)::integer as film_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_starships\"\n    where films is not null and jsonb_array_length(films::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select film_id, starship_id from films_to_starships\n    union\n    select film_id, starship_id from starships_to_films\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct film_id, starship_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.film_id,\n    ur.starship_id,\n    f.title as film_title,\n    s.starship_name,\n    f.release_date,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ur.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ur.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_starship_key\nfrom \n    unique_relationships ur\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on ur.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_starships\" s on ur.starship_id = s.starship_id\norder by\n    f.release_date, s.starship_name", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_starships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.087642Z", "completed_at": "2025-03-25T13:39:13.094505Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.094902Z", "completed_at": "2025-03-25T13:39:13.094911Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011219024658203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_starships", "compiled": true, "compiled_code": "\n\nwith starships as (        \n    select\n        \n        starship_id,\n        starship_name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,        \n        cost_in_credits,\n        length,\n        max_atmosphering_speed,\n        cargo_capacity,        \n        passengers,\n        hyperdrive_rating,\n        MGLT,\n\n         -- Entity counts \n        CASE WHEN pilots IS NOT NULL THEN jsonb_array_length(pilots::jsonb) ELSE 0 END AS pilot_count,\n        CASE WHEN films IS NOT NULL THEN jsonb_array_length(films::jsonb) ELSE 0 END AS film_appearances,\n\n        -- Ship classification\n        CASE\n            WHEN lower(starship_class) IN ('corvette', 'frigate', 'star destroyer', 'dreadnought')\n                OR lower(starship_name) LIKE '%star destroyer%' THEN 'Military'\n            WHEN lower(starship_class) IN ('transport', 'freighter', 'yacht') \n                OR lower(starship_name) LIKE '%transport%' THEN 'Commercial'\n            WHEN lower(starship_class) IN ('starfighter', 'bomber', 'assault ship')\n                OR lower(starship_name) LIKE '%fighter%' THEN 'Starfighter'\n            ELSE 'Other'\n        END AS ship_purpose,\n\n        -- Notable ship flag\n        CASE\n            WHEN starship_name IN ('Millennium Falcon', 'Death Star', 'Star Destroyer', \n                        'X-wing', 'TIE Advanced x1', 'Executor', 'Slave 1') \n            THEN TRUE\n            ELSE FALSE\n        END AS is_notable_ship,\n\n        created_at,\n        edited_at,\n        dbt_loaded_at,\n        url\n    from \"nerd_facts\".\"public\".\"stg_swapi_starships\"\n)\n\nselect * from starships", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_starships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.097103Z", "completed_at": "2025-03-25T13:39:13.105621Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.107532Z", "completed_at": "2025-03-25T13:39:13.107544Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015013933181762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_starships_people", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_starships_people\n  Description: Creates a minimal many-to-many relationship table between films and people (pilots)\n  Source: stg_swapi_films.starships JSONB array\n*/\n\nwith starships_with_pilots as (\n    select\n        starship_id,\n        -- Extract each planet ID from the JSONB array\n        jsonb_array_elements_text(pilots::jsonb) as people_id_text\n    from \"nerd_facts\".\"public\".\"stg_swapi_starships\"\n    where pilots is not null and jsonb_array_length(pilots::jsonb) > 0\n)\n\nselect\n    s.starship_id,\n    -- Cast the starship ID from text to integer\n    s.people_id_text::integer as people_id\nfrom \n    starships_with_pilots s\norder by\n    starship_id, people_id", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_starships_people\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.101578Z", "completed_at": "2025-03-25T13:39:13.106752Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.108893Z", "completed_at": "2025-03-25T13:39:13.108902Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013129472732543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_id.33d24c92bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect starship_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_starships\"\nwhere starship_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.115025Z", "completed_at": "2025-03-25T13:39:13.120591Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.128160Z", "completed_at": "2025-03-25T13:39:13.128174Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021241188049316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_starships_starship_id.8d2f1e1387", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    starship_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_starships\"\nwhere starship_id is not null\ngroup by starship_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.120958Z", "completed_at": "2025-03-25T13:39:13.129025Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.133990Z", "completed_at": "2025-03-25T13:39:13.134001Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014960527420043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_films_vehicles", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_vehicles\n  Description: Creates a comprehensive many-to-many relationship table between films and vehicles\n  Source: Combines data from both films.vehicles and vehicles.films arrays for completeness\n*/\n\n-- Get relationships from films perspective\nwith films_to_vehicles as (\n    select\n        film_id,\n        jsonb_array_elements_text(vehicles::jsonb)::integer as vehicle_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where vehicles is not null and jsonb_array_length(vehicles::jsonb) > 0\n),\n\n-- Get relationships from vehicles perspective\nvehicles_to_films as (\n    select\n        vehicle_id,\n        jsonb_array_elements_text(films::jsonb)::integer as film_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\n    where films is not null and jsonb_array_length(films::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select film_id, vehicle_id from films_to_vehicles\n    union\n    select film_id, vehicle_id from vehicles_to_films\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct film_id, vehicle_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.film_id,\n    ur.vehicle_id,\n    f.title as film_title,\n    v.vehicle_name,\n    f.release_date,\n    v.model,\n    v.manufacturer,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ur.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ur.vehicle_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_vehicle_key\nfrom \n    unique_relationships ur\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on ur.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_vehicles\" v on ur.vehicle_id = v.vehicle_id\norder by\n    f.release_date, v.vehicle_name", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_vehicles\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.130098Z", "completed_at": "2025-03-25T13:39:13.135239Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.135608Z", "completed_at": "2025-03-25T13:39:13.135616Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0157773494720459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_vehicles", "compiled": true, "compiled_code": "\n\nwith vehicles as (        \n    select\n    vehicle_id,    \n    vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    consumables,    \n    cost_in_credits,\n    length,\n    max_atmosphering_speed,\n    cargo_capacity,\n    passengers,\n    crew,\n\n        -- Derived vehicle classifications\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' OR LOWER(vehicle_class) LIKE '%tank%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%fighter%' OR LOWER(vehicle_class) LIKE '%bomber%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%transport%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' THEN \n            CASE\n                WHEN LOWER(vehicle_name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian'\n            END\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN\n            CASE\n                WHEN LOWER(vehicle_name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian' \n            END\n        WHEN LOWER(vehicle_class) LIKE '%shuttle%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' OR LOWER(vehicle_class) LIKE '%yacht%' THEN 'Leisure/Luxury'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' OR LOWER(vehicle_class) LIKE '%digger%' THEN 'Industrial'\n        ELSE 'Multipurpose'\n    END AS vehicle_purpose,\n\n    -- Size classification\n    CASE\n        WHEN length > 100 THEN 'Massive'\n        WHEN length > 20 THEN 'Large'\n        WHEN length > 10 THEN 'Medium'\n        WHEN length > 5 THEN 'Small'\n        ELSE 'Tiny'\n    END AS vehicle_size,\n\n    -- Terrain capabilities\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' AND LOWER(vehicle_class) NOT LIKE '%airspeeder%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN 'Air'\n        WHEN LOWER(vehicle_class) LIKE '%submarine%' THEN 'Water'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' AND LOWER(vehicle_class) LIKE '%sail%' THEN 'Ground/Water'\n        WHEN LOWER(vehicle_class) LIKE '%snowspeeder%' OR LOWER(vehicle_name) LIKE '%snow%' THEN 'Snow/Ice'\n        WHEN LOWER(vehicle_class) LIKE '%repulsor%' THEN 'Air/Ground'\n        ELSE 'Multi-terrain'\n    END AS terrain_capability,\n\n    -- Notable vehicle flag\n    CASE\n        WHEN LOWER(vehicle_name) IN ('at-at', 'at-st', 'snowspeeder', 'speeder bike', 'tie bomber', \n                           'tie fighter', 'x-34 landspeeder', 'sand crawler', 'sail barge') THEN TRUE\n        ELSE FALSE\n    END AS is_notable_vehicle,    \n\n    -- Calculate total capacity as sum of crew and passengers\n    crew + passengers AS total_capacity,\n\n    created_at,\n    edited_at,\n    dbt_loaded_at,\n    url\n    from \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\n)\n\nselect * from vehicles", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_vehicles\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.110288Z", "completed_at": "2025-03-25T13:39:13.127290Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.129433Z", "completed_at": "2025-03-25T13:39:13.129444Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023540496826171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_starships\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.137214Z", "completed_at": "2025-03-25T13:39:13.153695Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.159731Z", "completed_at": "2025-03-25T13:39:13.159746Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023328781127929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_id.44275887db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vehicle_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\nwhere vehicle_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.148156Z", "completed_at": "2025-03-25T13:39:13.154406Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.160441Z", "completed_at": "2025-03-25T13:39:13.160452Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018305063247680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.155030Z", "completed_at": "2025-03-25T13:39:13.161289Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.163172Z", "completed_at": "2025-03-25T13:39:13.163180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02028679847717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_vehicles_vehicle_id.f42372d3a8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vehicle_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\nwhere vehicle_id is not null\ngroup by vehicle_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.144251Z", "completed_at": "2025-03-25T13:39:13.159248Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.161649Z", "completed_at": "2025-03-25T13:39:13.161660Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019969463348388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.int_swapi_vehicles_people", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_vehicles_people\n  Description: Creates a minimal many-to-many relationship table between vehicles and people (pilots)\n  Source: stg_swapi_films.vehicles JSONB array\n*/\n\nwith vehicles_with_pilots as (\n    select\n        vehicle_id,\n        -- Extract each planet ID from the JSONB array\n        jsonb_array_elements_text(pilots::jsonb) as people_id_text\n    from \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\n    where pilots is not null and jsonb_array_length(pilots::jsonb) > 0\n)\n\nselect\n    v.vehicle_id,\n    -- Cast the starship ID from text to integer\n    v.people_id_text::integer as people_id\nfrom \n    vehicles_with_pilots v\norder by\n    vehicle_id, people_id", "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_vehicles_people\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.164735Z", "completed_at": "2025-03-25T13:39:13.179184Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.180938Z", "completed_at": "2025-03-25T13:39:13.180950Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016980648040771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "relation_name": "\"nerd_facts\".\"public\".\"fct_documentation_coverage\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.173573Z", "completed_at": "2025-03-25T13:39:13.181697Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.183408Z", "completed_at": "2025-03-25T13:39:13.183417Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010825872421264648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n    string_agg(\n        resource_name,\n        ', '\n        \n        ) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_duplicate_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.184005Z", "completed_at": "2025-03-25T13:39:13.196078Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.198180Z", "completed_at": "2025-03-25T13:39:13.198194Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018709182739257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_hard_coded_references\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.188930Z", "completed_at": "2025-03-25T13:39:13.197384Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.199308Z", "completed_at": "2025-03-25T13:39:13.199318Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01697826385498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_prefixes\"\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    string_agg(\n        prefix_value,\n        ', '\n        \n        ) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_model_naming_conventions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.205785Z", "completed_at": "2025-03-25T13:39:13.214596Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.215028Z", "completed_at": "2025-03-25T13:39:13.215041Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016309261322021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_directories", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_source_directories\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.217781Z", "completed_at": "2025-03-25T13:39:13.228234Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.228702Z", "completed_at": "2025-03-25T13:39:13.228717Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015581130981445312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_sources_without_freshness\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.199990Z", "completed_at": "2025-03-25T13:39:13.212735Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.216556Z", "completed_at": "2025-03-25T13:39:13.216565Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021402359008789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_public_models_without_contract\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.222812Z", "completed_at": "2025-03-25T13:39:13.236037Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.236491Z", "completed_at": "2025-03-25T13:39:13.236504Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02052164077758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.229752Z", "completed_at": "2025-03-25T13:39:13.238946Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.239362Z", "completed_at": "2025-03-25T13:39:13.239372Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01203298568725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_public_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.241747Z", "completed_at": "2025-03-25T13:39:13.247745Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.259985Z", "completed_at": "2025-03-25T13:39:13.260001Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022420883178710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.248184Z", "completed_at": "2025-03-25T13:39:13.265139Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.267394Z", "completed_at": "2025-03-25T13:39:13.267407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0322725772857666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_source_tables\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.254025Z", "completed_at": "2025-03-25T13:39:13.266534Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.274350Z", "completed_at": "2025-03-25T13:39:13.274364Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03409695625305176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"nerd_facts\".\"public\".\"stg_node_relationships\"\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"nerd_facts\".\"public\".\"stg_exposure_relationships\"\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"nerd_facts\".\"public\".\"stg_metric_relationships\"\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "relation_name": "\"nerd_facts\".\"public\".\"int_direct_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.261113Z", "completed_at": "2025-03-25T13:39:13.267014Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.275216Z", "completed_at": "2025-03-25T13:39:13.275227Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028303861618041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.pokemon_obt", "compiled": true, "compiled_code": "/* \n   One Big Table (OBT) for Pok\u00e9mon Data\n   This model combines pokemon, types, abilities, and stats into a single denormalized table\n   optimized for analytics and reporting.\n*/\n\nwith pokemon as (\n    select \n        p.pokemon_key,\n        p.pokemon_id,\n        p.pokemon_name,\n        p.height_m,\n        p.weight_kg,\n        p.base_xp as base_experience,\n        p.primary_type,\n        p.secondary_type,\n        p.primary_type_key,\n        p.secondary_type_key,\n        p.base_stat_hp,\n        p.total_base_stats\n    from \"nerd_facts\".\"public\".\"fact_pokemon\" p\n),\n\ntypes as (\n    select\n        t.type_key,\n        t.type_id,\n        t.type_name\n    from \"nerd_facts\".\"public\".\"dim_pokemon_types\" t\n),\n\npokemon_abilities as (\n    select\n        pa.pokemon_ability_id,\n        pa.pokemon_id,\n        pa.ability_name,\n        pa.is_hidden,\n        pa.slot_number\n    from \"nerd_facts\".\"public\".\"bridge_pokemon_abilities\" pa\n)\n\n-- Final OBT assembly\nselect\n    -- Pokemon information (core entity)\n    p.pokemon_key,\n    p.pokemon_id,\n    p.pokemon_name,\n    p.height_m,\n    p.weight_kg,\n    p.base_experience,\n    p.base_stat_hp,\n    p.total_base_stats,\n    \n    -- Type information (denormalized)\n    p.primary_type as primary_type_name,\n    p.secondary_type as secondary_type_name,\n    \n    -- Ability information (denormalized)\n    pa.ability_name,\n    pa.is_hidden,\n    pa.slot_number,\n    \n    -- Metadata\n    current_timestamp as obt_created_at\nfrom pokemon p\nleft join pokemon_abilities pa on p.pokemon_id = pa.pokemon_id", "relation_name": "\"nerd_facts\".\"public\".\"pokemon_obt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.268926Z", "completed_at": "2025-03-25T13:39:13.275932Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.279105Z", "completed_at": "2025-03-25T13:39:13.279115Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011082649230957031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_column_dim_characters_character_id.c97cad84e1", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select\n        character_id as column_value\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n    where character_id is null\n)\n\nselect *\nfrom validation\nwhere column_value is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.280121Z", "completed_at": "2025-03-25T13:39:13.290762Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.297111Z", "completed_at": "2025-03-25T13:39:13.297125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020972490310668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_column_dim_characters_name.9bb85b23a6", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select\n        name as column_value\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n    where name is null\n)\n\nselect *\nfrom validation\nwhere column_value is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.291215Z", "completed_at": "2025-03-25T13:39:13.299026Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.307565Z", "completed_at": "2025-03-25T13:39:13.307588Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029050111770629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.test_sw_character_quality", "compiled": true, "compiled_code": "-- This test ensures that all Star Wars characters have the required attributes\n-- and that the data meets our quality standards\n\nwith character_validation as (\n    select\n        name,\n        height,\n        mass,\n        gender,\n        case\n            when name is null then 'Missing name'\n            when height is null then 'Missing height'\n            when trim(name) = '' then 'Empty name'\n            when mass <= 0 and mass is not null then 'Invalid mass'\n            when height <= 0 and height is not null then 'Invalid height'\n            else 'Valid'\n        end as validation_status\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n)\n\nselect *\nfrom character_validation\nwhere validation_status != 'Valid'\n-- If this query returns any rows, it means some characters have quality issues\n-- that need to be addressed", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.286058Z", "completed_at": "2025-03-25T13:39:13.297870Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.300088Z", "completed_at": "2025-03-25T13:39:13.300111Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022353172302246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.unique_column_dim_characters_character_id.84b36a6ff7", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select\n        character_id as column_value,\n        count(*) as occurrences\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n    where character_id is not null\n    group by character_id\n    having count(*) > 1\n)\n\nselect *\nfrom validation\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.300730Z", "completed_at": "2025-03-25T13:39:13.309120Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.317135Z", "completed_at": "2025-03-25T13:39:13.317146Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021273136138916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.bridge_sw_characters_films", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_sw_characters_films\n  Description: Bridge table connecting characters and films with enriched relationship attributes\n*/\n\nWITH character_film_base AS (\n  SELECT\n    fc.film_id,\n    fc.people_id AS character_id,\n    f.title AS film_title,\n    f.episode_id,\n    p.name AS character_name,\n    f.release_date,\n    p.gender,\n    p.birth_year\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fc.film_id = f.film_id\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_people\" p ON fc.people_id = p.people_id\n),\n\n-- Character importance tiers\ncharacter_importance AS (\n  SELECT \n    cfb.*,\n    CASE\n      -- Protagonist/Antagonist tier - central characters\n      WHEN cfb.character_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', \n                              'Rey', 'Kylo Ren', 'Din Djarin', 'Grogu') \n        THEN 'Protagonist/Antagonist'\n      \n      -- Major characters\n      WHEN cfb.character_name IN ('Han Solo', 'Leia Organa', 'Obi-Wan Kenobi', \n                              'Emperor Palpatine', 'Finn', 'Poe Dameron',\n                              'Padm\u00e9 Amidala', 'Count Dooku', 'Qui-Gon Jinn',\n                              'Darth Maul', 'Jyn Erso', 'Cassian Andor', 'Boba Fett') \n        THEN 'Major'\n      \n      -- Supporting characters\n      WHEN cfb.character_name IN ('Chewbacca', 'C-3PO', 'R2-D2', 'Yoda', \n                              'Lando Calrissian', 'Mace Windu', 'General Grievous', \n                              'Admiral Ackbar', 'BB-8', 'General Hux', 'Rose Tico',\n                              'Moff Gideon', 'Saw Gerrera', 'Jabba the Hutt',\n                              'Ahsoka Tano') \n        THEN 'Supporting'\n                              \n      -- Additional major characters by ID\n      WHEN cfb.character_id IN (1, 2, 3, 4, 5, 10, 11, 13) \n        THEN 'Major'\n      \n      -- Characters with more details are likely more important\n      WHEN cfb.gender IS NOT NULL AND cfb.birth_year IS NOT NULL \n        THEN 'Notable'\n      \n      ELSE 'Minor'\n    END AS character_importance_tier\n  FROM character_film_base cfb\n),\n\n-- Add trilogy and film appearance information\ncharacter_film_enriched AS (\n  SELECT \n    ci.*,\n    -- Trilogy classification\n    CASE\n      WHEN ci.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n      WHEN ci.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n      WHEN ci.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n      ELSE 'Anthology Films'\n    END AS trilogy,\n    \n    -- Extract year for easier querying\n    EXTRACT(YEAR FROM ci.release_date) AS release_year,\n    \n    -- Character appearance metrics\n    COUNT(*) OVER (PARTITION BY ci.character_id) AS character_film_count,\n    (SELECT COUNT(DISTINCT film_id) FROM \"nerd_facts\".\"public\".\"int_swapi_films\") AS total_films,\n    \n    -- Order of appearance\n    ROW_NUMBER() OVER (\n      PARTITION BY ci.character_id \n      ORDER BY COALESCE(ci.episode_id, 999)\n    ) AS chronological_appearance_number,\n    \n    ROW_NUMBER() OVER (\n      PARTITION BY ci.character_id \n      ORDER BY ci.release_date\n    ) AS release_order_appearance_number\n  FROM character_importance ci\n)\n\nSELECT\n  -- Primary Key\n  md5(cast(coalesce(cast(cfe.character_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(cfe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_film_key,\n  \n  -- Foreign Keys\n  md5(cast(coalesce(cast(cfe.character_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n  md5(cast(coalesce(cast(cfe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n  \n  -- Source IDs\n  cfe.character_id,\n  cfe.film_id,\n  \n  -- Basic Attributes\n  cfe.character_name,\n  cfe.film_title,\n  cfe.episode_id,\n  \n  -- Character role in film\n  cfe.character_importance_tier AS character_role,\n  \n  -- Film categorization\n  cfe.trilogy AS film_saga,\n  cfe.release_year,\n  \n  -- Appearance metrics\n  cfe.chronological_appearance_number,\n  cfe.release_order_appearance_number,\n  cfe.character_film_count,\n  \n  -- Character appearance percentage across all films\n  ROUND((cfe.character_film_count * 100.0 / NULLIF(cfe.total_films, 0)), 1) AS saga_appearance_percentage,\n  \n  -- Timeline attributes\n  CASE WHEN cfe.chronological_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_chronological_appearance,\n  CASE WHEN cfe.release_order_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_release_appearance,\n  \n  -- Narrative role in specific films\n  CASE \n    WHEN cfe.character_name IN ('Darth Vader', 'Anakin Skywalker') AND \n         cfe.episode_id BETWEEN 1 AND 3 THEN 'Protagonist'\n    WHEN cfe.character_name IN ('Darth Vader') AND \n         cfe.episode_id BETWEEN 4 AND 6 THEN 'Antagonist'\n    WHEN cfe.character_name = 'Luke Skywalker' AND \n         cfe.episode_id BETWEEN 4 AND 6 THEN 'Protagonist'\n    WHEN cfe.character_name = 'Rey' AND \n         cfe.episode_id BETWEEN 7 AND 9 THEN 'Protagonist'\n    WHEN cfe.character_name = 'Kylo Ren' AND \n         cfe.episode_id BETWEEN 7 AND 8 THEN 'Antagonist'\n    WHEN cfe.character_name = 'Kylo Ren' AND \n         cfe.episode_id = 9 THEN 'Protagonist'\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' THEN 'Key Character'\n    WHEN cfe.character_importance_tier = 'Major' THEN 'Major Character'\n    ELSE 'Supporting Character'\n  END AS narrative_role,\n  \n  -- Character alignment (light side/dark side)\n  CASE \n    WHEN cfe.character_name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul',\n                            'Count Dooku', 'General Grievous', 'Kylo Ren',\n                            'Captain Phasma', 'General Hux', 'Moff Tarkin',\n                            'Jabba the Hutt', 'Boba Fett', 'Jango Fett') \n      THEN 'Villain'\n    WHEN cfe.character_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo',\n                            'Obi-Wan Kenobi', 'Yoda', 'Rey', 'Finn', 'Poe Dameron',\n                            'Padm\u00e9 Amidala', 'Qui-Gon Jinn', 'Mace Windu') \n      THEN 'Hero'\n    WHEN cfe.character_name IN ('Lando Calrissian', 'Anakin Skywalker') \n      THEN 'Ambiguous'\n    ELSE 'Neutral'\n  END AS character_alignment,\n  \n  -- Film significance\n  CASE\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' AND\n         ((cfe.character_name = 'Luke Skywalker' AND cfe.episode_id IN (4, 5, 6)) OR\n          (cfe.character_name = 'Anakin Skywalker' AND cfe.episode_id IN (1, 2, 3)) OR\n          (cfe.character_name = 'Darth Vader' AND cfe.episode_id IN (4, 5, 6)) OR\n          (cfe.character_name = 'Rey' AND cfe.episode_id IN (7, 8, 9)) OR\n          (cfe.character_name = 'Kylo Ren' AND cfe.episode_id IN (7, 8, 9))) \n      THEN 'Pivotal'\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' \n      THEN 'Crucial'\n    WHEN cfe.character_importance_tier = 'Major' \n      THEN 'Significant'\n    WHEN cfe.character_importance_tier = 'Supporting' \n      THEN 'Important'\n    ELSE 'Background'\n  END AS film_significance,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n  \nFROM character_film_enriched cfe\nORDER BY \n  COALESCE(cfe.episode_id, 999),\n  cfe.character_importance_tier,\n  cfe.character_name", "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_characters_films\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.310079Z", "completed_at": "2025-03-25T13:39:13.325064Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.333252Z", "completed_at": "2025-03-25T13:39:13.333266Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02512836456298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.bridge_sw_films_planets", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_sw_films_planets\n  Description: Bridge table connecting films to planets with enriched relationship attributes\n*/\n\nWITH film_planets AS (\n    SELECT\n        fp.film_id,\n        fp.planet_id,\n        f.title AS film_title,\n        p.name AS planet_name,\n        f.release_date,\n        f.episode_id,\n        p.climate,\n        p.terrain\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n    JOIN \"nerd_facts\".\"public\".\"stg_swapi_films\" f ON fp.film_id = f.film_id\n    JOIN \"nerd_facts\".\"public\".\"stg_swapi_planets\" p ON fp.planet_id = p.planet_id\n),\n\n-- Add trilogy and appearance information\nfilm_planets_enriched AS (\n    SELECT \n        fp.*,\n        -- Trilogy classification\n        CASE\n            WHEN fp.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n            WHEN fp.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n            WHEN fp.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n            ELSE 'Anthology Films'\n        END AS trilogy,\n        \n        -- Extract year for easier querying\n        EXTRACT(YEAR FROM fp.release_date) AS release_year,\n        \n        -- Planet appearance metrics\n        COUNT(*) OVER (PARTITION BY fp.planet_id) AS planet_film_count,\n        (SELECT COUNT(DISTINCT film_id) FROM \"nerd_facts\".\"public\".\"stg_swapi_films\") AS total_films,\n        \n        -- Order of appearance\n        ROW_NUMBER() OVER (\n            PARTITION BY fp.planet_id \n            ORDER BY COALESCE(fp.episode_id, 999)\n        ) AS chronological_appearance_number,\n        \n        ROW_NUMBER() OVER (\n            PARTITION BY fp.planet_id \n            ORDER BY fp.release_date\n        ) AS release_order_appearance_number\n    FROM film_planets fp\n)\n\nSELECT\n    -- Primary Key\n    md5(cast(coalesce(cast(fpe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fpe.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_planet_key,\n    \n    -- Foreign Keys\n    md5(cast(coalesce(cast(fpe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n    md5(cast(coalesce(cast(fpe.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS planet_key,\n    \n    -- Source IDs\n    fpe.film_id,\n    fpe.planet_id,\n    \n    -- Basic Attributes\n    fpe.film_title,\n    fpe.planet_name,\n    fpe.episode_id,\n    \n    -- Film categorization\n    fpe.trilogy AS film_saga,\n    fpe.release_year,\n    \n    -- Planet characteristics\n    fpe.climate,\n    fpe.terrain,\n    \n    -- Appearance metrics\n    fpe.chronological_appearance_number,\n    fpe.release_order_appearance_number,\n    \n    -- Planet appearance percentage across all films\n    (fpe.planet_film_count::FLOAT / NULLIF(fpe.total_films, 0)::FLOAT) * 100 AS saga_appearance_percentage,\n    \n    -- Timeline attributes\n    CASE WHEN fpe.chronological_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_chronological_appearance,\n    CASE WHEN fpe.release_order_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_release_appearance,\n    \n    -- Planet significance in the film\n    CASE\n        WHEN fpe.planet_name IN ('Tatooine', 'Coruscant', 'Naboo', 'Death Star', 'Hoth', \n                                'Dagobah', 'Endor', 'Bespin', 'Jakku', 'Starkiller Base', \n                                'Exegol', 'Scarif', 'Mustafar') \n            THEN 'Major Setting'\n        ELSE 'Minor Setting'\n    END AS planet_significance,\n    \n    -- Scene type (based on climate and terrain)\n    CASE\n        WHEN fpe.climate ILIKE '%arid%' OR fpe.climate ILIKE '%desert%' OR fpe.terrain ILIKE '%desert%'\n            THEN 'Desert Scene'\n        WHEN fpe.climate ILIKE '%frozen%' OR fpe.climate ILIKE '%ice%' OR fpe.climate ILIKE '%frigid%'\n            THEN 'Ice Scene'\n        WHEN fpe.terrain ILIKE '%forest%' OR fpe.terrain ILIKE '%jungle%' OR fpe.terrain ILIKE '%rain%'\n            THEN 'Forest Scene'\n        WHEN fpe.terrain ILIKE '%city%' OR fpe.terrain ILIKE '%urban%'\n            THEN 'Urban Scene'\n        WHEN fpe.climate ILIKE '%swamp%' OR fpe.terrain ILIKE '%swamp%'\n            THEN 'Swamp Scene'\n        WHEN fpe.climate ILIKE '%toxic%' OR fpe.terrain ILIKE '%lava%' OR fpe.terrain ILIKE '%volcanic%'\n            THEN 'Hostile Environment Scene'\n        ELSE 'Mixed Scene'\n    END AS scene_type,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM film_planets_enriched fpe\nORDER BY \n    COALESCE(fpe.episode_id, 999),\n    fpe.planet_name", "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_films_planets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.320055Z", "completed_at": "2025-03-25T13:39:13.332835Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.334384Z", "completed_at": "2025-03-25T13:39:13.334394Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016062021255493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_sw_planets", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_planets\n  Description: Planet dimension table with enriched attributes and classifications\n*/\n\nWITH planet_base AS (\n    SELECT\n        p.planet_id,\n        p.name,\n        p.rotation_period,\n        p.orbital_period,\n        p.diameter,\n        p.climate,\n        p.gravity,\n        p.terrain,\n        p.surface_water,\n        p.population\n    FROM \"nerd_facts\".\"public\".\"int_swapi_planets\" p\n),\n\n-- Film appearances\nfilm_appearances AS (\n    SELECT\n        fp.planet_id,\n        COUNT(DISTINCT fp.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fp.film_id = f.film_id\n    GROUP BY fp.planet_id\n),\n\n-- Character counts (residents)\ncharacter_counts AS (\n    SELECT\n        pc.planet_id,\n        COUNT(DISTINCT pc.people_id) AS character_count\n    FROM \"nerd_facts\".\"public\".\"int_swapi_planets_characters\" pc\n    GROUP BY pc.planet_id\n),\n\n-- Calculate additional metrics and classifications\nplanet_enriched AS (\n    SELECT\n        pb.*,\n        COALESCE(fa.film_count, 0) AS film_count,\n        COALESCE(cc.character_count, 0) AS character_count,\n        COALESCE(fa.film_appearances, 'None') AS film_appearances,\n        \n        -- Planet size classification\n        CASE\n            WHEN pb.diameter::NUMERIC > 15000 THEN 'Very Large'\n            WHEN pb.diameter::NUMERIC > 10000 THEN 'Large'\n            WHEN pb.diameter::NUMERIC > 5000 THEN 'Medium'\n            WHEN pb.diameter::NUMERIC > 0 THEN 'Small'\n            ELSE 'Unknown'\n        END AS size_classification,\n        \n        -- Population density (people per square km)\n        -- Surface area = 4 * pi * r^2, r = diameter/2\n        CASE \n            WHEN pb.diameter::NUMERIC > 0 AND pb.population::NUMERIC > 0 \n            THEN pb.population::NUMERIC / (4 * 3.14159 * POWER(pb.diameter::NUMERIC/2, 2))\n            ELSE NULL\n        END AS population_density,\n        \n        -- Climate type classification\n        CASE\n            WHEN pb.climate ILIKE '%temperate%' THEN 'Temperate'\n            WHEN pb.climate ILIKE '%tropical%' THEN 'Tropical'\n            WHEN pb.climate ILIKE '%arid%' OR pb.climate ILIKE '%desert%' THEN 'Arid'\n            WHEN pb.climate ILIKE '%frozen%' OR pb.climate ILIKE '%ice%' OR pb.climate ILIKE '%frigid%' THEN 'Frozen'\n            WHEN pb.climate ILIKE '%humid%' OR pb.climate ILIKE '%moist%' THEN 'Humid'\n            WHEN pb.climate ILIKE '%murky%' OR pb.climate ILIKE '%swamp%' THEN 'Swampy'\n            ELSE 'Other'\n        END AS climate_classification,\n        \n        -- Primary terrain classification\n        CASE\n            WHEN pb.terrain ILIKE '%mountain%' THEN 'Mountainous'\n            WHEN pb.terrain ILIKE '%jungle%' THEN 'Jungle'\n            WHEN pb.terrain ILIKE '%desert%' THEN 'Desert'\n            WHEN pb.terrain ILIKE '%forest%' THEN 'Forested'\n            WHEN pb.terrain ILIKE '%ocean%' OR pb.terrain ILIKE '%sea%' THEN 'Oceanic'\n            WHEN pb.terrain ILIKE '%swamp%' THEN 'Swamp'\n            WHEN pb.terrain ILIKE '%city%' OR pb.terrain ILIKE '%urban%' THEN 'Urban'\n            ELSE 'Mixed'\n        END AS primary_terrain_classification\n    FROM planet_base pb\n    LEFT JOIN film_appearances fa ON pb.planet_id = fa.planet_id\n    LEFT JOIN character_counts cc ON pb.planet_id = cc.planet_id\n)\n\nSELECT\n    -- Primary Key\n    md5(cast(coalesce(cast(pe.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS planet_key,\n    \n    -- Natural Key\n    pe.planet_id,\n    \n    -- Planet Attributes\n    pe.name AS planet_name,\n    pe.rotation_period,\n    pe.orbital_period,\n    pe.diameter,\n    pe.climate,\n    pe.gravity,\n    pe.terrain,\n    pe.surface_water,\n    pe.population,\n    \n    -- Planet Classifications\n    pe.size_classification,\n    pe.climate_classification,\n    pe.primary_terrain_classification,\n    \n    -- Derived Metrics\n    pe.population_density,\n    pe.film_count,\n    pe.character_count,\n    pe.film_appearances,\n    \n    -- Habitability metrics\n    CASE \n        WHEN pe.climate ILIKE '%temperate%' AND pe.surface_water::NUMERIC > 0 THEN 'High'\n        WHEN pe.climate NOT ILIKE '%frozen%' AND pe.climate NOT ILIKE '%arid%' THEN 'Medium'\n        ELSE 'Low'\n    END AS habitability,\n    \n    -- Is Core World\n    CASE \n        WHEN pe.name IN ('Coruscant', 'Alderaan', 'Corellia', 'Chandrila', 'Hosnian Prime') THEN TRUE\n        ELSE FALSE\n    END AS is_core_world,\n    \n    -- Notable planets\n    CASE \n        WHEN pe.name IN ('Coruscant', 'Tatooine', 'Naboo', 'Hoth', 'Endor', 'Dagobah', \n                        'Bespin', 'Mustafar', 'Death Star', 'Jakku', 'Ahch-To', 'Exegol') \n            OR pe.film_count >= 3\n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_planet,\n    \n    -- Narrative importance\n    CASE\n        WHEN pe.film_count >= 3 THEN 'Major'\n        WHEN pe.film_count >= 2 THEN 'Significant'\n        WHEN pe.film_count = 1 THEN 'Featured'\n        ELSE 'Minor'\n    END AS narrative_importance,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM planet_enriched pe", "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_planets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.325619Z", "completed_at": "2025-03-25T13:39:13.335013Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.342613Z", "completed_at": "2025-03-25T13:39:13.342628Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024895906448364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_sw_characters", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_characters\n  Description: Character dimension table with enriched attributes\n*/\n\nWITH character_base AS (\n  SELECT\n    p.people_id,\n    p.name,\n    p.height,\n    p.mass,\n    p.hair_color,\n    p.skin_color,\n    p.eye_color,\n    p.birth_year,\n    p.gender,\n    p.homeworld_id   -- Fixed: Changed from p.homeworld to p.homeworld_id\n  FROM \"nerd_facts\".\"public\".\"int_swapi_people\" p\n),\n\n-- Get homeworld information\nhomeworld_info AS (\n  SELECT \n    p.people_id,\n    pl.name AS homeworld_name\n  FROM \"nerd_facts\".\"public\".\"int_swapi_people\" p\n  LEFT JOIN \"nerd_facts\".\"public\".\"int_swapi_planets\" pl ON p.homeworld_id::INTEGER = pl.planet_id\n),\n\n-- Calculate film appearances\nfilm_appearances AS (\n  SELECT\n    fc.people_id,\n    COUNT(DISTINCT fc.film_id) AS film_count,\n    STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fc.film_id = f.film_id\n  GROUP BY fc.people_id\n)\n\nSELECT\n  -- Primary Key\n  md5(cast(coalesce(cast(cb.people_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n  \n  -- Natural Key\n  cb.people_id,\n  \n  -- Character Attributes\n  cb.name AS character_name,\n  cb.height::NUMERIC AS height_cm,\n  cb.mass::NUMERIC AS mass_kg,\n  cb.hair_color,\n  cb.skin_color,\n  cb.eye_color,\n  cb.birth_year,\n  cb.gender,\n  \n  -- Homeworld information\n  hi.homeworld_name,\n  \n  -- Film appearances\n  COALESCE(fa.film_count, 0) AS film_count,\n  COALESCE(fa.film_appearances, 'None') AS film_appearances,\n  \n  -- Character Classification\n  CASE\n    -- Protagonist/Antagonist tier - central characters\n    WHEN cb.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', \n                     'Rey', 'Kylo Ren', 'Din Djarin', 'Grogu') \n        THEN 'Protagonist/Antagonist'\n    \n    -- Major characters\n    WHEN cb.name IN ('Han Solo', 'Leia Organa', 'Obi-Wan Kenobi', \n                    'Emperor Palpatine', 'Finn', 'Poe Dameron',\n                    'Padm\u00e9 Amidala', 'Count Dooku', 'Qui-Gon Jinn',\n                    'Darth Maul', 'Jyn Erso', 'Cassian Andor', 'Boba Fett') \n        THEN 'Major'\n    \n    -- Supporting characters\n    WHEN cb.name IN ('Chewbacca', 'C-3PO', 'R2-D2', 'Yoda', \n                    'Lando Calrissian', 'Mace Windu', 'General Grievous', \n                    'Admiral Ackbar', 'BB-8', 'General Hux', 'Rose Tico',\n                    'Moff Gideon', 'Saw Gerrera', 'Jabba the Hutt',\n                    'Ahsoka Tano') \n        THEN 'Supporting'\n                                \n    -- Characters with many appearances are likely more important\n    WHEN COALESCE(fa.film_count, 0) >= 3\n        THEN 'Notable'\n    \n    -- Characters with more details are likely more important\n    WHEN cb.gender IS NOT NULL AND cb.birth_year IS NOT NULL \n        THEN 'Notable'\n    \n    ELSE 'Minor'\n  END AS character_importance_tier,\n  \n  -- Character alignment\n  CASE \n    WHEN cb.name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul',\n                        'Count Dooku', 'General Grievous', 'Kylo Ren',\n                        'Captain Phasma', 'General Hux', 'Moff Tarkin',\n                        'Jabba the Hutt', 'Boba Fett', 'Jango Fett')\n        THEN 'Villain'\n        \n    WHEN cb.name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo',\n                        'Obi-Wan Kenobi', 'Yoda', 'Rey', 'Finn', 'Poe Dameron',\n                        'Padm\u00e9 Amidala', 'Qui-Gon Jinn', 'Mace Windu')\n        THEN 'Hero'\n        \n    WHEN cb.name IN ('Lando Calrissian', 'Anakin Skywalker')\n        THEN 'Ambiguous'\n        \n    ELSE 'Neutral'\n  END AS character_alignment,\n  \n  -- Character Type\n  CASE \n    WHEN cb.name LIKE '%Droid%' OR cb.name IN ('C-3PO', 'R2-D2', 'BB-8') THEN 'Droid'\n    WHEN cb.name IN ('Jabba the Hutt') THEN 'Hutt'\n    WHEN cb.name IN ('Yoda', 'Grogu') THEN 'Unknown Species'\n    WHEN cb.name IN ('Chewbacca') THEN 'Wookiee'\n    ELSE 'Humanoid'\n  END AS character_type,\n  \n  -- Force user\n  CASE \n    WHEN cb.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                   'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                   'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n    THEN TRUE\n    ELSE FALSE\n  END AS is_force_user,\n  \n  -- Force alignment\n  CASE \n    WHEN cb.name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul', \n                   'Count Dooku', 'Kylo Ren')\n    THEN 'Dark Side'\n    \n    WHEN cb.name IN ('Luke Skywalker', 'Obi-Wan Kenobi', 'Yoda', 'Rey',\n                   'Mace Windu', 'Qui-Gon Jinn', 'Ahsoka Tano') \n    THEN 'Light Side'\n    \n    WHEN cb.name IN ('Anakin Skywalker')\n    THEN 'Both (Changed)'\n    \n    ELSE NULL\n  END AS force_alignment,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM character_base cb\nLEFT JOIN homeworld_info hi ON cb.people_id = hi.people_id\nLEFT JOIN film_appearances fa ON cb.people_id = fa.people_id\nWHERE cb.people_id IS NOT NULL\nORDER BY \n  CASE \n    WHEN COALESCE(fa.film_count, 0) >= 3 THEN 0\n    ELSE 1\n  END,\n  COALESCE(fa.film_count, 0) DESC,\n  cb.name", "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.335837Z", "completed_at": "2025-03-25T13:39:13.346587Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.361750Z", "completed_at": "2025-03-25T13:39:13.361766Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02978825569152832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_sw_species", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_species\n  Description: Species dimension table with enriched attributes and classifications\n*/\n\nWITH species_base AS (\n    SELECT\n        s.species_id,\n        s.species_name,  -- Using species_name directly instead of s.name\n        s.classification,\n        s.designation,\n        s.average_height,\n        s.skin_colors,\n        s.hair_colors,\n        s.eye_colors,\n        s.average_lifespan,\n        s.language,\n        s.homeworld AS homeworld_id  -- Use homeworld instead of homeworld_id\n    FROM \"nerd_facts\".\"public\".\"int_swapi_species\" s\n),\n\n-- Film appearances\nfilm_appearances AS (\n    SELECT\n        fs.species_id,\n        COUNT(DISTINCT fs.film_id) AS film_count\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fs\n    GROUP BY fs.species_id\n),\n\n-- Character counts - estimate based on species mentions in films\n-- Since we don't have direct access to character-species relationships\ncharacter_counts AS (\n    SELECT\n        fs.species_id,\n        COUNT(DISTINCT fc.people_id) AS character_count\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fs\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc ON fs.film_id = fc.film_id\n    GROUP BY fs.species_id\n),\n\n-- Enriched species data\nspecies_enriched AS (\n    SELECT\n        sb.*,\n        COALESCE(fa.film_count, 0) AS film_count,\n        COALESCE(cc.character_count, 0) AS character_count\n    FROM species_base sb\n    LEFT JOIN film_appearances fa ON sb.species_id = fa.species_id\n    LEFT JOIN character_counts cc ON sb.species_id = cc.species_id\n)\n\nSELECT\n    -- Primary Key\n    md5(cast(coalesce(cast(se.species_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS species_key,\n    \n    -- Natural Key\n    se.species_id,\n    \n    -- Species Attributes\n    se.species_name,\n    se.classification,\n    se.designation,\n    se.average_height,\n    se.skin_colors,\n    se.hair_colors,\n    se.eye_colors,\n    se.average_lifespan,\n    se.language,\n    se.homeworld_id,\n    \n    -- Related Dimensions\n    md5(cast(coalesce(cast(se.homeworld_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS homeworld_key,\n    \n    -- Appearance Metrics\n    se.film_count,\n    se.character_count,\n    \n    -- Species Classifications\n    CASE\n        WHEN se.classification ILIKE '%mammal%' THEN 'Mammalian'\n        WHEN se.classification ILIKE '%reptile%' THEN 'Reptilian'\n        WHEN se.classification ILIKE '%amphibian%' THEN 'Amphibian'\n        WHEN se.classification ILIKE '%insect%' THEN 'Insectoid'\n        WHEN se.classification ILIKE '%sentient%' THEN 'Sentient'\n        ELSE se.classification\n    END AS species_type,\n    \n    -- Sentience level\n    CASE\n        WHEN se.designation ILIKE '%sentient%' THEN 'Sentient'\n        ELSE 'Non-sentient'\n    END AS sentience_level,\n    \n    -- Size classification based on average_height\n    CASE\n        WHEN se.average_height::NUMERIC > 200 THEN 'Tall'\n        WHEN se.average_height::NUMERIC BETWEEN 150 AND 200 THEN 'Medium'\n        WHEN se.average_height::NUMERIC > 0 AND se.average_height::NUMERIC < 150 THEN 'Short'\n        ELSE 'Unknown'\n    END AS size_classification,\n    \n    -- Longevity based on average_lifespan\n    CASE\n        WHEN se.average_lifespan::NUMERIC > 500 THEN 'Very Long-Lived'\n        WHEN se.average_lifespan::NUMERIC > 150 THEN 'Long-Lived'\n        WHEN se.average_lifespan::NUMERIC > 70 THEN 'Standard'\n        WHEN se.average_lifespan::NUMERIC > 0 THEN 'Short-Lived'\n        ELSE 'Unknown'\n    END AS longevity_classification,\n    \n    -- Notable Species flag\n    CASE \n        WHEN se.species_name IN ('Human', 'Wookiee', 'Droid', 'Hutt', 'Yoda''s species', \n                              'Zabrak', 'Twi''lek', 'Mon Calamari', 'Ewok', 'Gungan') \n            OR se.film_count >= 3  \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_species,\n    \n    -- Force sensitivity prevalence\n    CASE \n        WHEN se.species_name IN ('Yoda''s species') THEN 'High'\n        WHEN se.species_name IN ('Human', 'Zabrak', 'Togruta') THEN 'Medium'\n        ELSE 'Low/Unknown'\n    END AS force_sensitivity_prevalence,\n    \n    -- Narrative importance\n    CASE\n        WHEN se.film_count >= 3 THEN 'Major'\n        WHEN se.film_count >= 2 THEN 'Significant'\n        WHEN se.film_count = 1 THEN 'Featured'\n        ELSE 'Minor'\n    END AS narrative_importance,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM species_enriched se", "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_species\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.347417Z", "completed_at": "2025-03-25T13:39:13.363194Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.371593Z", "completed_at": "2025-03-25T13:39:13.371609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028418302536010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.bridge_sw_starships_pilots", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_sw_starships_pilots\n  Description: Bridge table connecting Star Wars starships to their pilots\n  \n  This version reconstructs the relationship using available intermediate models.\n*/\n\n-- Create a join between films, characters, and starships\nWITH film_characters_starships AS (\n    SELECT DISTINCT\n        fc.film_id,\n        fc.people_id AS pilot_id,\n        fs.starship_id\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs ON fc.film_id = fs.film_id\n),\n\n-- Create the pilot-starship relationships based on film appearances\nstarship_pilots AS (\n    SELECT DISTINCT\n        fcs.starship_id,\n        fcs.pilot_id\n    FROM film_characters_starships fcs\n    -- Only include notable pilot-starship combinations\n    WHERE (\n        -- Known pilot-starship pairs from Star Wars universe\n        (fcs.pilot_id = 1 AND fcs.starship_id = 12) OR -- Luke Skywalker + X-wing\n        (fcs.pilot_id = 4 AND fcs.starship_id = 10) OR -- Darth Vader + TIE Advanced x1\n        (fcs.pilot_id = 13 AND fcs.starship_id = 10) OR -- Chewbacca + Millennium Falcon\n        (fcs.pilot_id = 14 AND fcs.starship_id = 10) OR -- Han Solo + Millennium Falcon\n        (fcs.pilot_id = 22 AND fcs.starship_id = 21) OR -- Boba Fett + Slave I\n        (fcs.pilot_id = 11 AND fcs.starship_id = 32) OR -- Anakin Skywalker + Naboo fighter\n        (fcs.pilot_id = 35 AND fcs.starship_id = 48) OR -- Padm\u00e9 Amidala + Naboo ship\n        (fcs.pilot_id = 10 AND fcs.starship_id = 48) OR -- Obi-Wan Kenobi + Jedi Starfighter\n        (fcs.pilot_id = 3 AND fcs.starship_id = 10) OR -- R2-D2 + X-wing\n        (fcs.pilot_id = 25 AND fcs.starship_id = 28)    -- Lando + Millennium Falcon\n    )\n),\n\n-- Get starship information\nstarships AS (\n    SELECT \n        s.starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.starship_class,\n        s.cost_in_credits\n    FROM \"nerd_facts\".\"public\".\"int_swapi_starships\" s\n),\n\n-- Get character information\npilots AS (\n    SELECT \n        p.people_id,\n        p.name AS pilot_name,\n        p.gender,\n        p.birth_year,\n        p.height,\n        p.mass,\n        p.homeworld_id  -- Fix the column name based on the error\n    FROM \"nerd_facts\".\"public\".\"int_swapi_people\" p\n),\n\n-- Build the base relationship with enriched data\nstarship_pilot_base AS (\n    SELECT\n        sp.starship_id,\n        sp.pilot_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.starship_class,\n        s.cost_in_credits AS cost,\n        p.pilot_name,\n        p.gender,\n        p.birth_year,\n        p.height,\n        p.mass,\n        p.homeworld_id  -- Use the correct column name\n    FROM starship_pilots sp\n    JOIN starships s ON sp.starship_id = s.starship_id\n    JOIN pilots p ON sp.pilot_id = p.people_id\n),\n\n-- Get film appearances for both pilots and starships\npilot_films AS (\n    SELECT\n        fc.people_id AS pilot_id,\n        COUNT(DISTINCT fc.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fc.film_id = f.film_id\n    GROUP BY fc.people_id\n),\n\nstarship_films AS (\n    SELECT\n        fs.starship_id,\n        COUNT(DISTINCT fs.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fs.film_id = f.film_id\n    GROUP BY fs.starship_id\n),\n\n-- Get homeworld information for additional context\nhomeworlds AS (\n    SELECT\n        p.planet_id,\n        p.name AS planet_name\n    FROM \"nerd_facts\".\"public\".\"int_swapi_planets\" p\n),\n\n-- Calculate pilot statistics\npilot_stats AS (\n    SELECT \n        pilot_id,\n        COUNT(DISTINCT starship_id) AS ships_piloted_count,\n        COUNT(DISTINCT starship_class) AS ship_class_versatility\n    FROM starship_pilot_base\n    GROUP BY pilot_id\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(spb.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(spb.pilot_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS starship_pilot_id,\n    \n    -- Foreign keys to related dimensions\n    md5(cast(coalesce(cast(spb.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS starship_key,\n    md5(cast(coalesce(cast(spb.pilot_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pilot_key,\n    \n    -- Core identifiers\n    spb.starship_id,\n    spb.starship_name,\n    spb.pilot_id,\n    spb.pilot_name,\n    \n    -- Starship attributes\n    spb.model,\n    spb.manufacturer,\n    spb.starship_class,\n    spb.cost,\n    \n    -- Pilot attributes\n    spb.gender,\n    spb.birth_year,\n    hw.planet_name AS homeworld_name,\n    \n    -- Force sensitivity (derived)\n    CASE \n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                           'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                           'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n        THEN TRUE\n        ELSE FALSE\n    END AS force_sensitive,\n    \n    -- Pilot age estimation\n    CASE \n        WHEN spb.birth_year ~ '^[0-9]+(\\.[0-9]+)?$' THEN \n            CASE\n                WHEN spb.pilot_name = 'Yoda' THEN 900  -- Special case for Yoda\n                ELSE COALESCE(spb.birth_year::NUMERIC, 0)\n            END\n        ELSE 0\n    END AS pilot_age,\n    \n    -- Film appearances\n    COALESCE(pf.film_count, 0) AS pilot_film_count,\n    COALESCE(sf.film_count, 0) AS starship_film_count,\n    COALESCE(pf.film_names, 'None') AS pilot_film_appearances,\n    COALESCE(sf.film_names, 'None') AS starship_film_appearances,\n    \n    -- Calculate film overlap (approximate)\n    -- This isn't precise without parsing the film names but gives an indication\n    CASE \n        WHEN pf.film_names IS NOT NULL AND sf.film_names IS NOT NULL THEN\n            -- Estimate overlap by the smaller of the two counts\n            LEAST(\n                COALESCE(pf.film_count, 0),\n                COALESCE(sf.film_count, 0)\n            )\n        ELSE 0\n    END AS film_appearance_overlap,\n    \n    -- Enhanced pilot skill classification with more nuance\n    CASE\n        -- Legendary pilots explicitly mentioned in lore\n        WHEN spb.pilot_name IN ('Han Solo', 'Luke Skywalker', 'Anakin Skywalker', \n                             'Poe Dameron', 'Wedge Antilles', 'Lando Calrissian') THEN 'Legendary'\n        \n        -- Known excellent pilots from expanded lore\n        WHEN spb.pilot_name IN ('Darth Vader', 'Jango Fett', 'Boba Fett', 'Hera Syndulla', \n                             'Rey', 'Chewbacca', 'Din Djarin', 'Cassian Andor') THEN 'Expert'\n        \n        -- Force users generally have enhanced piloting abilities\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                           'Obi-Wan Kenobi', 'Yoda', 'Mace Windu') THEN 'Force Enhanced'\n        \n        -- Pilots of military craft likely have formal training\n        WHEN spb.starship_class IN ('Starfighter', 'Assault Starfighter', 'Bomber', \n                                 'Interceptor', 'Light Cruiser') THEN 'Military Trained'\n        \n        -- Default for other cases\n        ELSE 'Standard'\n    END AS pilot_skill,\n    \n    -- Pilot experience level based on lore\n    CASE\n        WHEN spb.pilot_name IN ('Han Solo', 'Chewbacca', 'Lando Calrissian', 'Wedge Antilles') THEN 'Veteran'\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Poe Dameron', 'Darth Vader', 'Anakin Skywalker') THEN 'Advanced'\n        WHEN spb.pilot_name IN ('Rey', 'Finn', 'Din Djarin') THEN 'Intermediate'\n        ELSE 'Basic'\n    END AS pilot_experience,\n    \n    -- Get calculated pilot stats\n    COALESCE(ps.ships_piloted_count, 0) AS ships_piloted_count,\n    COALESCE(ps.ship_class_versatility, 0) AS ship_class_versatility,\n    \n    -- Flag notable starship-pilot combinations\n    CASE\n        WHEN (spb.pilot_name = 'Han Solo' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Luke Skywalker' AND spb.starship_name LIKE '%X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Darth Vader' AND spb.starship_name LIKE '%TIE Advanced%') THEN TRUE\n        WHEN (spb.pilot_name = 'Boba Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        WHEN (spb.pilot_name = 'Anakin Skywalker' AND spb.starship_name LIKE '%Jedi Starfighter%') THEN TRUE\n        WHEN (spb.pilot_name = 'Poe Dameron' AND spb.starship_name LIKE '%T-70 X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Rey' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Din Djarin' AND spb.starship_name LIKE '%Razor Crest%') THEN TRUE\n        WHEN (spb.pilot_name = 'Lando Calrissian' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Jango Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        ELSE FALSE\n    END AS is_iconic_pairing,\n    \n    -- Calculate if this is the pilot's \"signature ship\" based on film appearances\n    CASE \n        WHEN ps.ships_piloted_count = 1 THEN TRUE\n        WHEN (spb.pilot_name = 'Han Solo' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Luke Skywalker' AND spb.starship_name LIKE '%X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Boba Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        ELSE FALSE\n    END AS is_signature_ship,\n    \n    -- Affiliation based on pilot\n    CASE\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo', 'Chewbacca', \n                             'Lando Calrissian', 'Wedge Antilles', 'Poe Dameron', \n                             'Finn', 'Rey') THEN 'Rebellion/Resistance'\n        WHEN spb.pilot_name IN ('Darth Vader', 'Emperor Palpatine', 'General Grievous',\n                             'Darth Maul', 'Count Dooku', 'Kylo Ren') THEN 'Empire/First Order/Sith'\n        WHEN spb.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Mace Windu', \n                             'Yoda', 'Qui-Gon Jinn', 'Padm\u00e9 Amidala') THEN 'Republic/Jedi'\n        WHEN spb.pilot_name IN ('Jango Fett', 'Boba Fett', 'Din Djarin') THEN 'Bounty Hunter/Independent'\n        ELSE 'Unknown'\n    END AS pilot_affiliation,\n    \n    -- Starship role classification\n    CASE\n        WHEN spb.starship_class IN ('Starfighter', 'Interceptor', 'Bomber', 'Assault Starfighter') THEN 'Combat'\n        WHEN spb.starship_class IN ('Light freighter', 'Medium freighter', 'Heavy freighter') THEN 'Transport'\n        WHEN spb.starship_class IN ('Yacht', 'Patrol craft', 'Sail barge', 'Speeder') THEN 'Personal'\n        WHEN spb.starship_class IN ('Star Destroyer', 'Battlecruiser', 'Cruiser', 'Star Dreadnought') THEN 'Capital Ship'\n        ELSE 'Utility'\n    END AS starship_role,\n    \n    -- Era classification (simplified)\n    CASE\n        WHEN spb.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Padm\u00e9 Amidala', \n                             'Qui-Gon Jinn', 'Mace Windu', 'Count Dooku', 'General Grievous') THEN 'Prequel Era'\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Han Solo', 'Leia Organa', 'Darth Vader', \n                             'Chewbacca', 'Lando Calrissian') THEN 'Original Trilogy Era'\n        WHEN spb.pilot_name IN ('Rey', 'Finn', 'Poe Dameron', 'Kylo Ren') THEN 'Sequel Era'\n        WHEN spb.pilot_name IN ('Din Djarin') THEN 'Mandalorian Era'\n        ELSE 'Unknown Era'\n    END AS story_era,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starship_pilot_base spb\nLEFT JOIN pilot_films pf ON spb.pilot_id = pf.pilot_id\nLEFT JOIN starship_films sf ON spb.starship_id = sf.starship_id\nLEFT JOIN homeworlds hw ON spb.homeworld_id::INTEGER = hw.planet_id  -- Add explicit type cast to INTEGER\nLEFT JOIN pilot_stats ps ON spb.pilot_id = ps.pilot_id\nWHERE spb.pilot_id IS NOT NULL AND spb.starship_id IS NOT NULL\nORDER BY spb.starship_name, pilot_skill DESC, spb.pilot_name", "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_starships_pilots\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.356351Z", "completed_at": "2025-03-25T13:39:13.371081Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.373452Z", "completed_at": "2025-03-25T13:39:13.373462Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029169559478759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_starships", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_starships (simplified)\n  Description: Fact table for Star Wars starships with basic fields\n*/\n\nWITH starships AS (\n    SELECT\n        s.starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.cost_in_credits,\n        s.length,\n        s.max_atmosphering_speed,\n        s.crew,\n        s.passengers,\n        s.cargo_capacity,\n        s.consumables,\n        s.hyperdrive_rating,\n        s.MGLT,\n        s.starship_class\n    FROM \"nerd_facts\".\"public\".\"int_swapi_starships\" s\n    WHERE s.starship_id IS NOT NULL\n),\n\n-- Get film data for starships\nstarship_films AS (\n    SELECT\n        fs.starship_id,\n        COUNT(DISTINCT fs.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fs.film_id = f.film_id\n    GROUP BY fs.starship_id\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(s.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS starship_key,\n    \n    -- Core identifiers\n    s.starship_id,\n    s.starship_name,\n    s.model,\n    s.manufacturer,\n    \n    -- Classification\n    s.starship_class,\n    \n    -- Basic metrics with safe type handling\n    CASE WHEN s.cost_in_credits::TEXT ~ '^[0-9]+$' THEN s.cost_in_credits::NUMERIC ELSE NULL END AS cost_credits,\n    CASE WHEN s.length::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.length::NUMERIC ELSE NULL END AS length_m,\n    CASE WHEN s.max_atmosphering_speed::TEXT ~ '^[0-9]+$' THEN s.max_atmosphering_speed::NUMERIC ELSE NULL END AS max_speed,\n    CASE WHEN s.hyperdrive_rating::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.hyperdrive_rating::NUMERIC ELSE NULL END AS hyperdrive,\n    CASE WHEN s.MGLT::TEXT ~ '^[0-9]+$' THEN s.MGLT::NUMERIC ELSE NULL END AS MGLT,\n    \n    -- Film appearances\n    COALESCE(sf.film_count, 0) AS film_count,\n    COALESCE(sf.film_names, 'None') AS film_appearances,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starships s\nLEFT JOIN starship_films sf ON s.starship_id = sf.starship_id\nORDER BY s.starship_id", "relation_name": "\"nerd_facts\".\"public\".\"fact_starships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.364386Z", "completed_at": "2025-03-25T13:39:13.373031Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.374971Z", "completed_at": "2025-03-25T13:39:13.374981Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02813553810119629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_sw_films", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_films\n  Description: Film dimension table with enriched attributes\n*/\n\nWITH film_base AS (\n  SELECT\n    f.film_id,\n    f.title,\n    f.episode_id,\n    f.opening_crawl,\n    f.director,\n    f.producer,\n    f.release_date\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films\" f\n),\n\n-- Character counts\ncharacter_counts AS (\n  SELECT\n    fc.film_id,\n    COUNT(DISTINCT fc.people_id) AS character_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  GROUP BY fc.film_id\n),\n\n-- Planet counts\nplanet_counts AS (\n  SELECT\n    fp.film_id,\n    COUNT(DISTINCT fp.planet_id) AS planet_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n  GROUP BY fp.film_id\n),\n\n-- Vehicle counts\nvehicle_counts AS (\n  SELECT\n    fv.film_id,\n    COUNT(DISTINCT fv.vehicle_id) AS vehicle_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_vehicles\" fv\n  GROUP BY fv.film_id\n),\n\n-- Starship counts\nstarship_counts AS (\n  SELECT\n    fs.film_id,\n    COUNT(DISTINCT fs.starship_id) AS starship_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n  GROUP BY fs.film_id\n),\n\n-- Species counts\nspecies_counts AS (\n  SELECT\n    fsp.film_id,\n    COUNT(DISTINCT fsp.species_id) AS species_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fsp\n  GROUP BY fsp.film_id\n)\n\nSELECT\n  -- Primary Key\n  md5(cast(coalesce(cast(fb.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n  \n  -- Natural Key\n  fb.film_id,\n  \n  -- Film Attributes\n  fb.title AS film_title,\n  fb.episode_id,\n  fb.opening_crawl,\n  fb.director,\n  fb.producer,\n  fb.release_date,\n  \n  -- Film Classification\n  CASE\n    WHEN fb.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n    WHEN fb.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n    WHEN fb.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n    ELSE 'Anthology Films'\n  END AS film_saga,\n  \n  CASE\n    WHEN fb.episode_id BETWEEN 1 AND 3 THEN 'Republic Era'\n    WHEN fb.episode_id BETWEEN 4 AND 6 THEN 'Imperial Era'\n    WHEN fb.episode_id BETWEEN 7 AND 9 THEN 'New Republic Era'\n    ELSE 'Various'\n  END AS era,\n  \n  -- Release information\n  EXTRACT(YEAR FROM fb.release_date) AS release_year,\n  \n  -- Entity counts\n  COALESCE(cc.character_count, 0) AS character_count,\n  COALESCE(pc.planet_count, 0) AS planet_count,\n  COALESCE(vc.vehicle_count, 0) AS vehicle_count,\n  COALESCE(sc.starship_count, 0) AS starship_count,\n  COALESCE(spc.species_count, 0) AS species_count,\n  \n  -- Calculated metrics\n  COALESCE(cc.character_count, 0) + \n  COALESCE(pc.planet_count, 0) + \n  COALESCE(vc.vehicle_count, 0) + \n  COALESCE(sc.starship_count, 0) + \n  COALESCE(spc.species_count, 0) AS total_entity_count,\n  \n  -- Cast size classification\n  CASE\n    WHEN COALESCE(cc.character_count, 0) <= 10 THEN 'Small Cast'\n    WHEN COALESCE(cc.character_count, 0) <= 25 THEN 'Medium Cast'\n    ELSE 'Large Cast'\n  END AS cast_size_category,\n  \n  -- Film importance\n  CASE\n    WHEN fb.episode_id IN (4, 5, 6) THEN 'Foundational'\n    WHEN fb.episode_id IN (1, 2, 3, 7, 8, 9) THEN 'Main Saga'\n    ELSE 'Extended Universe'\n  END AS film_importance,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM film_base fb\nLEFT JOIN character_counts cc ON fb.film_id = cc.film_id\nLEFT JOIN planet_counts pc ON fb.film_id = pc.film_id\nLEFT JOIN vehicle_counts vc ON fb.film_id = vc.film_id\nLEFT JOIN starship_counts sc ON fb.film_id = sc.film_id\nLEFT JOIN species_counts spc ON fb.film_id = spc.film_id\nORDER BY fb.episode_id", "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_films\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.376500Z", "completed_at": "2025-03-25T13:39:13.386601Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.393640Z", "completed_at": "2025-03-25T13:39:13.393656Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021486997604370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.fact_sw_films", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_sw_films\n  Description: Film fact table with metrics about characters, planets, vehicles, starships and species\n*/\n\n-- Film base information\nWITH film_base AS (\n  SELECT\n    f.film_id,\n    f.title,\n    f.episode_id,\n    f.release_date,\n    EXTRACT(YEAR FROM f.release_date) AS release_year\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films\" f\n),\n\n-- Character counts with gender breakdown\ncharacter_metrics AS (\n  SELECT \n    fc.film_id,\n    COUNT(DISTINCT fc.people_id) AS total_characters,\n    SUM(CASE WHEN p.gender = 'male' THEN 1 ELSE 0 END) AS male_characters,\n    SUM(CASE WHEN p.gender = 'female' THEN 1 ELSE 0 END) AS female_characters,\n    SUM(CASE WHEN p.gender NOT IN ('male', 'female') OR p.gender IS NULL THEN 1 ELSE 0 END) AS other_gender_characters,\n    -- Force users\n    SUM(CASE \n      WHEN p.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                    'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                    'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n      THEN 1 ELSE 0 \n    END) AS force_users\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_people\" p ON fc.people_id = p.people_id\n  GROUP BY fc.film_id\n),\n\n-- Planet counts\nplanet_metrics AS (\n  SELECT \n    fp.film_id,\n    COUNT(DISTINCT fp.planet_id) AS total_planets\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n  GROUP BY fp.film_id\n),\n\n-- Vehicle counts\nvehicle_metrics AS (\n  SELECT \n    fv.film_id,\n    COUNT(DISTINCT fv.vehicle_id) AS total_vehicles\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_vehicles\" fv\n  GROUP BY fv.film_id\n),\n\n-- Starship counts\nstarship_metrics AS (\n  SELECT \n    fs.film_id,\n    COUNT(DISTINCT fs.starship_id) AS total_starships\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n  GROUP BY fs.film_id\n),\n\n-- Species counts\nspecies_metrics AS (\n  SELECT \n    fsp.film_id,\n    COUNT(DISTINCT fsp.species_id) AS total_species\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fsp\n  GROUP BY fsp.film_id\n)\n\nSELECT\n  -- Primary Key (same as dim_films)\n  md5(cast(coalesce(cast(fb.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n  \n  -- Natural Key\n  fb.film_id,\n  \n  -- Film Identifiers\n  fb.title AS film_title,\n  fb.episode_id,\n  fb.release_date,\n  fb.release_year,\n  \n  -- Character Metrics\n  COALESCE(cm.total_characters, 0) AS character_count,\n  COALESCE(cm.male_characters, 0) AS male_character_count,\n  COALESCE(cm.female_characters, 0) AS female_character_count,\n  COALESCE(cm.other_gender_characters, 0) AS other_gender_character_count,\n  COALESCE(cm.force_users, 0) AS force_user_count,\n  \n  -- Gender diversity ratio (percentage of non-male characters)\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0 \n    THEN ROUND((COALESCE(cm.female_characters, 0) * 100.0 / COALESCE(cm.total_characters, 1)), 1)\n    ELSE 0\n  END AS female_character_percentage,\n  \n  -- Force user ratio\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0 \n    THEN ROUND((COALESCE(cm.force_users, 0) * 100.0 / COALESCE(cm.total_characters, 1)), 1)\n    ELSE 0\n  END AS force_user_percentage,\n  \n  -- Planet Metrics\n  COALESCE(pm.total_planets, 0) AS planet_count,\n  \n  -- Vehicle Metrics\n  COALESCE(vm.total_vehicles, 0) AS vehicle_count,\n  \n  -- Starship Metrics\n  COALESCE(sm.total_starships, 0) AS starship_count,\n  \n  -- Species Metrics\n  COALESCE(spm.total_species, 0) AS species_count,\n  \n  -- Total Entity Count\n  (COALESCE(cm.total_characters, 0) + COALESCE(pm.total_planets, 0) + \n   COALESCE(vm.total_vehicles, 0) + COALESCE(sm.total_starships, 0) +\n   COALESCE(spm.total_species, 0)) AS total_entity_count,\n  \n  -- Vehicle to Character Ratio\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0\n    THEN ROUND(((COALESCE(vm.total_vehicles, 0) + COALESCE(sm.total_starships, 0)) * 1.0 / \n           NULLIF(COALESCE(cm.total_characters, 0), 0)), 2)\n    ELSE 0\n  END AS vehicle_character_ratio,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM film_base fb\nLEFT JOIN character_metrics cm ON fb.film_id = cm.film_id\nLEFT JOIN planet_metrics pm ON fb.film_id = pm.film_id\nLEFT JOIN vehicle_metrics vm ON fb.film_id = vm.film_id\nLEFT JOIN starship_metrics sm ON fb.film_id = sm.film_id\nLEFT JOIN species_metrics spm ON fb.film_id = spm.film_id\nORDER BY fb.episode_id", "relation_name": "\"nerd_facts\".\"public\".\"fact_sw_films\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.395179Z", "completed_at": "2025-03-25T13:39:13.408162Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.414373Z", "completed_at": "2025-03-25T13:39:13.414387Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.038455963134765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.dim_sw_vehicles", "compiled": true, "compiled_code": "\n\n-- Get vehicle data from intermediate layer\nWITH vehicle_film_data AS (\n  SELECT\n    fv.vehicle_id,\n    COUNT(DISTINCT fv.film_id) AS film_count,\n    STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_vehicles\" fv\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fv.film_id = f.film_id\n  GROUP BY fv.vehicle_id\n),\n\n-- Add context data without trying numeric conversions\nvehicle_context AS (\n  SELECT\n    v.vehicle_id,\n    v.vehicle_name,  -- Already using vehicle_name\n    v.model,\n    v.manufacturer,\n    v.vehicle_class,\n    v.consumables,\n    COALESCE(vfd.film_count, 0) AS film_appearances_count,\n    COALESCE(vfd.film_appearances, 'None') AS film_appearances,\n    \n    -- Size classification based on known vehicle classes\n    CASE\n      WHEN v.vehicle_class ILIKE '%walker%' THEN 'Very Large'\n      WHEN v.vehicle_class ILIKE '%transport%' THEN 'Large'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Medium'\n      WHEN v.vehicle_class ILIKE '%bike%' OR v.vehicle_class ILIKE '%pod%' THEN 'Small'\n      ELSE 'Medium'\n    END AS vehicle_size,\n    \n    -- Purpose classification\n    CASE \n      WHEN v.vehicle_class ILIKE '%combat%' OR \n           v.vehicle_class ILIKE '%assault%' OR\n           v.vehicle_class ILIKE '%walker%' OR\n           v.vehicle_class ILIKE '%fighter%' THEN 'Military'\n      WHEN v.vehicle_class ILIKE '%transport%' OR\n           v.vehicle_class ILIKE '%cargo%' THEN 'Transport'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Civilian'\n      ELSE 'Multipurpose'\n    END AS vehicle_purpose,\n    \n    -- Terrain capability\n    CASE\n      WHEN v.vehicle_class ILIKE '%speeder%' AND v.vehicle_class ILIKE '%snow%' THEN 'Snow'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Ground'\n      WHEN v.vehicle_class ILIKE '%submarine%' THEN 'Water'\n      WHEN v.vehicle_class ILIKE '%walker%' THEN 'All-Terrain'\n      WHEN v.vehicle_class ILIKE '%airspeeder%' THEN 'Air'\n      ELSE 'Ground'\n    END AS terrain_capability,\n    \n    -- Notable vehicles\n    CASE \n      WHEN v.vehicle_name IN ('AT-AT', 'AT-ST', 'Snowspeeder', 'Speeder bike',\n                     'Imperial Speeder Bike', 'Sand Crawler', 'TIE bomber',\n                     'TIE fighter', 'X-34 landspeeder') THEN TRUE\n      ELSE FALSE\n    END AS is_notable_vehicle,\n    \n    -- Move faction affiliation calculation to the CTE so it's available for ORDER BY\n    CASE\n      WHEN LOWER(v.vehicle_name) LIKE '%imperial%' OR\n           LOWER(v.vehicle_name) IN ('at-at', 'at-st', 'at-dp', 'tie bomber',\n                                 'tie fighter', 'tie interceptor') THEN 'Imperial'\n      WHEN LOWER(v.vehicle_name) LIKE '%republic%' THEN 'Republic'\n      WHEN LOWER(v.vehicle_name) LIKE '%rebel%' OR\n           LOWER(v.vehicle_name) IN ('snowspeeder', 'x-34 landspeeder') THEN 'Rebel Alliance'\n      ELSE 'Civilian/Neutral'\n    END AS faction_affiliation\n    \n  FROM \"nerd_facts\".\"public\".\"int_swapi_vehicles\" v\n  LEFT JOIN vehicle_film_data vfd ON v.vehicle_id = vfd.vehicle_id\n)\n\n-- Final output with surrogate key and enriched attributes\nSELECT \n  md5(cast(coalesce(cast(v.vehicle_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS vehicle_key,\n  v.vehicle_id,\n  v.vehicle_name,\n  v.model,\n  v.manufacturer,\n  \n  -- Technical classifications\n  v.vehicle_class,\n  v.vehicle_size,\n  v.vehicle_purpose,\n  v.terrain_capability,\n  v.consumables,\n  \n  -- Film information\n  v.film_appearances_count,\n  v.film_appearances,\n  \n  -- Star Wars universe context - using the pre-calculated field\n  v.faction_affiliation,\n  \n  -- Calculate effectiveness rating\n  CASE \n    WHEN v.vehicle_purpose = 'Military' THEN\n      GREATEST(1, LEAST(10, 5 + \n        CASE\n          WHEN v.vehicle_size = 'Very Large' THEN 3\n          WHEN v.vehicle_size = 'Large' THEN 2\n          WHEN v.vehicle_size = 'Medium' THEN 1\n          WHEN v.vehicle_size = 'Small' THEN 0\n          ELSE 0\n        END\n      ))\n    WHEN v.vehicle_purpose = 'Transport' THEN 5\n    ELSE 3\n  END AS effectiveness_rating,\n  \n  -- Notable flag\n  v.is_notable_vehicle AS is_iconic,\n  \n  -- Time dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n  \nFROM vehicle_context v\nWHERE v.vehicle_id IS NOT NULL\nORDER BY v.faction_affiliation, v.vehicle_name", "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_vehicles\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.387454Z", "completed_at": "2025-03-25T13:39:13.406350Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.408659Z", "completed_at": "2025-03-25T13:39:13.408674Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02334308624267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"fct_documentation_coverage\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.401767Z", "completed_at": "2025-03-25T13:39:13.409369Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.417358Z", "completed_at": "2025-03-25T13:39:13.417371Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030493497848510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_duplicate_sources\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.409734Z", "completed_at": "2025-03-25T13:39:13.416437Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.418382Z", "completed_at": "2025-03-25T13:39:13.418391Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011519193649291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_hard_coded_references\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.497111Z", "completed_at": "2025-03-25T13:39:13.500991Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.503035Z", "completed_at": "2025-03-25T13:39:13.503049Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07703495025634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_sources_without_freshness\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.419882Z", "completed_at": "2025-03-25T13:39:13.501650Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.503728Z", "completed_at": "2025-03-25T13:39:13.503738Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08810067176818848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_model_naming_conventions\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.427338Z", "completed_at": "2025-03-25T13:39:13.502243Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.504410Z", "completed_at": "2025-03-25T13:39:13.504420Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0855097770690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_source_directories\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.505029Z", "completed_at": "2025-03-25T13:39:13.517235Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.517632Z", "completed_at": "2025-03-25T13:39:13.517643Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09087014198303223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_public_models_without_contract\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.512348Z", "completed_at": "2025-03-25T13:39:13.523698Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.530386Z", "completed_at": "2025-03-25T13:39:13.530401Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018837928771972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_public_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.518632Z", "completed_at": "2025-03-25T13:39:13.524233Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.532163Z", "completed_at": "2025-03-25T13:39:13.532173Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02100682258605957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.524959Z", "completed_at": "2025-03-25T13:39:13.532780Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.541804Z", "completed_at": "2025-03-25T13:39:13.541817Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031119585037231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_sources\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.533175Z", "completed_at": "2025-03-25T13:39:13.542681Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.544862Z", "completed_at": "2025-03-25T13:39:13.544873Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02243351936340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_source_tables\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.537950Z", "completed_at": "2025-03-25T13:39:13.544126Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.546387Z", "completed_at": "2025-03-25T13:39:13.546395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014950275421142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_directories", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from \"nerd_facts\".\"public\".\"int_direct_relationships\"\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_test_directories\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.548266Z", "completed_at": "2025-03-25T13:39:13.568347Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.573189Z", "completed_at": "2025-03-25T13:39:13.573215Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02772998809814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from \"nerd_facts\".\"public\".\"int_direct_relationships\"\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        \n    array[ resource_name ]\n     as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "relation_name": "\"nerd_facts\".\"public\".\"int_all_dag_relationships\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.555418Z", "completed_at": "2025-03-25T13:39:13.574061Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.576284Z", "completed_at": "2025-03-25T13:39:13.576294Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029398202896118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nrelationships as (\n    select * from \"nerd_facts\".\"public\".\"int_direct_relationships\"\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from \"nerd_facts\".\"public\".\"base_node_columns\"\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "relation_name": "\"nerd_facts\".\"public\".\"int_model_test_summary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.569745Z", "completed_at": "2025-03-25T13:39:13.574697Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.578386Z", "completed_at": "2025-03-25T13:39:13.578394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009545326232910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.nerd_universe_obt", "compiled": true, "compiled_code": "/* \n   Master One Big Table (OBT) for Nerd Universes Data\n   This model combines multiple fictional universes into a single unified table\n   with a common structure for cross-universe analysis.\n*/\n\nwith star_wars_characters as (\n    select \n        'Star Wars' as universe,\n        c.character_key as entity_key,\n        c.people_id as entity_id,\n        c.character_name as entity_name,\n        'character' as entity_type,\n        c.gender,\n        c.height_cm,\n        c.mass_kg as weight_kg,\n        c.homeworld_name as origin_location,\n        NULL as species,\n        NULL as abilities,\n        c.film_appearances as appears_in,\n        NULL as first_appearance_date,\n        'human' as creator_type\n    from \"nerd_facts\".\"public\".\"dim_sw_characters\" c\n),\n\npokemon_entities as (\n    select\n        'Pokemon' as universe,\n        p.pokemon_key as entity_key,\n        p.pokemon_id as entity_id,\n        p.pokemon_name as entity_name,\n        'pokemon' as entity_type,\n        null as gender,\n        p.height_m * 100 as height_cm,  -- convert to cm\n        p.weight_kg,\n        null as origin_location,\n        p.primary_type as species,\n        null as abilities,\n        null as appears_in,\n        null as first_appearance_date,\n        'digital' as creator_type\n    from \"nerd_facts\".\"public\".\"fact_pokemon\" p\n)\n\n-- Final Master OBT\nselect\n    universe,\n    entity_key,\n    entity_id,\n    entity_name,\n    entity_type,\n    gender,\n    height_cm,\n    weight_kg,\n    origin_location,\n    species,\n    abilities,\n    appears_in,\n    first_appearance_date,\n    creator_type,\n    -- Add computed/derived columns\n    case\n        when height_cm > 200 then 'Tall'\n        when height_cm between 100 and 200 then 'Medium'\n        when height_cm < 100 then 'Short'\n        else 'Unknown'\n    end as height_category,\n    case\n        when weight_kg > 100 then 'Heavy'\n        when weight_kg between 50 and 100 then 'Medium'\n        when weight_kg < 50 then 'Light'\n        else 'Unknown'\n    end as weight_category,\n    current_timestamp as obt_created_at\nfrom (\n    select * from star_wars_characters\n    union all\n    select * from pokemon_entities\n) as unified_entities", "relation_name": "\"nerd_facts\".\"public\".\"nerd_universe_obt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.563083Z", "completed_at": "2025-03-25T13:39:13.575960Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.577810Z", "completed_at": "2025-03-25T13:39:13.577819Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024028539657592773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_pokemon_obt_pokemon_id.17bc952d9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pokemon_id\nfrom \"nerd_facts\".\"public\".\"pokemon_obt\"\nwhere pokemon_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.581831Z", "completed_at": "2025-03-25T13:39:13.593843Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.601741Z", "completed_at": "2025-03-25T13:39:13.601757Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021307706832885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_test_directories\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.585735Z", "completed_at": "2025-03-25T13:39:13.594460Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.602450Z", "completed_at": "2025-03-25T13:39:13.602459Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025297164916992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nerd_facts_dbt.star_wars_obt", "compiled": true, "compiled_code": "/* \n   One Big Table (OBT) for Star Wars Data\n   This model combines character, film, planet, and species data into a single denormalized table\n   optimized for analytics and reporting.\n*/\n\nwith characters as (\n    select \n        c.character_key,\n        c.people_id,\n        c.character_name,\n        c.height_cm,\n        c.mass_kg,\n        c.hair_color,\n        c.skin_color,\n        c.eye_color,\n        c.birth_year,\n        c.gender,\n        c.homeworld_name\n    from \"nerd_facts\".\"public\".\"dim_sw_characters\" c\n),\n\nplanets as (\n    select\n        p.planet_key,\n        p.planet_id,\n        p.planet_name,\n        p.rotation_period,\n        p.orbital_period,\n        p.diameter,\n        p.climate,\n        p.gravity,\n        p.terrain,\n        p.surface_water,\n        p.population\n    from \"nerd_facts\".\"public\".\"dim_sw_planets\" p\n),\n\nspecies as (\n    select\n        s.species_key,\n        s.species_id,\n        s.species_name,\n        s.classification,\n        s.designation,\n        s.average_height,\n        s.skin_colors,\n        s.hair_colors,\n        s.eye_colors,\n        s.average_lifespan,\n        s.language,\n        s.homeworld_id\n    from \"nerd_facts\".\"public\".\"dim_sw_species\" s\n),\n\nfilms as (\n    select\n        f.film_key,\n        f.film_id,\n        f.film_title,\n        f.episode_id,\n        f.opening_crawl,\n        f.director,\n        f.producer,\n        f.release_date\n    from \"nerd_facts\".\"public\".\"dim_sw_films\" f\n),\n\ncharacter_films as (\n    select\n        cf.character_key,\n        cf.film_key\n    from \"nerd_facts\".\"public\".\"bridge_sw_characters_films\" cf\n)\n\n-- Final OBT assembly\nselect\n    -- Character information (core entity)\n    c.character_key,\n    c.people_id,\n    c.character_name,\n    c.height_cm,\n    c.mass_kg,\n    c.hair_color,\n    c.skin_color,\n    c.eye_color,\n    c.birth_year,\n    c.gender,\n    \n    -- Planet information (denormalized)\n    p.planet_key,\n    p.planet_id,\n    p.planet_name,\n    p.climate,\n    p.terrain,\n    p.population,\n    \n    -- Film information (denormalized)\n    f.film_key,\n    f.film_id,\n    f.film_title,\n    f.episode_id,\n    f.director,\n    f.release_date,\n    \n    -- Metadata\n    current_timestamp as obt_created_at\nfrom characters c\nleft join planets p on c.homeworld_name = p.planet_name\nleft join character_films cf on c.character_key = cf.character_key\nleft join films f on cf.film_key = f.film_key", "relation_name": "\"nerd_facts\".\"public\".\"star_wars_obt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.595540Z", "completed_at": "2025-03-25T13:39:13.604961Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.606646Z", "completed_at": "2025-03-25T13:39:13.606656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0265653133392334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "relation_name": "\"nerd_facts\".\"public\".\"fct_chained_views_dependencies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.589391Z", "completed_at": "2025-03-25T13:39:13.595187Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.603092Z", "completed_at": "2025-03-25T13:39:13.603099Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021991968154907227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_direct_join_to_source\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.607535Z", "completed_at": "2025-03-25T13:39:13.615628Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.616069Z", "completed_at": "2025-03-25T13:39:13.616079Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010775089263916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_exposures_dependent_on_private_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.611269Z", "completed_at": "2025-03-25T13:39:13.617468Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.623994Z", "completed_at": "2025-03-25T13:39:13.624006Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018161773681640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_exposure_parents_materializations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.619353Z", "completed_at": "2025-03-25T13:39:13.630734Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.631173Z", "completed_at": "2025-03-25T13:39:13.631184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014301061630249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_marts_or_intermediate_dependent_on_source\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.624892Z", "completed_at": "2025-03-25T13:39:13.633141Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.634784Z", "completed_at": "2025-03-25T13:39:13.634794Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016293048858642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_directories", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfolders as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_folders\"\n), \n\nall_dag_relationships as (\n    select * from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_model_directories\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.635817Z", "completed_at": "2025-03-25T13:39:13.647680Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.648145Z", "completed_at": "2025-03-25T13:39:13.648156Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014208316802978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    string_agg(\n        parent,\n        ', '\n        \n        ) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_multiple_sources_joined\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.641678Z", "completed_at": "2025-03-25T13:39:13.649439Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.649852Z", "completed_at": "2025-03-25T13:39:13.649861Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016339778900146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n    string_agg(\n        child,\n        ', '\n        \n        ) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_model_fanout\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.651497Z", "completed_at": "2025-03-25T13:39:13.656847Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.661910Z", "completed_at": "2025-03-25T13:39:13.661923Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011262178421020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_staging_dependent_on_marts_or_intermediate\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.657607Z", "completed_at": "2025-03-25T13:39:13.671206Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.672704Z", "completed_at": "2025-03-25T13:39:13.672716Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03197646141052246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_rejoining_of_upstream_concepts\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.662573Z", "completed_at": "2025-03-25T13:39:13.673446Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.676431Z", "completed_at": "2025-03-25T13:39:13.676438Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021158933639526367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    string_agg(\n        child,\n        ', '\n        \n        ) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_source_fanout\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.667560Z", "completed_at": "2025-03-25T13:39:13.673805Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.675406Z", "completed_at": "2025-03-25T13:39:13.675416Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01928544044494629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_root_models", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_root_models\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.678248Z", "completed_at": "2025-03-25T13:39:13.683651Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.689482Z", "completed_at": "2025-03-25T13:39:13.689495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014966487884521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_too_many_joins\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.684617Z", "completed_at": "2025-03-25T13:39:13.690630Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.696399Z", "completed_at": "2025-03-25T13:39:13.696412Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020535945892333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_staging_dependent_on_staging\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.691922Z", "completed_at": "2025-03-25T13:39:13.709716Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.710189Z", "completed_at": "2025-03-25T13:39:13.710203Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026240110397338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "compiled": true, "compiled_code": "with\n\ntests as (\n    select * from \"nerd_facts\".\"public\".\"int_model_test_summary\"\n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_missing_primary_key_tests\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.697076Z", "completed_at": "2025-03-25T13:39:13.708959Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.711500Z", "completed_at": "2025-03-25T13:39:13.711519Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022809505462646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "\"nerd_facts\".\"public\".\"fct_unused_sources\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.701506Z", "completed_at": "2025-03-25T13:39:13.712486Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.715775Z", "completed_at": "2025-03-25T13:39:13.715786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015136241912841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from \"nerd_facts\".\"public\".\"int_model_test_summary\"\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "relation_name": "\"nerd_facts\".\"public\".\"fct_test_coverage\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.718099Z", "completed_at": "2025-03-25T13:39:13.732395Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.733676Z", "completed_at": "2025-03-25T13:39:13.733688Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019306659698486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_obt_created_at.46390d7480", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect obt_created_at\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere obt_created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.727992Z", "completed_at": "2025-03-25T13:39:13.734386Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.740349Z", "completed_at": "2025-03-25T13:39:13.740362Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025119304656982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_name.3b5e13295e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_name\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere entity_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.735302Z", "completed_at": "2025-03-25T13:39:13.741494Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.741807Z", "completed_at": "2025-03-25T13:39:13.741815Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010176420211791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_universe.51c9e975b4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect universe\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere universe is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.723545Z", "completed_at": "2025-03-25T13:39:13.732883Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.734675Z", "completed_at": "2025-03-25T13:39:13.734683Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019854307174682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_id.f6a71ebb11", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_id\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere entity_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.759060Z", "completed_at": "2025-03-25T13:39:13.764409Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.766373Z", "completed_at": "2025-03-25T13:39:13.766382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021486282348632812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_chained_views_dependencies\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.749884Z", "completed_at": "2025-03-25T13:39:13.763571Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.765166Z", "completed_at": "2025-03-25T13:39:13.765182Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022281169891357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nerd_facts_dbt.not_null_star_wars_obt_character_id.aa2d5ca904", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect character_id\nfrom \"nerd_facts\".\"public\".\"star_wars_obt\"\nwhere character_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.753960Z", "completed_at": "2025-03-25T13:39:13.765962Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.767730Z", "completed_at": "2025-03-25T13:39:13.767739Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023952245712280273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_exposures_dependent_on_private_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.745858Z", "completed_at": "2025-03-25T13:39:13.764801Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.778933Z", "completed_at": "2025-03-25T13:39:13.778946Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03637957572937012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_direct_join_to_source\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.770354Z", "completed_at": "2025-03-25T13:39:13.774606Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.780076Z", "completed_at": "2025-03-25T13:39:13.780088Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011211872100830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_marts_or_intermediate_dependent_on_source\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.775062Z", "completed_at": "2025-03-25T13:39:13.779678Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.792519Z", "completed_at": "2025-03-25T13:39:13.792530Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02297806739807129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_exposure_parents_materializations\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.781063Z", "completed_at": "2025-03-25T13:39:13.793315Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.795380Z", "completed_at": "2025-03-25T13:39:13.795392Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026932477951049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_model_directories\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.786936Z", "completed_at": "2025-03-25T13:39:13.794954Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.797118Z", "completed_at": "2025-03-25T13:39:13.797129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011195182800292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_multiple_sources_joined\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.798599Z", "completed_at": "2025-03-25T13:39:13.804874Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.814504Z", "completed_at": "2025-03-25T13:39:13.814520Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020504236221313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_model_fanout\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.805754Z", "completed_at": "2025-03-25T13:39:13.815926Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.823221Z", "completed_at": "2025-03-25T13:39:13.823234Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019547700881958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_rejoining_of_upstream_concepts\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.810256Z", "completed_at": "2025-03-25T13:39:13.822015Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.823996Z", "completed_at": "2025-03-25T13:39:13.824005Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.027838945388793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_staging_dependent_on_marts_or_intermediate\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.817058Z", "completed_at": "2025-03-25T13:39:13.824638Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.837495Z", "completed_at": "2025-03-25T13:39:13.837516Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03240060806274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_source_fanout\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.826553Z", "completed_at": "2025-03-25T13:39:13.837025Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.839214Z", "completed_at": "2025-03-25T13:39:13.839229Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016921281814575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_root_models\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.832617Z", "completed_at": "2025-03-25T13:39:13.838875Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.844599Z", "completed_at": "2025-03-25T13:39:13.844613Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012879133224487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_too_many_joins\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.840499Z", "completed_at": "2025-03-25T13:39:13.846397Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.847960Z", "completed_at": "2025-03-25T13:39:13.847971Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021908998489379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_staging_dependent_on_staging\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.849258Z", "completed_at": "2025-03-25T13:39:13.858798Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.859300Z", "completed_at": "2025-03-25T13:39:13.859323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013653039932250977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_missing_primary_key_tests\"\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.853754Z", "completed_at": "2025-03-25T13:39:13.864961Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.865579Z", "completed_at": "2025-03-25T13:39:13.865591Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017220497131347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"fct_test_coverage\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-25T13:39:13.860079Z", "completed_at": "2025-03-25T13:39:13.866387Z"}, {"name": "execute", "started_at": "2025-03-25T13:39:13.866756Z", "completed_at": "2025-03-25T13:39:13.866765Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019675493240356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_unused_sources\"\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 2.3374760150909424, "args": {"require_batched_execution_for_custom_microbatch_strategy": false, "warn_error_options": {"include": [], "exclude": []}, "require_resource_names_without_spaces": false, "select": [], "quiet": false, "version_check": true, "state_modified_compare_vars": false, "use_colors_file": true, "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": true, "profiles_dir": "/home/janne/nerd-facts-dbt/dbt_project", "log_level": "info", "log_file_max_bytes": 10485760, "print": true, "show_resource_report": false, "log_path": "/home/janne/nerd-facts-dbt/dbt_project/logs", "populate_cache": true, "require_yaml_configuration_for_mf_time_spines": false, "static_parser": true, "write_json": true, "log_level_file": "debug", "source_freshness_run_project_hooks": false, "printer_width": 80, "state_modified_compare_more_unrendered_values": false, "use_colors": true, "invocation_command": "dbt docs generate", "introspect": true, "which": "generate", "indirect_selection": "eager", "partial_parse": true, "exclude": [], "empty_catalog": false, "partial_parse_file_diff": true, "favor_state": false, "strict_mode": false, "require_nested_cumulative_type_params": false, "skip_nodes_if_on_run_start_fails": false, "compile": true, "log_format": "default", "cache_selected_only": false, "project_dir": "/home/janne/nerd-facts-dbt/dbt_project", "send_anonymous_usage_stats": true, "static": false, "vars": {}, "defer": false, "log_format_file": "debug"}}