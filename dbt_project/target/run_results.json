{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-03-22T12:28:20.622097Z", "invocation_id": "d07a6f36-78d2-42fd-a409-54eeec5c318c", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-22T12:28:20.528042Z", "completed_at": "2025-03-22T12:28:20.540604Z"}, {"name": "execute", "started_at": "2025-03-22T12:28:20.541064Z", "completed_at": "2025-03-22T12:28:20.596690Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07254958152770996, "adapter_response": {}, "message": "Database Error in model fct_starships (models/marts/star_wars/fct_starships.sql)\n  operator does not exist: numeric ~ unknown\n  LINE 90:         (CASE WHEN s.passenger_capacity ~ '^[0-9]+(\\.[0-9]+)...\n                                                   ^\n  HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n  compiled code at target/run/nerd_facts_dbt/models/marts/star_wars/fct_starships.sql", "failures": null, "unique_id": "model.nerd_facts_dbt.fct_starships", "compiled": true, "compiled_code": "\n\n/*\n  Model: fct_starships\n  Description: Fact table for Star Wars starships with comprehensive metrics and classifications\n*/\n\nWITH starships AS (\n    SELECT\n        s.starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.cost_in_credits,\n        s.length,\n        s.max_atmosphering_speed AS max_speed,\n        s.crew,\n        s.passengers AS passenger_capacity,\n        s.cargo_capacity,\n        s.consumables,\n        s.hyperdrive_rating,\n        s.MGLT,\n        s.starship_class\n    FROM \"nerd_facts\".\"public\".\"int_swapi_starships\" s\n    WHERE s.starship_id IS NOT NULL\n),\n\n-- Get film data for starships\nstarship_films AS (\n    SELECT\n        fs.starship_id,\n        COUNT(DISTINCT fs.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fs.film_id = f.film_id\n    GROUP BY fs.starship_id\n),\n\n-- Get pilot data for starships\nstarship_pilots AS (\n    SELECT\n        sp.starship_id,\n        COUNT(DISTINCT sp.pilot_id) AS pilot_count,\n        STRING_AGG(p.name, ', ' ORDER BY p.name) AS pilot_names\n    FROM \"nerd_facts\".\"public\".\"bridge_sw_starships_pilots\" sp\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_people\" p ON sp.pilot_id = p.people_id\n    GROUP BY sp.starship_id\n),\n\n-- Combine the base starship data with film and pilot information\nenriched_starships AS (\n    SELECT\n        s.*,\n        COALESCE(sf.film_count, 0) AS film_appearances,\n        COALESCE(sf.film_names, 'None') AS film_names,\n        COALESCE(sp.pilot_count, 0) AS pilot_count,\n        COALESCE(sp.pilot_names, 'None') AS pilot_names\n    FROM starships s\n    LEFT JOIN starship_films sf ON s.starship_id = sf.starship_id\n    LEFT JOIN starship_pilots sp ON s.starship_id = sp.starship_id\n),\n\n-- Calculate derived metrics for each starship\nstarship_metrics AS (\n    SELECT\n        s.*,\n        \n        -- Add iconic starship flag since it doesn't exist in staging\n        CASE \n            WHEN LOWER(s.starship_name) IN (\n                'millennium falcon', 'x-wing', 'tie fighter', 'star destroyer', \n                'death star', 'slave 1', 'executor', 'tantive iv'\n            ) THEN TRUE\n            ELSE FALSE\n        END AS is_iconic,\n        \n        -- Calculate total capacity as a new field - explicit casting for safety\n        (CASE WHEN s.crew ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.crew::NUMERIC ELSE 0 END) + \n        (CASE WHEN s.passenger_capacity ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.passenger_capacity::NUMERIC ELSE 0 END) \n        AS total_capacity,\n        \n        -- Calculate crew efficiency (passengers per crew member) - with explicit casting\n        CASE\n            WHEN s.crew ~ '^[0-9]+(\\.[0-9]+)?$' AND s.crew::NUMERIC > 0\n            THEN \n                CASE \n                    WHEN s.passenger_capacity ~ '^[0-9]+(\\.[0-9]+)?$' \n                    THEN ROUND(s.passenger_capacity::NUMERIC / s.crew::NUMERIC, 2)\n                    ELSE 0\n                END\n            ELSE 0\n        END AS passengers_per_crew,\n        \n        -- Calculate cargo efficiency (cargo capacity per meter of length) - with explicit casting\n        CASE\n            WHEN s.length ~ '^[0-9]+(\\.[0-9]+)?$' AND s.length::NUMERIC > 0\n            THEN\n                CASE \n                    WHEN s.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$'\n                    THEN ROUND(s.cargo_capacity::NUMERIC / s.length::NUMERIC, 2)\n                    ELSE 0\n                END\n            ELSE 0\n        END AS cargo_efficiency,\n        \n        -- Calculate hyperdrive performance score (lower is better) - with explicit casting\n        CASE\n            WHEN s.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$' AND s.hyperdrive_rating::NUMERIC > 0 \n            THEN ROUND(100 / s.hyperdrive_rating::NUMERIC, 1)\n            ELSE 0\n        END AS hyperdrive_performance_score,\n        \n        -- Calculate overall effectiveness score (0-100) - with safe casting\n        CASE\n            WHEN s.starship_class IS NOT NULL THEN\n                GREATEST(0, LEAST(100,\n                    -- Base score\n                    50 +\n                    -- Speed bonus\n                    CASE\n                        WHEN s.MGLT ~ '^[0-9]+(\\.[0-9]+)?$' AND s.MGLT::NUMERIC > 0 \n                        THEN LEAST(20, s.MGLT::NUMERIC / 5)\n                        WHEN s.max_speed ~ '^[0-9]+(\\.[0-9]+)?$' AND s.max_speed::NUMERIC > 1000 \n                        THEN 10\n                        ELSE 0\n                    END +\n                    -- Hyperdrive bonus (lower rating is better)\n                    CASE\n                        WHEN s.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$' AND s.hyperdrive_rating::NUMERIC > 0 THEN\n                            CASE\n                                WHEN s.hyperdrive_rating::NUMERIC <= 1 THEN 20\n                                WHEN s.hyperdrive_rating::NUMERIC <= 2 THEN 10\n                                ELSE 0\n                            END\n                        ELSE 0\n                    END +\n                    -- Size bonus for large combat ships\n                    CASE\n                        WHEN s.length ~ '^[0-9]+(\\.[0-9]+)?$' AND s.length::NUMERIC > 1000 \n                        AND s.starship_class IN (\n                            'Star Destroyer', 'Dreadnought', 'Battlecruiser', 'Star Dreadnought'\n                        ) THEN 20\n                        WHEN s.length ~ '^[0-9]+(\\.[0-9]+)?$' AND s.length::NUMERIC > 500 THEN 10\n                        ELSE 0\n                    END +\n                    -- Cargo capacity bonus\n                    CASE\n                        WHEN s.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$' AND s.cargo_capacity::NUMERIC > 1000000 THEN 10\n                        ELSE 0\n                    END +\n                    -- Famous starship bonus\n                    CASE\n                        WHEN LOWER(s.starship_name) IN (\n                            'millennium falcon', 'x-wing', 'tie fighter', 'star destroyer', \n                            'death star', 'slave 1', 'executor', 'tantive iv'\n                        ) THEN 15\n                        ELSE 0\n                    END\n                ))\n            ELSE 50\n        END AS effectiveness_score\n    FROM enriched_starships s\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(sm.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS starship_key,\n    \n    -- Core identifiers\n    sm.starship_id,\n    sm.starship_name,\n    sm.model,\n    sm.manufacturer,\n    \n    -- Classification\n    sm.starship_class,\n    \n    -- Converted hyperspace rating to classification - safe casting\n    CASE\n        WHEN NOT (sm.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'Unknown'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 0.5 THEN 'Ultra Fast'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 1.0 THEN 'Very Fast'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 2.0 THEN 'Fast'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 3.0 THEN 'Average'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 4.0 THEN 'Slow'\n        ELSE 'Very Slow'\n    END AS hyperspace_rating,\n    \n    -- Faction affiliation based on model and name\n    CASE\n        WHEN LOWER(sm.starship_name) LIKE '%imperial%' OR \n             LOWER(sm.model) LIKE '%imperial%' OR \n             LOWER(sm.starship_name) LIKE '%tie%' OR\n             LOWER(sm.starship_name) = 'executor' OR\n             LOWER(sm.starship_name) = 'death star' THEN 'Imperial'\n        \n        WHEN LOWER(sm.starship_name) LIKE '%republic%' OR \n             LOWER(sm.model) LIKE '%republic%' OR \n             LOWER(sm.starship_name) LIKE '%naboo%' OR\n             LOWER(sm.manufacturer) LIKE '%republic%' OR\n             LOWER(sm.starship_name) = 'jedi starfighter' THEN 'Republic'\n        \n        WHEN LOWER(sm.starship_name) LIKE '%rebel%' OR \n             LOWER(sm.model) LIKE '%rebel%' OR\n             LOWER(sm.starship_name) LIKE '%x-wing%' OR\n             LOWER(sm.starship_name) LIKE '%y-wing%' OR\n             LOWER(sm.starship_name) LIKE '%a-wing%' OR\n             LOWER(sm.starship_name) LIKE '%b-wing%' OR\n             LOWER(sm.starship_name) = 'millennium falcon' OR\n             LOWER(sm.starship_name) = 'tantive iv' THEN 'Rebel Alliance/Resistance'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%trade federation%' OR\n             LOWER(sm.model) LIKE '%federation%' OR\n             LOWER(sm.starship_name) LIKE '%separatist%' OR\n             LOWER(sm.manufacturer) LIKE '%techno union%' THEN 'Separatist/Trade Federation'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%first order%' OR\n             LOWER(sm.model) LIKE '%first order%' THEN 'First Order'\n             \n        WHEN LOWER(sm.starship_name) = 'slave 1' OR\n             LOWER(sm.starship_name) LIKE '%firespray%' THEN 'Bounty Hunter'\n             \n        ELSE 'Civilian/Neutral'\n    END AS faction_affiliation,\n    \n    -- Physical specifications with proper handling\n    CASE WHEN sm.length ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.length::NUMERIC ELSE 0 END AS length_m,\n    CASE WHEN sm.max_speed ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.max_speed::NUMERIC ELSE 0 END AS max_atmosphering_speed,\n    CASE WHEN sm.MGLT ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.MGLT::NUMERIC ELSE 0 END AS MGLT,\n    CASE WHEN sm.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.hyperdrive_rating::NUMERIC ELSE 0 END AS hyperdrive_rating,\n    \n    -- Cost information with safe casting\n    CASE WHEN sm.cost_in_credits ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.cost_in_credits::NUMERIC ELSE 0 END AS cost_in_credits,\n    \n    -- Format costs in a readable way\n    CASE\n        WHEN NOT (sm.cost_in_credits ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'unknown'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000000 THEN TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC/1000000000.0, '999,999,990.99')) || ' billion credits'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000 THEN TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC/1000000.0, '999,999,990.99')) || ' million credits'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000 THEN TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC/1000.0, '999,999,990.99')) || ' thousand credits'\n        ELSE TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC, '999,999,999,999')) || ' credits'\n    END AS cost_formatted,\n    \n    -- Value classification - safe casting\n    CASE\n        WHEN NOT (sm.cost_in_credits ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'Unknown'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000000 THEN 'Capital Investment'\n        WHEN sm.cost_in_credits::NUMERIC >= 100000000 THEN 'Military Grade'\n        WHEN sm.cost_in_credits::NUMERIC >= 10000000 THEN 'Very Expensive'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000 THEN 'Expensive'\n        WHEN sm.cost_in_credits::NUMERIC >= 100000 THEN 'Moderate'\n        ELSE 'Affordable'\n    END AS cost_category,\n    \n    -- Capacity information - safe casting\n    CASE WHEN sm.crew ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.crew::NUMERIC ELSE 0 END AS crew_count,\n    CASE WHEN sm.passenger_capacity ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.passenger_capacity::NUMERIC ELSE 0 END AS passenger_count,\n    sm.total_capacity,\n    CASE WHEN sm.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.cargo_capacity::NUMERIC ELSE 0 END AS cargo_capacity,\n    \n    -- Format cargo in a readable way - with safe casting\n    CASE\n        WHEN NOT (sm.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'unknown'\n        WHEN sm.cargo_capacity::NUMERIC >= 1000000000 THEN TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC/1000000000.0, '999,999,990.99')) || ' million tons'\n        WHEN sm.cargo_capacity::NUMERIC >= 1000000 THEN TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC/1000000.0, '999,999,990.99')) || ' tons'\n        WHEN sm.cargo_capacity::NUMERIC >= 1000 THEN TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC/1000.0, '999,999,990.99')) || ' kg'\n        ELSE TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC, '999,999,999,999')) || ' kg'\n    END AS cargo_capacity_formatted,\n    \n    -- Consumables duration\n    sm.consumables,\n    \n    -- Derived metrics\n    sm.passengers_per_crew,\n    sm.cargo_efficiency,\n    sm.hyperdrive_performance_score,\n    sm.effectiveness_score,\n    \n    -- Use our own iconic flag\n    sm.is_iconic,\n    \n    -- Calculate starship_role directly since it doesn't exist in staging\n    CASE\n        WHEN sm.starship_class LIKE '%fighter%' OR \n             sm.starship_class LIKE '%interceptor%' THEN 'Combat - Fighter'\n        WHEN sm.starship_class LIKE '%destroyer%' OR \n             sm.starship_class LIKE '%cruiser%' OR\n             sm.starship_class LIKE '%battleship%' OR\n             sm.starship_class LIKE '%dreadnought%' THEN 'Combat - Capital Ship'\n        WHEN sm.starship_class LIKE '%bomber%' THEN 'Combat - Bomber'\n        WHEN sm.starship_class LIKE '%transport%' THEN 'Transport'\n        WHEN sm.starship_class LIKE '%shuttle%' OR \n             sm.starship_class LIKE '%yacht%' OR\n             sm.starship_class LIKE '%pleasure craft%' THEN 'Personal/Diplomatic'\n        WHEN sm.starship_class LIKE '%freighter%' THEN 'Cargo'\n        WHEN sm.starship_class LIKE '%station%' OR \n             sm.starship_name LIKE '%death star%' THEN 'Battle Station'\n        ELSE 'Multi-purpose'\n    END AS starship_role,\n    \n    -- Calculate size_class directly - with safe casting\n    CASE\n        WHEN NOT (sm.length ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'Unknown'\n        WHEN sm.length::NUMERIC > 10000 THEN 'Massive (Station)'\n        WHEN sm.length::NUMERIC > 1000 THEN 'Huge (Capital Ship)'\n        WHEN sm.length::NUMERIC > 500 THEN 'Very Large'\n        WHEN sm.length::NUMERIC > 100 THEN 'Large'\n        WHEN sm.length::NUMERIC > 50 THEN 'Medium'\n        WHEN sm.length::NUMERIC > 20 THEN 'Small'\n        ELSE 'Tiny'\n    END AS size_class,\n    \n    -- Era classification\n    CASE\n        WHEN LOWER(sm.starship_name) LIKE '%republic%' OR\n             LOWER(sm.model) LIKE '%republic%' OR\n             LOWER(sm.starship_name) LIKE '%naboo%' OR\n             LOWER(sm.starship_name) LIKE '%jedi starfighter%' OR\n             LOWER(sm.starship_name) LIKE '%droid%' THEN 'Prequel Era (Clone Wars)'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%imperial%' OR\n             LOWER(sm.model) LIKE '%imperial%' OR\n             LOWER(sm.starship_name) LIKE '%tie%' OR\n             LOWER(sm.starship_name) = 'executor' OR\n             LOWER(sm.starship_name) = 'death star' OR\n             LOWER(sm.starship_name) LIKE '%x-wing%' OR \n             LOWER(sm.starship_name) LIKE '%y-wing%' OR\n             LOWER(sm.starship_name) LIKE '%a-wing%' OR\n             LOWER(sm.starship_name) LIKE '%b-wing%' OR\n             LOWER(sm.starship_name) = 'millennium falcon' THEN 'Original Trilogy Era (Galactic Civil War)'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%first order%' OR\n             LOWER(sm.model) LIKE '%first order%' THEN 'Sequel Era (First Order Conflict)'\n             \n        ELSE 'Multiple Eras/Unspecified'\n    END AS starship_era,\n    \n    -- Relationship counts from relations\n    sm.pilot_count,\n    sm.pilot_names AS notable_pilots,\n    sm.film_appearances AS film_appearance_count,\n    sm.film_names AS film_names_list,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starship_metrics sm\nORDER BY sm.effectiveness_score DESC, sm.starship_name", "relation_name": "\"nerd_facts\".\"public\".\"fct_starships\"", "batch_results": null}], "elapsed_time": 0.22504663467407227, "args": {"send_anonymous_usage_stats": true, "defer": false, "require_nested_cumulative_type_params": false, "indirect_selection": "eager", "print": true, "use_colors_file": true, "require_resource_names_without_spaces": false, "log_format": "default", "state_modified_compare_vars": false, "static_parser": true, "empty": false, "require_batched_execution_for_custom_microbatch_strategy": false, "use_colors": true, "invocation_command": "dbt run --select fct_starships", "which": "run", "state_modified_compare_more_unrendered_values": false, "source_freshness_run_project_hooks": false, "select": ["fct_starships"], "macro_debugging": false, "populate_cache": true, "vars": {}, "log_level_file": "debug", "project_dir": "/home/janne/nerd-facts-dbt/dbt_project", "favor_state": false, "require_explicit_package_overrides_for_builtin_materializations": true, "partial_parse": true, "require_yaml_configuration_for_mf_time_spines": false, "log_file_max_bytes": 10485760, "skip_nodes_if_on_run_start_fails": false, "warn_error_options": {"include": [], "exclude": []}, "version_check": true, "cache_selected_only": false, "show_resource_report": false, "log_level": "info", "partial_parse_file_diff": true, "introspect": true, "log_format_file": "debug", "write_json": true, "printer_width": 80, "profiles_dir": "/home/janne/nerd-facts-dbt/dbt_project", "strict_mode": false, "quiet": false, "exclude": [], "log_path": "/home/janne/nerd-facts-dbt/dbt_project/logs"}}