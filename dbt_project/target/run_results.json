{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-03-17T22:50:46.425924Z", "invocation_id": "77385fb0-c05d-4d60-a889-775fa358fd5f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-17T22:50:46.283503Z", "completed_at": "2025-03-17T22:50:46.293130Z"}, {"name": "execute", "started_at": "2025-03-17T22:50:46.293553Z", "completed_at": "2025-03-17T22:50:46.405206Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12289977073669434, "adapter_response": {"_message": "SELECT 1384", "code": "SELECT", "rows_affected": 1384}, "message": "SELECT 1384", "failures": null, "unique_id": "model.nerd_facts_dbt.fct_power_ratings", "compiled": true, "compiled_code": "/*\n  Model: fct_power_ratings (Ultra-Simplified)\n  Description: Basic power metrics across universes with consistent types\n*/\n\nWITH sw_power AS (\n    SELECT\n        md5(cast(coalesce(cast('star_wars' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'star_wars' AS universe,\n        p.id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE WHEN p.force_sensitive THEN 'true' ELSE 'false' END AS has_special_abilities  -- Use CASE instead of COALESCE\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_people\" p\n),\n\npokemon_power AS (\n    SELECT\n        md5(cast(coalesce(cast('pokemon' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'pokemon' AS universe,\n        p.id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'true' AS has_special_abilities  -- String literal instead of boolean\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n),\n\nnetrunner_power AS (\n    SELECT\n        md5(cast(coalesce(cast('netrunner' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(c.code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'netrunner' AS universe,\n        c.code AS character_source_id,\n        c.card_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE \n            WHEN c.is_unique_card IS NULL THEN 'false'\n            -- Compare as text instead of using as boolean\n            WHEN c.is_unique_card = 'true' OR c.is_unique_card = 't' OR c.is_unique_card = '1' THEN 'true' \n            ELSE 'false' \n        END AS has_special_abilities\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    WHERE c.type_name = 'Identity'  -- Only include identity cards\n)\n\n-- Simply combine all data with minimal processing\nSELECT\n    character_key,\n    universe,\n    character_source_id,\n    character_name,\n    base_power,\n    mobility,\n    battle_experience,\n    has_special_abilities,\n    \n    -- Simple power score (all equal for now)\n    3 AS normalized_power_score,\n    \n    -- Simplified tier (all equal)\n    'C-Tier' AS power_tier,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_power\n    UNION ALL\n    SELECT * FROM pokemon_power\n    UNION ALL\n    SELECT * FROM netrunner_power\n) AS combined_power", "relation_name": "\"nerd_facts\".\"public\".\"fct_power_ratings\"", "batch_results": null}], "elapsed_time": 0.27536797523498535, "args": {"partial_parse": true, "version_check": true, "use_colors_file": true, "print": true, "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": true, "printer_width": 80, "log_level": "info", "which": "run", "empty": false, "log_file_max_bytes": 10485760, "defer": false, "indirect_selection": "eager", "macro_debugging": false, "exclude": [], "source_freshness_run_project_hooks": false, "state_modified_compare_more_unrendered_values": false, "require_yaml_configuration_for_mf_time_spines": false, "project_dir": "/home/janne/nerd-facts-dbt/dbt_project", "log_path": "/home/janne/nerd-facts-dbt/dbt_project/logs", "select": ["marts.core.fct_power_ratings"], "invocation_command": "dbt run --models marts.core.fct_power_ratings", "populate_cache": true, "require_batched_execution_for_custom_microbatch_strategy": false, "use_colors": true, "cache_selected_only": false, "require_nested_cumulative_type_params": false, "show_resource_report": false, "log_format_file": "debug", "log_level_file": "debug", "write_json": true, "log_format": "default", "require_explicit_package_overrides_for_builtin_materializations": true, "profiles_dir": "/home/janne/nerd-facts-dbt/dbt_project", "static_parser": true, "strict_mode": false, "favor_state": false, "state_modified_compare_vars": false, "skip_nodes_if_on_run_start_fails": false, "partial_parse_file_diff": true, "require_resource_names_without_spaces": false, "introspect": true, "quiet": false}}