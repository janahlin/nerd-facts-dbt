{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-03-17T22:50:45.673777Z", "invocation_id": "77385fb0-c05d-4d60-a889-775fa358fd5f", "env": {}, "project_name": "nerd_facts_dbt", "project_id": "7d95999fae80835141c5f59ccf21274b", "user_id": "a33a0cc6-618e-48cb-87c4-b72647cdd80b", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.nerd_facts_dbt.stg_swapi_vehicles": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_vehicles", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_vehicles.sql", "original_file_path": "models/staging/swapi/stg_swapi_vehicles.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_vehicles", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_vehicles"], "alias": "stg_swapi_vehicles", "checksum": {"name": "sha256", "checksum": "2e1a17a8181266b88930f915939383b3da79faf32e2fde399519ebb9850d4944"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars vehicle data with terrain capabilities and classifications", "columns": {"id": {"name": "id", "description": "Primary key for vehicles", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Vehicle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Vehicle model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Vehicle manufacturer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_credits": {"name": "cost_in_credits", "description": "Cost in galactic credits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Length in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum speed in atmosphere", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Number of passengers vehicle can transport", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Time period before requiring resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_class": {"name": "vehicle_class", "description": "Vehicle class (e.g., wheeled, repulsorcraft)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSONB array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for vehicle data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_names": {"name": "pilot_names", "description": "Array of pilot names for this vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film titles this vehicle appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_name": {"name": "vehicle_name", "description": "Name of the vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length_m": {"name": "length_m", "description": "Length in meters (properly converted)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_speed": {"name": "max_speed", "description": "Maximum speed in atmosphere (numeric value)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew_count": {"name": "crew_count", "description": "Number of crew required (numeric value)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passenger_capacity": {"name": "passenger_capacity", "description": "Number of passengers vehicle can transport (numeric value)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_count": {"name": "pilot_count", "description": "Number of pilots for this vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_appearances": {"name": "film_appearances", "description": "Number of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_purpose": {"name": "vehicle_purpose", "description": "Vehicle classification by purpose (Military, Transport, Personal)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_size": {"name": "vehicle_size", "description": "Size classification of vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "terrain_capability": {"name": "terrain_capability", "description": "Terrain types the vehicle can navigate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_notable_vehicle": {"name": "is_notable_vehicle", "description": "Whether this is a notable vehicle in the Star Wars saga", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_capacity": {"name": "total_capacity", "description": "Total capacity (crew + passengers)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742217557.9355276, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_vehicles\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_vehicles\n  Description: Standardizes Star Wars vehicle data from SWAPI\n  Source: raw.swapi_vehicles\n*/\n\nWITH raw_data AS (\n    SELECT\n        id,\n        name,\n        model,\n        manufacturer,\n        cost_in_credits,\n        length,\n        max_atmosphering_speed,\n        crew,\n        passengers,\n        cargo_capacity,\n        consumables,\n        vehicle_class,\n        \n        -- Handle relationship arrays with proper type casting\n        CASE WHEN pilots IS NULL OR pilots = '' THEN NULL::jsonb ELSE pilots::jsonb END AS pilots,\n        CASE WHEN films IS NULL OR films = '' THEN NULL::jsonb ELSE films::jsonb END AS films,\n        \n        -- Source URL and tracking\n        url,\n        created,\n        edited\n    FROM {{ source('swapi', 'vehicles') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS vehicle_name,\n    \n    -- Vehicle specifications with proper numeric handling\n    model,\n    manufacturer,\n    CAST(NULLIF(REPLACE(cost_in_credits, ',', ''), 'unknown') AS NUMERIC) AS cost_in_credits,\n    CAST(NULLIF(length, 'unknown') AS NUMERIC) AS length_m,\n    CAST(NULLIF(REPLACE(max_atmosphering_speed, ',', ''), 'unknown') AS NUMERIC) AS max_speed,\n    \n    -- Convert crew to numeric with error handling\n    CASE\n        WHEN crew ~ '^[0-9,.]+$' THEN CAST(REPLACE(crew, ',', '') AS NUMERIC)\n        WHEN crew LIKE '%-%' THEN \n            CAST(SPLIT_PART(REPLACE(crew, ',', ''), '-', 1) AS NUMERIC) +\n            (CAST(SPLIT_PART(REPLACE(crew, ',', ''), '-', 2) AS NUMERIC) - \n             CAST(SPLIT_PART(REPLACE(crew, ',', ''), '-', 1) AS NUMERIC)) / 2\n        ELSE NULL\n    END AS crew_count,\n    \n    -- Convert passengers to numeric with error handling\n    CASE\n        WHEN passengers ~ '^[0-9,.]+$' THEN CAST(REPLACE(passengers, ',', '') AS NUMERIC)\n        WHEN passengers LIKE '%-%' THEN \n            CAST(SPLIT_PART(REPLACE(passengers, ',', ''), '-', 1) AS NUMERIC) +\n            (CAST(SPLIT_PART(REPLACE(passengers, ',', ''), '-', 2) AS NUMERIC) - \n             CAST(SPLIT_PART(REPLACE(passengers, ',', ''), '-', 1) AS NUMERIC)) / 2\n        ELSE NULL\n    END AS passenger_capacity,\n    \n    CAST(NULLIF(REPLACE(cargo_capacity, ',', ''), 'unknown') AS NUMERIC) AS cargo_capacity,\n    consumables,\n    vehicle_class,\n    \n    -- Entity relationships with counts\n    COALESCE(jsonb_array_length(pilots), 0) AS pilot_count,\n    COALESCE(jsonb_array_length(films), 0) AS film_appearances,\n    \n    -- Keep raw arrays for downstream usage\n    pilots,\n    films,\n    \n    -- Create arrays of extracted names (placeholder for future enhancement)\n    NULL AS pilot_names,\n    NULL AS film_names,\n    \n    -- Derived vehicle classifications\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' OR LOWER(vehicle_class) LIKE '%tank%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%fighter%' OR LOWER(vehicle_class) LIKE '%bomber%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%transport%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' THEN \n            CASE\n                WHEN LOWER(name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian'\n            END\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN\n            CASE\n                WHEN LOWER(name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian' \n            END\n        WHEN LOWER(vehicle_class) LIKE '%shuttle%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' OR LOWER(vehicle_class) LIKE '%yacht%' THEN 'Leisure/Luxury'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' OR LOWER(vehicle_class) LIKE '%digger%' THEN 'Industrial'\n        ELSE 'Multipurpose'\n    END AS vehicle_purpose,\n    \n    -- Size classification\n    CASE\n        WHEN CAST(NULLIF(length, 'unknown') AS NUMERIC) > 100 THEN 'Massive'\n        WHEN CAST(NULLIF(length, 'unknown') AS NUMERIC) > 20 THEN 'Large'\n        WHEN CAST(NULLIF(length, 'unknown') AS NUMERIC) > 10 THEN 'Medium'\n        WHEN CAST(NULLIF(length, 'unknown') AS NUMERIC) > 5 THEN 'Small'\n        ELSE 'Tiny'\n    END AS vehicle_size,\n    \n    -- Terrain capabilities\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' AND LOWER(vehicle_class) NOT LIKE '%airspeeder%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN 'Air'\n        WHEN LOWER(vehicle_class) LIKE '%submarine%' THEN 'Water'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' AND LOWER(vehicle_class) LIKE '%sail%' THEN 'Ground/Water'\n        WHEN LOWER(vehicle_class) LIKE '%snowspeeder%' OR LOWER(name) LIKE '%snow%' THEN 'Snow/Ice'\n        WHEN LOWER(vehicle_class) LIKE '%repulsor%' THEN 'Air/Ground'\n        ELSE 'Multi-terrain'\n    END AS terrain_capability,\n    \n    -- Notable vehicle flag\n    CASE\n        WHEN LOWER(name) IN ('at-at', 'at-st', 'snowspeeder', 'speeder bike', 'tie bomber', \n                           'tie fighter', 'x-34 landspeeder', 'sand crawler', 'sail barge') THEN TRUE\n        ELSE FALSE\n    END AS is_notable_vehicle,\n    \n    -- Calculate total capacity as sum of crew and passengers\n    (\n        CASE\n            WHEN crew ~ '^[0-9,.]+$' THEN CAST(REPLACE(crew, ',', '') AS NUMERIC)\n            WHEN crew LIKE '%-%' THEN \n                CAST(SPLIT_PART(REPLACE(crew, ',', ''), '-', 1) AS NUMERIC) +\n                (CAST(SPLIT_PART(REPLACE(crew, ',', ''), '-', 2) AS NUMERIC) - \n                CAST(SPLIT_PART(REPLACE(crew, ',', ''), '-', 1) AS NUMERIC)) / 2\n            ELSE 0\n        END +\n        CASE\n            WHEN passengers ~ '^[0-9,.]+$' THEN CAST(REPLACE(passengers, ',', '') AS NUMERIC)\n            WHEN passengers LIKE '%-%' THEN \n                CAST(SPLIT_PART(REPLACE(passengers, ',', ''), '-', 1) AS NUMERIC) +\n                (CAST(SPLIT_PART(REPLACE(passengers, ',', ''), '-', 2) AS NUMERIC) - \n                CAST(SPLIT_PART(REPLACE(passengers, ',', ''), '-', 1) AS NUMERIC)) / 2\n            ELSE 0\n        END\n    ) AS total_capacity,\n    \n    -- Source URL\n    url,\n    \n    -- ETL tracking fields (placeholders for future enhancement)\n    NULL::TIMESTAMP AS fetch_timestamp,\n    NULL::TIMESTAMP AS processed_timestamp,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_starships": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_starships", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_starships.sql", "original_file_path": "models/staging/swapi/stg_swapi_starships.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_starships", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_starships"], "alias": "stg_swapi_starships", "checksum": {"name": "sha256", "checksum": "d040f8ca5557ba233f3b29a8666f001f9cf3a7e869b206b0833a4b305b5bd9d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars starship data with cleaned values and derived classifications", "columns": {"id": {"name": "id", "description": "Primary key for starships", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Starship model specification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Company that manufactured the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum atmospheric speed in km/h", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Length of starship in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hyperdrive_rating": {"name": "hyperdrive_rating", "description": "Hyperdrive class rating (lower is better)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew members required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Maximum passenger capacity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in metric tons", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Length of time the starship can sustain crew without resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "MGLT": {"name": "MGLT", "description": "Maximum speed in megalights per hour", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_class": {"name": "starship_class", "description": "Class of the starship (e.g., Star Destroyer, Light freighter)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSONB array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_name": {"name": "starship_name", "description": "Name of the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length_m": {"name": "length_m", "description": "Length in meters (properly converted)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_speed": {"name": "max_speed", "description": "Maximum speed in atmosphere (numeric value)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew_count": {"name": "crew_count", "description": "Number of crew required (numeric value)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passenger_capacity": {"name": "passenger_capacity", "description": "Number of passengers starship can transport (numeric value)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_count": {"name": "pilot_count", "description": "Number of pilots for this starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_appearances": {"name": "film_appearances", "description": "Number of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for starship data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_names": {"name": "pilot_names", "description": "Array of pilot names for this starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film titles this starship appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ship_purpose": {"name": "ship_purpose", "description": "Starship classification by purpose", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ship_size": {"name": "ship_size", "description": "Size classification of starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_notable_ship": {"name": "is_notable_ship", "description": "Whether this is a notable ship in the Star Wars saga", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_capacity": {"name": "total_capacity", "description": "Total capacity (crew + passengers)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742217557.906726, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_starships\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nWITH raw_data AS (\n    SELECT\n        id,\n        name,\n        model,\n        manufacturer,\n        cost_in_credits,\n        length,\n        max_atmosphering_speed,\n        crew,\n        passengers,\n        cargo_capacity,\n        consumables,\n        hyperdrive_rating,\n        MGLT,\n        starship_class,\n        pilots,\n        films,\n        url,\n        created,\n        edited\n    FROM {{ source('swapi', 'starships') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    id,\n    name AS starship_name,\n    model,\n    manufacturer,\n    starship_class,\n    cost_in_credits,\n    length AS length_m,\n    max_atmosphering_speed AS max_speed,\n    hyperdrive_rating,\n    MGLT AS mglt,\n    crew AS crew_count,\n    passengers AS passenger_capacity,\n    cargo_capacity,\n    consumables,\n    \n    -- Entity counts \n    CASE WHEN pilots IS NOT NULL THEN jsonb_array_length(pilots::jsonb) ELSE 0 END AS pilot_count,\n    CASE WHEN films IS NOT NULL THEN jsonb_array_length(films::jsonb) ELSE 0 END AS film_appearances,\n    \n    -- Raw arrays\n    pilots::jsonb,\n    films::jsonb,\n    \n    -- Ship classification\n    CASE\n        WHEN lower(starship_class) IN ('corvette', 'frigate', 'star destroyer', 'dreadnought')\n            OR lower(name) LIKE '%star destroyer%' THEN 'Military'\n        WHEN lower(starship_class) IN ('transport', 'freighter', 'yacht') \n            OR lower(name) LIKE '%transport%' THEN 'Commercial'\n        WHEN lower(starship_class) IN ('starfighter', 'bomber', 'assault ship')\n            OR lower(name) LIKE '%fighter%' THEN 'Starfighter'\n        ELSE 'Other'\n    END AS ship_purpose,\n    \n    -- Size classification (simplified)\n    'Unknown' AS ship_size,\n    \n    -- Notable ship flag\n    CASE\n        WHEN name IN ('Millennium Falcon', 'Death Star', 'Star Destroyer', \n                     'X-wing', 'TIE Advanced x1', 'Executor', 'Slave 1') \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_ship,\n    \n    -- Total capacity (simplified)\n    0 AS total_capacity,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    url,\n    \n    -- Placeholders\n    NULL AS pilot_names,\n    NULL AS film_names,\n    NULL::TIMESTAMP AS fetch_timestamp,\n    NULL::TIMESTAMP AS processed_timestamp,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_films": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_films.sql", "original_file_path": "models/staging/swapi/stg_swapi_films.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_films", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_films"], "alias": "stg_swapi_films", "checksum": {"name": "sha256", "checksum": "0abd191266418f9287653b3671820448fa408ff771ee286171d82ae41e161bb5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars film data with chronological ordering and entity counts", "columns": {"id": {"name": "id", "description": "Primary key for films", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_title": {"name": "film_title", "description": "Film title", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "episode_id": {"name": "episode_id", "description": "Episode number in the saga", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "opening_crawl": {"name": "opening_crawl", "description": "Opening crawl text from the film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "director": {"name": "director", "description": "Film director", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "producer": {"name": "producer", "description": "Film producer(s)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "Theatrical release date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_year": {"name": "release_year", "description": "Year the film was released", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "chronological_order": {"name": "chronological_order", "description": "Order of the film in the Star Wars timeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "trilogy": {"name": "trilogy", "description": "Which trilogy the film belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "characters": {"name": "characters", "description": "JSONB array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planets": {"name": "planets", "description": "JSONB array of planet references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starships": {"name": "starships", "description": "JSONB array of starship references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles": {"name": "vehicles", "description": "JSONB array of vehicle references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "JSONB array of species references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "character_names": {"name": "character_names", "description": "Array of character names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planet_names": {"name": "planet_names", "description": "Array of planet names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_names": {"name": "species_names", "description": "Array of species names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_names": {"name": "starship_names", "description": "Array of starship names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_names": {"name": "vehicle_names", "description": "Array of vehicle names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the film data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "character_count": {"name": "character_count", "description": "Number of characters appearing in the film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planet_count": {"name": "planet_count", "description": "Number of planets appearing in the film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_count": {"name": "starship_count", "description": "Number of starships appearing in the film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_count": {"name": "vehicle_count", "description": "Number of vehicles appearing in the film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_count": {"name": "species_count", "description": "Number of species appearing in the film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "opening_crawl_word_count": {"name": "opening_crawl_word_count", "description": "Word count of the opening crawl", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742217557.9141982, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_films\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_films\n  Description: Standardizes Star Wars film data from SWAPI\n  Source: raw.swapi_films\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types\n  - Character and vehicle references are extracted as counts\n  - Additional derived fields help with film classification\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        title,\n        episode_id,\n        opening_crawl,\n        director,\n        producer,\n        release_date,\n        \n        -- Handle relationship arrays with proper type casting\n        CASE WHEN characters IS NULL OR characters = '' THEN NULL::jsonb ELSE characters::jsonb END AS characters,\n        CASE WHEN planets IS NULL OR planets = '' THEN NULL::jsonb ELSE planets::jsonb END AS planets,\n        CASE WHEN starships IS NULL OR starships = '' THEN NULL::jsonb ELSE starships::jsonb END AS starships,\n        CASE WHEN vehicles IS NULL OR vehicles = '' THEN NULL::jsonb ELSE vehicles::jsonb END AS vehicles,\n        CASE WHEN species IS NULL OR species = '' THEN NULL::jsonb ELSE species::jsonb END AS species,\n        \n        -- Source URL and tracking fields\n        url,\n        created,\n        edited\n    FROM {{ source('swapi', 'films') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    title AS film_title,\n    CAST(episode_id AS INTEGER) AS episode_id,  -- Cast to integer\n    \n    -- Film metadata\n    opening_crawl,\n    director,\n    producer,\n    CAST(release_date AS DATE) AS release_date,\n    \n    -- Entity counts with error handling\n    COALESCE(jsonb_array_length(characters), 0) AS character_count,\n    COALESCE(jsonb_array_length(planets), 0) AS planet_count,\n    COALESCE(jsonb_array_length(starships), 0) AS starship_count,\n    COALESCE(jsonb_array_length(vehicles), 0) AS vehicle_count,\n    COALESCE(jsonb_array_length(species), 0) AS species_count,\n    \n    -- Keep raw arrays for downstream usage\n    characters,\n    planets,\n    starships,\n    vehicles,\n    species,\n    \n    -- Create arrays of extracted names for reporting (placeholder for future enhancement)\n    NULL AS character_names,\n    NULL AS planet_names,\n    \n    -- Derived film classification (use the casted episode_id field)\n    CASE\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Original Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n        ELSE 'Anthology'\n    END AS trilogy,\n    \n    -- Era classification (use the casted episode_id field)\n    CASE\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Republic Era'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Imperial Era'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'New Republic Era'\n        ELSE 'Various'\n    END AS era,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Source URL\n    url,\n    \n    -- ETL tracking fields (placeholder for future enhancement)\n    NULL::TIMESTAMP AS fetch_timestamp,\n    NULL::TIMESTAMP AS processed_timestamp,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data\nORDER BY episode_id::INTEGER  -- Cast to integer for ordering", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_planets": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_planets", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_planets.sql", "original_file_path": "models/staging/swapi/stg_swapi_planets.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_planets", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_planets"], "alias": "stg_swapi_planets", "checksum": {"name": "sha256", "checksum": "7fb4434cbf5f4187b27e59466219530e034e48b8fc3c20a8f674f8c7ed84d3cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars planet data with habitability scores and climate classifications", "columns": {"id": {"name": "id", "description": "Primary key for planets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Planet name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rotation_period": {"name": "rotation_period", "description": "Hours to complete one rotation on axis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "orbital_period": {"name": "orbital_period", "description": "Days to complete one orbit around star", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "diameter": {"name": "diameter", "description": "Diameter in kilometers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "climate": {"name": "climate", "description": "Climate types on planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gravity": {"name": "gravity", "description": "Gravity relative to standard", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "terrain": {"name": "terrain", "description": "Terrain types on planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "surface_water": {"name": "surface_water", "description": "Percentage of planet covered by water", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "population": {"name": "population", "description": "Population count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "resident_count": {"name": "resident_count", "description": "Number of residents on this planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_appearances": {"name": "film_appearances", "description": "Number of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_temperate": {"name": "is_temperate", "description": "Whether the planet has a temperate climate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_vegetation": {"name": "has_vegetation", "description": "Whether the planet has significant vegetation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_water_world": {"name": "is_water_world", "description": "Whether the planet is primarily covered in water", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_desert_world": {"name": "is_desert_world", "description": "Whether the planet is primarily desert", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "habitability_score": {"name": "habitability_score", "description": "Calculated habitability score (0-100)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_notable_planet": {"name": "is_notable_planet", "description": "Whether this is a notable planet in the Star Wars saga", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for planet data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "residents": {"name": "residents", "description": "JSONB array of resident references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "resident_names": {"name": "resident_names", "description": "Array of resident names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film titles this planet appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742217557.9254682, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_planets\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_planets\n  Description: Standardizes Star Wars planet data from SWAPI\n  Source: raw.swapi_planets\n*/\n\nWITH raw_data AS (\n    SELECT\n        id,\n        name,\n        rotation_period,\n        orbital_period,\n        diameter,\n        climate,\n        gravity,\n        terrain,\n        surface_water,\n        population,\n        url,\n        created,\n        edited\n    FROM {{ source('swapi', 'planets') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS planet_name,\n    \n    -- Physical characteristics with proper numeric handling\n    CAST(NULLIF(rotation_period, 'unknown') AS NUMERIC) AS rotation_period,\n    CAST(NULLIF(orbital_period, 'unknown') AS NUMERIC) AS orbital_period,\n    CAST(NULLIF(diameter, 'unknown') AS NUMERIC) AS diameter,\n    climate,\n    gravity,\n    terrain,\n    CAST(NULLIF(surface_water, 'unknown') AS NUMERIC) AS surface_water,\n    CAST(NULLIF(REPLACE(population, ',', ''), 'unknown') AS NUMERIC) AS population,\n    \n    -- Entity relationships - we'll populate these later\n    0 AS resident_count,\n    0 AS film_appearances,\n    \n    -- Placeholders for raw arrays\n    NULL::jsonb AS residents,\n    NULL::jsonb AS films,\n    \n    -- Placeholders for name arrays\n    NULL AS resident_names,\n    NULL AS film_names,\n    \n    -- Terrain classification flags\n    terrain LIKE '%temperate%' AS is_temperate,\n    terrain LIKE '%forest%' OR terrain LIKE '%jungle%' OR terrain LIKE '%grassland%' AS has_vegetation,\n    terrain LIKE '%ocean%' OR terrain LIKE '%lake%' OR surface_water = '100' AS is_water_world,\n    terrain LIKE '%desert%' AS is_desert_world,\n    \n    -- Source URL \n    url,\n    \n    -- ETL tracking fields\n    NULL::TIMESTAMP AS fetch_timestamp,\n    NULL::TIMESTAMP AS processed_timestamp,\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_people": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_people", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_people.sql", "original_file_path": "models/staging/swapi/stg_swapi_people.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_people", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_people"], "alias": "stg_swapi_people", "checksum": {"name": "sha256", "checksum": "1a2937beacd12cad8b6b9c41ce155856d4e5730fd99bef507b26cfb8f02c6803"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars character data with derived attributes and force sensitivity", "columns": {"id": {"name": "id", "description": "Primary key for characters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Character name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "mass": {"name": "mass", "description": "Mass in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_color": {"name": "hair_color", "description": "Hair color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_color": {"name": "skin_color", "description": "Skin color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_color": {"name": "eye_color", "description": "Eye color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "birth_year": {"name": "birth_year", "description": "Birth year using in-universe BBY/ABY dating system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gender": {"name": "gender", "description": "Character gender", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld": {"name": "homeworld", "description": "ID of character's homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_id": {"name": "species_id", "description": "ID of character's species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles": {"name": "vehicles", "description": "JSONB array of vehicles piloted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starships": {"name": "starships", "description": "JSONB array of starships piloted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height_cm": {"name": "height_cm", "description": "Height converted to numeric centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "mass_kg": {"name": "mass_kg", "description": "Mass converted to numeric kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bmi": {"name": "bmi", "description": "Calculated Body Mass Index", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "force_sensitive": {"name": "force_sensitive", "description": "Whether the character is force sensitive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "force_rating": {"name": "force_rating", "description": "Character's strength with the Force (1-5)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ships_piloted": {"name": "ships_piloted", "description": "Number of starships piloted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles_operated": {"name": "vehicles_operated", "description": "Number of vehicles operated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_appearances": {"name": "film_appearances", "description": "Number of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "character_era": {"name": "character_era", "description": "Era classification of the character", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for character data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people_names": {"name": "people_names", "description": "Array of character names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film titles this character appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742217557.9195147, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_people\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_people\n  Description: Standardizes Star Wars character data from SWAPI\n  Source: raw.swapi_people\n  \n  Notes:\n  - Physical attributes are cleaned and converted to proper numeric types\n  - Additional derived fields are added for character analysis\n  - NOTE: This table doesn't have direct species linkage - this will need to be\n    joined from the raw.swapi_species table which references people\n*/\n\nWITH raw_data AS (\n    SELECT\n        id,\n        name,\n        height,\n        mass,\n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        url,\n        created,\n        edited\n    FROM {{ source('swapi', 'people') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    id,\n    name,\n    NULL AS species_id,\n    homeworld AS homeworld_id,\n    \n    -- Convert height to numeric\n    CASE \n        WHEN height IS NULL OR lower(height) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(height, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS height_cm,\n    \n    -- Convert mass to numeric\n    CASE \n        WHEN mass IS NULL OR lower(mass) = 'unknown' THEN NULL\n        ELSE NULLIF(REGEXP_REPLACE(mass, '[^0-9\\.]', '', 'g'), '')::NUMERIC\n    END AS mass_kg,\n    \n    -- Character attributes\n    LOWER(COALESCE(hair_color, 'unknown')) AS hair_color,\n    LOWER(COALESCE(skin_color, 'unknown')) AS skin_color,\n    LOWER(COALESCE(eye_color, 'unknown')) AS eye_color,\n    birth_year,\n    LOWER(COALESCE(gender, 'unknown')) AS gender,\n    \n    -- Force detection\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'obi-wan kenobi', 'yoda', \n                           'emperor palpatine', 'count dooku', 'qui-gon jinn', 'mace windu',\n                           'rey', 'kylo ren', 'anakin skywalker', 'leia organa', \n                           'ahsoka tano', 'darth maul')\n        THEN TRUE\n        ELSE FALSE\n    END AS force_sensitive,\n    \n    -- Placeholders for relationship fields\n    0 AS starship_count,\n    0 AS vehicle_count,\n    0 AS film_appearances,\n    NULL::jsonb AS vehicles,\n    NULL::jsonb AS starships,\n    NULL::jsonb AS films,\n    NULL AS film_names,\n    NULL AS starship_names,\n    NULL AS vehicle_names,\n    NULL AS character_era,\n    \n    -- Metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    url,\n    NULL::TIMESTAMP AS fetch_timestamp,\n    NULL::TIMESTAMP AS processed_timestamp,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_species": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_species", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_species.sql", "original_file_path": "models/staging/swapi/stg_swapi_species.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_species", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_species"], "alias": "stg_swapi_species", "checksum": {"name": "sha256", "checksum": "187afb89d58f5048d68907479e8b7aebbd6a6b1b5c04c880771ef4f5fb8f4cb5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars species data with intelligence levels and classifications", "columns": {"id": {"name": "id", "description": "Primary key for species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Species name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification": {"name": "classification", "description": "Biological classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "designation": {"name": "designation", "description": "Designation (sentient, non-sentient, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_height": {"name": "average_height", "description": "Average height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_colors": {"name": "skin_colors", "description": "Possible skin colors for this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_colors": {"name": "hair_colors", "description": "Possible hair colors for this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_colors": {"name": "eye_colors", "description": "Possible eye colors for this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_lifespan": {"name": "average_lifespan", "description": "Average lifespan in years", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld": {"name": "homeworld", "description": "ID of species homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "language": {"name": "language", "description": "Primary language spoken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_height_cm": {"name": "average_height_cm", "description": "Average height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_lifespan_years": {"name": "average_lifespan_years", "description": "Average lifespan in years", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_indefinite_lifespan": {"name": "has_indefinite_lifespan", "description": "Whether species lives indefinitely", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_colors_array": {"name": "eye_colors_array", "description": "Array of possible eye colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_colors_array": {"name": "hair_colors_array", "description": "Array of possible hair colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_colors_array": {"name": "skin_colors_array", "description": "Array of possible skin colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "character_count": {"name": "character_count", "description": "Number of characters of this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_appearances": {"name": "film_appearances", "description": "Number of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_organic": {"name": "is_organic", "description": "Whether the species is organic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_artificial": {"name": "is_artificial", "description": "Whether the species is artificial", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "intelligence_level": {"name": "intelligence_level", "description": "Estimated species intelligence level", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "longevity_class": {"name": "longevity_class", "description": "Classification of species lifespan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_notable_species": {"name": "is_notable_species", "description": "Whether this is a notable species in the Star Wars saga", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for species data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people": {"name": "people", "description": "JSONB array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people_names": {"name": "people_names", "description": "Array of character names of this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film titles this species appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742217557.9321492, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_species\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_species\n  Description: Standardizes Star Wars species data from SWAPI\n  Source: raw.swapi_species\n*/\n\nWITH raw_data AS (\n    SELECT\n        id,\n        name,\n        classification,\n        designation,\n        average_height,\n        skin_colors,\n        hair_colors,\n        eye_colors,\n        average_lifespan,\n        homeworld,\n        language,\n        url,\n        created,\n        edited\n    FROM {{ source('swapi', 'species') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS species_name,\n    \n    -- Species attributes with proper handling\n    classification,\n    designation,\n    CAST(NULLIF(average_height, 'unknown') AS NUMERIC) AS average_height,\n    average_lifespan,\n    skin_colors,\n    hair_colors,\n    eye_colors,\n    language,\n    CAST(NULLIF(homeworld, 'null') AS INTEGER) AS homeworld_id,\n    \n    -- Entity relationships with placeholder counts\n    0 AS people_count,\n    0 AS film_appearances,\n    \n    -- Placeholders for arrays\n    NULL::jsonb AS people,\n    NULL::jsonb AS films,\n    \n    -- Placeholders for name arrays\n    NULL AS character_names,\n    NULL AS film_names,\n    \n    -- Source URL\n    url,\n    \n    -- ETL tracking fields\n    NULL::TIMESTAMP AS fetch_timestamp,\n    NULL::TIMESTAMP AS processed_timestamp,\n    \n    -- API metadata\n    created::TIMESTAMP AS created_at,\n    edited::TIMESTAMP AS updated_at,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.nerd_facts_dbt.bridge_sw_characters_films": {"database": "nerd_facts", "schema": "public", "name": "bridge_sw_characters_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/bridge_sw_characters_films.sql", "original_file_path": "models/marts/star_wars/bridge_sw_characters_films.sql", "unique_id": "model.nerd_facts_dbt.bridge_sw_characters_films", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "bridge_sw_characters_films"], "alias": "bridge_sw_characters_films", "checksum": {"name": "sha256", "checksum": "d2a07d654d33a288573875d5e08b9eee81c135a5dd64635792ce1febd28af5cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "character_film_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["character_id"]}, {"columns": ["film_id"]}, {"columns": ["character_film_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["character_id"]}, {"columns": ["film_id"]}, {"columns": ["character_film_id"]}], "unique_key": "character_film_id"}, "created_at": 1742217557.3461475, "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_characters_films\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['character_id']}, {'columns': ['film_id']}, {'columns': ['character_film_id']}],\n    unique_key = 'character_film_id'\n  )\n}}\n\n/*\n  Model: bridge_sw_characters_films\n  Description: Bridge table connecting Star Wars characters to the films they appear in\n  \n  Notes:\n  - Handles the many-to-many relationship between characters and films\n  - Extracts film references from the nested arrays in character data\n  - Calculates character importance and appearance sequences\n  - Adapted to work with our current staging model structure\n*/\n\nWITH character_films AS (\n    -- Extract film references from the characters data with improved error handling\n    SELECT\n        p.id AS character_id,\n        p.name AS character_name,\n        p.gender,\n        p.birth_year,\n        -- Using NULL for species_id since we don't have it in staging yet\n        NULL AS species_id,\n        p.homeworld_id,\n        film_ref->>'url' AS film_url,\n        -- Extract film ID from URL with better error handling\n        NULLIF(SPLIT_PART(COALESCE(film_ref->>'url', ''), '/', 6), '')::INTEGER AS film_id\n    FROM {{ ref('stg_swapi_people') }} p,\n    LATERAL jsonb_array_elements(\n        CASE WHEN p.films IS NULL OR p.films = 'null' THEN '[]'::jsonb\n        ELSE p.films END\n    ) AS film_ref\n    WHERE p.id IS NOT NULL\n),\n\n-- Join with film information for additional context\nfilm_details AS (\n    SELECT\n        cf.character_id,\n        cf.character_name,\n        cf.gender,\n        cf.birth_year,\n        cf.species_id,\n        cf.homeworld_id,\n        cf.film_id,\n        f.film_title,\n        f.episode_id,\n        f.release_date,\n        f.director,\n        -- Calculate or derive fields not present in staging\n        EXTRACT(YEAR FROM f.release_date) AS release_year,\n        f.trilogy,                  \n        COALESCE(f.episode_id, 999) AS chronological_order,  -- Default high value for non-episode films\n        -- Count words in opening_crawl\n        COALESCE(ARRAY_LENGTH(STRING_TO_ARRAY(f.opening_crawl, ' '), 1), 0) AS opening_crawl_word_count,\n        f.character_count,\n        f.planet_count,\n        f.starship_count,\n        f.vehicle_count,\n        f.species_count,\n        -- Include ETL tracking fields\n        f.url AS film_url,\n        NULL AS fetch_timestamp,\n        NULL AS processed_timestamp\n    FROM character_films cf\n    LEFT JOIN {{ ref('stg_swapi_films') }} f ON cf.film_id = f.id\n),\n\n-- Character importance tiers with expanded classifications\ncharacter_importance AS (\n    SELECT \n        fd.*,\n        CASE\n            -- Protagonist/Antagonist tier - the most central characters\n            WHEN fd.character_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', \n                                      'Rey', 'Kylo Ren', 'Din Djarin', 'Grogu') THEN 'Protagonist/Antagonist'\n            \n            -- Major characters - very important to the plot but not the absolute center\n            WHEN fd.character_name IN ('Han Solo', 'Leia Organa', 'Obi-Wan Kenobi', 'Emperor Palpatine',\n                                      'Finn', 'Poe Dameron', 'Padm\u00e9 Amidala', 'Count Dooku', 'Qui-Gon Jinn',\n                                      'Darth Maul', 'Jyn Erso', 'Cassian Andor', 'Boba Fett') THEN 'Major'\n            \n            -- Supporting characters - recognizable and important secondary characters\n            WHEN fd.character_name IN ('Chewbacca', 'C-3PO', 'R2-D2', 'Yoda', 'Lando Calrissian',\n                                      'Mace Windu', 'General Grievous', 'Admiral Ackbar', 'BB-8',\n                                      'General Hux', 'Rose Tico', 'Moff Gideon', 'Saw Gerrera',\n                                      'Jabba the Hutt', 'Ahsoka Tano') THEN 'Supporting'\n                                      \n            -- Determine recursively based on metadata\n            WHEN fd.character_id IN (1, 2, 3, 4, 5, 10, 11, 13) THEN 'Major' -- Additional known major characters by ID\n            \n            -- Use gender and birth_year to help detect likely important characters\n            WHEN fd.gender IS NOT NULL AND fd.birth_year IS NOT NULL THEN 'Notable'\n            \n            -- Default case\n            ELSE 'Minor'\n        END AS character_importance_tier\n    FROM film_details fd\n),\n\n-- Add film saga classification - use trilogy field directly and enhance\nfilm_saga AS (\n    SELECT\n        ci.*,\n        -- Use the trilogy field directly from staging instead of recalculating\n        ci.trilogy AS film_saga,\n        -- Add enhanced fields for better analytics\n        CASE\n            WHEN ci.character_count <= 10 THEN 'Small Cast'\n            WHEN ci.character_count <= 25 THEN 'Medium Cast'\n            ELSE 'Large Cast'\n        END AS cast_size_category,\n        -- Calculate character's relative prominence in film\n        CASE\n            WHEN ci.character_importance_tier = 'Protagonist/Antagonist' THEN 1\n            WHEN ci.character_importance_tier = 'Major' THEN 2\n            WHEN ci.character_importance_tier = 'Supporting' THEN 3\n            WHEN ci.character_importance_tier = 'Notable' THEN 4\n            ELSE 5\n        END AS importance_rank\n    FROM character_importance ci\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['fs.character_id', 'fs.film_id']) }} AS character_film_id,\n    \n    -- Foreign keys to related dimensions\n    {{ dbt_utils.generate_surrogate_key(['fs.character_id']) }} AS character_key,\n    {{ dbt_utils.generate_surrogate_key(['fs.film_id']) }} AS film_key,\n    \n    -- Core identifiers\n    fs.character_id,\n    fs.character_name,\n    fs.film_id,\n    fs.film_title,\n    fs.episode_id,\n    \n    -- Enhanced character role classification with more nuance\n    fs.character_importance_tier AS character_role,\n    \n    -- Film saga categorization - use trilogy field directly\n    fs.trilogy AS film_saga,\n    fs.release_year,\n    COALESCE(fs.character_count, 0) AS total_character_count,\n    fs.cast_size_category,\n    \n    -- Character's species relationship\n    fs.species_id,\n    fs.homeworld_id,\n    \n    -- Character significance metrics\n    fs.importance_rank,\n    \n    -- Calculate appearance metrics\n    ROW_NUMBER() OVER (\n        PARTITION BY fs.character_id \n        ORDER BY fs.chronological_order\n    ) AS chronological_appearance_number,\n    \n    ROW_NUMBER() OVER (\n        PARTITION BY fs.character_id \n        ORDER BY fs.release_date\n    ) AS release_order_appearance_number,\n    \n    -- Character appearance percentage\n    (COUNT(fs.character_id) OVER (PARTITION BY fs.character_id))::FLOAT / \n    (SELECT COUNT(DISTINCT id) FROM {{ ref('stg_swapi_films') }})::FLOAT * 100 AS saga_appearance_percentage,\n    \n    -- Timeline attributes\n    CASE WHEN ROW_NUMBER() OVER (\n        PARTITION BY fs.character_id \n        ORDER BY fs.chronological_order\n    ) = 1 THEN TRUE ELSE FALSE END AS is_first_chronological_appearance,\n    \n    CASE WHEN ROW_NUMBER() OVER (\n        PARTITION BY fs.character_id \n        ORDER BY fs.release_date\n    ) = 1 THEN TRUE ELSE FALSE END AS is_first_release_appearance,\n    \n    CASE WHEN fs.character_name IN ('Darth Vader', 'Anakin Skywalker') AND \n              fs.episode_id BETWEEN 1 AND 3 THEN 'Protagonist'\n         WHEN fs.character_name IN ('Darth Vader') AND \n              fs.episode_id BETWEEN 4 AND 6 THEN 'Antagonist'\n         WHEN fs.character_name = 'Luke Skywalker' AND \n              fs.episode_id BETWEEN 4 AND 6 THEN 'Protagonist'\n         WHEN fs.character_name = 'Rey' AND \n              fs.episode_id BETWEEN 7 AND 9 THEN 'Protagonist'\n         WHEN fs.character_name = 'Kylo Ren' AND \n              fs.episode_id BETWEEN 7 AND 8 THEN 'Antagonist'\n         WHEN fs.character_name = 'Kylo Ren' AND \n              fs.episode_id = 9 THEN 'Protagonist'\n         WHEN fs.character_importance_tier = 'Protagonist/Antagonist' THEN 'Key Character'\n         WHEN fs.character_importance_tier = 'Major' THEN 'Major Character'\n         ELSE 'Supporting Character'\n    END AS narrative_role,\n    \n    -- Light side/dark side alignment\n    CASE \n        WHEN fs.character_name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul',\n                                'Count Dooku', 'General Grievous', 'Kylo Ren',\n                                'Captain Phasma', 'General Hux', 'Moff Tarkin',\n                                'Jabba the Hutt', 'Boba Fett', 'Jango Fett') THEN 'Villain'\n        WHEN fs.character_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo',\n                                'Obi-Wan Kenobi', 'Yoda', 'Rey', 'Finn', 'Poe Dameron',\n                                'Padm\u00e9 Amidala', 'Qui-Gon Jinn', 'Mace Windu') THEN 'Hero'\n        WHEN fs.character_name IN ('Lando Calrissian', 'Anakin Skywalker') THEN 'Ambiguous'\n        ELSE 'Neutral'\n    END AS character_alignment,\n    \n    -- Film significance - how crucial the character is to this specific film\n    CASE\n        WHEN fs.character_importance_tier = 'Protagonist/Antagonist' AND\n             ((fs.character_name = 'Luke Skywalker' AND fs.episode_id IN (4, 5, 6)) OR\n              (fs.character_name = 'Anakin Skywalker' AND fs.episode_id IN (1, 2, 3)) OR\n              (fs.character_name = 'Darth Vader' AND fs.episode_id IN (4, 5, 6)) OR\n              (fs.character_name = 'Rey' AND fs.episode_id IN (7, 8, 9)) OR\n              (fs.character_name = 'Kylo Ren' AND fs.episode_id IN (7, 8, 9))) THEN 'Pivotal'\n        WHEN fs.character_importance_tier = 'Protagonist/Antagonist' THEN 'Crucial'\n        WHEN fs.character_importance_tier = 'Major' THEN 'Significant'\n        WHEN fs.character_importance_tier = 'Supporting' THEN 'Important'\n        ELSE 'Background'\n    END AS film_significance,\n    \n    -- Film metrics (derived)\n    CASE\n        -- More granular logic with percentage of lines/screentime using character count\n        WHEN COALESCE(fs.character_count, 0) < 15 AND fs.character_importance_tier IN ('Protagonist/Antagonist', 'Major') \n            THEN 'High Focus'\n        WHEN COALESCE(fs.character_count, 0) > 30 AND fs.character_importance_tier = 'Minor'\n            THEN 'Background Character'\n        ELSE 'Standard Focus'\n    END AS character_screen_focus,\n    \n    -- Meta information\n    fs.release_date,\n    fs.director,\n    \n    -- Source tracking\n    fs.film_url,\n    fs.fetch_timestamp,\n    fs.processed_timestamp,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM film_saga fs\nORDER BY COALESCE(fs.episode_id, 999), character_role, fs.character_name", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_planets": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_planets", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_planets.sql", "original_file_path": "models/marts/star_wars/dim_sw_planets.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_planets", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_planets"], "alias": "dim_sw_planets", "checksum": {"name": "sha256", "checksum": "c42794c36a2616cd64c2bce8ee2616ddddcf1aa3ffe7c3599a65950c8a2ff11d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "planet_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["planet_id"]}, {"columns": ["planet_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["planet_id"]}, {"columns": ["planet_name"]}], "unique_key": "planet_key"}, "created_at": 1742217557.3692405, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_planets\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['planet_id']}, {'columns': ['planet_name']}],\n    unique_key = 'planet_key'\n  )\n}}\n\n/*\n  Model: dim_sw_planets\n  Description: Dimension table for Star Wars planets and celestial bodies\n  \n  Notes:\n  - Contains all planets from the Star Wars universe in SWAPI\n  - Provides physical characteristics and environmental classifications\n  - Calculates habitability metrics and significance rankings\n  - Adds contextual information about each planet's role in the saga\n  - Includes galactic region mapping and political affiliations\n  - Enhanced with additional fields from updated staging models\n*/\n\nWITH planets AS (\n    SELECT\n        id AS planet_id,\n        planet_name,\n        rotation_period,\n        orbital_period,\n        diameter,\n        climate,\n        gravity,\n        terrain,\n        surface_water,\n        population,\n        \n        -- Add new fields from enhanced staging model\n        resident_count,\n        film_appearances,\n        film_names,\n        resident_names,\n        \n        -- Add terrain classifications from staging\n        is_temperate,\n        has_vegetation,\n        is_water_world,\n        is_desert_world,\n        \n        -- Add source tracking\n        url,\n        fetch_timestamp,\n        processed_timestamp\n    FROM {{ ref('stg_swapi_planets') }}\n),\n\n-- Add derived classification attributes with enhanced logic\nplanet_attributes AS (\n    SELECT \n        *,\n        -- Planet size classification with better ranges\n        CASE\n            WHEN diameter IS NULL THEN 'Unknown'\n            WHEN diameter <= 5000 THEN 'Tiny'\n            WHEN diameter <= 10000 THEN 'Small'\n            WHEN diameter <= 15000 THEN 'Medium'\n            WHEN diameter <= 25000 THEN 'Large'\n            ELSE 'Massive'\n        END AS size_class,\n        \n        -- Enhanced climate classification with better pattern matching\n        CASE\n            WHEN climate IS NULL THEN 'Unknown'\n            WHEN climate LIKE '%temperate%' AND climate LIKE '%tropical%' THEN 'Temperate/Tropical Mix'\n            WHEN climate LIKE '%temperate%' OR is_temperate = TRUE THEN 'Temperate'\n            WHEN climate LIKE '%tropical%' THEN 'Tropical'\n            WHEN climate LIKE '%arid%' OR climate LIKE '%hot%' OR climate LIKE '%desert%' \n                 OR is_desert_world = TRUE THEN 'Hot/Arid'\n            WHEN climate LIKE '%frozen%' OR climate LIKE '%frigid%' OR climate LIKE '%cold%' \n                 OR climate LIKE '%ice%' THEN 'Cold/Frozen'\n            WHEN climate LIKE '%polluted%' OR climate LIKE '%toxic%' THEN 'Polluted/Toxic'\n            WHEN climate LIKE '%artificial%' OR climate LIKE '%controlled%' THEN 'Artificial/Controlled'\n            WHEN climate LIKE '%moist%' OR climate LIKE '%humid%' OR climate LIKE '%wet%' \n                 OR is_water_world = TRUE THEN 'Humid/Moist'\n            WHEN climate LIKE '%superheated%' OR climate LIKE '%fiery%' OR climate LIKE '%volcanic%' THEN 'Extreme Heat'\n            ELSE 'Mixed/Other'\n        END AS climate_class,\n        \n        -- Terrain type classification (primary terrain type)\n        CASE\n            WHEN terrain IS NULL THEN 'Unknown'\n            WHEN terrain LIKE '%desert%' OR is_desert_world = TRUE THEN 'Desert'\n            WHEN terrain LIKE '%forest%' AND terrain LIKE '%jungle%' THEN 'Forest/Jungle'\n            WHEN terrain LIKE '%forest%' OR has_vegetation = TRUE THEN 'Forest'\n            WHEN terrain LIKE '%jungle%' THEN 'Jungle'\n            WHEN terrain LIKE '%mountain%' THEN 'Mountainous'\n            WHEN terrain LIKE '%ocean%' OR terrain LIKE '%water%' OR terrain LIKE '%lake%' \n                 OR is_water_world = TRUE THEN 'Oceanic'\n            WHEN terrain LIKE '%swamp%' OR terrain LIKE '%bog%' THEN 'Swamp/Bog'\n            WHEN terrain LIKE '%urban%' OR terrain LIKE '%cityscape%' OR terrain LIKE '%city%' THEN 'Urban'\n            WHEN terrain LIKE '%grass%' OR terrain LIKE '%plain%' OR terrain LIKE '%prairie%' THEN 'Grassland'\n            WHEN terrain LIKE '%rock%' OR terrain LIKE '%cliff%' OR terrain LIKE '%canyon%' THEN 'Rocky'\n            WHEN terrain LIKE '%ice%' OR terrain LIKE '%glacier%' OR terrain LIKE '%frozen%' THEN 'Ice/Frozen'\n            WHEN terrain LIKE '%gas%' THEN 'Gas Giant'\n            ELSE 'Mixed/Other'\n        END AS terrain_class,\n        \n        -- Improved habitability score (0-100) with more factors\n        CASE\n            WHEN population IS NULL AND climate IS NULL THEN 50\n            ELSE\n                LEAST(100, GREATEST(0, \n                    -- Base score\n                    40 + \n                    -- Climate factors\n                    CASE \n                        WHEN is_temperate = TRUE THEN 20\n                        WHEN climate LIKE '%temperate%' THEN 20 \n                        WHEN climate LIKE '%tropical%' THEN 15\n                        WHEN climate LIKE '%polluted%' OR climate LIKE '%toxic%' THEN -30\n                        WHEN climate LIKE '%frigid%' OR climate LIKE '%frozen%' THEN -20\n                        WHEN climate LIKE '%arid%' OR climate LIKE '%desert%' OR is_desert_world = TRUE THEN -15\n                        ELSE 0 \n                    END +\n                    -- Water factors (crucial for life)\n                    CASE \n                        WHEN is_water_world = TRUE THEN 15\n                        WHEN surface_water > 50 THEN 15\n                        WHEN surface_water > 30 THEN 10\n                        WHEN surface_water > 10 THEN 5\n                        WHEN surface_water = 0 THEN -10\n                        WHEN surface_water IS NULL THEN 0\n                        ELSE 0 \n                    END +\n                    -- Vegetation factors\n                    CASE\n                        WHEN has_vegetation = TRUE THEN 10\n                        ELSE 0\n                    END +\n                    -- Population factors (evidence of habitability)\n                    CASE \n                        WHEN population > 1000000000 THEN 25\n                        WHEN population > 100000000 THEN 20\n                        WHEN population > 10000000 THEN 15\n                        WHEN population > 1000000 THEN 10\n                        WHEN population > 0 THEN 5\n                        WHEN population = 0 THEN -10\n                        WHEN population IS NULL THEN 0\n                        ELSE 0 \n                    END +\n                    -- Gravity factors\n                    CASE \n                        WHEN gravity LIKE '%standard%' THEN 10\n                        WHEN gravity LIKE '%high%' OR gravity LIKE '%heavy%' THEN -5\n                        ELSE 0 \n                    END\n                ))\n        END AS habitability_score,\n        \n        -- Planet's galactic region based on known planets\n        CASE\n            WHEN planet_name IN ('Coruscant', 'Alderaan', 'Corellia', 'Chandrila', 'Hosnian Prime') THEN 'Core Worlds'\n            WHEN planet_name IN ('Kashyyyk', 'Duro', 'Abregado-rae', 'Cato Neimoidia', 'Fondor') THEN 'Colonies/Inner Rim'\n            WHEN planet_name IN ('Naboo', 'Bothawui', 'Mon Cala', 'Onderon', 'Malastare') THEN 'Mid Rim'\n            WHEN planet_name IN ('Tatooine', 'Geonosis', 'Ryloth', 'Dantooine', 'Lothal', 'Kessel') THEN 'Outer Rim'\n            WHEN planet_name IN ('Kamino', 'Mustafar', 'Hoth', 'Bespin', 'Dagobah', 'Endor', 'Yavin IV') THEN 'Outer Rim/Unknown Regions'\n            WHEN planet_name IN ('Exegol', 'Ilum', 'Csilla', 'Rakata Prime') THEN 'Unknown Regions'\n            ELSE 'Unspecified Region'\n        END AS galactic_region\n    FROM planets\n),\n\n-- Additional planet significance data\nplanet_significance AS (\n    SELECT \n        *,\n        -- Major battles/events on planet\n        CASE\n            WHEN planet_name = 'Naboo' THEN 'Trade Federation Invasion, Battle of Naboo'\n            WHEN planet_name = 'Geonosis' THEN 'First Battle of Geonosis, Start of Clone Wars'\n            WHEN planet_name = 'Coruscant' THEN 'Senate location, Battle of Coruscant, Order 66'\n            WHEN planet_name = 'Mustafar' THEN 'Anakin vs Obi-Wan duel, Sith stronghold'\n            WHEN planet_name = 'Utapau' THEN 'Battle of Utapau, General Grievous death'\n            WHEN planet_name = 'Kashyyyk' THEN 'Battle of Kashyyyk, Order 66'\n            WHEN planet_name = 'Tatooine' THEN 'Skywalker homeworld, Jabba Palace, Podracing'\n            WHEN planet_name = 'Alderaan' THEN 'Death Star destruction'\n            WHEN planet_name = 'Yavin IV' THEN 'Battle of Yavin, Death Star destruction'\n            WHEN planet_name = 'Hoth' THEN 'Battle of Hoth, Echo Base'\n            WHEN planet_name = 'Dagobah' THEN 'Yoda exile, Luke training'\n            WHEN planet_name = 'Bespin' THEN 'Cloud City, \"I am your father\" revelation'\n            WHEN planet_name = 'Endor' THEN 'Battle of Endor, Death Star II destruction'\n            WHEN planet_name = 'Jakku' THEN 'Battle of Jakku, Empire defeat, Rey homeworld'\n            WHEN planet_name = 'Starkiller Base' THEN 'Hosnian system destruction, Han Solo death'\n            WHEN planet_name = 'Ahch-To' THEN 'First Jedi temple, Luke exile'\n            WHEN planet_name = 'Crait' THEN 'Battle of Crait, Luke projection'\n            WHEN planet_name = 'Exegol' THEN 'Sith throne, Final Order fleet, Palpatine defeat'\n            ELSE NULL\n        END AS major_events,\n        \n        -- Expanded political affiliation\n        CASE\n            -- Republic/Empire affiliated\n            WHEN planet_name IN ('Coruscant', 'Hosnian Prime', 'Chandrila', 'Corellia', 'Kamino') THEN 'Republic/Empire'\n            -- Separatist affiliated\n            WHEN planet_name IN ('Geonosis', 'Cato Neimoidia', 'Serenno', 'Skako', 'Raxus') THEN 'Separatist Alliance'\n            -- Rebel/Resistance affiliated\n            WHEN planet_name IN ('Yavin IV', 'Hoth', 'Dantooine', 'D''Qar', 'Ajan Kloss', 'Crait') THEN 'Rebel Alliance/Resistance'\n            -- Neutral/Independent\n            WHEN planet_name IN ('Tatooine', 'Mandalore', 'Naboo', 'Dagobah', 'Ahch-To', 'Bespin') THEN 'Neutral/Independent'\n            -- Hutt/Criminal affiliated\n            WHEN planet_name IN ('Nal Hutta', 'Nar Shaddaa', 'Kessel', 'Cantonica') THEN 'Hutt Space/Criminal Networks'\n            -- First Order/Sith affiliated\n            WHEN planet_name IN ('Exegol', 'Starkiller Base', 'Mustafar', 'Moraband', 'Malachor') THEN 'Sith/First Order'\n            ELSE 'Unspecified Affiliation'\n        END AS political_affiliation,\n        \n        -- Galactic significance rating (1-10 scale)\n        CASE\n            WHEN planet_name IN ('Coruscant', 'Exegol', 'Mustafar', 'Naboo', 'Tatooine', \n                             'Alderaan', 'Yavin IV', 'Hoth', 'Endor') THEN 10\n            WHEN planet_name IN ('Geonosis', 'Kamino', 'Bespin', 'Dagobah', 'Utapau', \n                             'Jakku', 'Ahch-To', 'Starkiller Base', 'Crait') THEN 8\n            WHEN planet_name IN ('Kashyyyk', 'Mon Cala', 'Mandalore', 'Ryloth', 'Dathomir',\n                             'Corellia', 'Felucia', 'Scarif', 'Jedha') THEN 6\n            WHEN planet_name IN ('Dantooine', 'Onderon', 'Bothawui', 'Lothal', 'Cantonica',\n                             'Batuu', 'Mimban', 'Nevarro', 'Malachor') THEN 4\n            ELSE 2\n        END AS galactic_significance\n    FROM planet_attributes\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['ps.planet_id']) }} AS planet_key,\n    \n    -- Core identifiers\n    ps.planet_id,\n    ps.planet_name,\n    \n    -- Physical attributes with better error handling\n    ps.diameter AS diameter_km,\n    ps.rotation_period AS rotation_period_hours,\n    ps.orbital_period AS orbital_period_days,\n    \n    -- Environmental attributes\n    ps.climate,\n    ps.climate_class,\n    ps.gravity,\n    ps.terrain,\n    ps.terrain_class,\n    ps.surface_water AS surface_water_percentage,\n    \n    -- Size and habitability\n    ps.size_class,\n    ps.habitability_score,\n    \n    -- Population data with better formatting and error handling\n    CASE\n        WHEN ps.population >= 1000000000 THEN TRIM(TO_CHAR(ps.population/1000000000.0, '999,999,990.9')) || ' billion'\n        WHEN ps.population >= 1000000 THEN TRIM(TO_CHAR(ps.population/1000000.0, '999,999,990.9')) || ' million'\n        WHEN ps.population >= 1000 THEN TRIM(TO_CHAR(ps.population/1000.0, '999,999,990.9')) || ' thousand'\n        WHEN ps.population IS NOT NULL THEN TRIM(TO_CHAR(ps.population, '999,999,999,999'))\n        ELSE 'unknown'\n    END AS population_formatted,\n    ps.population AS population_count,\n    \n    -- Add resident metrics from staging\n    COALESCE(ps.resident_count, 0) AS known_resident_count,\n    ps.resident_names AS notable_residents,\n    \n    -- Population density if both values are available\n    CASE \n        WHEN ps.population IS NOT NULL AND ps.diameter IS NOT NULL AND ps.diameter > 0 THEN\n            ROUND(ps.population / (3.14159 * POWER(ps.diameter/2, 2)), 2)\n        ELSE NULL\n    END AS population_density_per_km2,\n    \n    -- Habitability classification\n    CASE\n        WHEN ps.habitability_score >= 80 THEN 'Ideal'\n        WHEN ps.habitability_score >= 60 THEN 'Highly Habitable'\n        WHEN ps.habitability_score >= 40 THEN 'Moderately Habitable'\n        WHEN ps.habitability_score >= 20 THEN 'Marginally Habitable'\n        ELSE 'Barely Habitable/Hostile'\n    END AS habitability_class,\n    \n    -- Terrain classifications from staging\n    ps.is_temperate,\n    ps.has_vegetation,\n    ps.is_water_world,\n    ps.is_desert_world,\n    \n    -- Galactic location and significance\n    ps.galactic_region,\n    ps.political_affiliation,\n    ps.major_events,\n    ps.galactic_significance,\n    \n    -- Enhanced key location flag with tiered importance\n    CASE\n        WHEN ps.planet_name IN ('Tatooine', 'Coruscant', 'Naboo', 'Mustafar', 'Alderaan', \n                             'Hoth', 'Endor', 'Dagobah', 'Yavin IV', 'Exegol') \n            THEN 'Primary Saga Location'\n        WHEN ps.planet_name IN ('Geonosis', 'Kamino', 'Utapau', 'Kashyyyk', 'Bespin', 'Jakku',\n                             'Ahch-To', 'Crait', 'Starkiller Base', 'Scarif', 'Jedha') \n            THEN 'Major Location'\n        WHEN ps.planet_name IN ('Dantooine', 'Mon Cala', 'Ryloth', 'Mandalore', 'Corellia', 'Cantonica')\n            THEN 'Notable Location'\n        WHEN ps.galactic_significance >= 6\n            THEN 'Significant Location'\n        ELSE 'Standard Location'\n    END AS location_importance,\n    \n    -- Films appearance data from staging model\n    ps.film_names AS film_names_array,\n    COALESCE(ps.film_appearances, 0) AS film_appearance_count,\n    \n    -- Source data metadata\n    ps.url AS source_url,\n    ps.fetch_timestamp,\n    ps.processed_timestamp,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM planet_significance ps\nORDER BY ps.galactic_significance DESC, ps.habitability_score DESC", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.nerd_facts_dbt.unique_stg_swapi_starships_id.faa87ea4e7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_starships_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_starships_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_starships_id.faa87ea4e7", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_starships_id"], "alias": "unique_stg_swapi_starships_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.9363117, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_starships_id.7ec0941917": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_starships_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_starships_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_id.7ec0941917", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_starships_id"], "alias": "not_null_stg_swapi_starships_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.9378712, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_starships_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_starships_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_starships_name"], "alias": "not_null_stg_swapi_starships_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.9394438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_swapi_starships_manufacturer__Kuat_Drive_Yards__Corellian_Engineering_Corporation__Sienar_Fleet_Systems__Cygnus_Spaceworks__Incom_Corporation__Koensayr_Manufacturing.2fef0b1acf": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_swapi_starships_manufacturer__Kuat_Drive_Yards__Corellian_Engineering_Corporation__Sienar_Fleet_Systems__Cygnus_Spaceworks__Incom_Corporation__Koensayr_Manufacturing", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_swapi_star_f3359b21d1586e66ef9d2b69269f94d5.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_swapi_starships_manufacturer__Kuat_Drive_Yards__Corellian_Engineering_Corporation__Sienar_Fleet_Systems__Cygnus_Spaceworks__Incom_Corporation__Koensayr_Manufacturing.2fef0b1acf", "fqn": ["nerd_facts_dbt", "staging", "swapi", "accepted_values_stg_swapi_starships_manufacturer__Kuat_Drive_Yards__Corellian_Engineering_Corporation__Sienar_Fleet_Systems__Cygnus_Spaceworks__Incom_Corporation__Koensayr_Manufacturing"], "alias": "accepted_values_stg_swapi_star_f3359b21d1586e66ef9d2b69269f94d5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_swapi_star_f3359b21d1586e66ef9d2b69269f94d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_stg_swapi_star_f3359b21d1586e66ef9d2b69269f94d5"}, "created_at": 1742217557.940729, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_stg_swapi_star_f3359b21d1586e66ef9d2b69269f94d5\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "manufacturer", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Kuat Drive Yards", "Corellian Engineering Corporation", "Sienar Fleet Systems", "Cygnus Spaceworks", "Incom Corporation", "Koensayr Manufacturing"], "column_name": "manufacturer", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_starships_max_atmosphering_speed.9fc07f34cf": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_starships_max_atmosphering_speed", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_starships_max_atmosphering_speed.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_max_atmosphering_speed.9fc07f34cf", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_starships_max_atmosphering_speed"], "alias": "not_null_stg_swapi_starships_max_atmosphering_speed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1742217557.9457629, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "max_atmosphering_speed", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "max_atmosphering_speed", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_max_atmosphering_speed___0_OR_IS_NULL.ec823ef959": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_max_atmosphering_speed___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_f96fcbd14ddc641df073db37ee15bc56.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_max_atmosphering_speed___0_OR_IS_NULL.ec823ef959", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_max_atmosphering_speed___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_f96fcbd14ddc641df073db37ee15bc56", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_f96fcbd14ddc641df073db37ee15bc56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_f96fcbd14ddc641df073db37ee15bc56"}, "created_at": 1742217557.9472902, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_f96fcbd14ddc641df073db37ee15bc56\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "max_atmosphering_speed", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "max_atmosphering_speed", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_max_atmosphering_speed__2000__0.8f9d0183b8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_swapi_starships_max_atmosphering_speed__2000__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_s_0010594815da93a571a43e6dd43c6422.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_max_atmosphering_speed__2000__0.8f9d0183b8", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_accepted_range_stg_swapi_starships_max_atmosphering_speed__2000__0"], "alias": "dbt_utils_accepted_range_stg_s_0010594815da93a571a43e6dd43c6422", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_s_0010594815da93a571a43e6dd43c6422", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_s_0010594815da93a571a43e6dd43c6422"}, "created_at": 1742217557.9514787, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_s_0010594815da93a571a43e6dd43c6422\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "max_atmosphering_speed", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 2000, "column_name": "max_atmosphering_speed", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_length___0_OR_IS_NULL.1915ec346c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_length___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_be8f4b71c2f17ad203558d2f702bf73e.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_length___0_OR_IS_NULL.1915ec346c", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_length___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_be8f4b71c2f17ad203558d2f702bf73e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_be8f4b71c2f17ad203558d2f702bf73e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_be8f4b71c2f17ad203558d2f702bf73e"}, "created_at": 1742217557.9557915, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_be8f4b71c2f17ad203558d2f702bf73e\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "length", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0 OR IS NULL", "column_name": "length", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_hyperdrive_rating__10__0_5.de460c4fa4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_swapi_starships_hyperdrive_rating__10__0_5", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_s_dd0ad6923fc838f5a7ce83233328b8a5.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_hyperdrive_rating__10__0_5.de460c4fa4", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_accepted_range_stg_swapi_starships_hyperdrive_rating__10__0_5"], "alias": "dbt_utils_accepted_range_stg_s_dd0ad6923fc838f5a7ce83233328b8a5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_s_dd0ad6923fc838f5a7ce83233328b8a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_s_dd0ad6923fc838f5a7ce83233328b8a5"}, "created_at": 1742217557.960562, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_s_dd0ad6923fc838f5a7ce83233328b8a5\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hyperdrive_rating", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0.5, "max_value": 10, "column_name": "hyperdrive_rating", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew___1_OR_IS_NULL.c35df747e6": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_crew___1_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_d125afcd2334724d94f609b49be6617c.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew___1_OR_IS_NULL.c35df747e6", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_crew___1_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_d125afcd2334724d94f609b49be6617c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_d125afcd2334724d94f609b49be6617c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_d125afcd2334724d94f609b49be6617c"}, "created_at": 1742217557.9646518, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_d125afcd2334724d94f609b49be6617c\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "crew", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1 OR IS NULL", "column_name": "crew", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_passengers___0_OR_IS_NULL.176b315457": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_passengers___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_af273654177cfdc91478abd436a54b83.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_passengers___0_OR_IS_NULL.176b315457", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_passengers___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_af273654177cfdc91478abd436a54b83", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_af273654177cfdc91478abd436a54b83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_af273654177cfdc91478abd436a54b83"}, "created_at": 1742217557.9684622, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_af273654177cfdc91478abd436a54b83\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "passengers", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "passengers", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_cargo_capacity___0_OR_IS_NULL.8339feb5a2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_cargo_capacity___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_4acb3b26b03e1d062250ec156d7d150d.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_cargo_capacity___0_OR_IS_NULL.8339feb5a2", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_cargo_capacity___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_4acb3b26b03e1d062250ec156d7d150d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4acb3b26b03e1d062250ec156d7d150d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_4acb3b26b03e1d062250ec156d7d150d"}, "created_at": 1742217557.971913, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_4acb3b26b03e1d062250ec156d7d150d\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cargo_capacity", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "cargo_capacity", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_MGLT___0_OR_IS_NULL.4849ab31ba": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_MGLT___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_cfc3b86b042a82b903ed54f0c8725d53.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_MGLT___0_OR_IS_NULL.4849ab31ba", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_MGLT___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_cfc3b86b042a82b903ed54f0c8725d53", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_cfc3b86b042a82b903ed54f0c8725d53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_cfc3b86b042a82b903ed54f0c8725d53"}, "created_at": 1742217557.9758523, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_cfc3b86b042a82b903ed54f0c8725d53\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MGLT", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "MGLT", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_created_at___current_date_OR_IS_NULL.242fb664ae": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_created_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_3554d4c9ae20c88d48aa76b2eb4ffbc2.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_created_at___current_date_OR_IS_NULL.242fb664ae", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_created_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_3554d4c9ae20c88d48aa76b2eb4ffbc2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_3554d4c9ae20c88d48aa76b2eb4ffbc2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_3554d4c9ae20c88d48aa76b2eb4ffbc2"}, "created_at": 1742217557.9794946, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_3554d4c9ae20c88d48aa76b2eb4ffbc2\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_updated_at___current_date_OR_IS_NULL.b095dbe22e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_updated_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_cc2e4bdb84aae2ad04b930fc298aa50e.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_updated_at___current_date_OR_IS_NULL.b095dbe22e", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_updated_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_cc2e4bdb84aae2ad04b930fc298aa50e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_cc2e4bdb84aae2ad04b930fc298aa50e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_cc2e4bdb84aae2ad04b930fc298aa50e"}, "created_at": 1742217557.983502, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_cc2e4bdb84aae2ad04b930fc298aa50e\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_name.e122ba7541": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_starships_starship_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_starships_starship_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_name.e122ba7541", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_starships_starship_name"], "alias": "not_null_stg_swapi_starships_starship_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.9871979, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "starship_name", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "starship_name", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_fetch_timestamp___current_date_OR_IS_NULL.108a9eded4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_fetch_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_4be817c1261790b2d461ce224dc12f0a.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_fetch_timestamp___current_date_OR_IS_NULL.108a9eded4", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_fetch_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_4be817c1261790b2d461ce224dc12f0a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4be817c1261790b2d461ce224dc12f0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_4be817c1261790b2d461ce224dc12f0a"}, "created_at": 1742217557.988502, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_4be817c1261790b2d461ce224dc12f0a\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_timestamp", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "fetch_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_processed_timestamp___current_date_OR_IS_NULL.25b0c50c01": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_processed_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_39d392954e28f6ca7af1798f0c1ebd6c.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_processed_timestamp___current_date_OR_IS_NULL.25b0c50c01", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_processed_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_39d392954e28f6ca7af1798f0c1ebd6c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_39d392954e28f6ca7af1798f0c1ebd6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_39d392954e28f6ca7af1798f0c1ebd6c"}, "created_at": 1742217557.991895, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_39d392954e28f6ca7af1798f0c1ebd6c\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "processed_timestamp", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "processed_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew_numeric_passengers_numeric_50_OR_passengers_IS_NULL_OR_crew_IS_NULL_OR_crew_unknown_.2b12d505ec": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_starships_crew_numeric_passengers_numeric_50_OR_passengers_IS_NULL_OR_crew_IS_NULL_OR_crew_unknown_", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_b661521dc2474e27ea156eaf895ee132.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew_numeric_passengers_numeric_50_OR_passengers_IS_NULL_OR_crew_IS_NULL_OR_crew_unknown_.2b12d505ec", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_starships_crew_numeric_passengers_numeric_50_OR_passengers_IS_NULL_OR_crew_IS_NULL_OR_crew_unknown_"], "alias": "dbt_utils_expression_is_true_s_b661521dc2474e27ea156eaf895ee132", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_b661521dc2474e27ea156eaf895ee132", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_b661521dc2474e27ea156eaf895ee132"}, "created_at": 1742217557.9952798, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_b661521dc2474e27ea156eaf895ee132\") }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "crew::numeric <= passengers::numeric + 50 OR passengers IS NULL OR crew IS NULL OR crew = 'unknown'", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_films_id.14c2b7f5e2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_films_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_films_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_films_id.14c2b7f5e2", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_films_id"], "alias": "unique_stg_swapi_films_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.9989364, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_id.4e52f2f208": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_id.4e52f2f208", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_id"], "alias": "not_null_stg_swapi_films_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0002177, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_film_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_film_title.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_film_title"], "alias": "not_null_stg_swapi_films_film_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0015018, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "film_title", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "film_title", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_episode_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_episode_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_episode_id"], "alias": "not_null_stg_swapi_films_episode_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.003145, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "episode_id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "episode_id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1"], "alias": "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0043778, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "episode_id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 9, "column_name": "episode_id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_release_date", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_release_date.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_release_date"], "alias": "not_null_stg_swapi_films_release_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.007551, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "release_date", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "release_date", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_fetch_timestamp___current_date_OR_IS_NULL.9ead7a24e3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_films_fetch_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_ead1696c714c8e50fbaea0e52890c3fe.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_fetch_timestamp___current_date_OR_IS_NULL.9ead7a24e3", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_films_fetch_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_ead1696c714c8e50fbaea0e52890c3fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_ead1696c714c8e50fbaea0e52890c3fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_ead1696c714c8e50fbaea0e52890c3fe"}, "created_at": 1742217558.0088894, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_ead1696c714c8e50fbaea0e52890c3fe\") }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_timestamp", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "fetch_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_processed_timestamp___current_date_OR_IS_NULL.af9118e795": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_films_processed_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_71ece60c37ee7370267cfbbea9ea3f67.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_processed_timestamp___current_date_OR_IS_NULL.af9118e795", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_films_processed_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_71ece60c37ee7370267cfbbea9ea3f67", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_71ece60c37ee7370267cfbbea9ea3f67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_71ece60c37ee7370267cfbbea9ea3f67"}, "created_at": 1742217558.012594, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_71ece60c37ee7370267cfbbea9ea3f67\") }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "processed_timestamp", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "processed_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_created_at___current_date_OR_IS_NULL.21bd3a52c8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_films_created_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_777f3b8473c765cd1e5d8112db4c01cf.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_created_at___current_date_OR_IS_NULL.21bd3a52c8", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_films_created_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_777f3b8473c765cd1e5d8112db4c01cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_777f3b8473c765cd1e5d8112db4c01cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_777f3b8473c765cd1e5d8112db4c01cf"}, "created_at": 1742217558.0159898, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_777f3b8473c765cd1e5d8112db4c01cf\") }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_updated_at___current_date_OR_IS_NULL.a05d644c5a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_films_updated_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_c2020a3da4afbea117364eeadce5f4d4.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_updated_at___current_date_OR_IS_NULL.a05d644c5a", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_films_updated_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_c2020a3da4afbea117364eeadce5f4d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_c2020a3da4afbea117364eeadce5f4d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_c2020a3da4afbea117364eeadce5f4d4"}, "created_at": 1742217558.0198238, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_c2020a3da4afbea117364eeadce5f4d4\") }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_people_id.61c011a764": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_people_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_people_id.61c011a764", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_people_id"], "alias": "unique_stg_swapi_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0231962, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_people_id.7a1b515eed": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_people_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_people_id.7a1b515eed", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_people_id"], "alias": "not_null_stg_swapi_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0249882, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_people_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_people_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_people_name"], "alias": "not_null_stg_swapi_people_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0263653, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d"}, "created_at": 1742217558.0276136, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d\") }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "height", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "height", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_fetch_timestamp___current_date_OR_IS_NULL.c1ff3df31f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_people_fetch_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_f981e59037e065d2102e47aafe919522.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_fetch_timestamp___current_date_OR_IS_NULL.c1ff3df31f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_people_fetch_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_f981e59037e065d2102e47aafe919522", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_f981e59037e065d2102e47aafe919522", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_f981e59037e065d2102e47aafe919522"}, "created_at": 1742217558.0310645, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_f981e59037e065d2102e47aafe919522\") }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_timestamp", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "fetch_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_processed_timestamp___current_date_OR_IS_NULL.3f3804543b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_people_processed_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_a3f224551822b1eba6057c8fd8b81e5a.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_processed_timestamp___current_date_OR_IS_NULL.3f3804543b", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_people_processed_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_a3f224551822b1eba6057c8fd8b81e5a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_a3f224551822b1eba6057c8fd8b81e5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_a3f224551822b1eba6057c8fd8b81e5a"}, "created_at": 1742217558.0351536, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_a3f224551822b1eba6057c8fd8b81e5a\") }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "processed_timestamp", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "processed_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_created_at___current_date_OR_IS_NULL.d90eacaa04": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_people_created_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_7c93174e7a9f9f7c7a72011004eba7b6.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_created_at___current_date_OR_IS_NULL.d90eacaa04", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_people_created_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_7c93174e7a9f9f7c7a72011004eba7b6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_7c93174e7a9f9f7c7a72011004eba7b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_7c93174e7a9f9f7c7a72011004eba7b6"}, "created_at": 1742217558.0393648, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_7c93174e7a9f9f7c7a72011004eba7b6\") }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_updated_at___current_date_OR_IS_NULL.0570f7a92e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_people_updated_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_d169850beb3cc7c7a1c31fbf3f9f79d9.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_updated_at___current_date_OR_IS_NULL.0570f7a92e", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_people_updated_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_d169850beb3cc7c7a1c31fbf3f9f79d9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_d169850beb3cc7c7a1c31fbf3f9f79d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_d169850beb3cc7c7a1c31fbf3f9f79d9"}, "created_at": 1742217558.0433197, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_d169850beb3cc7c7a1c31fbf3f9f79d9\") }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_planets_id.6c040cab42": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_planets_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_planets_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_planets_id.6c040cab42", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_planets_id"], "alias": "unique_stg_swapi_planets_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0467548, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_planets_id.1980954ad2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_planets_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_planets_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_planets_id.1980954ad2", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_planets_id"], "alias": "not_null_stg_swapi_planets_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0480256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_planets_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_planets_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_planets_name"], "alias": "not_null_stg_swapi_planets_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0492413, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0"], "alias": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748"}, "created_at": 1742217558.0505176, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748\") }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "surface_water", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "surface_water", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_fetch_timestamp___current_date_OR_IS_NULL.3efca725c6": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_planets_fetch_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_2ca6ab17f9d9ca6ac8c5c8618ddd33ba.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_fetch_timestamp___current_date_OR_IS_NULL.3efca725c6", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_planets_fetch_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_2ca6ab17f9d9ca6ac8c5c8618ddd33ba", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_2ca6ab17f9d9ca6ac8c5c8618ddd33ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_2ca6ab17f9d9ca6ac8c5c8618ddd33ba"}, "created_at": 1742217558.053971, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_2ca6ab17f9d9ca6ac8c5c8618ddd33ba\") }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_timestamp", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "fetch_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_processed_timestamp___current_date_OR_IS_NULL.b2e1f418c7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_planets_processed_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_7cd829721797aa3bf81ebd6d7974d3f9.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_processed_timestamp___current_date_OR_IS_NULL.b2e1f418c7", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_planets_processed_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_7cd829721797aa3bf81ebd6d7974d3f9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_7cd829721797aa3bf81ebd6d7974d3f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_7cd829721797aa3bf81ebd6d7974d3f9"}, "created_at": 1742217558.057456, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_7cd829721797aa3bf81ebd6d7974d3f9\") }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "processed_timestamp", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "processed_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_created_at___current_date_OR_IS_NULL.572e9515d3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_planets_created_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_56aa48f9c0c73a56a4a0ef9aff060b9c.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_created_at___current_date_OR_IS_NULL.572e9515d3", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_planets_created_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_56aa48f9c0c73a56a4a0ef9aff060b9c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_56aa48f9c0c73a56a4a0ef9aff060b9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_56aa48f9c0c73a56a4a0ef9aff060b9c"}, "created_at": 1742217558.061557, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_56aa48f9c0c73a56a4a0ef9aff060b9c\") }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_updated_at___current_date_OR_IS_NULL.b02932a521": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_planets_updated_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_0709df8243375c60799043dcdab0c5b3.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_updated_at___current_date_OR_IS_NULL.b02932a521", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_planets_updated_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_0709df8243375c60799043dcdab0c5b3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_0709df8243375c60799043dcdab0c5b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_0709df8243375c60799043dcdab0c5b3"}, "created_at": 1742217558.065815, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_0709df8243375c60799043dcdab0c5b3\") }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_species_id.d223d89b92": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_species_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_species_id.d223d89b92", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_species_id"], "alias": "unique_stg_swapi_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.069591, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_species_id.09ea9d15a8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_species_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_species_id.09ea9d15a8", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_species_id"], "alias": "not_null_stg_swapi_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0708814, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_species_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_species_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_species_name"], "alias": "not_null_stg_swapi_species_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.07214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_fetch_timestamp___current_date_OR_IS_NULL.dbd26f1af7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_species_fetch_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_e1e2d30804387f3d22517265899026fe.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_fetch_timestamp___current_date_OR_IS_NULL.dbd26f1af7", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_species_fetch_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_e1e2d30804387f3d22517265899026fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_e1e2d30804387f3d22517265899026fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_e1e2d30804387f3d22517265899026fe"}, "created_at": 1742217558.0735357, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_e1e2d30804387f3d22517265899026fe\") }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_timestamp", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "fetch_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_processed_timestamp___current_date_OR_IS_NULL.ba30e961b6": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_species_processed_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_5ffe916c37cbdca44cc2161cafdb8e1e.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_processed_timestamp___current_date_OR_IS_NULL.ba30e961b6", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_species_processed_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_5ffe916c37cbdca44cc2161cafdb8e1e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_5ffe916c37cbdca44cc2161cafdb8e1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_5ffe916c37cbdca44cc2161cafdb8e1e"}, "created_at": 1742217558.0768507, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_5ffe916c37cbdca44cc2161cafdb8e1e\") }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "processed_timestamp", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "processed_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_created_at___current_date_OR_IS_NULL.8ad9a59359": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_species_created_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_985282e1147cc0c8758e24e99adfe346.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_created_at___current_date_OR_IS_NULL.8ad9a59359", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_species_created_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_985282e1147cc0c8758e24e99adfe346", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_985282e1147cc0c8758e24e99adfe346", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_985282e1147cc0c8758e24e99adfe346"}, "created_at": 1742217558.080971, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_985282e1147cc0c8758e24e99adfe346\") }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_updated_at___current_date_OR_IS_NULL.9ebc4b27db": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_species_updated_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_b97b58c43b87eef1d7a84fce28be9910.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_updated_at___current_date_OR_IS_NULL.9ebc4b27db", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_species_updated_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_b97b58c43b87eef1d7a84fce28be9910", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_b97b58c43b87eef1d7a84fce28be9910", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_b97b58c43b87eef1d7a84fce28be9910"}, "created_at": 1742217558.085462, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_b97b58c43b87eef1d7a84fce28be9910\") }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_vehicles_id.8b524818ea": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_vehicles_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_vehicles_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_vehicles_id.8b524818ea", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_vehicles_id"], "alias": "unique_stg_swapi_vehicles_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0889354, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_id.fb013dcb6d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_vehicles_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_vehicles_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_id.fb013dcb6d", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_vehicles_id"], "alias": "not_null_stg_swapi_vehicles_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0902288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_vehicles_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_vehicles_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_vehicles_name"], "alias": "not_null_stg_swapi_vehicles_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0914547, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_created_at___current_date_OR_IS_NULL.5aa7bfe34c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_vehicles_created_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_132b1420b2d9afd73d8060c88a7ebd19.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_created_at___current_date_OR_IS_NULL.5aa7bfe34c", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_vehicles_created_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_132b1420b2d9afd73d8060c88a7ebd19", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_132b1420b2d9afd73d8060c88a7ebd19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_132b1420b2d9afd73d8060c88a7ebd19"}, "created_at": 1742217558.0927129, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_132b1420b2d9afd73d8060c88a7ebd19\") }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "created_at", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_updated_at___current_date_OR_IS_NULL.26001bc232": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_vehicles_updated_at___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_bee541ef1d32f3721c89d94d39181109.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_updated_at___current_date_OR_IS_NULL.26001bc232", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_vehicles_updated_at___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_bee541ef1d32f3721c89d94d39181109", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_bee541ef1d32f3721c89d94d39181109", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_bee541ef1d32f3721c89d94d39181109"}, "created_at": 1742217558.096089, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_bee541ef1d32f3721c89d94d39181109\") }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "updated_at", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_name.0bd849278f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_vehicles_vehicle_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_vehicles_vehicle_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_name.0bd849278f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_vehicles_vehicle_name"], "alias": "not_null_stg_swapi_vehicles_vehicle_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.0996537, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vehicle_name", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vehicle_name", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_length_m___0_OR_IS_NULL.aa8c1ee5b8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_vehicles_length_m___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_446f0fff88bf6a3106a90a0f1ce2c32f.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_length_m___0_OR_IS_NULL.aa8c1ee5b8", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_vehicles_length_m___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_446f0fff88bf6a3106a90a0f1ce2c32f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_446f0fff88bf6a3106a90a0f1ce2c32f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_446f0fff88bf6a3106a90a0f1ce2c32f"}, "created_at": 1742217558.1013281, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_446f0fff88bf6a3106a90a0f1ce2c32f\") }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "length_m", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0 OR IS NULL", "column_name": "length_m", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_fetch_timestamp___current_date_OR_IS_NULL.311b3e2dfd": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_vehicles_fetch_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_0c1eb637304ec2299d993a35dcd4b4b7.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_fetch_timestamp___current_date_OR_IS_NULL.311b3e2dfd", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_vehicles_fetch_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_0c1eb637304ec2299d993a35dcd4b4b7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_0c1eb637304ec2299d993a35dcd4b4b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_0c1eb637304ec2299d993a35dcd4b4b7"}, "created_at": 1742217558.1052032, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_0c1eb637304ec2299d993a35dcd4b4b7\") }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_timestamp", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "fetch_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_processed_timestamp___current_date_OR_IS_NULL.301636d680": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_vehicles_processed_timestamp___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_c221511ddd74e64471ce5561f3a2c9d1.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_processed_timestamp___current_date_OR_IS_NULL.301636d680", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_vehicles_processed_timestamp___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_c221511ddd74e64471ce5561f3a2c9d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_c221511ddd74e64471ce5561f3a2c9d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_c221511ddd74e64471ce5561f3a2c9d1"}, "created_at": 1742217558.1090882, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_c221511ddd74e64471ce5561f3a2c9d1\") }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "processed_timestamp", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "< current_date OR IS NULL", "column_name": "processed_timestamp", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_pokeapi_moves_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_pokeapi_moves_id.sql", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "source_unique_pokeapi_moves_id"], "alias": "source_unique_pokeapi_moves_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.124974, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.pokeapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('pokeapi', 'moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_pokeapi_moves_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_pokeapi_moves_id.sql", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "source_not_null_pokeapi_moves_id"], "alias": "source_not_null_pokeapi_moves_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1263657, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.pokeapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('pokeapi', 'moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_pokeapi_moves_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_pokeapi_moves_name.sql", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "source_not_null_pokeapi_moves_name"], "alias": "source_not_null_pokeapi_moves_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1276045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.pokeapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('pokeapi', 'moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_cards_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_cards_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_cards_code"], "alias": "source_unique_netrunner_cards_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1344786, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_cards_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_cards_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_cards_code"], "alias": "source_not_null_netrunner_cards_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1358063, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_cards_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_cards_title.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_cards_title"], "alias": "source_not_null_netrunner_cards_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1370378, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "title", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(source('netrunner', 'cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_factions_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_factions_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_factions_code"], "alias": "source_unique_netrunner_factions_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1385777, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_factions_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_factions_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_factions_code"], "alias": "source_not_null_netrunner_factions_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.139818, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_factions_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_factions_name.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_factions_name"], "alias": "source_not_null_netrunner_factions_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1410298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('netrunner', 'factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_types_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_types_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_types_code"], "alias": "source_unique_netrunner_types_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1424413, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "types"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.netrunner.types"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_types_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_types_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_types_code"], "alias": "source_not_null_netrunner_types_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1436722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "types"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.types"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_types_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_types_name.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_types_name"], "alias": "source_not_null_netrunner_types_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.144975, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "types"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.types"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('netrunner', 'types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_packs_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_packs_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_packs_code"], "alias": "source_unique_netrunner_packs_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.146426, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "packs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.netrunner.packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_packs_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_packs_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_packs_code"], "alias": "source_not_null_netrunner_packs_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1478398, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "packs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_cycles_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_cycles_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_cycles_code"], "alias": "source_unique_netrunner_cycles_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1496923, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cycles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.netrunner.cycles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_cycles_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_cycles_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_cycles_code"], "alias": "source_not_null_netrunner_cycles_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.151422, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cycles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.netrunner.cycles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_subtypes_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_subtypes_code.sql", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_subtypes_code"], "alias": "source_unique_netrunner_subtypes_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1532233, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "subtypes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.netrunner.subtypes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'subtypes')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_starships_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_starships_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_starships_id"], "alias": "source_unique_swapi_starships_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1550672, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_starships_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_starships_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_starships_id"], "alias": "source_not_null_swapi_starships_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1567576, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_starships_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_starships_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_starships_name"], "alias": "source_not_null_swapi_starships_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1581461, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_films_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_films_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_films_id"], "alias": "source_unique_swapi_films_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1598158, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_films_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_films_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_films_id"], "alias": "source_not_null_swapi_films_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1614919, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_films_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_films_title.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_films_title"], "alias": "source_not_null_swapi_films_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1631298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "title", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_films_episode_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_films_episode_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_films_episode_id"], "alias": "source_not_null_swapi_films_episode_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1648536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "episode_id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "episode_id", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_people_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_people_id"], "alias": "source_unique_swapi_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1667945, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_people_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_people_id"], "alias": "source_not_null_swapi_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1684341, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_people_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_people_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_people_name"], "alias": "source_not_null_swapi_people_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.170056, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_planets_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_planets_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_planets_id"], "alias": "source_unique_swapi_planets_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1718347, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_planets_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_planets_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_planets_id"], "alias": "source_not_null_swapi_planets_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.173069, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_planets_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_planets_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_planets_name"], "alias": "source_not_null_swapi_planets_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1743069, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_species_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_species_id"], "alias": "source_unique_swapi_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1757488, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_species_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_species_id"], "alias": "source_not_null_swapi_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.177042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_species_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_species_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_species_name"], "alias": "source_not_null_swapi_species_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.17827, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_vehicles_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_vehicles_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_vehicles_id"], "alias": "source_unique_swapi_vehicles_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.179895, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_vehicles_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_vehicles_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_vehicles_id"], "alias": "source_not_null_swapi_vehicles_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1815352, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_vehicles_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_vehicles_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_vehicles_name"], "alias": "source_not_null_swapi_vehicles_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217558.1828365, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'vehicles')) }}"}, "namespace": null}}, "model.nerd_facts_dbt.bridge_sw_starships_pilots": {"database": "nerd_facts", "schema": "public", "name": "bridge_sw_starships_pilots", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/bridge_sw_starships_pilots.sql", "original_file_path": "models/marts/star_wars/bridge_sw_starships_pilots.sql", "unique_id": "model.nerd_facts_dbt.bridge_sw_starships_pilots", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "bridge_sw_starships_pilots"], "alias": "bridge_sw_starships_pilots", "checksum": {"name": "sha256", "checksum": "d4a0b6029a0c5f138f3bf4b9fee15bfe17a9df283948c1f8870217948a153d16"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "starship_pilot_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["starship_id"]}, {"columns": ["pilot_id"]}, {"columns": ["starship_pilot_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["starship_id"]}, {"columns": ["pilot_id"]}, {"columns": ["starship_pilot_id"]}], "unique_key": "starship_pilot_id"}, "created_at": 1742218235.1112895, "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_starships_pilots\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['starship_id']}, {'columns': ['pilot_id']}, {'columns': ['starship_pilot_id']}],\n    unique_key = 'starship_pilot_id'\n  )\n}}\n\n/*\n  Model: bridge_sw_starships_pilots\n  Description: Bridge table connecting Star Wars starships to their pilots\n  \n  Notes:\n  - Handles the many-to-many relationship between starships and pilots\n  - Simplified to work with the current state of our staging models\n  - NULL fields and references have been handled appropriately\n*/\n\nWITH direct_connections AS (\n    -- Extract pilot references from the starships data\n    SELECT\n        s.id AS starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.starship_class,\n        s.cost_in_credits AS cost,\n        -- Extract pilot ID from URL with better error handling\n        NULLIF(SPLIT_PART(pilot_ref->>'url', '/', 6), '')::INTEGER AS pilot_id\n    FROM {{ ref('stg_swapi_starships') }} s,\n    LATERAL jsonb_array_elements(\n        CASE WHEN s.pilots IS NULL OR s.pilots = 'null' THEN '[]'::jsonb\n        ELSE s.pilots END\n    ) AS pilot_ref\n    WHERE s.id IS NOT NULL\n),\n\n-- Join with character information for context\npilot_details AS (\n    SELECT\n        dc.starship_id,\n        dc.starship_name,\n        dc.model,\n        dc.manufacturer,\n        dc.starship_class,\n        dc.cost,\n        dc.pilot_id,\n        p.name AS pilot_name,\n        -- Using NULL here since species_id isn't available yet\n        NULL::INTEGER AS species_id,\n        p.gender,\n        p.birth_year,\n        p.film_appearances, -- Add film appearance count\n        NULL AS film_names,  -- Placeholder for now\n        -- Determine if force sensitive based on known Jedi/Sith\n        p.force_sensitive,\n        -- Calculate pilot's approximate age (if birth_year is available)\n        CASE \n            WHEN p.birth_year ~ '^[0-9]+(\\.[0-9]+)?$' THEN \n                CASE\n                    WHEN p.name = 'Yoda' THEN 900  -- Special case for Yoda\n                    ELSE COALESCE(p.birth_year::NUMERIC, 0)\n                END\n            ELSE 0\n        END AS pilot_age,\n        -- Placeholder for character_era\n        NULL AS character_era\n    FROM direct_connections dc\n    LEFT JOIN {{ ref('stg_swapi_people') }} p ON dc.pilot_id = p.id\n),\n\n-- Get species information to enhance pilot context (skipping the join for now)\npilot_species AS (\n    SELECT\n        pd.*,\n        NULL AS species_name,\n        NULL AS species_classification,\n        NULL AS average_lifespan,\n        -- Get starship's film appearances\n        (SELECT sh.film_appearances FROM {{ ref('stg_swapi_starships') }} sh \n         WHERE sh.id = pd.starship_id) AS starship_film_count,\n        -- Placeholder for film_names\n        NULL AS starship_film_names\n    FROM pilot_details pd\n    -- Skip this join for now since species_id isn't properly set up\n    -- LEFT JOIN {{ ref('stg_swapi_species') }} s ON pd.species_id = s.id\n),\n\n-- Calculate pilot statistics separately to avoid using DISTINCT in window functions\npilot_stats AS (\n    SELECT \n        pilot_id,\n        COUNT(*) AS ships_piloted_count,\n        -- Use array_agg and then array_length to count distinct values\n        -- This is a workaround for not being able to use DISTINCT in window functions\n        ARRAY_LENGTH(ARRAY_AGG(DISTINCT starship_class), 1) AS ship_class_versatility\n    FROM pilot_details\n    WHERE pilot_id IS NOT NULL\n    GROUP BY pilot_id\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['ps.starship_id', 'ps.pilot_id']) }} AS starship_pilot_id,\n    \n    -- Foreign keys to related dimensions\n    {{ dbt_utils.generate_surrogate_key(['ps.starship_id']) }} AS starship_key,\n    {{ dbt_utils.generate_surrogate_key(['ps.pilot_id']) }} AS pilot_key,\n    \n    -- Core identifiers\n    ps.starship_id,\n    ps.starship_name,\n    ps.pilot_id,\n    ps.pilot_name,\n    \n    -- Starship attributes\n    ps.model,\n    ps.manufacturer,\n    ps.starship_class,\n    ps.cost,\n    \n    -- Pilot attributes\n    ps.species_name,\n    ps.gender,\n    ps.birth_year,\n    ps.force_sensitive,\n    ps.pilot_age,\n    \n    -- Film appearances\n    ps.film_appearances AS pilot_film_count,\n    ps.starship_film_count,\n    \n    -- Placeholder for film overlap, since we don't have film_names\n    0 AS film_appearance_overlap,\n    \n    -- Enhanced pilot skill classification with more nuance\n    CASE\n        -- Legendary pilots explicitly mentioned in lore\n        WHEN ps.pilot_name IN ('Han Solo', 'Luke Skywalker', 'Anakin Skywalker', \n                             'Poe Dameron', 'Wedge Antilles', 'Lando Calrissian') THEN 'Legendary'\n        \n        -- Known excellent pilots from expanded lore\n        WHEN ps.pilot_name IN ('Darth Vader', 'Jango Fett', 'Boba Fett', 'Hera Syndulla', \n                             'Rey', 'Chewbacca', 'Din Djarin', 'Cassian Andor') THEN 'Expert'\n        \n        -- Force users generally have enhanced piloting abilities\n        WHEN ps.force_sensitive THEN 'Force Enhanced'\n        \n        -- Pilots of military craft likely have formal training\n        WHEN ps.starship_class IN ('Starfighter', 'Assault Starfighter', 'Bomber', \n                                 'Interceptor', 'Light Cruiser') THEN 'Military Trained'\n        \n        -- Default for other cases\n        ELSE 'Standard'\n    END AS pilot_skill,\n    \n    -- Pilot experience level based on lore\n    CASE\n        WHEN ps.pilot_name IN ('Han Solo', 'Chewbacca', 'Lando Calrissian', 'Wedge Antilles') THEN 'Veteran'\n        WHEN ps.pilot_name IN ('Luke Skywalker', 'Poe Dameron', 'Darth Vader', 'Anakin Skywalker') THEN 'Advanced'\n        WHEN ps.pilot_name IN ('Rey', 'Finn', 'Din Djarin') THEN 'Intermediate'\n        ELSE 'Basic'\n    END AS pilot_experience,\n    \n    -- Get calculated pilot stats\n    COALESCE(pstat.ships_piloted_count, 0) AS ships_piloted_count,\n    COALESCE(pstat.ship_class_versatility, 0) AS ship_class_versatility,\n    \n    -- Flag notable starship-pilot combinations with expanded list\n    CASE\n        WHEN (ps.pilot_name = 'Han Solo' AND ps.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (ps.pilot_name = 'Luke Skywalker' AND ps.starship_name LIKE '%X-wing%') THEN TRUE\n        WHEN (ps.pilot_name = 'Darth Vader' AND ps.starship_name LIKE '%TIE Advanced%') THEN TRUE\n        WHEN (ps.pilot_name = 'Boba Fett' AND ps.starship_name LIKE '%Slave I%') THEN TRUE\n        WHEN (ps.pilot_name = 'Anakin Skywalker' AND ps.starship_name LIKE '%Jedi Starfighter%') THEN TRUE\n        WHEN (ps.pilot_name = 'Poe Dameron' AND ps.starship_name LIKE '%T-70 X-wing%') THEN TRUE\n        WHEN (ps.pilot_name = 'Rey' AND ps.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (ps.pilot_name = 'Din Djarin' AND ps.starship_name LIKE '%Razor Crest%') THEN TRUE\n        WHEN (ps.pilot_name = 'Lando Calrissian' AND ps.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (ps.pilot_name = 'Jango Fett' AND ps.starship_name LIKE '%Slave I%') THEN TRUE\n        ELSE FALSE\n    END AS is_iconic_pairing,\n    \n    -- Calculate if this is the pilot's \"signature ship\" (simplified)\n    FALSE AS is_signature_ship,\n    \n    -- Affiliation based on pilot\n    CASE\n        WHEN ps.pilot_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo', 'Chewbacca', \n                             'Lando Calrissian', 'Wedge Antilles', 'Poe Dameron', \n                             'Finn', 'Rey') THEN 'Rebellion/Resistance'\n        WHEN ps.pilot_name IN ('Darth Vader', 'Emperor Palpatine', 'General Grievous',\n                             'Darth Maul', 'Count Dooku', 'Kylo Ren') THEN 'Empire/First Order/Sith'\n        WHEN ps.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Mace Windu', \n                             'Yoda', 'Qui-Gon Jinn', 'Padm\u00e9 Amidala') THEN 'Republic/Jedi'\n        WHEN ps.pilot_name IN ('Jango Fett', 'Boba Fett', 'Din Djarin') THEN 'Bounty Hunter/Independent'\n        ELSE 'Unknown'\n    END AS pilot_affiliation,\n    \n    -- Starship role classification\n    CASE\n        WHEN ps.starship_class IN ('Starfighter', 'Interceptor', 'Bomber', 'Assault Starfighter') THEN 'Combat'\n        WHEN ps.starship_class IN ('Light freighter', 'Medium freighter', 'Heavy freighter') THEN 'Transport'\n        WHEN ps.starship_class IN ('Yacht', 'Patrol craft', 'Sail barge', 'Speeder') THEN 'Personal'\n        WHEN ps.starship_class IN ('Star Destroyer', 'Battlecruiser', 'Cruiser', 'Star Dreadnought') THEN 'Capital Ship'\n        ELSE 'Utility'\n    END AS starship_role,\n    \n    -- Era classification (simplified)\n    CASE\n        WHEN ps.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Padm\u00e9 Amidala', \n                             'Qui-Gon Jinn', 'Mace Windu', 'Count Dooku', 'General Grievous') THEN 'Prequel Era'\n        WHEN ps.pilot_name IN ('Luke Skywalker', 'Han Solo', 'Leia Organa', 'Darth Vader', \n                             'Chewbacca', 'Lando Calrissian') THEN 'Original Trilogy Era'\n        WHEN ps.pilot_name IN ('Rey', 'Finn', 'Poe Dameron', 'Kylo Ren') THEN 'Sequel Era'\n        WHEN ps.pilot_name IN ('Din Djarin') THEN 'Mandalorian Era'\n        ELSE 'Unknown Era'\n    END AS story_era,\n    \n    -- Add source URL tracking\n    (SELECT s.url FROM {{ ref('stg_swapi_starships') }} s WHERE s.id = ps.starship_id) AS starship_url,\n    (SELECT p.url FROM {{ ref('stg_swapi_people') }} p WHERE p.id = ps.pilot_id) AS pilot_url,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pilot_species ps\nLEFT JOIN pilot_stats pstat ON ps.pilot_id = pstat.pilot_id\nWHERE ps.pilot_id IS NOT NULL AND ps.starship_id IS NOT NULL\nORDER BY ps.starship_name, pilot_skill DESC, ps.pilot_name", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}, {"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_swapi_starships", "package": null, "version": null}, {"name": "stg_swapi_species", "package": null, "version": null}, {"name": "stg_swapi_starships", "package": null, "version": null}, {"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships", "model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_films": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_films.sql", "original_file_path": "models/marts/star_wars/dim_sw_films.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_films", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_films"], "alias": "dim_sw_films", "checksum": {"name": "sha256", "checksum": "ea804997e1abf06a1075b83407a0677cf2d5473a37ac51827feb340030e88f8e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "film_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["film_id"]}, {"columns": ["episode_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["film_id"]}, {"columns": ["episode_id"]}], "unique_key": "film_key"}, "created_at": 1742218647.9106636, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_films\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['film_id']}, {'columns': ['episode_id']}],\n    unique_key = 'film_key'\n  )\n}}\n\n/*\n  Model: dim_sw_films\n  Description: Dimension table for Star Wars films\n*/\n\nWITH films AS (\n    SELECT\n        id AS film_id,\n        film_title AS title,\n        episode_id,\n        opening_crawl,\n        director,\n        producer,\n        release_date,\n        \n        -- Calculate trilogy from episode_id\n        CASE \n            WHEN episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n            WHEN episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy' \n            WHEN episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n            ELSE 'Anthology' \n        END AS trilogy,\n        \n        -- Chronological order is just the episode_id, or 999 for non-episode films\n        COALESCE(episode_id, 999) AS chronological_order,\n        \n        -- Add runtime_minutes calculation here in the first CTE\n        CASE\n            WHEN episode_id = 1 THEN 136  -- The Phantom Menace\n            WHEN episode_id = 2 THEN 142  -- Attack of the Clones\n            WHEN episode_id = 3 THEN 140  -- Revenge of the Sith\n            WHEN episode_id = 4 THEN 121  -- A New Hope\n            WHEN episode_id = 5 THEN 124  -- The Empire Strikes Back\n            WHEN episode_id = 6 THEN 131  -- Return of the Jedi\n            WHEN episode_id = 7 THEN 138  -- The Force Awakens\n            WHEN episode_id = 8 THEN 152  -- The Last Jedi\n            WHEN episode_id = 9 THEN 142  -- The Rise of Skywalker\n            ELSE 135  -- Default\n        END AS runtime_minutes,\n        \n        -- Entity counts - use if they exist or set to defaults\n        COALESCE(character_count, 0) AS character_count,\n        COALESCE(planet_count, 0) AS planet_count,\n        COALESCE(starship_count, 0) AS starship_count,\n        COALESCE(vehicle_count, 0) AS vehicle_count,\n        COALESCE(species_count, 0) AS species_count,\n        \n        -- Calculate opening_crawl_word_count\n        COALESCE(ARRAY_LENGTH(STRING_TO_ARRAY(opening_crawl, ' '), 1), 0) AS opening_crawl_word_count,\n        \n        -- Include ETL tracking fields\n        url,\n        \n        -- ETL timestamps\n        NULL::TIMESTAMP AS fetch_timestamp,\n        NULL::TIMESTAMP AS processed_timestamp,\n        created_at AS created,\n        updated_at AS edited\n    FROM {{ ref('stg_swapi_films') }}\n),\n\n-- Box office and critical reception (manually added since not in SWAPI)\nfilm_performance AS (\n    SELECT\n        film_id,\n        CASE\n            WHEN episode_id = 1 THEN 1027.0  -- The Phantom Menace\n            WHEN episode_id = 2 THEN 649.4   -- Attack of the Clones\n            WHEN episode_id = 3 THEN 850.0   -- Revenge of the Sith\n            WHEN episode_id = 4 THEN 775.4   -- A New Hope (adjusted)\n            WHEN episode_id = 5 THEN 547.9   -- The Empire Strikes Back (adjusted)\n            WHEN episode_id = 6 THEN 475.1   -- Return of the Jedi (adjusted)\n            WHEN episode_id = 7 THEN 2068.0  -- The Force Awakens\n            WHEN episode_id = 8 THEN 1333.0  -- The Last Jedi\n            WHEN episode_id = 9 THEN 1077.0  -- The Rise of Skywalker\n            ELSE NULL\n        END AS worldwide_box_office_millions,\n        \n        CASE\n            WHEN episode_id = 1 THEN 51  -- The Phantom Menace\n            WHEN episode_id = 2 THEN 65  -- Attack of the Clones\n            WHEN episode_id = 3 THEN 80  -- Revenge of the Sith\n            WHEN episode_id = 4 THEN 93  -- A New Hope\n            WHEN episode_id = 5 THEN 94  -- The Empire Strikes Back\n            WHEN episode_id = 6 THEN 83  -- Return of the Jedi\n            WHEN episode_id = 7 THEN 93  -- The Force Awakens\n            WHEN episode_id = 8 THEN 91  -- The Last Jedi\n            WHEN episode_id = 9 THEN 52  -- The Rise of Skywalker\n            ELSE NULL\n        END AS rotten_tomatoes_score\n    FROM films\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['f.film_id']) }} AS film_key,\n    \n    -- Core identifiers\n    f.film_id,\n    f.title,\n    f.episode_id,\n    \n    -- Release information\n    f.release_date,\n    EXTRACT(YEAR FROM f.release_date) AS release_year,\n    EXTRACT(DECADE FROM f.release_date) AS release_decade,\n    \n    -- Film details\n    f.director,\n    f.producer,\n    \n    -- Opening crawl with metrics\n    f.opening_crawl,\n    SUBSTRING(f.opening_crawl FROM 1 FOR 100) || '...' AS opening_crawl_preview,\n    f.opening_crawl_word_count,\n    \n    -- Runtime now comes from the first CTE\n    f.runtime_minutes,\n    \n    -- Film saga classification\n    f.trilogy,\n    \n    -- Timeline ordering\n    f.chronological_order AS timeline_order,\n    \n    -- Film era in timeline with expanded detail\n    CASE\n        WHEN f.episode_id = 1 THEN 'Republic Era - Trade Federation Crisis'\n        WHEN f.episode_id = 2 THEN 'Republic Era - Clone Wars Beginning'\n        WHEN f.episode_id = 3 THEN 'Republic Era - Rise of the Empire'\n        WHEN f.episode_id = 4 THEN 'Imperial Era - Rebellion Rising'\n        WHEN f.episode_id = 5 THEN 'Imperial Era - Rebellion on the Run'\n        WHEN f.episode_id = 6 THEN 'Imperial Era - Fall of the Empire'\n        WHEN f.episode_id = 7 THEN 'New Republic Era - First Order Emergence'\n        WHEN f.episode_id = 8 THEN 'New Republic Era - Resistance Survival'\n        WHEN f.episode_id = 9 THEN 'New Republic Era - Final Order Conflict'\n        ELSE 'Unknown Era'\n    END AS detailed_timeline_era,\n    \n    -- Broader timeline era\n    CASE\n        WHEN f.episode_id BETWEEN 1 AND 3 THEN 'Republic Era'\n        WHEN f.episode_id BETWEEN 4 AND 6 THEN 'Imperial Era'\n        WHEN f.episode_id BETWEEN 7 AND 9 THEN 'New Republic Era'\n        ELSE 'Various'\n    END AS timeline_era,\n    \n    -- Production studio\n    CASE\n        WHEN f.episode_id BETWEEN 1 AND 6 THEN 'Lucasfilm'\n        WHEN f.episode_id BETWEEN 7 AND 9 THEN 'Lucasfilm/Disney'\n        ELSE 'Other'\n    END AS production_studio,\n    \n    -- Entity counts\n    f.character_count,\n    f.planet_count,\n    f.starship_count,\n    f.vehicle_count,\n    f.species_count,\n    \n    -- Entity density metrics (derived)\n    ROUND(f.character_count::NUMERIC / NULLIF(f.runtime_minutes, 0), 2) AS characters_per_minute,\n    ROUND(f.planet_count::NUMERIC / NULLIF(f.runtime_minutes, 0), 2) AS planets_per_minute,\n    \n    -- Primary antagonist\n    CASE\n        WHEN f.episode_id = 1 THEN 'Darth Sidious/Trade Federation'\n        WHEN f.episode_id = 2 THEN 'Count Dooku/Separatists'\n        WHEN f.episode_id = 3 THEN 'Darth Sidious/General Grievous'\n        WHEN f.episode_id = 4 THEN 'Darth Vader/Grand Moff Tarkin'\n        WHEN f.episode_id = 5 THEN 'Darth Vader/Emperor Palpatine'\n        WHEN f.episode_id = 6 THEN 'Emperor Palpatine/Darth Vader'\n        WHEN f.episode_id = 7 THEN 'Kylo Ren/First Order'\n        WHEN f.episode_id = 8 THEN 'Kylo Ren/Supreme Leader Snoke'\n        WHEN f.episode_id = 9 THEN 'Emperor Palpatine/First Order'\n        ELSE 'Unknown'\n    END AS primary_antagonist,\n    \n    -- Primary protagonist\n    CASE\n        WHEN f.episode_id = 1 THEN 'Qui-Gon Jinn/Obi-Wan Kenobi'\n        WHEN f.episode_id = 2 THEN 'Anakin Skywalker/Obi-Wan Kenobi'\n        WHEN f.episode_id = 3 THEN 'Anakin Skywalker/Obi-Wan Kenobi'\n        WHEN f.episode_id = 4 THEN 'Luke Skywalker'\n        WHEN f.episode_id = 5 THEN 'Luke Skywalker'\n        WHEN f.episode_id = 6 THEN 'Luke Skywalker'\n        WHEN f.episode_id = 7 THEN 'Rey/Finn'\n        WHEN f.episode_id = 8 THEN 'Rey'\n        WHEN f.episode_id = 9 THEN 'Rey'\n        ELSE 'Unknown'\n    END AS primary_protagonist,\n    \n    -- Primary location\n    CASE\n        WHEN f.episode_id = 1 THEN 'Naboo/Tatooine/Coruscant'\n        WHEN f.episode_id = 2 THEN 'Coruscant/Kamino/Geonosis'\n        WHEN f.episode_id = 3 THEN 'Coruscant/Mustafar/Kashyyyk'\n        WHEN f.episode_id = 4 THEN 'Tatooine/Death Star/Yavin IV'\n        WHEN f.episode_id = 5 THEN 'Hoth/Dagobah/Cloud City'\n        WHEN f.episode_id = 6 THEN 'Tatooine/Death Star II/Endor'\n        WHEN f.episode_id = 7 THEN 'Jakku/Takodana/Starkiller Base'\n        WHEN f.episode_id = 8 THEN 'Ahch-To/Canto Bight/Crait'\n        WHEN f.episode_id = 9 THEN 'Exegol/Pasaana/Kijimi'\n        ELSE 'Unknown'\n    END AS primary_locations,\n    \n    -- Film performance metrics\n    fp.worldwide_box_office_millions,\n    fp.rotten_tomatoes_score,\n    \n    -- Critical reception classification\n    CASE\n        WHEN fp.rotten_tomatoes_score >= 90 THEN 'Critically Acclaimed'\n        WHEN fp.rotten_tomatoes_score >= 75 THEN 'Well Received'\n        WHEN fp.rotten_tomatoes_score >= 60 THEN 'Mixed to Positive'\n        WHEN fp.rotten_tomatoes_score >= 40 THEN 'Mixed'\n        ELSE 'Critically Panned'\n    END AS critical_reception,\n    \n    -- Commercial success classification\n    CASE\n        WHEN fp.worldwide_box_office_millions >= 1500 THEN 'Blockbuster'\n        WHEN fp.worldwide_box_office_millions >= 1000 THEN 'Very Successful'\n        WHEN fp.worldwide_box_office_millions >= 750 THEN 'Successful'\n        WHEN fp.worldwide_box_office_millions >= 500 THEN 'Profitable'\n        WHEN fp.worldwide_box_office_millions >= 0 THEN 'Modest'\n        ELSE 'Unknown'\n    END AS commercial_success,\n    \n    -- Film complexity metrics - derived from entity counts and crawl\n    CASE\n        WHEN f.character_count > 30 AND f.planet_count > 5 AND f.opening_crawl_word_count > 100 THEN 'High Complexity'\n        WHEN f.character_count > 20 AND f.planet_count > 3 THEN 'Moderate Complexity'\n        ELSE 'Standard Complexity'\n    END AS narrative_complexity,\n    \n    -- Major themes\n    CASE\n        WHEN f.episode_id = 1 THEN 'Trade disputes, Chosen one prophecy'\n        WHEN f.episode_id = 2 THEN 'Political manipulation, Clone army'\n        WHEN f.episode_id = 3 THEN 'Corruption, Fall to dark side, Order 66'\n        WHEN f.episode_id = 4 THEN 'Rebellion, Force awakening, Death Star'\n        WHEN f.episode_id = 5 THEN 'Jedi training, Family revelation, Rebellion setback'\n        WHEN f.episode_id = 6 THEN 'Redemption, Empire defeat, Jedi return'\n        WHEN f.episode_id = 7 THEN 'New heroes, Legacy, Force awakening'\n        WHEN f.episode_id = 8 THEN 'Legacy, Letting go of the past, Failure'\n        WHEN f.episode_id = 9 THEN 'Identity, Lineage, Final confrontation'\n        ELSE 'Various themes'\n    END AS major_themes,\n    \n    -- Source data metadata\n    f.url AS source_url,\n    f.created AS source_created_at,\n    f.edited AS source_edited_at,\n    f.fetch_timestamp,\n    f.processed_timestamp,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM films f\nLEFT JOIN film_performance fp ON f.film_id = fp.film_id\nORDER BY f.chronological_order", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_vehicles_enhanced": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_vehicles_enhanced", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_vehicles_enhanced.sql", "original_file_path": "models/staging/swapi/stg_swapi_vehicles_enhanced.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_vehicles_enhanced", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_vehicles_enhanced"], "alias": "stg_swapi_vehicles_enhanced", "checksum": {"name": "sha256", "checksum": "e028375323096d7d6b3acddaf88a9a9a6e21ffd51c05cb562bd73a5f20729f60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742222355.887733, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_vehicles_enhanced\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nWITH raw_vehicles AS (\n    SELECT * FROM {{ ref('stg_swapi_vehicles') }}\n),\n\nclean_vehicles AS (\n    SELECT\n        id AS vehicle_id,\n        vehicle_name,\n        model,\n        manufacturer,\n        \n        -- Clean and convert numeric fields safely\n        CASE \n            WHEN cost_in_credits IS NULL THEN NULL\n            WHEN cost_in_credits::TEXT IN ('none', 'unknown', '') THEN NULL\n            WHEN cost_in_credits::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN cost_in_credits::NUMERIC\n            ELSE NULL\n        END AS cost_in_credits,\n        \n        CASE \n            WHEN length_m IS NULL THEN NULL\n            WHEN length_m::TEXT IN ('none', 'unknown', '') THEN NULL\n            WHEN length_m::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN length_m::NUMERIC\n            ELSE NULL\n        END AS length_m,\n        \n        CASE \n            WHEN max_speed IS NULL THEN NULL\n            WHEN max_speed::TEXT IN ('none', 'unknown', '') THEN NULL\n            WHEN max_speed::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN max_speed::NUMERIC\n            ELSE NULL\n        END AS max_speed,\n        \n        CASE \n            WHEN crew_count IS NULL THEN NULL\n            WHEN crew_count::TEXT IN ('none', 'unknown', '') THEN NULL\n            WHEN crew_count::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN crew_count::NUMERIC\n            ELSE NULL\n        END AS crew_count,\n        \n        CASE \n            WHEN passenger_capacity IS NULL THEN NULL\n            WHEN passenger_capacity::TEXT IN ('none', 'unknown', '') THEN NULL\n            WHEN passenger_capacity::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN passenger_capacity::NUMERIC\n            ELSE NULL\n        END AS passenger_capacity,\n        \n        CASE \n            WHEN cargo_capacity IS NULL THEN NULL\n            WHEN cargo_capacity::TEXT IN ('none', 'unknown', '') THEN NULL\n            WHEN cargo_capacity::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN cargo_capacity::NUMERIC\n            ELSE NULL\n        END AS cargo_capacity,\n        \n        CASE \n            WHEN total_capacity IS NULL THEN NULL\n            WHEN total_capacity::TEXT IN ('none', 'unknown', '') THEN NULL\n            WHEN total_capacity::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN total_capacity::NUMERIC\n            ELSE NULL\n        END AS total_capacity,\n        \n        -- Non-numeric fields\n        consumables,\n        vehicle_class,\n        \n        -- Additional fields\n        film_appearances,\n        film_names,\n        pilot_count,\n        pilot_names,\n        vehicle_purpose,\n        vehicle_size,\n        terrain_capability,\n        is_notable_vehicle,\n        \n        -- Source tracking\n        url,\n        fetch_timestamp,\n        processed_timestamp\n    FROM raw_vehicles\n)\n\nSELECT * FROM clean_vehicles", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fct_starships": {"database": "nerd_facts", "schema": "public", "name": "fct_starships", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/fct_starships.sql", "original_file_path": "models/marts/star_wars/fct_starships.sql", "unique_id": "model.nerd_facts_dbt.fct_starships", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "fct_starships"], "alias": "fct_starships", "checksum": {"name": "sha256", "checksum": "b367eb32b62c1d37ed2a2b2cfcd0325e3ef188a716f51880d6ed5c8a70cff916"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "starship_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["starship_id"]}, {"columns": ["starship_class"]}, {"columns": ["hyperspace_rating"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["starship_id"]}, {"columns": ["starship_class"]}, {"columns": ["hyperspace_rating"]}], "unique_key": "starship_key"}, "created_at": 1742224279.7518196, "relation_name": "\"nerd_facts\".\"public\".\"fct_starships\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['starship_id']}, {'columns': ['starship_class']}, {'columns': ['hyperspace_rating']}],\n    unique_key = 'starship_key'\n  )\n}}\n\n/*\n  Model: fct_starships\n  Description: Fact table for Star Wars starships with comprehensive metrics and classifications\n*/\n\nWITH starships AS (\n    SELECT\n        id AS starship_id,\n        starship_name,\n        model,\n        manufacturer,\n        cost_in_credits,\n        length_m,\n        max_speed,\n        crew_count,\n        passenger_capacity,\n        cargo_capacity,\n        consumables,\n        hyperdrive_rating,\n        MGLT,\n        starship_class,\n        \n        -- Add new fields from enhanced staging model that we know exist\n        film_appearances,\n        film_names,\n        pilot_count,\n        pilot_names,\n        \n        -- Add source tracking\n        url,\n        fetch_timestamp,\n        processed_timestamp\n    FROM {{ ref('stg_swapi_starships') }}\n    WHERE id IS NOT NULL\n),\n\n-- Calculate derived metrics for each starship\nstarship_metrics AS (\n    SELECT\n        s.*,\n        \n        -- Add iconic starship flag since it doesn't exist in staging\n        CASE \n            WHEN LOWER(s.starship_name) IN (\n                'millennium falcon', 'x-wing', 'tie fighter', 'star destroyer', \n                'death star', 'slave 1', 'executor', 'tantive iv'\n            ) THEN TRUE\n            ELSE FALSE\n        END AS is_iconic,\n        \n        -- Calculate total capacity as a new field - explicit casting for safety\n        (CASE WHEN s.crew_count ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.crew_count::NUMERIC ELSE 0 END) + \n        (CASE WHEN s.passenger_capacity ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.passenger_capacity::NUMERIC ELSE 0 END) \n        AS total_capacity,\n        \n        -- Calculate crew efficiency (passengers per crew member) - with explicit casting\n        CASE\n            WHEN s.crew_count ~ '^[0-9]+(\\.[0-9]+)?$' AND s.crew_count::NUMERIC > 0\n            THEN \n                CASE \n                    WHEN s.passenger_capacity ~ '^[0-9]+(\\.[0-9]+)?$' \n                    THEN ROUND(s.passenger_capacity::NUMERIC / s.crew_count::NUMERIC, 2)\n                    ELSE 0\n                END\n            ELSE 0\n        END AS passengers_per_crew,\n        \n        -- Calculate cargo efficiency (cargo capacity per meter of length) - with explicit casting\n        CASE\n            WHEN s.length_m ~ '^[0-9]+(\\.[0-9]+)?$' AND s.length_m::NUMERIC > 0\n            THEN\n                CASE \n                    WHEN s.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$'\n                    THEN ROUND(s.cargo_capacity::NUMERIC / s.length_m::NUMERIC, 2)\n                    ELSE 0\n                END\n            ELSE 0\n        END AS cargo_efficiency,\n        \n        -- Calculate hyperdrive performance score (lower is better) - with explicit casting\n        CASE\n            WHEN s.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$' AND s.hyperdrive_rating::NUMERIC > 0 \n            THEN ROUND(100 / s.hyperdrive_rating::NUMERIC, 1)\n            ELSE 0\n        END AS hyperdrive_performance_score,\n        \n        -- Calculate overall effectiveness score (0-100) - with safe casting\n        CASE\n            WHEN s.starship_class IS NOT NULL THEN\n                GREATEST(0, LEAST(100,\n                    -- Base score\n                    50 +\n                    -- Speed bonus\n                    CASE\n                        WHEN s.MGLT ~ '^[0-9]+(\\.[0-9]+)?$' AND s.MGLT::NUMERIC > 0 \n                        THEN LEAST(20, s.MGLT::NUMERIC / 5)\n                        WHEN s.max_speed ~ '^[0-9]+(\\.[0-9]+)?$' AND s.max_speed::NUMERIC > 1000 \n                        THEN 10\n                        ELSE 0\n                    END +\n                    -- Hyperdrive bonus (lower rating is better)\n                    CASE\n                        WHEN s.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$' AND s.hyperdrive_rating::NUMERIC > 0 THEN\n                            CASE\n                                WHEN s.hyperdrive_rating::NUMERIC <= 1 THEN 20\n                                WHEN s.hyperdrive_rating::NUMERIC <= 2 THEN 10\n                                ELSE 0\n                            END\n                        ELSE 0\n                    END +\n                    -- Size bonus for large combat ships\n                    CASE\n                        WHEN s.length_m ~ '^[0-9]+(\\.[0-9]+)?$' AND s.length_m::NUMERIC > 1000 \n                        AND s.starship_class IN (\n                            'Star Destroyer', 'Dreadnought', 'Battlecruiser', 'Star Dreadnought'\n                        ) THEN 20\n                        WHEN s.length_m ~ '^[0-9]+(\\.[0-9]+)?$' AND s.length_m::NUMERIC > 500 THEN 10\n                        ELSE 0\n                    END +\n                    -- Cargo capacity bonus\n                    CASE\n                        WHEN s.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$' AND s.cargo_capacity::NUMERIC > 1000000 THEN 10\n                        ELSE 0\n                    END +\n                    -- Famous starship bonus\n                    CASE\n                        WHEN LOWER(s.starship_name) IN (\n                            'millennium falcon', 'x-wing', 'tie fighter', 'star destroyer', \n                            'death star', 'slave 1', 'executor', 'tantive iv'\n                        ) THEN 15\n                        ELSE 0\n                    END\n                ))\n            ELSE 50\n        END AS effectiveness_score\n    FROM starships s\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['sm.starship_id']) }} AS starship_key,\n    \n    -- Core identifiers\n    sm.starship_id,\n    sm.starship_name,\n    sm.model,\n    sm.manufacturer,\n    \n    -- Classification\n    sm.starship_class,\n    \n    -- Converted hyperspace rating to classification - safe casting\n    CASE\n        WHEN NOT (sm.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'Unknown'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 0.5 THEN 'Ultra Fast'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 1.0 THEN 'Very Fast'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 2.0 THEN 'Fast'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 3.0 THEN 'Average'\n        WHEN sm.hyperdrive_rating::NUMERIC <= 4.0 THEN 'Slow'\n        ELSE 'Very Slow'\n    END AS hyperspace_rating,\n    \n    -- Faction affiliation based on model and name\n    CASE\n        WHEN LOWER(sm.starship_name) LIKE '%imperial%' OR \n             LOWER(sm.model) LIKE '%imperial%' OR \n             LOWER(sm.starship_name) LIKE '%tie%' OR\n             LOWER(sm.starship_name) = 'executor' OR\n             LOWER(sm.starship_name) = 'death star' THEN 'Imperial'\n        \n        WHEN LOWER(sm.starship_name) LIKE '%republic%' OR \n             LOWER(sm.model) LIKE '%republic%' OR \n             LOWER(sm.starship_name) LIKE '%naboo%' OR\n             LOWER(sm.manufacturer) LIKE '%republic%' OR\n             LOWER(sm.starship_name) = 'jedi starfighter' THEN 'Republic'\n        \n        WHEN LOWER(sm.starship_name) LIKE '%rebel%' OR \n             LOWER(sm.model) LIKE '%rebel%' OR\n             LOWER(sm.starship_name) LIKE '%x-wing%' OR\n             LOWER(sm.starship_name) LIKE '%y-wing%' OR\n             LOWER(sm.starship_name) LIKE '%a-wing%' OR\n             LOWER(sm.starship_name) LIKE '%b-wing%' OR\n             LOWER(sm.starship_name) = 'millennium falcon' OR\n             LOWER(sm.starship_name) = 'tantive iv' THEN 'Rebel Alliance/Resistance'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%trade federation%' OR\n             LOWER(sm.model) LIKE '%federation%' OR\n             LOWER(sm.starship_name) LIKE '%separatist%' OR\n             LOWER(sm.manufacturer) LIKE '%techno union%' THEN 'Separatist/Trade Federation'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%first order%' OR\n             LOWER(sm.model) LIKE '%first order%' THEN 'First Order'\n             \n        WHEN LOWER(sm.starship_name) = 'slave 1' OR\n             LOWER(sm.starship_name) LIKE '%firespray%' THEN 'Bounty Hunter'\n             \n        ELSE 'Civilian/Neutral'\n    END AS faction_affiliation,\n    \n    -- Physical specifications with proper handling\n    CASE WHEN sm.length_m ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.length_m::NUMERIC ELSE 0 END AS length_m,\n    CASE WHEN sm.max_speed ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.max_speed::NUMERIC ELSE 0 END AS max_atmosphering_speed,\n    CASE WHEN sm.MGLT ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.MGLT::NUMERIC ELSE 0 END AS MGLT,\n    CASE WHEN sm.hyperdrive_rating ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.hyperdrive_rating::NUMERIC ELSE 0 END AS hyperdrive_rating,\n    \n    -- Cost information with safe casting\n    CASE WHEN sm.cost_in_credits ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.cost_in_credits::NUMERIC ELSE 0 END AS cost_in_credits,\n    \n    -- Format costs in a readable way\n    CASE\n        WHEN NOT (sm.cost_in_credits ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'unknown'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000000 THEN TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC/1000000000.0, '999,999,990.99')) || ' billion credits'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000 THEN TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC/1000000.0, '999,999,990.99')) || ' million credits'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000 THEN TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC/1000.0, '999,999,990.99')) || ' thousand credits'\n        ELSE TRIM(TO_CHAR(sm.cost_in_credits::NUMERIC, '999,999,999,999')) || ' credits'\n    END AS cost_formatted,\n    \n    -- Value classification - safe casting\n    CASE\n        WHEN NOT (sm.cost_in_credits ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'Unknown'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000000 THEN 'Capital Investment'\n        WHEN sm.cost_in_credits::NUMERIC >= 100000000 THEN 'Military Grade'\n        WHEN sm.cost_in_credits::NUMERIC >= 10000000 THEN 'Very Expensive'\n        WHEN sm.cost_in_credits::NUMERIC >= 1000000 THEN 'Expensive'\n        WHEN sm.cost_in_credits::NUMERIC >= 100000 THEN 'Moderate'\n        ELSE 'Affordable'\n    END AS cost_category,\n    \n    -- Capacity information - safe casting\n    CASE WHEN sm.crew_count ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.crew_count::NUMERIC ELSE 0 END AS crew_count,\n    CASE WHEN sm.passenger_capacity ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.passenger_capacity::NUMERIC ELSE 0 END AS passenger_count,\n    sm.total_capacity,\n    CASE WHEN sm.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$' THEN sm.cargo_capacity::NUMERIC ELSE 0 END AS cargo_capacity,\n    \n    -- Format cargo in a readable way - with safe casting\n    CASE\n        WHEN NOT (sm.cargo_capacity ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'unknown'\n        WHEN sm.cargo_capacity::NUMERIC >= 1000000000 THEN TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC/1000000000.0, '999,999,990.99')) || ' million tons'\n        WHEN sm.cargo_capacity::NUMERIC >= 1000000 THEN TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC/1000000.0, '999,999,990.99')) || ' tons'\n        WHEN sm.cargo_capacity::NUMERIC >= 1000 THEN TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC/1000.0, '999,999,990.99')) || ' kg'\n        ELSE TRIM(TO_CHAR(sm.cargo_capacity::NUMERIC, '999,999,999,999')) || ' kg'\n    END AS cargo_capacity_formatted,\n    \n    -- Consumables duration\n    sm.consumables,\n    \n    -- Derived metrics\n    sm.passengers_per_crew,\n    sm.cargo_efficiency,\n    sm.hyperdrive_performance_score,\n    sm.effectiveness_score,\n    \n    -- Use our own iconic flag\n    sm.is_iconic,\n    \n    -- Calculate starship_role directly since it doesn't exist in staging\n    CASE\n        WHEN sm.starship_class LIKE '%fighter%' OR \n             sm.starship_class LIKE '%interceptor%' THEN 'Combat - Fighter'\n        WHEN sm.starship_class LIKE '%destroyer%' OR \n             sm.starship_class LIKE '%cruiser%' OR\n             sm.starship_class LIKE '%battleship%' OR\n             sm.starship_class LIKE '%dreadnought%' THEN 'Combat - Capital Ship'\n        WHEN sm.starship_class LIKE '%bomber%' THEN 'Combat - Bomber'\n        WHEN sm.starship_class LIKE '%transport%' THEN 'Transport'\n        WHEN sm.starship_class LIKE '%shuttle%' OR \n             sm.starship_class LIKE '%yacht%' OR\n             sm.starship_class LIKE '%pleasure craft%' THEN 'Personal/Diplomatic'\n        WHEN sm.starship_class LIKE '%freighter%' THEN 'Cargo'\n        WHEN sm.starship_class LIKE '%station%' OR \n             sm.starship_name LIKE '%death star%' THEN 'Battle Station'\n        ELSE 'Multi-purpose'\n    END AS starship_role,\n    \n    -- Calculate size_class directly - with safe casting\n    CASE\n        WHEN NOT (sm.length_m ~ '^[0-9]+(\\.[0-9]+)?$') THEN 'Unknown'\n        WHEN sm.length_m::NUMERIC > 10000 THEN 'Massive (Station)'\n        WHEN sm.length_m::NUMERIC > 1000 THEN 'Huge (Capital Ship)'\n        WHEN sm.length_m::NUMERIC > 500 THEN 'Very Large'\n        WHEN sm.length_m::NUMERIC > 100 THEN 'Large'\n        WHEN sm.length_m::NUMERIC > 50 THEN 'Medium'\n        WHEN sm.length_m::NUMERIC > 20 THEN 'Small'\n        ELSE 'Tiny'\n    END AS size_class,\n    \n    -- Era classification\n    CASE\n        WHEN LOWER(sm.starship_name) LIKE '%republic%' OR\n             LOWER(sm.model) LIKE '%republic%' OR\n             LOWER(sm.starship_name) LIKE '%naboo%' OR\n             LOWER(sm.starship_name) LIKE '%jedi starfighter%' OR\n             LOWER(sm.starship_name) LIKE '%droid%' THEN 'Prequel Era (Clone Wars)'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%imperial%' OR\n             LOWER(sm.model) LIKE '%imperial%' OR\n             LOWER(sm.starship_name) LIKE '%tie%' OR\n             LOWER(sm.starship_name) = 'executor' OR\n             LOWER(sm.starship_name) = 'death star' OR\n             LOWER(sm.starship_name) LIKE '%x-wing%' OR \n             LOWER(sm.starship_name) LIKE '%y-wing%' OR\n             LOWER(sm.starship_name) LIKE '%a-wing%' OR\n             LOWER(sm.starship_name) LIKE '%b-wing%' OR\n             LOWER(sm.starship_name) = 'millennium falcon' THEN 'Original Trilogy Era (Galactic Civil War)'\n             \n        WHEN LOWER(sm.starship_name) LIKE '%first order%' OR\n             LOWER(sm.model) LIKE '%first order%' THEN 'Sequel Era (First Order Conflict)'\n             \n        ELSE 'Multiple Eras/Unspecified'\n    END AS starship_era,\n    \n    -- Relationship counts from staging\n    sm.pilot_count,\n    sm.pilot_names AS notable_pilots,\n    sm.film_appearances AS film_appearance_count,\n    sm.film_names AS film_names_list,\n    \n    -- Source data metadata\n    sm.url AS source_url,\n    sm.fetch_timestamp,\n    sm.processed_timestamp,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starship_metrics sm\nORDER BY sm.effectiveness_score DESC, sm.starship_name", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_vehicles": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_vehicles", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_vehicles.sql", "original_file_path": "models/marts/star_wars/dim_sw_vehicles.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_vehicles", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_vehicles"], "alias": "dim_sw_vehicles", "checksum": {"name": "sha256", "checksum": "227c1b60da96328c72612f3f2f920329f4d2871bf46525f911d9165b05616d8e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "vehicle_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["vehicle_id"]}, {"columns": ["vehicle_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["vehicle_id"]}, {"columns": ["vehicle_name"]}], "unique_key": "vehicle_key"}, "created_at": 1742224713.7864873, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_vehicles\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['vehicle_id']}, {'columns': ['vehicle_name']}],\n    unique_key = 'vehicle_key'\n  )\n}}\n\n-- Get only string data from staging (no numeric conversions)\nWITH base_vehicles AS (\n  SELECT\n    id AS vehicle_id,\n    vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    consumables,\n    film_appearances,\n    film_names,\n    pilot_count,\n    pilot_names,\n    vehicle_purpose,\n    vehicle_size,\n    terrain_capability,\n    is_notable_vehicle,\n    url,\n    fetch_timestamp,\n    processed_timestamp\n  FROM {{ ref('stg_swapi_vehicles') }}\n),\n\n-- Add context data without trying numeric conversions\nvehicle_context AS (\n  SELECT\n    v.*,\n    \n    -- Faction affiliation  \n    CASE\n      WHEN LOWER(v.vehicle_name) LIKE '%imperial%' OR\n           LOWER(v.vehicle_name) IN ('at-at', 'at-st', 'at-dp', 'tie', 'tie bomber',\n                                 'tie fighter', 'tie interceptor', 'tie/ln starfighter') THEN 'Imperial'\n      WHEN LOWER(v.vehicle_name) LIKE '%republic%' THEN 'Republic'\n      WHEN LOWER(v.vehicle_name) LIKE '%rebel%' THEN 'Rebel Alliance'\n      ELSE 'Civilian/Neutral'\n    END AS faction_affiliation,\n    \n    -- Calculate simple effectiveness\n    CASE \n      WHEN v.vehicle_purpose = 'Military' THEN\n        GREATEST(1, LEAST(10, 5 + \n          CASE\n            WHEN v.vehicle_size = 'Massive' THEN 3\n            WHEN v.vehicle_size = 'Huge' THEN 2\n            WHEN v.vehicle_size = 'Very Large' THEN 1\n            WHEN v.vehicle_size = 'Tiny' THEN -1\n            ELSE 0\n          END\n        ))\n      ELSE 5 -- Default score\n    END AS effectiveness_rating\n    \n  FROM base_vehicles v\n)\n\n-- Final output with surrogate key and only safe fields\nSELECT \n  {{ dbt_utils.generate_surrogate_key(['v.vehicle_id']) }} AS vehicle_key,\n  v.vehicle_id,\n  v.vehicle_name,\n  v.model,\n  v.manufacturer,\n  \n  -- Use NULL for all numeric fields\n  NULL::NUMERIC AS cost_in_credits,\n  'Unknown' AS cost_formatted,\n  NULL::NUMERIC AS length_m,\n  NULL::NUMERIC AS max_speed,\n  'Unknown' AS speed_class,\n  NULL::NUMERIC AS crew_count,\n  NULL::NUMERIC AS passenger_capacity,\n  NULL::NUMERIC AS total_capacity,\n  NULL::NUMERIC AS cargo_capacity,\n  \n  -- Technical classifications\n  v.vehicle_class,\n  v.vehicle_size,\n  v.vehicle_purpose,\n  v.terrain_capability,\n  \n  -- Film and pilot information\n  v.film_appearances,\n  v.film_names,\n  v.pilot_count,\n  v.pilot_names,\n  \n  -- Star Wars universe context\n  v.faction_affiliation,\n  v.effectiveness_rating,\n  \n  -- Notable flag\n  v.is_notable_vehicle AS is_iconic,\n  \n  -- Source tracking\n  v.url AS source_url,\n  v.fetch_timestamp,\n  v.processed_timestamp,\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n  \nFROM vehicle_context v\nWHERE v.vehicle_id IS NOT NULL\nORDER BY v.faction_affiliation, v.effectiveness_rating DESC, v.vehicle_name", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fct_sw_characters": {"database": "nerd_facts", "schema": "public", "name": "fct_sw_characters", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/fct_sw_characters.sql", "original_file_path": "models/marts/star_wars/fct_sw_characters.sql", "unique_id": "model.nerd_facts_dbt.fct_sw_characters", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "fct_sw_characters"], "alias": "fct_sw_characters", "checksum": {"name": "sha256", "checksum": "92408649f570bfaff4148b7bb0b1442176181bbde692e99937f83ebedb9fe4a5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "character_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["character_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["character_id"]}], "unique_key": "character_key"}, "created_at": 1742225743.3528717, "relation_name": "\"nerd_facts\".\"public\".\"fct_sw_characters\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['character_id']}],\n    unique_key = 'character_key'\n  )\n}}\n\n-- Get just the base data first\nWITH characters AS (\n    SELECT\n        id AS character_id,\n        name,\n        height_cm,\n        mass_kg,\n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld_id,\n        species_id,\n        film_appearances,\n        film_names,\n        vehicle_count,\n        vehicle_names,\n        starship_count,\n        starship_names,\n        force_sensitive,\n        character_era,\n        url,\n        fetch_timestamp,\n        processed_timestamp\n    FROM {{ ref('stg_swapi_people') }}\n    WHERE id IS NOT NULL\n)\n\n-- Simplified final output\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['character_id']) }} AS character_key,\n    character_id,\n    name AS character_name,\n    homeworld_id,\n    species_id,\n    \n    -- Physical attributes\n    height_cm,\n    mass_kg,\n    hair_color,\n    eye_color,\n    skin_color,\n    birth_year,\n    gender,\n    \n    -- Film and vehicle appearances\n    film_appearances,\n    vehicle_count,\n    starship_count,\n    film_names AS film_list,\n    vehicle_names AS vehicle_list,\n    starship_names AS starship_list,\n    \n    -- Force user information\n    force_sensitive,\n    \n    -- Era classification\n    character_era,\n    \n    -- Affiliation (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'leia organa', 'han solo') THEN 'Rebel Alliance'\n        WHEN LOWER(name) IN ('darth vader', 'emperor palpatine') THEN 'Empire'\n        ELSE 'Other'\n    END AS affiliation,\n    \n    -- Character tier (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'leia organa') THEN 'S'\n        WHEN film_appearances > 2 THEN 'A'\n        WHEN film_appearances > 1 THEN 'B' \n        ELSE 'C'\n    END AS character_tier,\n    \n    -- Source tracking\n    url,\n    fetch_timestamp,\n    processed_timestamp,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM characters\nORDER BY character_id", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_abilities": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_abilities", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_abilities.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_abilities.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_abilities", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_abilities"], "alias": "stg_pokeapi_abilities", "checksum": {"name": "sha256", "checksum": "08d92c465baadb02ff6dd6ec1aefa0d31572ec37d1bae7461b71a9847521625e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon ability data with parsed effects and classifications", "columns": {"id": {"name": "id", "description": "Primary key for abilities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ability_name": {"name": "ability_name", "description": "Name of the ability", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "generation_name": {"name": "generation_name", "description": "Generation name when ability was introduced", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "generation_number": {"name": "generation_number", "description": "Generation number when ability was introduced (Roman numeral converted to string)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "effect_description": {"name": "effect_description", "description": "Full description of ability effect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "short_description": {"name": "short_description", "description": "Condensed description of ability effect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pokemon_count": {"name": "pokemon_count", "description": "Number of Pok\u00e9mon that can have this ability", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_main_series": {"name": "is_main_series", "description": "Whether ability appears in main series games", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_stat_boosting": {"name": "is_stat_boosting", "description": "Whether ability can boost stats", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weather_related": {"name": "is_weather_related", "description": "Whether ability interacts with weather effects", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "affects_status_conditions": {"name": "affects_status_conditions", "description": "Whether ability affects status conditions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742226293.6950083, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"", "raw_code": "/*\n  Model: stg_pokeapi_abilities\n  Description: Standardizes Pok\u00e9mon ability data from the PokeAPI\n  \n  Notes:\n  - Fixed nested JSON handling using proper extraction patterns\n  - Added explicit JSONB casting for all JSON operations\n  - Fixed type handling for BOOLEAN fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        generation,\n        effect_entries,\n        pokemon,\n        is_main_series\n    FROM raw.pokeapi_abilities\n    WHERE id IS NOT NULL\n),\n\n-- Extract English effect entries when available\neffect_entries_parsed AS (\n    SELECT\n        id,\n        (\n            -- Fix nested JSON extraction - proper operator sequence\n            SELECT effect_entry->>'effect' \n            FROM jsonb_array_elements(effect_entries::JSONB) AS effect_entry\n            WHERE effect_entry->'language'->>'name' = 'en'\n            LIMIT 1\n        ) AS effect_en,\n        (\n            -- Fix nested JSON extraction - proper operator sequence\n            SELECT effect_entry->>'short_effect' \n            FROM jsonb_array_elements(effect_entries::JSONB) AS effect_entry\n            WHERE effect_entry->'language'->>'name' = 'en'\n            LIMIT 1\n        ) AS short_effect_en,\n        -- Fallback to first entry if no English entry exists\n        COALESCE((effect_entries::JSONB)->0->>'effect', '') AS effect_fallback,\n        COALESCE((effect_entries::JSONB)->0->>'short_effect', '') AS short_effect_fallback\n    FROM raw_data\n)\n\nSELECT\n    -- Primary identifiers\n    r.id,\n    r.name AS ability_name,\n    \n    -- Generation information with explicit JSONB casting\n    COALESCE((r.generation::JSONB)->>'name', 'unknown') AS generation_name,\n    CASE\n        WHEN (r.generation::JSONB)->>'name' ~ 'generation-([i|v]+)'\n        THEN REGEXP_REPLACE((r.generation::JSONB)->>'name', 'generation-([i|v]+)', '\\1')\n        ELSE NULL\n    END AS generation_number,\n    \n    -- Effect descriptions\n    COALESCE(e.effect_en, e.effect_fallback) AS effect_description,\n    COALESCE(e.short_effect_en, e.short_effect_fallback) AS short_description,\n    \n    -- Pok\u00e9mon count with this ability with explicit JSONB casting\n    COALESCE(jsonb_array_length(r.pokemon::JSONB), 0) AS pokemon_count,\n    \n    -- Canonical status - Fix: Handle TEXT to BOOLEAN conversion properly\n    CASE\n        WHEN r.is_main_series::TEXT = 'false' THEN FALSE\n        ELSE TRUE  -- Default to TRUE for NULL or any non-false value\n    END AS is_main_series,\n    \n    -- Common words in effect description for classification\n    CASE\n        WHEN LOWER(COALESCE(e.effect_en, e.effect_fallback)) LIKE '%boost%' OR \n             LOWER(COALESCE(e.effect_en, e.effect_fallback)) LIKE '%increase%' THEN TRUE\n        ELSE FALSE\n    END AS is_stat_boosting,\n    \n    CASE\n        WHEN LOWER(COALESCE(e.effect_en, e.effect_fallback)) LIKE '%weather%' THEN TRUE\n        ELSE FALSE\n    END AS is_weather_related,\n    \n    CASE\n        WHEN LOWER(COALESCE(e.effect_en, e.effect_fallback)) LIKE '%status%' OR \n             LOWER(COALESCE(e.effect_en, e.effect_fallback)) LIKE '%poison%' OR\n             LOWER(COALESCE(e.effect_en, e.effect_fallback)) LIKE '%burn%' OR\n             LOWER(COALESCE(e.effect_en, e.effect_fallback)) LIKE '%paralyze%' THEN TRUE\n        ELSE FALSE\n    END AS affects_status_conditions,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data r\nJOIN effect_entries_parsed e ON r.id = e.id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_id.457541e664": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_abilities_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_abilities_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_id.457541e664", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_abilities_id"], "alias": "unique_stg_pokeapi_abilities_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742226293.7593403, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_id.b32af1eccd": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_abilities_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_abilities_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_id.b32af1eccd", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_abilities_id"], "alias": "not_null_stg_pokeapi_abilities_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742226293.7609298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_abilities_ability_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_abilities_ability_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_abilities_ability_name"], "alias": "not_null_stg_pokeapi_abilities_ability_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742226293.7623036, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ability_name", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ability_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_abilities_effect_description", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_abilities_effect_description.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_abilities_effect_description"], "alias": "not_null_stg_pokeapi_abilities_effect_description", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1742226293.7639513, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effect_description", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "effect_description", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0"], "alias": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde"}, "created_at": 1742226293.7657716, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pokemon_count", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "pokemon_count", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": "dbt_utils"}}, "model.nerd_facts_dbt.stg_pokeapi_items": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_items", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_items.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_items.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_items", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_items"], "alias": "stg_pokeapi_items", "checksum": {"name": "sha256", "checksum": "72651f1c96fec9675c651237c1d43ac49b14b29072cf156da0c67ccc7affd989"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742226568.4997184, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_items\"", "raw_code": "/*\n  Model: stg_pokeapi_items\n  Description: Standardizes Pok\u00e9mon item data from the PokeAPI\n  Source: raw.pokeapi_items\n  \n  Notes:\n  - Effect entries are extracted with language preference for English entries\n  - Categories and attributes are parsed from nested JSON\n  - Item classifications are derived from item attributes and names\n  - Fixed missing sprite_url column issue\n  - Fixed type casting issues with numeric fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        cost,\n        effect_entries::JSONB AS effect_entries, -- Added explicit casting\n        fling_power,\n        fling_effect::JSONB AS fling_effect,     -- Added explicit casting\n        attributes::JSONB AS attributes,         -- Added explicit casting\n        category::JSONB AS category              -- Added explicit casting\n        -- Removed sprite_url as it doesn't exist in source\n    FROM raw.pokeapi_items\n    WHERE id IS NOT NULL\n),\n\n-- Extract English effect description when available\neffect_text AS (\n    SELECT\n        id,\n        (\n            -- First try to find an English entry\n            SELECT effect_entry->>'effect'\n            FROM jsonb_array_elements(effect_entries) AS effect_entry\n            WHERE effect_entry->'language'->>'name' = 'en'\n            LIMIT 1\n        ) AS effect_en,\n        -- Fallback to first entry if no English entry\n        COALESCE(effect_entries->0->>'effect', '') AS effect_fallback\n    FROM raw_data\n)\n\nSELECT\n    -- Primary identifiers\n    r.id,\n    r.name AS item_name,\n    \n    -- Item attributes with proper casting\n    CASE \n        WHEN r.cost::TEXT ~ '^[0-9]+$' THEN \n            NULLIF(r.cost::INTEGER, 0) \n        ELSE NULL \n    END AS purchase_cost,\n    \n    CASE \n        WHEN r.fling_power::TEXT ~ '^[0-9]+$' THEN \n            NULLIF(r.fling_power::INTEGER, 0) \n        ELSE NULL \n    END AS fling_power,\n    \n    r.fling_effect->>'name' AS fling_effect_name,\n    \n    -- Category information\n    r.category->>'name' AS category_name,\n    \n    -- Extract attributes as array for easier querying\n    ARRAY(\n        SELECT jsonb_array_elements_text(r.attributes)\n    ) AS item_attributes,\n    \n    -- Parse effect text with language preference\n    COALESCE(e.effect_en, e.effect_fallback) AS effect_description,\n    \n    -- Replace sprite URL with constructed URL or NULL\n    'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/' || r.name || '.png' AS sprite_url,\n    \n    -- Derived item classifications\n    CASE\n        WHEN r.category->>'name' = 'healing' OR r.name LIKE '%potion%' OR r.name = 'full-restore' THEN TRUE\n        ELSE FALSE\n    END AS is_healing_item,\n    \n    CASE\n        WHEN r.name LIKE '%ball%' AND r.name != 'black-belt' THEN TRUE\n        ELSE FALSE\n    END AS is_pokeball,\n    \n    CASE\n        WHEN r.category->>'name' = 'battle-items' OR \n             r.name IN ('x-attack', 'x-defense', 'x-speed', 'dire-hit', 'guard-spec') THEN TRUE\n        ELSE FALSE\n    END AS is_battle_item,\n    \n    CASE\n        WHEN r.name LIKE '%tm%' OR r.name LIKE '%technical-machine%' THEN TRUE\n        ELSE FALSE\n    END AS is_tm,\n    \n    CASE\n        WHEN EXISTS (\n            SELECT 1\n            FROM jsonb_array_elements_text(r.attributes) AS attr\n            WHERE attr = 'holdable'\n        ) THEN TRUE\n        ELSE FALSE\n    END AS is_holdable,\n    \n    -- Item tier based on cost and effects\n    CASE\n        WHEN r.cost::TEXT ~ '^[0-9]+$' AND r.cost::INTEGER > 10000 OR r.name LIKE '%master%ball%' THEN 'Ultra Rare'\n        WHEN r.cost::TEXT ~ '^[0-9]+$' AND r.cost::INTEGER > 5000 THEN 'Rare'\n        WHEN r.cost::TEXT ~ '^[0-9]+$' AND r.cost::INTEGER > 1000 THEN 'Uncommon'\n        ELSE 'Common'\n    END AS item_rarity,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data r\nLEFT JOIN effect_text e ON r.id = e.id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_moves": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_moves", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_moves.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_moves.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_moves", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_moves"], "alias": "stg_pokeapi_moves", "checksum": {"name": "sha256", "checksum": "a52f1c53120ba5ac8d544e34530eae3a2200e3202c7b34f582b064caa7f8a91b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon move data with effect categories and power classifications", "columns": {"id": {"name": "id", "description": "Primary key for moves", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Elemental type of the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view", "unique_key": "id"}, "created_at": 1742226843.3195605, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_moves\"", "raw_code": "{{\n  config(\n    materialized = 'view',\n    unique_key = 'id'\n  )\n}}\n\n/*\n  Model: stg_pokeapi_moves\n  Description: Standardizes Pok\u00e9mon move data from the PokeAPI\n  \n  Notes:\n  - Fixed missing effect_text by extracting from JSON structure\n  - Added safe type casting for numeric fields\n  - Added metadata/derived fields for better analysis\n  - Removed missing columns (created_at, updated_at)\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        type::JSONB AS type_json,\n        power,\n        pp,\n        accuracy,\n        priority,\n        damage_class::JSONB AS damage_class_json,\n        effect_entries::JSONB AS effect_entries,  -- Use effect_entries instead of effect_text\n        effect_chance,\n        generation::JSONB AS generation_json,     -- Renamed for clarity\n        target::JSONB AS target_json\n        -- Removed created_at and updated_at columns as they don't exist\n    FROM {{ source('pokeapi', 'moves') }}\n    WHERE id IS NOT NULL\n),\n\n-- Extract English effect description when available\neffect_text_extract AS (\n    SELECT\n        id,\n        (\n            -- First try to find an English entry\n            SELECT effect_entry->>'effect'\n            FROM jsonb_array_elements(effect_entries) AS effect_entry\n            WHERE effect_entry->'language'->>'name' = 'en'\n            LIMIT 1\n        ) AS effect_description_en,\n        (\n            -- Also get short effect\n            SELECT effect_entry->>'short_effect'\n            FROM jsonb_array_elements(effect_entries) AS effect_entry\n            WHERE effect_entry->'language'->>'name' = 'en'\n            LIMIT 1\n        ) AS short_effect_en,\n        -- Fallback to first entry if no English entry exists\n        COALESCE(effect_entries->0->>'effect', '') AS effect_fallback\n    FROM raw_data\n)\n\nSELECT\n    -- Primary identifiers\n    r.id,\n    r.name AS move_name,\n    \n    -- Type information\n    r.type_json->>'name' AS type_name,\n    \n    -- Move stats with safe numeric conversion\n    CASE \n        WHEN r.power::TEXT ~ '^[0-9]+$' THEN r.power::INTEGER\n        ELSE NULL \n    END AS power,\n    \n    CASE \n        WHEN r.pp::TEXT ~ '^[0-9]+$' THEN r.pp::INTEGER\n        ELSE NULL \n    END AS pp,\n    \n    CASE \n        WHEN r.accuracy::TEXT ~ '^[0-9]+$' THEN r.accuracy::INTEGER\n        ELSE NULL \n    END AS accuracy,\n    \n    CASE \n        WHEN r.priority::TEXT ~ '^[0-9]+$' THEN r.priority::INTEGER\n        ELSE 0\n    END AS priority,\n    \n    -- Effect information\n    r.damage_class_json->>'name' AS damage_class,\n    COALESCE(e.effect_description_en, e.effect_fallback) AS effect_text,\n    e.short_effect_en AS short_effect_text,\n    \n    CASE \n        WHEN r.effect_chance::TEXT ~ '^[0-9]+$' THEN r.effect_chance::INTEGER\n        ELSE NULL \n    END AS effect_chance,\n    \n    -- Target information\n    r.target_json->>'name' AS target_type,\n    \n    -- Generation information\n    r.generation_json->>'name' AS generation_name,\n    CASE\n        WHEN r.generation_json->>'name' ~ 'generation-([i|v]+)'\n        THEN REGEXP_REPLACE(r.generation_json->>'name', 'generation-([i|v]+)', '\\1')\n        ELSE NULL\n    END AS generation_number,\n    \n    -- Derived fields for analysis\n    CASE\n        WHEN r.damage_class_json->>'name' = 'physical' THEN 'Physical'\n        WHEN r.damage_class_json->>'name' = 'special' THEN 'Special'\n        ELSE 'Status'\n    END AS move_category,\n    \n    CASE\n        -- Power tiers for damaging moves\n        WHEN r.damage_class_json->>'name' IN ('physical', 'special') THEN\n            CASE \n                WHEN r.power::TEXT ~ '^[0-9]+$' THEN\n                    CASE\n                        WHEN r.power::INTEGER >= 120 THEN 'Ultra High'\n                        WHEN r.power::INTEGER >= 90 THEN 'Very High'\n                        WHEN r.power::INTEGER >= 70 THEN 'High'\n                        WHEN r.power::INTEGER >= 50 THEN 'Medium'\n                        WHEN r.power::INTEGER > 0 THEN 'Low'\n                        ELSE 'No Power'\n                    END\n                ELSE 'Unknown'\n            END\n        ELSE 'Status Move'\n    END AS power_tier,\n    \n    -- Source tracking - removed missing source fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data r\nLEFT JOIN effect_text_extract e ON r.id = e.id", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "test.nerd_facts_dbt.unique_stg_pokeapi_moves_id.d31ba0dc9a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_moves_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_moves_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_moves_id.d31ba0dc9a", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_moves_id"], "alias": "unique_stg_pokeapi_moves_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742226843.3878095, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_id.4c6f071dca": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_moves_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_moves_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_id.4c6f071dca", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_moves_id"], "alias": "not_null_stg_pokeapi_moves_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742226843.3897917, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_name.a4c435275b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_moves_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_moves_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_name.a4c435275b", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_moves_name"], "alias": "not_null_stg_pokeapi_moves_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742226843.3915288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_type.9c5cea1974": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_moves_type", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_moves_type.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_type.9c5cea1974", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_moves_type"], "alias": "not_null_stg_pokeapi_moves_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1742226843.393621, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_pokeapi_moves_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.6fabacbaa2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_pokeapi_moves_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_pokeapi_mo_0fc738c41f8323ec2926b5ea03d2c8f2.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_pokeapi_moves_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.6fabacbaa2", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "accepted_values_stg_pokeapi_moves_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy"], "alias": "accepted_values_stg_pokeapi_mo_0fc738c41f8323ec2926b5ea03d2c8f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_pokeapi_mo_0fc738c41f8323ec2926b5ea03d2c8f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_stg_pokeapi_mo_0fc738c41f8323ec2926b5ea03d2c8f2"}, "created_at": 1742226843.3951442, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_pokeapi_mo_0fc738c41f8323ec2926b5ea03d2c8f2\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["normal", "fire", "water", "electric", "grass", "ice", "fighting", "poison", "ground", "flying", "psychic", "bug", "rock", "ghost", "dragon", "dark", "steel", "fairy"], "column_name": "type", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "model.nerd_facts_dbt.stg_pokeapi_types": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_types", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_types.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_types.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_types", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_types"], "alias": "stg_pokeapi_types", "checksum": {"name": "sha256", "checksum": "6ca67302bede12d9c36d2a99bf7a246b470f134298faf06f15c5c0d9367c490a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742227766.616949, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_types\"", "raw_code": "/*\n  Model: stg_pokeapi_types\n  Description: Standardizes Pok\u00e9mon type data from the PokeAPI\n  Source: raw.pokeapi_types\n  \n  Notes:\n  - Damage relations are extracted from nested JSON structure\n  - Fixed set-returning function issues in COALESCE\n  - Added comprehensive type effectiveness metrics\n  - Added data quality checks\n  - Fixed JSON type casting for array length calculations\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        damage_relations::JSONB AS damage_relations,\n        pokemon::JSONB AS pokemon,  -- Cast to JSONB explicitly\n        moves::JSONB AS moves       -- Cast to JSONB explicitly\n    FROM raw.pokeapi_types\n    WHERE id IS NOT NULL\n),\n\n-- Extract type relationships into rows for easier querying\ndamage_relations_unpacked AS (\n    SELECT\n        id,\n        name,\n        -- Types that are super effective against this type (this type takes 2x damage)\n        ARRAY(\n            SELECT rel->>'name'\n            FROM jsonb_array_elements(damage_relations->'double_damage_from') AS rel\n        ) AS weak_against,\n        \n        -- Types that this type is super effective against (this type deals 2x damage)\n        ARRAY(\n            SELECT rel->>'name'\n            FROM jsonb_array_elements(damage_relations->'double_damage_to') AS rel\n        ) AS strong_against,\n        \n        -- Types that are not very effective against this type (this type takes 0.5x damage)\n        ARRAY(\n            SELECT rel->>'name'\n            FROM jsonb_array_elements(damage_relations->'half_damage_from') AS rel\n        ) AS resistant_to,\n        \n        -- Types that this type is not very effective against (this type deals 0.5x damage)\n        ARRAY(\n            SELECT rel->>'name'\n            FROM jsonb_array_elements(damage_relations->'half_damage_to') AS rel\n        ) AS weak_damage_to,\n        \n        -- Types that have no effect on this type (this type takes 0x damage)\n        ARRAY(\n            SELECT rel->>'name'\n            FROM jsonb_array_elements(damage_relations->'no_damage_from') AS rel\n        ) AS immune_to,\n        \n        -- Types that this type has no effect on (this type deals 0x damage)\n        ARRAY(\n            SELECT rel->>'name'\n            FROM jsonb_array_elements(damage_relations->'no_damage_to') AS rel\n        ) AS no_effect_on,\n        \n        -- Count of Pok\u00e9mon with this type - with proper JSONB casting\n        COALESCE(jsonb_array_length(pokemon), 0) AS pokemon_count,\n        \n        -- Count of moves with this type - with proper JSONB casting\n        COALESCE(jsonb_array_length(moves), 0) AS move_count\n    FROM raw_data\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name AS type_name,\n    \n    -- Type relationships\n    weak_against,\n    strong_against,\n    resistant_to,\n    weak_damage_to,\n    immune_to,\n    no_effect_on,\n    \n    -- Counts and statistics\n    COALESCE(array_length(weak_against, 1), 0) AS weakness_count,\n    COALESCE(array_length(strong_against, 1), 0) AS strength_count,\n    COALESCE(array_length(resistant_to, 1), 0) AS resistance_count,\n    COALESCE(array_length(immune_to, 1), 0) AS immunity_count,\n    \n    -- Type effectiveness metrics - higher means better defensive type\n    COALESCE(array_length(resistant_to, 1), 0) + \n    COALESCE(array_length(immune_to, 1) * 2, 0) - \n    COALESCE(array_length(weak_against, 1), 0) AS defensive_score,\n    \n    -- Type effectiveness metrics - higher means better offensive type\n    COALESCE(array_length(strong_against, 1), 0) - \n    COALESCE(array_length(weak_damage_to, 1), 0) - \n    COALESCE(array_length(no_effect_on, 1) * 2, 0) AS offensive_score,\n    \n    -- Pokemon and move counts\n    pokemon_count,\n    move_count,\n    \n    -- Type color mapping for visualizations\n    CASE\n        WHEN name = 'normal' THEN '#A8A878'\n        WHEN name = 'fighting' THEN '#C03028'\n        WHEN name = 'flying' THEN '#A890F0'\n        WHEN name = 'poison' THEN '#A040A0'\n        WHEN name = 'ground' THEN '#E0C068'\n        WHEN name = 'rock' THEN '#B8A038'\n        WHEN name = 'bug' THEN '#A8B820'\n        WHEN name = 'ghost' THEN '#705898'\n        WHEN name = 'steel' THEN '#B8B8D0'\n        WHEN name = 'fire' THEN '#F08030'\n        WHEN name = 'water' THEN '#6890F0'\n        WHEN name = 'grass' THEN '#78C850'\n        WHEN name = 'electric' THEN '#F8D030'\n        WHEN name = 'psychic' THEN '#F85888'\n        WHEN name = 'ice' THEN '#98D8D8'\n        WHEN name = 'dragon' THEN '#7038F8'\n        WHEN name = 'dark' THEN '#705848'\n        WHEN name = 'fairy' THEN '#EE99AC'\n        ELSE '#68A090' -- Default (unknown)\n    END AS type_color,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM damage_relations_unpacked", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.bridge_pokemon_abilities": {"database": "nerd_facts", "schema": "public", "name": "bridge_pokemon_abilities", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/bridge_pokemon_abilities.sql", "original_file_path": "models/marts/pokemon/bridge_pokemon_abilities.sql", "unique_id": "model.nerd_facts_dbt.bridge_pokemon_abilities", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "bridge_pokemon_abilities"], "alias": "bridge_pokemon_abilities", "checksum": {"name": "sha256", "checksum": "f8d3a3486a68846b4498837d1b79a948cc0d6ba419c7cf5169e6f9c311854e48"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_ability_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}], "unique_key": "pokemon_ability_id"}, "created_at": 1742228215.0541117, "relation_name": "\"nerd_facts\".\"public\".\"bridge_pokemon_abilities\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}],\n    unique_key = 'pokemon_ability_id'\n  )\n}}\n\n/*\n  Model: bridge_pokemon_abilities\n  Description: Bridge table connecting Pok\u00e9mon to their abilities\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and abilities\n  - Modified to access abilities directly from the source table\n  - Calculates synergy scores between Pok\u00e9mon and their abilities\n  - Provides context on whether abilities are hidden or standard\n  - Removed dimension table join until dim_pokemon_abilities is created\n*/\n\n-- First get the core Pok\u00e9mon data we need\nWITH pokemon_data AS (\n    SELECT\n        p.id,\n        p.name,\n        p.primary_type,\n        p.type_list[1] AS secondary_type,\n        p.generation_number,\n        p.is_legendary,\n        p.is_mythical,\n        p.total_base_stats,\n        p.ability_count  -- Using ability count instead of ability data\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    WHERE p.id IS NOT NULL\n),\n\n-- Access raw data directly to get the abilities\npokemon_abilities_raw AS (\n    SELECT\n        id,\n        abilities::jsonb AS abilities_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\n-- Extract ability references from the raw data\npokemon_abilities AS (\n    SELECT\n        pd.id AS pokemon_id,\n        pd.name AS pokemon_name,\n        pd.primary_type,\n        pd.secondary_type,\n        pd.generation_number,\n        pd.is_legendary,\n        pd.is_mythical,\n        pd.total_base_stats,\n        ability_ref->'ability'->>'name' AS ability_name,\n        (ability_ref->>'is_hidden')::boolean AS is_hidden,\n        (ability_ref->>'slot')::integer AS slot_number\n    FROM pokemon_data pd\n    JOIN pokemon_abilities_raw par ON pd.id = par.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        CASE\n            WHEN par.abilities_json IS NULL OR par.abilities_json = 'null'::jsonb THEN '[]'::jsonb\n            ELSE par.abilities_json\n        END\n    ) AS ability_ref\n    WHERE pd.id IS NOT NULL\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['pa.pokemon_id', 'pa.ability_name']) }} AS pokemon_ability_id,\n    \n    -- Foreign keys\n    pa.pokemon_id,\n    pa.pokemon_name,\n    pa.ability_name,\n    \n    -- Ability attributes\n    pa.is_hidden,\n    pa.slot_number,\n    \n    -- Pokemon attributes for context\n    pa.primary_type,\n    pa.secondary_type,\n    pa.generation_number,\n    pa.is_legendary,\n    pa.is_mythical,\n    \n    -- Synergy rating between Pokemon and ability\n    CASE\n        -- Top competitive synergies (examples from competitive play)\n        WHEN (pa.pokemon_name = 'gengar' AND pa.ability_name = 'levitate') THEN 5\n        WHEN (pa.pokemon_name = 'gyarados' AND pa.ability_name = 'intimidate') THEN 5\n        WHEN (pa.pokemon_name = 'garchomp' AND pa.ability_name = 'rough-skin') THEN 5\n        WHEN (pa.pokemon_name = 'dragonite' AND pa.ability_name = 'multiscale') THEN 5\n        \n        -- Weather abilities synergy with types\n        WHEN (pa.ability_name LIKE '%drought%' AND pa.primary_type = 'fire') THEN 5\n        WHEN (pa.ability_name LIKE '%drizzle%' AND pa.primary_type = 'water') THEN 5\n        WHEN (pa.ability_name LIKE '%sand-stream%' AND pa.primary_type IN ('rock', 'ground')) THEN 5\n        WHEN (pa.ability_name LIKE '%snow-warning%' AND pa.primary_type = 'ice') THEN 5\n        \n        -- Type boosting abilities\n        WHEN (pa.ability_name LIKE '%blaze%' AND pa.primary_type = 'fire') THEN 4\n        WHEN (pa.ability_name LIKE '%torrent%' AND pa.primary_type = 'water') THEN 4\n        WHEN (pa.ability_name LIKE '%overgrow%' AND pa.primary_type = 'grass') THEN 4\n        \n        -- Legendary/Mythical synergies are often designed to be good\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden = FALSE THEN 4.5\n        \n        -- Hidden abilities are often better (especially in later generations)\n        WHEN pa.is_hidden AND pa.generation_number >= 5 THEN 4\n        WHEN pa.is_hidden THEN 3.5\n        \n        -- Default synergy (still decent)\n        ELSE 3\n    END AS ability_synergy,\n    \n    -- Competitive relevance indicator (simplified)\n    CASE\n        WHEN pa.ability_name IN (\n            'speed-boost', 'protean', 'intimidate', 'drought', 'drizzle', \n            'sand-stream', 'adaptability', 'huge-power', 'multiscale'\n        ) THEN TRUE\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden THEN TRUE\n        ELSE FALSE\n    END AS is_competitively_relevant,\n    \n    -- Generation relationship\n    CASE \n        WHEN pa.ability_name IN ('intimidate', 'levitate', 'chlorophyll', \n                              'swift-swim', 'sand-stream', 'drought', 'drizzle') \n             AND pa.generation_number <= 3 THEN 'Original Ability'\n        WHEN pa.generation_number >= 6 AND pa.is_hidden THEN 'Modern Hidden Ability'\n        WHEN pa.is_hidden THEN 'Hidden Ability'\n        ELSE 'Standard Ability'\n    END AS ability_classification,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pokemon_abilities pa\nORDER BY pa.pokemon_id, pa.slot_number", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.bridge_pokemon_moves": {"database": "nerd_facts", "schema": "public", "name": "bridge_pokemon_moves", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/bridge_pokemon_moves.sql", "original_file_path": "models/marts/pokemon/bridge_pokemon_moves.sql", "unique_id": "model.nerd_facts_dbt.bridge_pokemon_moves", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "bridge_pokemon_moves"], "alias": "bridge_pokemon_moves", "checksum": {"name": "sha256", "checksum": "3edd202a44b835916796fea74c29bc2a728031353e42d73aafc3a237dd4637bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_move_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["move_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["move_name"]}], "unique_key": "pokemon_move_id"}, "created_at": 1742228612.4375181, "relation_name": "\"nerd_facts\".\"public\".\"bridge_pokemon_moves\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}, {'columns': ['move_name']}],\n    unique_key = 'pokemon_move_id'\n  )\n}}\n\n/*\n  Model: bridge_pokemon_moves\n  Description: Bridge table connecting Pok\u00e9mon to their learnable moves\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and moves\n  - Gets moves from raw data since staging doesn't have them\n  - Calculates STAB (Same Type Attack Bonus) and signature move flags\n  - Provides context on move learning methods and levels\n*/\n\nWITH pokemon_base AS (\n    -- Get base Pokemon data from staging\n    SELECT\n        p.id,\n        p.name,\n        p.primary_type,\n        p.type_list[1] AS secondary_type,\n        p.generation_number,\n        p.total_base_stats\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    WHERE p.id IS NOT NULL\n),\n\npokemon_moves_raw AS (\n    -- Get moves directly from raw data\n    SELECT\n        id,\n        moves::jsonb AS moves_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\npokemon_moves AS (\n    -- Extract move references from the raw data with improved error handling\n    SELECT\n        pb.id AS pokemon_id,\n        pb.name AS pokemon_name,\n        pb.primary_type,\n        pb.secondary_type,\n        pb.generation_number,\n        pb.total_base_stats,\n        -- Extract move details from the moves array\n        move_data->'move'->>'name' AS move_name,\n        move_data->'move'->>'type' AS move_type,\n        -- Extract learning method from version group details\n        (\n            SELECT vgd->>'move_learn_method'\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS learn_method,\n        -- Extract level requirement\n        (\n            SELECT COALESCE((vgd->>'level_learned_at')::integer, 0)\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS level_learned_at\n    FROM pokemon_base pb\n    JOIN pokemon_moves_raw pmr ON pb.id = pmr.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        CASE \n            WHEN pmr.moves_json IS NULL OR pmr.moves_json = 'null'::jsonb THEN '[]'::jsonb\n            ELSE pmr.moves_json\n        END\n    ) AS move_data\n    WHERE pb.id IS NOT NULL\n)\n\nSELECT\n    -- Wrap everything in a subquery to use derived columns\n    move_data.*,\n    \n    -- Move priority classification using the now-available is_signature_move column\n    CASE\n        WHEN move_data.is_signature_move THEN 'Signature'\n        WHEN move_data.has_stab AND move_data.level_learned_at <= 20 THEN 'Early STAB'\n        WHEN move_data.has_stab THEN 'STAB'\n        WHEN move_data.learn_method = 'machine' THEN 'TM/HM'\n        WHEN move_data.learn_method = 'tutor' THEN 'Tutor'\n        ELSE 'Standard'\n    END AS move_priority,\n    \n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT\n        -- Primary key\n        {{ dbt_utils.generate_surrogate_key(['pm.pokemon_id', 'pm.move_name', 'pm.learn_method', 'COALESCE(pm.level_learned_at, 0)']) }} AS pokemon_move_id,\n        \n        -- Core identifiers\n        pm.pokemon_id,\n        pm.pokemon_name,\n        pm.move_name,\n        pm.move_type,\n        pm.learn_method,\n        pm.level_learned_at,\n        \n        -- Check if move type matches EITHER Pokemon type (STAB detection)\n        CASE\n            WHEN pm.move_type = pm.primary_type THEN TRUE\n            WHEN pm.move_type = pm.secondary_type AND pm.secondary_type IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END AS has_stab,\n        \n        -- Calculate if this is a signature move\n        CASE\n            -- Name-based detection\n            WHEN pm.move_name LIKE CONCAT('%', pm.pokemon_name, '%') THEN TRUE\n            \n            -- Starter Pok\u00e9mon signature moves\n            WHEN (pm.pokemon_name = 'pikachu' AND pm.move_name = 'volt-tackle') THEN TRUE\n            WHEN (pm.pokemon_name = 'charizard' AND pm.move_name = 'blast-burn') THEN TRUE\n            WHEN (pm.pokemon_name = 'blastoise' AND pm.move_name = 'hydro-cannon') THEN TRUE\n            WHEN (pm.pokemon_name = 'venusaur' AND pm.move_name = 'frenzy-plant') THEN TRUE\n            \n            -- Legendary signature moves\n            WHEN (pm.pokemon_name = 'mewtwo' AND pm.move_name = 'psystrike') THEN TRUE\n            WHEN (pm.pokemon_name = 'lugia' AND pm.move_name = 'aeroblast') THEN TRUE\n            WHEN (pm.pokemon_name = 'ho-oh' AND pm.move_name = 'sacred-fire') THEN TRUE\n            WHEN (pm.pokemon_name = 'kyogre' AND pm.move_name = 'origin-pulse') THEN TRUE\n            WHEN (pm.pokemon_name = 'groudon' AND pm.move_name = 'precipice-blades') THEN TRUE\n            WHEN (pm.pokemon_name = 'rayquaza' AND pm.move_name = 'dragon-ascent') THEN TRUE\n            WHEN (pm.pokemon_name = 'dialga' AND pm.move_name = 'roar-of-time') THEN TRUE\n            WHEN (pm.pokemon_name = 'palkia' AND pm.move_name = 'spacial-rend') THEN TRUE\n            WHEN (pm.pokemon_name = 'giratina' AND pm.move_name = 'shadow-force') THEN TRUE\n            \n            ELSE FALSE\n        END AS is_signature_move,\n        \n        -- Moves learned at level 1 or by evolution are typically important\n        CASE\n            WHEN pm.level_learned_at = 1 OR pm.learn_method = 'evolution' THEN TRUE\n            ELSE FALSE\n        END AS is_natural_move,\n        \n        -- Enhanced learn method classification\n        CASE\n            WHEN pm.learn_method = 'level-up' THEN 'Level Up'\n            WHEN pm.learn_method = 'machine' THEN 'TM/HM'\n            WHEN pm.learn_method = 'egg' THEN 'Egg Move'\n            WHEN pm.learn_method = 'tutor' THEN 'Move Tutor'\n            WHEN pm.learn_method = 'evolution' THEN 'Evolution'\n            WHEN pm.learn_method = 'form-change' THEN 'Form Change'\n            ELSE 'Other'\n        END AS learn_method_type\n        \n    FROM pokemon_moves pm\n) move_data\nORDER BY move_data.pokemon_id, move_data.level_learned_at, move_data.is_signature_move DESC", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_pokemon": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_pokemon", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_pokemon.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_pokemon.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_pokemon"], "alias": "stg_pokeapi_pokemon", "checksum": {"name": "sha256", "checksum": "492b3630141eca19671030b1c60f0e63bcb6ea1755049c2e14dd37710c8dbcba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon data with typed stats and type effectiveness", "columns": {"id": {"name": "id", "description": "Primary key for Pok\u00e9mon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pokemon_name": {"name": "pokemon_name", "description": "Name of the Pok\u00e9mon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "primary_type": {"name": "primary_type", "description": "Primary elemental type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "secondary_type": {"name": "secondary_type", "description": "Secondary elemental type (if any)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight": {"name": "weight", "description": "Weight in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hp": {"name": "hp", "description": "Base HP stat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "attack": {"name": "attack", "description": "Base Attack stat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "defense": {"name": "defense", "description": "Base Defense stat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "special_attack": {"name": "special_attack", "description": "Base Special Attack stat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "special_defense": {"name": "special_defense", "description": "Base Special Defense stat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "speed": {"name": "speed", "description": "Base Speed stat", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_base_stats": {"name": "total_base_stats", "description": "Sum of all base stats", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_legendary": {"name": "is_legendary", "description": "Whether Pok\u00e9mon is classified as legendary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_mythical": {"name": "is_mythical", "description": "Whether Pok\u00e9mon is classified as mythical", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "generation": {"name": "generation", "description": "Generation the Pok\u00e9mon was introduced", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "abilities": {"name": "abilities", "description": "JSONB array of abilities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "moves": {"name": "moves", "description": "JSONB array of learnable moves", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742229296.070592, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"", "raw_code": "/*\n  Model: stg_pokeapi_pokemon\n  Description: Standardizes Pok\u00e9mon data from the PokeAPI\n  Source: raw.pokeapi_pokemon\n  \n  Notes:\n  - Type information is extracted from nested JSON structure\n  - Region and Generation are derived from Pok\u00e9mon ID ranges (not directly available)\n  - Legendary status is derived from specific Pok\u00e9mon IDs\n  - Stats are extracted from the nested stats array\n  - Physical attributes are converted to standard units (kg, dm)\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        name,\n        height,\n        weight,\n        base_experience,\n        types::JSONB AS types,\n        stats::JSONB AS stats,\n        abilities::JSONB AS abilities,  -- Cast to JSONB\n        moves::JSONB AS moves,\n        species::JSONB AS species\n        -- Removed generation column as it doesn't exist\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    name,\n    \n    -- Extract primary type (first type in the array)\n    CASE \n        WHEN types IS NULL OR jsonb_array_length(types) = 0 THEN 'Unknown'\n        ELSE (types->0->'type'->>'name')\n    END AS primary_type,\n    \n    -- Extract all types as an array with error handling\n    ARRAY(\n        SELECT type_obj->'type'->>'name'\n        FROM jsonb_array_elements(COALESCE(types, '[]'::JSONB)) AS type_obj\n    ) AS type_list,\n    \n    -- Derive region from ID ranges (since region column doesn't exist)\n    CASE \n        WHEN id <= 151 THEN 'Kanto'      -- Gen 1\n        WHEN id <= 251 THEN 'Johto'      -- Gen 2\n        WHEN id <= 386 THEN 'Hoenn'      -- Gen 3\n        WHEN id <= 493 THEN 'Sinnoh'     -- Gen 4\n        WHEN id <= 649 THEN 'Unova'      -- Gen 5\n        WHEN id <= 721 THEN 'Kalos'      -- Gen 6\n        WHEN id <= 809 THEN 'Alola'      -- Gen 7\n        WHEN id <= 898 THEN 'Galar'      -- Gen 8\n        WHEN id <= 1008 THEN 'Paldea'    -- Gen 9\n        ELSE 'Unknown'\n    END AS region,\n    \n    -- Extract generation number for easier filtering - derived from ID\n    CASE\n        WHEN id <= 151 THEN 1\n        WHEN id <= 251 THEN 2\n        WHEN id <= 386 THEN 3\n        WHEN id <= 493 THEN 4\n        WHEN id <= 649 THEN 5\n        WHEN id <= 721 THEN 6\n        WHEN id <= 809 THEN 7\n        WHEN id <= 898 THEN 8\n        WHEN id <= 1008 THEN 9\n        ELSE NULL\n    END AS generation_number,\n    \n    -- Physical attributes with unit conversions\n    CASE \n        WHEN height::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' \n        THEN CAST(height AS NUMERIC) \n        ELSE 0 \n    END AS height_dm,\n    \n    CASE \n        WHEN weight::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' \n        THEN CAST(weight AS NUMERIC) / 10\n        ELSE 0 \n    END AS weight_kg,\n    \n    -- Calculate BMI (weight in kg / height in meters squared)\n    CASE\n        WHEN height::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' AND CAST(height AS NUMERIC) > 0 \n        THEN ROUND((CAST(weight AS NUMERIC) / 10) / POWER(CAST(height AS NUMERIC)/10, 2), 1)\n        ELSE NULL\n    END AS bmi,\n    \n    -- Experience and rarity\n    CASE \n        WHEN base_experience::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' \n        THEN CAST(base_experience AS INTEGER)\n        ELSE 0 \n    END AS base_xp,\n    \n    -- Derived legendary status from known legendary Pok\u00e9mon IDs\n    CASE\n        WHEN id IN (144, 145, 146, 150, 151, 243, 244, 245, 249, 250, 251,\n                    377, 378, 379, 380, 381, 382, 383, 384, 385, 386,\n                    480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,\n                    638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649,\n                    716, 717, 718, 719, 720, 721) \n        THEN TRUE\n        ELSE FALSE\n    END AS is_legendary,\n    \n    -- Derived mythical status from known mythical Pok\u00e9mon IDs\n    CASE\n        WHEN id IN (151, 251, 385, 386, 489, 490, 491, 492, 493,\n                    647, 648, 649, 719, 720, 721) \n        THEN TRUE\n        ELSE FALSE\n    END AS is_mythical,\n    \n    -- Fixed base stats extraction with proper JSON navigation\n    COALESCE((\n        SELECT (stat->>'base_stat')::INTEGER\n        FROM jsonb_array_elements(stats) AS stat\n        WHERE stat->'stat'->>'name' = 'hp'\n        LIMIT 1\n    ), 0) AS base_stat_hp,\n    \n    -- Fixed total base stats calculation\n    COALESCE((\n        SELECT SUM((stat->>'base_stat')::INTEGER)\n        FROM jsonb_array_elements(stats) AS stat\n    ), 0) AS total_base_stats,\n    \n    -- Count the number of abilities and moves\n    COALESCE(jsonb_array_length(abilities), 0) AS ability_count,\n    COALESCE(jsonb_array_length(moves), 0) AS move_count,\n    \n    -- Starter Pok\u00e9mon flag\n    CASE\n        WHEN name IN ('bulbasaur', 'charmander', 'squirtle', \n                      'chikorita', 'cyndaquil', 'totodile',\n                      'treecko', 'torchic', 'mudkip',\n                      'turtwig', 'chimchar', 'piplup',\n                      'snivy', 'tepig', 'oshawott',\n                      'chespin', 'fennekin', 'froakie',\n                      'rowlet', 'litten', 'popplio',\n                      'grookey', 'scorbunny', 'sobble') THEN TRUE\n        ELSE FALSE\n    END AS is_starter,\n    \n    -- Extract abilities as a JSONB array\n    abilities AS ability_list,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_id.baf415230f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_pokemon_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_pokemon_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_id.baf415230f", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_pokemon_id"], "alias": "unique_stg_pokeapi_pokemon_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742229296.133971, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_id.8963a375c3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_pokemon_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_pokemon_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_id.8963a375c3", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_pokemon_id"], "alias": "not_null_stg_pokeapi_pokemon_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742229296.135529, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_pokemon_pokemon_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_pokemon_pokemon_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_pokemon_pokemon_name"], "alias": "not_null_stg_pokeapi_pokemon_pokemon_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742229296.136837, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pokemon_name", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pokemon_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_primary_type.a9fc942428": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_pokemon_primary_type", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_pokemon_primary_type.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_primary_type.a9fc942428", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_pokemon_primary_type"], "alias": "not_null_stg_pokeapi_pokemon_primary_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1742229296.1386669, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "primary_type", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "primary_type", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_primary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.b837f8595a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_pokeapi_pokemon_primary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_pokeapi_po_4bb107c6a36f91c3f3f98c248df0e90e.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_primary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.b837f8595a", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "accepted_values_stg_pokeapi_pokemon_primary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy"], "alias": "accepted_values_stg_pokeapi_po_4bb107c6a36f91c3f3f98c248df0e90e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_pokeapi_po_4bb107c6a36f91c3f3f98c248df0e90e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_stg_pokeapi_po_4bb107c6a36f91c3f3f98c248df0e90e"}, "created_at": 1742229296.1400037, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_stg_pokeapi_po_4bb107c6a36f91c3f3f98c248df0e90e\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "primary_type", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["normal", "fire", "water", "electric", "grass", "ice", "fighting", "poison", "ground", "flying", "psychic", "bug", "rock", "ghost", "dragon", "dark", "steel", "fairy"], "column_name": "primary_type", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_secondary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.1075ca03e0": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_pokeapi_pokemon_secondary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_pokeapi_po_dde21e88c0a4897bc69afd1c14e839d1.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_secondary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.1075ca03e0", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "accepted_values_stg_pokeapi_pokemon_secondary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy"], "alias": "accepted_values_stg_pokeapi_po_dde21e88c0a4897bc69afd1c14e839d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_pokeapi_po_dde21e88c0a4897bc69afd1c14e839d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_stg_pokeapi_po_dde21e88c0a4897bc69afd1c14e839d1"}, "created_at": 1742229296.161234, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_stg_pokeapi_po_dde21e88c0a4897bc69afd1c14e839d1\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "secondary_type", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["normal", "fire", "water", "electric", "grass", "ice", "fighting", "poison", "ground", "flying", "psychic", "bug", "rock", "ghost", "dragon", "dark", "steel", "fairy"], "column_name": "secondary_type", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7"}, "created_at": 1742229296.1649387, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "height", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0 OR IS NULL", "column_name": "height", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d"}, "created_at": 1742229296.1731958, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weight", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0 OR IS NULL", "column_name": "weight", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1.602c1d695a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1.602c1d695a", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1"], "alias": "dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742229296.1774933, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hp", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 255, "column_name": "hp", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5.3f6adfb226": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5.3f6adfb226", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5"], "alias": "dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742229296.18428, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "attack", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 5, "max_value": 255, "column_name": "attack", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5.a6018cd0d5": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5.a6018cd0d5", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5"], "alias": "dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742229296.1876602, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "defense", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 5, "max_value": 255, "column_name": "defense", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_attack__255__10.7286f3bd1c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_special_attack__255__10", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_p_f10f64201dea0d7398f5ff80bf5886a3.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_attack__255__10.7286f3bd1c", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_special_attack__255__10"], "alias": "dbt_utils_accepted_range_stg_p_f10f64201dea0d7398f5ff80bf5886a3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_p_f10f64201dea0d7398f5ff80bf5886a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_accepted_range_stg_p_f10f64201dea0d7398f5ff80bf5886a3"}, "created_at": 1742229296.1912825, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_accepted_range_stg_p_f10f64201dea0d7398f5ff80bf5886a3\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "special_attack", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 10, "max_value": 255, "column_name": "special_attack", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_defense__255__20.d9238a3f47": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_special_defense__255__20", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_p_90bf28fad39133e95913261ad493b723.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_defense__255__20.d9238a3f47", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_special_defense__255__20"], "alias": "dbt_utils_accepted_range_stg_p_90bf28fad39133e95913261ad493b723", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_p_90bf28fad39133e95913261ad493b723", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_accepted_range_stg_p_90bf28fad39133e95913261ad493b723"}, "created_at": 1742229296.194908, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_accepted_range_stg_p_90bf28fad39133e95913261ad493b723\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "special_defense", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 20, "max_value": 255, "column_name": "special_defense", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5.9846cc47c7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5.9846cc47c7", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5"], "alias": "dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742229296.1993403, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "speed", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 5, "max_value": 255, "column_name": "speed", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_total_base_stats__1125__175.27f01b6086": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_total_base_stats__1125__175", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_p_a874043a7943ced0067379b3180463f8.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_total_base_stats__1125__175.27f01b6086", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_total_base_stats__1125__175"], "alias": "dbt_utils_accepted_range_stg_p_a874043a7943ced0067379b3180463f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_p_a874043a7943ced0067379b3180463f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_p_a874043a7943ced0067379b3180463f8"}, "created_at": 1742229296.2029247, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_p_a874043a7943ced0067379b3180463f8\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_base_stats", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 175, "max_value": 1125, "column_name": "total_base_stats", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1.a95b5613de": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1.a95b5613de", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1"], "alias": "dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742229296.2065732, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "generation", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 9, "column_name": "generation", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "model.nerd_facts_dbt.dim_pokemon_abilities": {"database": "nerd_facts", "schema": "public", "name": "dim_pokemon_abilities", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/dim_pokemon_abilities.sql", "original_file_path": "models/marts/pokemon/dim_pokemon_abilities.sql", "unique_id": "model.nerd_facts_dbt.dim_pokemon_abilities", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "dim_pokemon_abilities"], "alias": "dim_pokemon_abilities", "checksum": {"name": "sha256", "checksum": "812457df37ca852ca5c1fb82a8962c1c0f971ef8379dd73360dc942be5660b2d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ability_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["ability_id"]}, {"columns": ["ability_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["ability_id"]}, {"columns": ["ability_name"]}], "unique_key": "ability_id"}, "created_at": 1742229423.9035358, "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_abilities\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['ability_id']}, {'columns': ['ability_name']}],\n    unique_key = 'ability_id'\n  )\n}}\n\n/*\n  Model: dim_pokemon_abilities\n  Description: Dimension table for Pok\u00e9mon abilities\n  \n  Notes:\n  - Analyzes ability distribution across all Pok\u00e9mon\n  - Categorizes abilities by effect type and competitive tier\n  - Calculates rarity metrics and battle style classifications\n  - Identifies hidden abilities and their gameplay significance\n  - Provides comprehensive categorization for analysis\n  - Fixed string literals to use proper PostgreSQL escaping\n  - Using E-string syntax for strings containing apostrophes\n  - Maintaining consistent naming format with PokeAPI\n*/\n\nWITH ability_usage AS (\n    -- Count how many Pokemon have each ability with improved error handling\n    SELECT \n        LOWER(COALESCE(ability_ref->'ability'->>'name', 'unknown')) AS ability_name,\n        COUNT(*) AS num_pokemon\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    CROSS JOIN LATERAL jsonb_array_elements(\n        CASE \n            WHEN p.ability_list IS NULL OR p.ability_list::text = 'null' THEN '[]'::jsonb\n            ELSE p.ability_list\n        END\n    ) AS ability_ref\n    WHERE ability_ref->'ability'->>'name' IS NOT NULL\n    GROUP BY ability_ref->'ability'->>'name'\n),\n\n-- Calculate ability rarity percentiles\nability_ranks AS (\n    SELECT\n        ability_name,\n        num_pokemon,\n        PERCENT_RANK() OVER (ORDER BY num_pokemon) AS rarity_percentile\n    FROM ability_usage\n),\n\n-- Classify abilities by effect type with greatly expanded categories\nability_attributes AS (\n    SELECT\n        ability_name,\n        CASE\n            -- Stat modifiers (expanded)\n            WHEN ability_name IN ('Intimidate', 'Moxie', 'Guts', 'Huge Power', 'Pure Power', 'Beast Boost',\n                                'Defiant', 'Contrary', 'Simple', 'Competitive', 'Anger Point', 'Weak Armor',\n                                'Speed Boost', 'Moody', 'Hustle', 'Sheer Force', 'No Guard', 'Technician',\n                                'Tinted Lens', 'Unburden', 'Victory Star') THEN 'Stat Modifier'\n                                \n            -- Immunities (expanded)\n            WHEN ability_name IN ('Levitate', 'Immunity', 'Water Absorb', 'Volt Absorb', 'Flash Fire',\n                                'Motor Drive', 'Lightning Rod', 'Storm Drain', 'Sap Sipper', 'Dry Skin',\n                                'Earth Eater', 'Wonder Guard', 'Soundproof', 'Water Bubble', 'Fluffy',\n                                'Disguise', 'Thick Fat', 'Heatproof', 'Justified', 'Bulletproof', \n                                'Filter', 'Solid Rock', 'Prism Armor', 'Magic Bounce') THEN 'Immunity'\n                                \n            -- Speed control (expanded)\n            WHEN ability_name IN ('Speed Boost', 'Chlorophyll', 'Swift Swim', 'Sand Rush', 'Slush Rush',\n                                'Surge Surfer', 'Quick Feet', 'Unburden', 'Steadfast', 'Slow Start',\n                                'Quick Draw', 'Gale Wings') THEN 'Speed'\n                                \n            -- Weather abilities\n            WHEN ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                                'Desolate Land', 'Primordial Sea', 'Delta Stream', \n                                'Sand Spit', 'Ice Face') THEN 'Weather'\n                                \n            -- Damage boosters (expanded)\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Iron Fist',\n                                'Adaptability', 'Aerilate', 'Pixilate', 'Refrigerate', 'Galvanize',\n                                'Solar Power', 'Steelworker', 'Reckless', 'Mega Launcher',\n                                'Strong Jaw', 'Tough Claws', 'Technician', 'Analytic',\n                                'Punk Rock', E'Dragon\\'s Maw', 'Transistor') THEN 'Damage Boost'\n                                \n            -- Opponent effects (expanded)\n            WHEN ability_name IN ('Pressure', 'Unnerve', 'Intimidate', 'Mummy', 'Gooey', 'Tangling Hair',\n                                'Shadow Tag', 'Arena Trap', 'Magnet Pull', 'Stall', 'Cute Charm',\n                                'Rivalry', 'Slow Start', 'Truant', 'Cotton Down', 'Neutralizing Gas',\n                                'Perish Body', 'Gorilla Tactics', 'Intrepid Sword') THEN 'Opponent Effect'\n                                \n            -- Contact effects (expanded)\n            WHEN ability_name IN ('Synchronize', 'Effect Spore', 'Static', 'Flame Body', 'Poison Point',\n                                'Rough Skin', 'Iron Barbs', 'Pickpocket', 'Gooey', 'Tangling Hair',\n                                'Wandering Spirit', 'Cotton Down', 'Mummy', 'Cursed Body',\n                                'Perish Body') THEN 'Contact Effect'\n                                \n            -- Healing abilities\n            WHEN ability_name IN ('Regenerator', 'Natural Cure', 'Shed Skin', 'Poison Heal', \n                                'Hydration', 'Ice Body', 'Rain Dish', 'Healer', 'Water Bubble', \n                                'Ice Face', 'Disguise') THEN 'Healing'\n                                \n            -- Entry hazard abilities\n            WHEN ability_name IN ('Spikes', 'Stealth Rock', 'Sticky Web', 'Toxic Spikes') THEN 'Entry Hazard'\n            \n            -- Form-changing\n            WHEN ability_name IN ('Protean', 'Libero', 'Color Change', 'Forecast', 'Mimicry',\n                                'Stance Change', 'Battle Bond', 'Power Construct', \n                                'Shields Down', 'Schooling') THEN 'Form Change'\n                                \n            -- Defensive abilities\n            WHEN ability_name IN ('Multiscale', 'Shadow Shield', 'Sturdy', 'Battle Armor', 'Shell Armor',\n                                'Filter', 'Solid Rock', 'Prism Armor', 'Fluffy', 'Thick Fat',\n                                'Magic Guard', 'Disguise', 'Ice Face', 'Marvel Scale',\n                                'Friend Guard', 'Dauntless Shield') THEN 'Defensive'\n                                \n            -- Item-related\n            WHEN ability_name IN ('Pickup', 'Honey Gather', 'Frisk', 'Magician', 'Pickpocket',\n                                'Sticky Hold', 'Unburden', 'Klutz', 'Harvest', 'Cheek Pouch',\n                                'Ripen', 'Ball Fetch') THEN 'Item Effect'\n                                \n            -- Status condition-related\n            WHEN ability_name IN ('Immunity', 'Limber', 'Insomnia', 'Vital Spirit', 'Water Veil',\n                                'Magma Armor', 'Oblivious', 'Own Tempo', 'Inner Focus',\n                                'Shield Dust', 'Leaf Guard', 'Pastel Veil', 'Good as Gold') THEN 'Status Prevention'\n            \n            -- Priority move effects\n            WHEN ability_name IN ('Prankster', 'Gale Wings', 'Triage', 'Queenly Majesty', \n                                'Dazzling', 'Armor Tail') THEN 'Priority'\n                                \n            ELSE 'Other'\n        END AS effect_type,\n        \n        -- Expanded competitive tier rankings\n        CASE\n            -- S-Tier: Game-changing abilities\n            WHEN ability_name IN ('Wonder Guard', 'Huge Power', 'Pure Power', 'Speed Boost', \n                               'Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                               'Shadow Tag', 'Intimidate', 'Beast Boost', 'Protean', 'Magic Guard',\n                               'Prankster', 'Unaware', 'Imposter', 'Desolate Land', 'Primordial Sea',\n                               'Delta Stream', 'Soul-Heart', 'Libero', 'Intrepid Sword',\n                               'Gorilla Tactics', 'As One') THEN 'S'\n                               \n            -- A-Tier: Very strong abilities\n            WHEN ability_name IN ('Moxie', 'Adaptability', 'Serene Grace', 'Guts', 'Levitate', \n                               'Multiscale', 'Regenerator', 'Unaware', 'Water Absorb',\n                               'Volt Absorb', 'Disguise', 'Slush Rush', 'Swift Swim', 'Sand Rush',\n                               'Chlorophyll', 'Queenly Majesty', 'Dazzling', 'Sturdy', 'Electric Surge',\n                               'Psychic Surge', 'Grassy Surge', 'Misty Surge', 'Power Construct',\n                               'Shields Down', 'Contrary', 'Mold Breaker', 'Parental Bond') THEN 'A'\n                               \n            -- B-Tier: Good abilities\n            WHEN ability_name IN ('Flash Fire', 'Poison Heal', 'Thick Fat', 'Technician', \n                               'Sheer Force', 'Tinted Lens', 'Fairy Aura', 'Dark Aura',\n                               'Aura Break', 'No Guard', 'Competitive', 'Simple', 'Unburden',\n                               'Mummy', 'Iron Barbs', 'Rough Skin', 'Solar Power', 'Analytic',\n                               'Steelworker', 'Aerilate', 'Pixilate', 'Refrigerate', 'Neuroforce',\n                               'Galvanize', 'Trace') THEN 'B'\n                               \n            -- C-Tier: Average abilities\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Natural Cure', \n                               'Clear Body', 'Sticky Hold', 'Shed Skin', 'Mold Breaker',\n                               'Pressure', 'Synchronize', 'Ice Body', 'Rain Dish', 'Hustle',\n                               'Filter', 'Solid Rock', 'Infiltrator', 'Super Luck', 'Harvest',\n                               'Big Pecks', 'Early Bird', 'Frisk', 'Rock Head', 'Steadfast',\n                               'Sniper', 'Heavy Metal', 'Light Metal', 'Hydration') THEN 'C'\n                               \n            -- D-Tier: Weak or very situational abilities\n            WHEN ability_name IN ('Run Away', 'Honey Gather', 'Illuminate', 'Stench', 'Stall',\n                               'Suction Cups', 'Shell Armor', 'Battle Armor', 'Ball Fetch',\n                               'Pickup', 'Klutz', 'Slow Start', 'Truant', 'Defeatist',\n                               'Forecast', 'Healer', 'Friend Guard', 'Minus', 'Plus', 'Anticipation',\n                               'Flower Gift', 'Forewarn', 'Rivalry', 'Victory Star',\n                               'Leaf Guard', 'Tangled Feet') THEN 'D'\n                               \n            -- F-Tier: Detrimental or extremely niche abilities\n            WHEN ability_name IN ('Defeatist', 'Slow Start', 'Truant', 'Stall', 'Klutz',\n                               'Illuminate', 'Minus', 'Plus', 'Flower Veil', 'Friend Guard') THEN 'F'\n                               \n            ELSE 'Unclassified'\n        END AS tier\n    FROM ability_ranks\n)\n\nSELECT\n    -- Primary key (using surrogate key pattern)\n    {{ dbt_utils.generate_surrogate_key(['u.ability_name']) }} AS ability_key,\n    ROW_NUMBER() OVER (ORDER BY u.ability_name) AS ability_id,\n    \n    -- Core attributes\n    u.ability_name,\n    u.num_pokemon,\n    a.effect_type,\n    a.tier,\n    \n    -- Calculate rarity - improved with percentiles\n    CASE\n        WHEN r.rarity_percentile >= 0.95 THEN 'Ultra Rare'\n        WHEN r.rarity_percentile >= 0.80 THEN 'Very Rare'\n        WHEN r.rarity_percentile >= 0.60 THEN 'Rare'\n        WHEN r.rarity_percentile >= 0.40 THEN 'Uncommon'\n        WHEN r.rarity_percentile >= 0.20 THEN 'Common'\n        ELSE 'Very Common'\n    END AS rarity,\n    \n    -- Enhanced hidden ability identification with more comprehensive list\n    CASE\n        WHEN u.ability_name IN (\n            -- Gen 5 Dream World abilities\n            'Analytic', 'Chlorophyll', 'Cloud Nine', 'Damp', 'Defiant', 'Drought', 'Drizzle',\n            'Intimidate', 'Lightningrod', 'Moody', 'Moxie', 'Multiscale', 'Overcoat', 'Poison Touch',\n            'Prankster', 'Rain Dish', 'Regenerator', 'Sand Force', 'Sand Rush', 'Sand Veil',\n            'Serene Grace', 'Sheer Force', 'Sniper', 'Snow Warning', 'Speed Boost', 'Technician',\n            'Telepathy', 'Unaware', 'Unnerve',\n            \n            -- Gen 6 notable hidden abilities\n            'Gale Wings', 'Protean', 'Magic Guard', 'Magic Bounce', 'Harvest', 'Infiltrator',\n            'Tinted Lens', 'Gooey', 'Aroma Veil', 'Bulletproof', 'Magician', 'Pickpocket',\n            \n            -- Gen 7 notable hidden abilities\n            'Power of Alchemy', 'Beast Boost', 'RKS System', 'Slush Rush', 'Surge Surfer',\n            'Water Compaction', 'Queenly Majesty', 'Stamina', 'Water Bubble', 'Steelworker',\n            \n            -- Gen 8 notable hidden abilities with fixed string literals\n            'Libero', 'Quick Draw', 'Ice Scales', 'Punk Rock', 'Mirror Armor', 'Neutralizing Gas',\n            'Power Spot', 'Ripen', 'Steam Engine', 'Sand Spit', 'Cotton Down', 'Gorilla Tactics',\n            \n            -- Other known hidden abilities that are particularly strong\n            'Adaptability', 'Competitive', 'Contrary', 'Cursed Body', 'Guts', 'Hustle', 'Marvel Scale',\n            'No Guard', 'Poison Heal', 'Solar Power', 'Swift Swim', 'Thick Fat', 'Unburden',\n            'Water Absorb', 'Wonder Skin'\n        ) THEN TRUE\n        ELSE FALSE\n    END AS likely_hidden,\n    \n    -- Battle style classification - fixed string literals\n    CASE\n        -- Offensive battle style\n        WHEN a.effect_type IN ('Damage Boost', 'Speed') OR \n             u.ability_name IN ('Moxie', 'Adaptability', 'Beast Boost', 'Huge Power', 'Pure Power',\n                             'Sheer Force', 'Tough Claws', 'Strong Jaw', 'Technician', 'Gorilla Tactics',\n                             'Intrepid Sword', 'Contrary', 'Aerilate', 'Pixilate', 'Refrigerate',\n                             'Galvanize', 'Steelworker', 'Protean', 'Libero', E'dragon''s-maw', 'Transistor',\n                             'Guts', 'No Guard', 'Solar Power', 'Tinted Lens', 'Mega Launcher', 'Sniper')\n        THEN 'Offensive'\n        \n        -- Defensive battle style\n        WHEN a.effect_type IN ('Immunity', 'Defensive', 'Status Prevention', 'Healing') OR\n             u.ability_name IN ('Multiscale', 'Shadow Shield', 'Fur Coat', 'Fluffy', 'Ice Face',\n                             'Disguise', 'Intimidate', 'Filter', 'Solid Rock', 'Prism Armor',\n                             'Sturdy', 'Magic Guard', 'Thick Fat', 'Wonder Guard', 'Levitate',\n                             'Water Absorb', 'Volt Absorb', 'Flash Fire', 'Bulletproof', 'Heatproof',\n                             'Battle Armor', 'Shell Armor', 'Dauntless Shield', 'Ice Scales')\n        THEN 'Defensive'\n        \n        -- Utility/Support battle style\n        WHEN a.effect_type IN ('Weather', 'Opponent Effect', 'Entry Hazard', 'Priority', 'Contact Effect') OR\n             u.ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning', 'Unaware',\n                             'Prankster', 'Queenly Majesty', 'Dazzling', 'Pressure', 'Trace',\n                             'Synchronize', 'Neutralizing Gas', 'Harvest', 'Healer', 'Regenerator',\n                             'Unnerve', 'Sticky Hold', 'Magnet Pull', 'Arena Trap', 'Shadow Tag')\n        THEN 'Utility'\n        \n        -- Setup-based battle style\n        WHEN u.ability_name IN ('Speed Boost', 'Moody', 'Simple', 'Contrary', 'Power Construct',\n                             'Shields Down', 'Battle Bond', 'Schooling', 'Stance Change',\n                             'Berserk', 'Weak Armor', 'Slush Rush', 'Swift Swim', 'Chlorophyll',\n                             'Sand Rush', 'Surge Surfer', 'Unburden', 'Compound Eyes')\n        THEN 'Setup'\n        \n        -- Default\n        ELSE 'Miscellaneous'\n    END AS battle_style,\n    \n    -- Improved generation introduced information\n    CASE\n        WHEN u.ability_name IN ('Overgrow', 'Blaze', 'Torrent', 'Swarm', 'Intimidate', 'Static', 'Levitate',\n                             'Sturdy', 'Chlorophyll', 'Wonder Guard', 'Speed Boost', 'Synchronize', 'Keen Eye',\n                             'Hyper Cutter', 'Guts', 'Sand Stream', 'Drizzle', 'Drought', 'Flash Fire',\n                             'Wonder Guard', 'Pressure', 'Thick Fat', 'Hustle', 'Truant', 'Cloud Nine',\n                             'Compound Eyes', 'Battle Armor', 'Clear Body', 'Swift Swim', 'Huge Power',\n                             'Sand Veil', 'Arena Trap', 'Water Veil', 'Liquid Ooze', 'Rock Head', 'Early Bird',\n                             'Sticky Hold', 'Shed Skin', 'Run Away', 'Serene Grace', 'Shadow Tag', 'Pure Power',\n                             'Vital Spirit', 'White Smoke', 'Shell Armor', 'Air Lock') THEN 3  -- Gen 3 (first with abilities)\n                             \n        WHEN u.ability_name IN ('Aftermath', 'Anticipation', 'Bad Dreams', 'Download', 'Dry Skin',\n                             'Filter', 'Flower Gift', 'Forewarn', 'Frisk', 'Gluttony', 'Heatproof',\n                             'Honey Gather', 'Hydration', 'Ice Body', 'Iron Fist', 'Klutz', 'Leaf Guard',\n                             'Magic Guard', 'Mold Breaker', 'Motor Drive', 'Multitype', 'No Guard',\n                             'Normalize', 'Poison Heal', 'Quick Feet', 'Reckless', 'Rivalry', 'Scrappy',\n                             'Simple', 'Skill Link', 'Slow Start', 'Sniper', 'Snow Cloak', 'Snow Warning',\n                             'Solar Power', 'Solid Rock', 'Stall', 'Steadfast', 'Storm Drain', 'Suction Cups',\n                             'Tangled Feet', 'Technician', 'Tinted Lens', 'Unaware') THEN 4  -- Gen 4\n                             \n        WHEN u.ability_name IN ('Analytic', 'Big Pecks', 'Contrary', 'Cursed Body', 'Defeatist', 'Defiant',\n                             'Flare Boost', 'Friend Guard', 'Harvest', 'Healer', 'Heavy Metal', 'Illusion',\n                             'Imposter', 'Infiltrator', 'Iron Barbs', 'Light Metal', 'Magic Bounce', 'Moody',\n                             'Moxie', 'Multiscale', 'Mummy', 'Overcoat', 'Pickpocket', 'Poison Touch',\n                             'Prankster', 'Rattled', 'Regenerator', 'Sand Force', 'Sand Rush', 'Sap Sipper',\n                             'Sheer Force', 'Telepathy', 'Teravolt', 'Toxic Boost', 'Turboblaze', 'Unnerve',\n                             'Victory Star', 'Zen Mode') THEN 5  -- Gen 5\n                             \n        WHEN u.ability_name IN ('Aroma Veil', 'Aura Break', 'Bulletproof', 'Cheek Pouch', 'Competitive',\n                             'Dark Aura', 'Fairy Aura', 'Flower Veil', 'Fur Coat', 'Gale Wings',\n                             'Gooey', 'Grass Pelt', 'Magician', 'Mega Launcher', 'Parental Bond',\n                             'Pixilate', 'Protean', 'Refrigerate', 'Strong Jaw', 'Stance Change',\n                             'Sweet Veil', 'Symbiosis', 'Tough Claws') THEN 6  -- Gen 6\n                             \n        WHEN u.ability_name IN ('Battery', 'Beast Boost', 'Comatose', 'Corrosion', 'Dazzling',\n                             'Disguise', 'Electric Surge', 'Emergency Exit', 'Fluffy', 'Full Metal Body',\n                             'Galvanize', 'Grassy Surge', 'Innards Out', 'Liquid Voice', 'Long Reach',\n                             'Merciless', 'Misty Surge', 'Neuroforce', 'Power Construct', 'Power of Alchemy',\n                             'Prism Armor', 'Psychic Surge', 'Queenly Majesty', 'RKS System', 'Receiver',\n                             'Schooling', 'Shadow Shield', 'Shields Down', 'Slush Rush', 'Soul-Heart',\n                             'Stamina', 'Stakeout', 'Steelworker', 'Surge Surfer', 'Tangling Hair',\n                             'Triage', 'Water Bubble', 'Water Compaction', 'Wimp Out') THEN 7  -- Gen 7\n                             \n        WHEN u.ability_name IN ('As One', 'Ball Fetch', 'Cotton Down', 'Curious Medicine', 'Dauntless Shield',\n                             E'dragon''s-maw', 'Gorilla Tactics', 'Gulp Missile', 'Hunger Switch', 'Ice Face',\n                             'Ice Scales', 'Intrepid Sword', 'Libero', 'Mirror Armor', 'Neutralizing Gas',\n                             'Pastel Veil', 'Perish Body', 'Power Spot', 'Propeller Tail', 'Punk Rock',\n                             'Quick Draw', 'Ripen', 'Sand Spit', 'Screen Cleaner', 'Stalwart',\n                             'Steam Engine', 'Steely Spirit', 'Transistor', 'Unseen Fist', 'Wandering Spirit') \n        THEN 8  -- Gen 8\n                             \n        WHEN u.ability_name IN ('Angular Wing', 'Armor Tail', 'Beads of Ruin', 'Commander', 'Cud Chew',\n                             'Earth Eater', 'Electromorphosis', 'Good as Gold', 'Guard Dog', 'Hadron Engine',\n                             'Lingering Aroma', 'Mycelium Might', 'Opportunist', 'Orichalcum Pulse', 'Protosynthesis',\n                             'Purifying Salt', 'Quark Drive', 'Seed Sower', 'Sharpness', 'Supreme Overlord',\n                             'Sword of Ruin', 'Tablets of Ruin', 'Thermal Exchange', 'Toxic Debris', 'Vessel of Ruin',\n                             'Well-Baked Body', 'Wind Power', 'Wind Rider', 'Zero to Hero') THEN 9  -- Gen 9\n                             \n        ELSE NULL  -- Likely errors or future abilities\n    END AS generation_introduced,\n    \n    -- Numerical power rating (1-10 scale)\n    CASE\n        WHEN a.tier = 'S' THEN 10\n        WHEN a.tier = 'A' THEN 8\n        WHEN a.tier = 'B' THEN 6\n        WHEN a.tier = 'C' THEN 4\n        WHEN a.tier = 'D' THEN 2\n        WHEN a.tier = 'F' THEN 1\n        ELSE 3\n    END AS power_rating,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM ability_usage u\nJOIN ability_ranks r ON u.ability_name = r.ability_name\nLEFT JOIN ability_attributes a ON u.ability_name = a.ability_name\nORDER BY a.tier, u.num_pokemon DESC", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_pokemon_moves": {"database": "nerd_facts", "schema": "public", "name": "dim_pokemon_moves", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/dim_pokemon_moves.sql", "original_file_path": "models/marts/pokemon/dim_pokemon_moves.sql", "unique_id": "model.nerd_facts_dbt.dim_pokemon_moves", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "dim_pokemon_moves"], "alias": "dim_pokemon_moves", "checksum": {"name": "sha256", "checksum": "3215501bf5ef5215356eafda659668b16bc952d18d8b3cbdb741e194bfaf6881"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "move_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["move_id"]}, {"columns": ["move_name"]}, {"columns": ["move_type"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["move_id"]}, {"columns": ["move_name"]}, {"columns": ["move_type"]}], "unique_key": "move_key"}, "created_at": 1742230417.1438942, "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_moves\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['move_id']}, {'columns': ['move_name']}, {'columns': ['move_type']}],\n    unique_key = 'move_key'\n  )\n}}\n\n/*\n  Model: dim_pokemon_moves\n  Description: Dimension table for Pok\u00e9mon moves\n*/\n\nWITH base_moves AS (\n    -- Ensure clean numeric data from source\n    SELECT\n        id AS move_id,\n        move_name,\n        NULLIF(type_name, 'unknown') AS move_type,\n        -- Handle numeric conversions safely\n        CASE \n            WHEN power::TEXT ~ '^[0-9]+$' THEN power::INTEGER\n            ELSE NULL \n        END AS power,\n        CASE \n            WHEN pp::TEXT ~ '^[0-9]+$' THEN pp::INTEGER\n            ELSE NULL \n        END AS pp,\n        CASE \n            WHEN accuracy::TEXT ~ '^[0-9]+$' THEN accuracy::INTEGER\n            ELSE NULL \n        END AS accuracy,\n        CASE \n            WHEN priority::TEXT ~ '^[0-9]+$' THEN priority::INTEGER\n            ELSE 0 \n        END AS priority,\n        damage_class,\n        effect_text,\n        CASE \n            WHEN effect_chance::TEXT ~ '^[0-9]+$' THEN effect_chance::INTEGER\n            ELSE NULL \n        END AS effect_chance,\n        CASE \n            WHEN generation_number::TEXT ~ '^[0-9]+$' THEN generation_number::INTEGER\n            ELSE 1 \n        END AS generation_id\n    FROM {{ ref('stg_pokeapi_moves') }}\n    WHERE id IS NOT NULL\n),\n\nmove_classifications AS (\n    -- Pre-calculate move classifications to avoid repetition\n    SELECT\n        move_id,\n        move_name,\n        move_type,\n        power,\n        pp,\n        accuracy,\n        priority,\n        damage_class,\n        effect_text,\n        effect_chance,\n        generation_id,\n        -- Add effect category calculation\n        CASE\n            WHEN effect_text LIKE '%boost%' OR \n                 effect_text LIKE '%raise%' OR \n                 effect_text LIKE '%increase%' THEN 'Stat Boost'\n            WHEN effect_text LIKE '%lower%' OR \n                 effect_text LIKE '%decrease%' OR \n                 effect_text LIKE '%reduce%' THEN 'Stat Reduction'\n            WHEN effect_text LIKE '%paralyze%' THEN 'Paralyze'\n            WHEN effect_text LIKE '%burn%' THEN 'Burn'\n            WHEN effect_text LIKE '%poison%' OR \n                 effect_text LIKE '%toxic%' THEN 'Poison'\n            WHEN effect_text LIKE '%sleep%' THEN 'Sleep'\n            WHEN effect_text LIKE '%freeze%' THEN 'Freeze'\n            WHEN effect_text LIKE '%confus%' THEN 'Confusion'\n            WHEN effect_text LIKE '%flinch%' THEN 'Flinch'\n            WHEN effect_text LIKE '%trap%' THEN 'Trap'\n            WHEN effect_text LIKE '%heal%' OR \n                 effect_text LIKE '%restore%' THEN 'Healing'\n            WHEN effect_text LIKE '%protect%' OR \n                 effect_text LIKE '%protect%' THEN 'Protection'\n            WHEN effect_text LIKE '%critical%' THEN 'Critical Hit'\n            WHEN effect_text LIKE '%priority%' OR priority > 0 THEN 'Priority'\n            WHEN damage_class = 'status' THEN 'Status Effect'\n            WHEN power > 0 THEN 'Direct Damage'\n            ELSE 'Other'\n        END AS effect_category\n    FROM base_moves\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['move_id']) }} AS move_key,\n    \n    -- Core identifiers\n    move_id,\n    move_name,\n    \n    -- Move attributes\n    move_type,\n    COALESCE(power, 0) AS power,\n    COALESCE(pp, 0) AS pp,\n    COALESCE(accuracy, 0) AS accuracy,\n    COALESCE(priority, 0) AS priority,\n    COALESCE(damage_class, 'physical') AS damage_class,\n    \n    -- Effect information\n    effect_text,\n    COALESCE(effect_chance, 0) AS effect_chance,\n    \n    -- Generation information\n    COALESCE(generation_id, 1) AS generation_id,\n    \n    -- Move category classification\n    CASE\n        WHEN damage_class = 'status' THEN 'Status'\n        WHEN power IS NULL OR power = 0 THEN 'Status'\n        WHEN power < 40 THEN 'Weak'\n        WHEN power < 70 THEN 'Medium'\n        WHEN power < 90 THEN 'Strong'\n        WHEN power < 110 THEN 'Very Strong'\n        ELSE 'Extreme'\n    END AS power_category,\n    \n    -- Accuracy classification\n    CASE\n        WHEN accuracy IS NULL THEN 'Always Hits'\n        WHEN accuracy < 50 THEN 'Very Inaccurate'\n        WHEN accuracy < 70 THEN 'Inaccurate'\n        WHEN accuracy < 85 THEN 'Moderate'\n        WHEN accuracy < 95 THEN 'Accurate'\n        WHEN accuracy < 100 THEN 'Very Accurate'\n        WHEN accuracy = 100 THEN 'Perfect'\n        ELSE 'Unknown'\n    END AS accuracy_category,\n    \n    -- Move effect category based on effect text\n    effect_category,\n    \n    -- Competitive relevance score (1-10)\n    CASE\n        -- Extremely useful moves in competitive\n        WHEN move_name IN ('stealth-rock', 'spikes', 'toxic-spikes', 'defog', 'rapid-spin',\n                   'recover', 'wish', 'protect', 'substitute', 'will-o-wisp',\n                   'scald', 'knock-off', 'u-turn', 'volt-switch', 'toxic',\n                   'thunder-wave', 'dragon-dance', 'swords-dance', 'nasty-plot',\n                   'calm-mind', 'quiver-dance', 'roost', 'leech-seed') THEN 10\n                   \n        -- Very strong attacks and utility moves\n        WHEN (power > 100 AND accuracy >= 90) OR \n             move_name IN ('close-combat', 'earthquake', 'ice-beam', 'thunderbolt',\n                   'flamethrower', 'surf', 'stone-edge', 'focus-blast',\n                   'shadow-ball', 'psyshock', 'earth-power', 'draco-meteor', \n                   'moonblast', 'play-rough', 'gunk-shot', 'brave-bird') THEN 9\n                   \n        -- Strong utility and common attacks\n        WHEN (power >= 80 AND accuracy >= 85) OR\n             move_name IN ('taunt', 'encore', 'trick', 'toxic', 'synthesis', \n                   'aromatherapy', 'heal-bell', 'sticky-web', 'trick-room',\n                   'tailwind', 'moonlight', 'morning-sun') THEN 8\n                   \n        -- Useful moves but not top tier\n        WHEN (power >= 70 AND accuracy >= 80) OR\n             move_name IN ('light-screen', 'reflect', 'hypnosis', 'sleep-powder',\n                   'stun-spore', 'thunder-wave') THEN 7\n                   \n        -- Standard damage moves with decent stats\n        WHEN power >= 60 AND accuracy >= 90 THEN 6\n        \n        -- Status moves without specific utility\n        WHEN damage_class = 'status' THEN 5\n        \n        -- Weak but accurate moves\n        WHEN power < 60 AND accuracy > 90 THEN 4\n        \n        -- Inaccurate moves\n        WHEN accuracy < 80 AND power > 0 THEN 3\n        \n        -- Very weak moves\n        WHEN power < 40 THEN 2\n        \n        -- Other moves\n        ELSE 1\n    END AS competitive_score,\n    \n    -- Move uniqueness rating\n    CASE\n        -- Signature moves\n        WHEN move_name IN ('spacial-rend', 'roar-of-time', 'seed-flare', 'blue-flare',\n                         'bolt-strike', 'fusion-flare', 'fusion-bolt', 'origin-pulse',\n                         'precipice-blades', 'dragon-ascent', 'sacred-fire', 'aeroblast',\n                         'shadow-force', 'doom-desire', 'psycho-boost', 'lunar-dance',\n                         'magma-storm', 'crush-grip', 'judgment', 'secret-sword',\n                         'relic-song', 'light-of-ruin', 'steam-eruption', 'core-enforcer',\n                         'sunsteel-strike', 'moongeist-beam', 'photon-geyser',\n                         'spectral-thief', 'plasma-fists') THEN 'Signature'\n        -- Very rare moves (limited distribution)\n        WHEN move_name IN ('shell-smash', 'quiver-dance', 'tail-glow', 'dragon-dance',\n                   'shift-gear', 'coil', 'geomancy', 'mind-blown', 'oblivion-wing',\n                   'thousand-arrows', 'thousand-waves', 'diamond-storm') THEN 'Very Rare'\n                   \n        -- Rare but distributed moves\n        WHEN move_name IN ('spore', 'dark-void', 'healing-wish', 'lunar-dance', \n                   'shore-up', 'belly-drum', 'fiery-dance', E'king''s-shield',\n                   'spiky-shield', 'baneful-bunker', 'parting-shot') THEN 'Rare'\n                   \n        -- Uncommon moves\n        WHEN move_name IN ('leech-seed', 'aromatherapy', 'heal-bell', 'sticky-web',\n                   'defog', 'rapid-spin', 'extreme-speed', 'sucker-punch',\n                   'bullet-punch', 'aqua-jet', 'mach-punch', 'ice-shard') THEN 'Uncommon'\n                   \n        -- Common coverage moves\n        WHEN move_name IN ('ice-beam', 'thunderbolt', 'flamethrower', 'surf',\n                   'earthquake', 'stone-edge', 'close-combat', 'shadow-ball') THEN 'Standard'\n                   \n        -- Very common moves\n        WHEN move_name IN ('toxic', 'protect', 'rest', 'sleep-talk', 'substitute') THEN 'Common'\n                   \n        -- Handle everything else based on damage class\n        WHEN damage_class = 'status' THEN 'Status'\n        ELSE 'Standard'\n    END AS move_rarity,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM move_classifications\nORDER BY move_type, power DESC NULLS LAST, move_name", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_pokemon_types": {"database": "nerd_facts", "schema": "public", "name": "dim_pokemon_types", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/dim_pokemon_types.sql", "original_file_path": "models/marts/pokemon/dim_pokemon_types.sql", "unique_id": "model.nerd_facts_dbt.dim_pokemon_types", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "dim_pokemon_types"], "alias": "dim_pokemon_types", "checksum": {"name": "sha256", "checksum": "70f6c9bb77a7b8bb0303ba7c42d37cfcaeb3d77b2177ff155f5c086de2263c5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "type_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["type_id"]}, {"columns": ["type_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["type_id"]}, {"columns": ["type_name"]}], "unique_key": "type_id"}, "created_at": 1742230597.0271273, "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_types\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['type_id']}, {'columns': ['type_name']}],\n    unique_key = 'type_id'\n  )\n}}\n\n/*\n  Model: dim_pokemon_types\n  Description: Dimension table for Pok\u00e9mon types and their effectiveness relationships\n  \n  Notes:\n  - Contains comprehensive type effectiveness data (weaknesses, resistances, immunities)\n  - Includes type distribution metrics across the Pok\u00e9dex\n  - Provides visual attributes for UI presentation\n  - Calculates offensive and defensive ratings\n  - Adds type categorization and generation data\n*/\n\nWITH type_counts AS (\n    -- Get primary type usage\n    SELECT\n        COALESCE(primary_type, 'Unknown') AS type_name,\n        COUNT(*) AS num_primary\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    GROUP BY primary_type\n),\n\nsecondary_type_counts AS (\n    -- Get secondary type usage from type_list array\n    SELECT \n        COALESCE(type_list[1], 'None') AS type_name,  -- Changed from secondary_type\n        COUNT(*) AS num_secondary\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE type_list[1] IS NOT NULL\n    GROUP BY type_list[1]\n),\n\ncombined_counts AS (\n    -- Combine primary and secondary counts\n    SELECT\n        t.type_name,\n        t.num_primary,\n        COALESCE(s.num_secondary, 0) AS num_secondary,\n        t.num_primary + COALESCE(s.num_secondary, 0) AS total_usage\n    FROM type_counts t\n    LEFT JOIN secondary_type_counts s ON t.type_name = s.type_name\n),\n\ntype_attributes AS (\n    SELECT\n        type_name,\n        -- Weaknesses (takes 2x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Fighting']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Water' THEN ARRAY['Electric', 'Grass']\n            WHEN type_name = 'Electric' THEN ARRAY['Ground']\n            WHEN type_name = 'Grass' THEN ARRAY['Fire', 'Ice', 'Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Fire', 'Fighting', 'Rock', 'Steel']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Psychic']\n            WHEN type_name = 'Ground' THEN ARRAY['Water', 'Grass', 'Ice']\n            WHEN type_name = 'Flying' THEN ARRAY['Electric', 'Ice', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Bug', 'Ghost', 'Dark']\n            WHEN type_name = 'Bug' THEN ARRAY['Fire', 'Flying', 'Rock']\n            WHEN type_name = 'Rock' THEN ARRAY['Water', 'Grass', 'Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Dragon' THEN ARRAY['Ice', 'Dragon', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Bug', 'Fairy']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Fighting', 'Ground']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS weaknesses,\n        \n        -- Resistances (takes 0.5x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Fire', 'Grass', 'Ice', 'Bug', 'Steel', 'Fairy']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Water', 'Ice', 'Steel']\n            WHEN type_name = 'Electric' THEN ARRAY['Electric', 'Flying', 'Steel']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Electric', 'Grass', 'Ground']\n            WHEN type_name = 'Ice' THEN ARRAY['Ice']\n            WHEN type_name = 'Fighting' THEN ARRAY['Bug', 'Rock', 'Dark']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fighting', 'Poison', 'Bug', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Poison', 'Rock']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Psychic']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Fighting', 'Ground']\n            WHEN type_name = 'Rock' THEN ARRAY['Normal', 'Fire', 'Poison', 'Flying']\n            WHEN type_name = 'Ghost' THEN ARRAY['Poison', 'Bug']  -- Fixed: Ghost resists Bug and Poison\n            WHEN type_name = 'Dragon' THEN ARRAY['Fire', 'Water', 'Electric', 'Grass']\n            WHEN type_name = 'Dark' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Steel' THEN ARRAY['Normal', 'Grass', 'Ice', 'Flying', 'Psychic', 'Bug', 'Rock', 'Dragon', 'Steel', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Bug', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS resistances,\n        \n        -- Immunities (takes 0x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost']\n            WHEN type_name = 'Flying' THEN ARRAY['Ground']\n            WHEN type_name = 'Ground' THEN ARRAY['Electric']\n            WHEN type_name = 'Ghost' THEN ARRAY['Normal', 'Fighting']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic']\n            WHEN type_name = 'Fairy' THEN ARRAY['Dragon']\n            WHEN type_name = 'Steel' THEN ARRAY['Poison']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS immunities,\n        \n        -- Super effective against (deals 2x damage to these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Grass', 'Ice', 'Bug', 'Steel']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Rock']\n            WHEN type_name = 'Electric' THEN ARRAY['Water', 'Flying']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Ice' THEN ARRAY['Grass', 'Ground', 'Flying', 'Dragon']\n            WHEN type_name = 'Fighting' THEN ARRAY['Normal', 'Ice', 'Rock', 'Dark', 'Steel']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Fire', 'Electric', 'Poison', 'Rock', 'Steel']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Poison']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Psychic', 'Dark']\n            WHEN type_name = 'Rock' THEN ARRAY['Fire', 'Ice', 'Flying', 'Bug']\n            WHEN type_name = 'Ghost' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Dragon' THEN ARRAY['Dragon']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Steel' THEN ARRAY['Ice', 'Rock', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Dragon', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS super_effective,\n        \n        -- Type compatibility (works well defensively with these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost', 'Rock', 'Steel']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Rock', 'Dragon']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Flying']\n            WHEN type_name = 'Electric' THEN ARRAY['Flying', 'Steel', 'Fairy']\n            WHEN type_name = 'Grass' THEN ARRAY['Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Steel', 'Fire', 'Water']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Ghost', 'Steel']\n            WHEN type_name = 'Ground' THEN ARRAY['Flying', 'Bug', 'Grass']\n            WHEN type_name = 'Flying' THEN ARRAY['Steel', 'Electric', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Steel', 'Dark', 'Normal']\n            WHEN type_name = 'Bug' THEN ARRAY['Flying', 'Steel', 'Fire']\n            WHEN type_name = 'Rock' THEN ARRAY['Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Dark', 'Normal', 'Poison']\n            WHEN type_name = 'Dragon' THEN ARRAY['Steel', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Fairy', 'Bug']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Electric', 'Water']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel', 'Fire']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS defensive_synergy\n    FROM combined_counts\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['c.type_name']) }} AS type_key,\n    ROW_NUMBER() OVER (ORDER BY c.type_name) AS type_id,\n    \n    -- Core attributes\n    c.type_name,\n    c.num_primary,\n    c.num_secondary,\n    c.total_usage,\n    \n    -- Type effectiveness data\n    a.weaknesses,\n    a.resistances,\n    a.immunities,\n    a.super_effective,\n    \n    -- Defensive synergy types\n    a.defensive_synergy,\n    \n    -- Calculated metrics\n    COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) AS weakness_count,\n    COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) AS resistance_count,\n    COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) AS immunity_count,\n    COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) AS super_effective_count,\n    \n    -- Type color (for UI)\n    CASE\n        WHEN c.type_name = 'Normal' THEN '#A8A77A'\n        WHEN c.type_name = 'Fire' THEN '#EE8130'\n        WHEN c.type_name = 'Water' THEN '#6390F0'\n        WHEN c.type_name = 'Electric' THEN '#F7D02C'\n        WHEN c.type_name = 'Grass' THEN '#7AC74C'\n        WHEN c.type_name = 'Ice' THEN '#96D9D6'\n        WHEN c.type_name = 'Fighting' THEN '#C22E28'\n        WHEN c.type_name = 'Poison' THEN '#A33EA1'\n        WHEN c.type_name = 'Ground' THEN '#E2BF65'\n        WHEN c.type_name = 'Flying' THEN '#A98FF3'\n        WHEN c.type_name = 'Psychic' THEN '#F95587'\n        WHEN c.type_name = 'Bug' THEN '#A6B91A'\n        WHEN c.type_name = 'Rock' THEN '#B6A136'\n        WHEN c.type_name = 'Ghost' THEN '#735797'\n        WHEN c.type_name = 'Dragon' THEN '#6F35FC'\n        WHEN c.type_name = 'Dark' THEN '#705746'\n        WHEN c.type_name = 'Steel' THEN '#B7B7CE'\n        WHEN c.type_name = 'Fairy' THEN '#D685AD'\n        ELSE '#CCCCCC'\n    END AS type_color,\n    \n    -- Type category - expanded with better organization\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric') THEN 'Primary Elemental'\n        WHEN c.type_name IN ('Grass', 'Ice') THEN 'Secondary Elemental'\n        WHEN c.type_name IN ('Fighting', 'Rock', 'Ground') THEN 'Physical'\n        WHEN c.type_name IN ('Poison', 'Flying', 'Bug') THEN 'Biological'\n        WHEN c.type_name IN ('Psychic', 'Ghost', 'Dark', 'Fairy') THEN 'Special'\n        WHEN c.type_name IN ('Normal') THEN 'Normal'\n        WHEN c.type_name IN ('Dragon', 'Steel') THEN 'Advanced'\n        ELSE 'Other'\n    END AS type_category,\n    \n    -- Type attack classification\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                           'Psychic', 'Dragon', 'Dark', 'Fairy') THEN 'Special'\n        ELSE 'Physical'\n    END AS damage_category,\n    \n    -- Generation introduced\n    CASE\n        WHEN c.type_name IN ('Normal', 'Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                            'Fighting', 'Poison', 'Ground', 'Flying', 'Psychic', 'Bug', \n                            'Rock', 'Ghost', 'Dragon') THEN 1\n        WHEN c.type_name IN ('Dark', 'Steel') THEN 2\n        WHEN c.type_name IN ('Fairy') THEN 6\n        ELSE 1\n    END AS generation_introduced,\n    \n    -- Offensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Ground', 'Fighting', 'Fire') THEN 9  -- Excellent coverage\n        WHEN c.type_name IN ('Ice', 'Electric', 'Rock', 'Flying', 'Fairy', 'Ghost', 'Dark') THEN 8  -- Great coverage\n        WHEN c.type_name IN ('Grass', 'Dragon', 'Steel', 'Water', 'Psychic') THEN 7  -- Good coverage\n        WHEN c.type_name IN ('Poison', 'Bug') THEN 5  -- Limited coverage\n        WHEN c.type_name IN ('Normal') THEN 3  -- Poor coverage\n        ELSE 6\n    END AS offensive_rating,\n    \n    -- Defensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Steel', 'Fairy') THEN 10  -- Excellent defenses\n        WHEN c.type_name IN ('Ghost', 'Water', 'Normal', 'Dragon') THEN 8  -- Great defenses\n        WHEN c.type_name IN ('Fire', 'Flying', 'Dark', 'Poison', 'Ground') THEN 7  -- Good defenses\n        WHEN c.type_name IN ('Electric', 'Fighting', 'Psychic', 'Rock') THEN 5  -- Average defenses\n        WHEN c.type_name IN ('Grass', 'Bug', 'Ice') THEN 3  -- Poor defenses\n        ELSE 6\n    END AS defensive_rating,\n    \n    -- Type value calculated across multiple factors\n    (\n        COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) * 10 -\n        COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) * 3\n    ) AS composite_value_score,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM combined_counts c\nJOIN type_attributes a ON c.type_name = a.type_name\nORDER BY c.type_name", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fct_pokemon_matchups": {"database": "nerd_facts", "schema": "public", "name": "fct_pokemon_matchups", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/fct_pokemon_matchups.sql", "original_file_path": "models/marts/pokemon/fct_pokemon_matchups.sql", "unique_id": "model.nerd_facts_dbt.fct_pokemon_matchups", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "fct_pokemon_matchups"], "alias": "fct_pokemon_matchups", "checksum": {"name": "sha256", "checksum": "135d573e5cce238109fed3600ef961415c6f1ac088a52edd12f7cc2b7106a8e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "matchup_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["matchup_id"]}, {"columns": ["attacking_type", "defending_type"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["matchup_id"]}, {"columns": ["attacking_type", "defending_type"]}], "unique_key": "matchup_id"}, "created_at": 1742230758.5374396, "relation_name": "\"nerd_facts\".\"public\".\"fct_pokemon_matchups\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['matchup_id']}, {'columns': ['attacking_type', 'defending_type']}],\n    unique_key = 'matchup_id'\n  )\n}}\n\n/*\n  Model: fct_pokemon_matchups\n  Description: Fact table for Pok\u00e9mon type matchup effectiveness\n  \n  Notes:\n  - Contains comprehensive type matchup data for all 18 Pok\u00e9mon types\n  - Calculates effectiveness multipliers (0x, 0.5x, 1x, 2x)\n  - Provides context on how many Pok\u00e9mon are affected by each matchup\n  - Includes dual-type effectiveness calculations\n  - Creates detailed descriptions for analysis and visualization\n*/\n\nWITH type_pairs AS (\n    -- Generate all possible type combinations\n    SELECT\n        a.type_name AS attacking_type,\n        d.type_name AS defending_type\n    FROM {{ ref('dim_pokemon_types') }} a\n    CROSS JOIN {{ ref('dim_pokemon_types') }} d\n    WHERE a.type_name != 'Unknown' AND d.type_name != 'Unknown' -- Filter out Unknown type\n),\n\n-- Use the arrays from dim_pokemon_types to determine effectiveness\ntype_effectiveness AS (\n    SELECT\n        tp.attacking_type,\n        tp.defending_type,\n        \n        -- Determine effectiveness by checking immune/resistant/weak arrays\n        CASE\n            -- No effect (0x damage) if defending type is immune to attacking type\n            WHEN tp.defending_type IN (\n                SELECT unnest(immunities) \n                FROM {{ ref('dim_pokemon_types') }} \n                WHERE type_name = tp.attacking_type\n            ) THEN 0\n            \n            -- Super effective (2x damage) if defending type is weak to attacking type\n            WHEN tp.defending_type IN (\n                SELECT unnest(super_effective) \n                FROM {{ ref('dim_pokemon_types') }} \n                WHERE type_name = tp.attacking_type\n            ) THEN 2\n            \n            -- Not very effective (0.5x damage) if defending type resists attacking type\n            WHEN tp.defending_type IN (\n                SELECT unnest(resistances) \n                FROM {{ ref('dim_pokemon_types') }} \n                WHERE type_name = tp.attacking_type\n            ) THEN 0.5\n            \n            -- Normal effectiveness (1x damage) for everything else\n            ELSE 1\n        END AS effectiveness_multiplier\n    FROM type_pairs tp\n),\n\n-- Count Pok\u00e9mon with each primary and secondary type combination\npokemon_type_counts AS (\n    SELECT\n        type_list[0] AS primary_type,\n        type_list[1] AS secondary_type,  -- Get secondary type from array\n        COUNT(*) AS pokemon_count\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE type_list[0] IS NOT NULL  -- Only include Pok\u00e9mon with at least one type\n    GROUP BY type_list[0], type_list[1]\n),\n\n-- Get dual-type defending Pok\u00e9mon and calculate combined effectiveness\ndual_type_effectiveness AS (\n    SELECT\n        te1.attacking_type,\n        ptc.primary_type AS primary_defending_type,\n        ptc.secondary_type AS secondary_defending_type,\n        -- Multiply effectiveness against both types\n        te1.effectiveness_multiplier * te2.effectiveness_multiplier AS combined_effectiveness,\n        ptc.pokemon_count\n    FROM pokemon_type_counts ptc\n    JOIN type_effectiveness te1 ON ptc.primary_type = te1.defending_type\n    JOIN type_effectiveness te2 ON ptc.secondary_type = te2.defending_type\n    WHERE ptc.secondary_type IS NOT NULL  -- Only include dual-type Pok\u00e9mon\n),\n\n-- Calculate type usage statistics\ntype_usage_stats AS (\n    SELECT\n        defending_type,\n        SUM(pokemon_count) as type_pokemon_count\n    FROM (\n        -- Count primary type usage\n        SELECT primary_type as defending_type, COUNT(*) as pokemon_count\n        FROM {{ ref('stg_pokeapi_pokemon') }}\n        WHERE type_list[0] IS NOT NULL\n        GROUP BY primary_type\n        UNION ALL\n        -- Count secondary type usage\n        SELECT type_list[1] as defending_type, COUNT(*) as pokemon_count\n        FROM {{ ref('stg_pokeapi_pokemon') }}\n        WHERE type_list[1] IS NOT NULL\n        GROUP BY type_list[1]\n    ) t\n    GROUP BY defending_type\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['te.attacking_type', 'te.defending_type']) }} AS matchup_id,\n    \n    -- Core dimensions\n    te.attacking_type,\n    te.defending_type,\n    te.effectiveness_multiplier,\n    \n    -- Attacking type metadata\n    at.type_category AS attacking_type_category,\n    at.damage_category AS attacking_damage_category,\n    at.type_color AS attacking_type_color,\n    \n    -- Defending type metadata\n    dt.type_category AS defending_type_category,\n    dt.resistance_count,\n    dt.weakness_count,\n    dt.immunity_count,\n    dt.type_color AS defending_type_color,\n    \n    -- Effectiveness category with more detail\n    CASE\n        WHEN te.effectiveness_multiplier = 0 THEN 'Immune (0x)'\n        WHEN te.effectiveness_multiplier = 0.25 THEN 'Doubly resistant (0.25x)'\n        WHEN te.effectiveness_multiplier = 0.5 THEN 'Resistant (0.5x)'\n        WHEN te.effectiveness_multiplier = 1 THEN 'Normal (1x)'\n        WHEN te.effectiveness_multiplier = 2 THEN 'Super effective (2x)'\n        WHEN te.effectiveness_multiplier = 4 THEN 'Doubly super effective (4x)'\n        ELSE te.effectiveness_multiplier::TEXT || 'x'\n    END AS effectiveness_category,\n    \n    -- Count Pok\u00e9mon with each attacking and defending type\n    COALESCE((SELECT SUM(pokemon_count) FROM pokemon_type_counts \n              WHERE primary_type = te.attacking_type OR secondary_type = te.attacking_type), 0) AS attacking_type_pokemon_count,\n              \n    COALESCE((SELECT SUM(pokemon_count) FROM pokemon_type_counts \n              WHERE primary_type = te.defending_type OR secondary_type = te.defending_type), 0) AS defending_type_pokemon_count,\n    \n    -- Dual-type effectiveness stats\n    (\n        SELECT COUNT(DISTINCT primary_defending_type || secondary_defending_type) \n        FROM dual_type_effectiveness dte \n        WHERE dte.attacking_type = te.attacking_type AND dte.combined_effectiveness = 0\n    ) AS num_immune_type_combos,\n    \n    (\n        SELECT COUNT(DISTINCT primary_defending_type || secondary_defending_type) \n        FROM dual_type_effectiveness dte \n        WHERE dte.attacking_type = te.attacking_type AND dte.combined_effectiveness = 0.25\n    ) AS num_double_resistant_combos,\n    \n    (\n        SELECT COUNT(DISTINCT primary_defending_type || secondary_defending_type) \n        FROM dual_type_effectiveness dte \n        WHERE dte.attacking_type = te.attacking_type AND dte.combined_effectiveness = 0.5\n    ) AS num_resistant_combos,\n    \n    (\n        SELECT COUNT(DISTINCT primary_defending_type || secondary_defending_type) \n        FROM dual_type_effectiveness dte \n        WHERE dte.attacking_type = te.attacking_type AND dte.combined_effectiveness = 2\n    ) AS num_super_effective_combos,\n    \n    (\n        SELECT COUNT(DISTINCT primary_defending_type || secondary_defending_type) \n        FROM dual_type_effectiveness dte \n        WHERE dte.attacking_type = te.attacking_type AND dte.combined_effectiveness = 4\n    ) AS num_double_super_effective_combos,\n    \n    -- Most vulnerable dual-type to this attack\n    (\n        SELECT primary_defending_type || '/' || secondary_defending_type\n        FROM dual_type_effectiveness dte\n        WHERE dte.attacking_type = te.attacking_type\n        ORDER BY dte.combined_effectiveness DESC, dte.pokemon_count DESC\n        LIMIT 1\n    ) AS most_vulnerable_dual_type,\n    \n    -- Most resistant dual-type to this attack\n    (\n        SELECT primary_defending_type || '/' || secondary_defending_type\n        FROM dual_type_effectiveness dte\n        WHERE dte.attacking_type = te.attacking_type AND dte.combined_effectiveness > 0\n        ORDER BY dte.combined_effectiveness ASC, dte.pokemon_count DESC\n        LIMIT 1\n    ) AS most_resistant_dual_type,\n    \n    -- Enhanced matchup description with more detail\n    CASE\n        WHEN te.effectiveness_multiplier = 0 THEN \n            te.attacking_type || ' attacks have no effect on ' || te.defending_type || ' Pok\u00e9mon'\n        WHEN te.effectiveness_multiplier = 0.5 THEN \n            te.attacking_type || ' attacks are not very effective against ' || te.defending_type || ' Pok\u00e9mon (0.5x damage)'\n        WHEN te.effectiveness_multiplier = 1 THEN \n            te.attacking_type || ' attacks have normal effectiveness against ' || te.defending_type || ' Pok\u00e9mon'\n        WHEN te.effectiveness_multiplier = 2 THEN \n            te.attacking_type || ' attacks are super effective against ' || te.defending_type || ' Pok\u00e9mon (2x damage)'\n        WHEN te.effectiveness_multiplier = 4 THEN \n            te.attacking_type || ' attacks are doubly super effective against ' || te.defending_type || ' Pok\u00e9mon (4x damage)'\n        ELSE \n            te.attacking_type || ' vs ' || te.defending_type || ' = ' || te.effectiveness_multiplier || 'x damage'\n    END AS matchup_description,\n    \n    -- Coverage value: How valuable is this attacking type for coverage?\n    -- Higher = this type is super effective against more types with many Pok\u00e9mon\n    CASE\n        WHEN te.effectiveness_multiplier >= 2 THEN \n            te.effectiveness_multiplier * COALESCE(tus.type_pokemon_count, 0)\n        ELSE 0\n    END AS coverage_value,\n    \n    -- Competitive relevance: How important is this matchup in competitive play?\n    CASE\n        WHEN te.defending_type IN ('Fairy', 'Dragon', 'Steel') AND te.effectiveness_multiplier >= 2 THEN 'Very High'\n        WHEN te.defending_type IN ('Water', 'Flying', 'Ground', 'Ghost') AND te.effectiveness_multiplier >= 2 THEN 'High'\n        WHEN te.effectiveness_multiplier = 4 THEN 'Very High'\n        WHEN te.effectiveness_multiplier = 2 THEN 'Moderate'\n        WHEN te.effectiveness_multiplier = 0 THEN 'Situational'\n        ELSE 'Low'\n    END AS competitive_relevance,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM type_effectiveness te\nJOIN {{ ref('dim_pokemon_types') }} at ON te.attacking_type = at.type_name  -- Join for attacking type metadata\nJOIN {{ ref('dim_pokemon_types') }} dt ON te.defending_type = dt.type_name  -- Join for defending type metadata\nLEFT JOIN type_usage_stats tus ON te.defending_type = tus.defending_type  -- Add join for type usage stats\nORDER BY te.attacking_type, te.effectiveness_multiplier DESC", "language": "sql", "refs": [{"name": "dim_pokemon_types", "package": null, "version": null}, {"name": "dim_pokemon_types", "package": null, "version": null}, {"name": "dim_pokemon_types", "package": null, "version": null}, {"name": "dim_pokemon_types", "package": null, "version": null}, {"name": "dim_pokemon_types", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "dim_pokemon_types", "package": null, "version": null}, {"name": "dim_pokemon_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.dim_pokemon_types", "model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fct_pokemon_stats": {"database": "nerd_facts", "schema": "public", "name": "fct_pokemon_stats", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/fct_pokemon_stats.sql", "original_file_path": "models/marts/pokemon/fct_pokemon_stats.sql", "unique_id": "model.nerd_facts_dbt.fct_pokemon_stats", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "fct_pokemon_stats"], "alias": "fct_pokemon_stats", "checksum": {"name": "sha256", "checksum": "b8044c58435b23052bcd6a6ecd01ed28c223b12ab33657d7592de784a4297216"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_stat_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["primary_type"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["primary_type"]}], "unique_key": "pokemon_stat_id"}, "created_at": 1742246756.481856, "relation_name": "\"nerd_facts\".\"public\".\"fct_pokemon_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}, {'columns': ['primary_type']}],\n    unique_key = 'pokemon_stat_id'\n  )\n}}\n\n/*\n  Model: fct_pokemon_stats\n  Description: Fact table for Pok\u00e9mon statistics and battle metrics\n  \n  Notes:\n  - Contains comprehensive stat analysis for all Pok\u00e9mon\n  - Calculates evolutionary stage and progression metrics\n  - Includes battle effectiveness calculations and classifications\n  - Provides stat distribution analysis and percentile rankings\n  - Links to dimension tables for Pok\u00e9mon and types\n*/\n\nWITH base_pokemon AS (\n    SELECT\n        -- Core identifiers\n        id,\n        name,\n        type_list[0] AS primary_type,\n        type_list[1] AS secondary_type,\n        generation_number,\n        is_legendary,\n        is_mythical,\n        \n        -- Physical attributes with unit conversions\n        height_dm / 10.0 AS height_m,\n        weight_kg,\n        base_xp,\n        \n        -- Base stats - using exact column names from staging\n        base_stat_hp,\n        total_base_stats\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE id IS NOT NULL\n),\n\n-- Calculate stat percentiles across all Pok\u00e9mon\nstat_percentiles AS (\n    SELECT\n        id,\n        PERCENT_RANK() OVER (ORDER BY base_stat_hp) AS hp_percentile,\n        PERCENT_RANK() OVER (ORDER BY total_base_stats) AS total_stats_percentile\n    FROM base_pokemon\n),\n\n-- Improved evolutionary stage determination with simpler logic\nevolution_stage AS (\n    SELECT\n        bp.id,\n        CASE\n            WHEN bp.is_legendary OR bp.is_mythical THEN 3  -- Legendaries are final forms\n            WHEN bp.total_base_stats < 350 THEN 1          -- Basic form\n            WHEN bp.total_base_stats < 470 THEN 2          -- First evolution\n            ELSE 3                                         -- Final evolution\n        END AS evolution_level\n    FROM base_pokemon bp\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['bp.id']) }} AS pokemon_stat_id,\n    \n    -- Core identifiers\n    bp.id AS pokemon_id,\n    bp.name AS pokemon_name,\n    bp.primary_type,\n    bp.secondary_type,\n    \n    -- Physical attributes\n    bp.height_m AS height,\n    bp.weight_kg AS weight,\n    bp.base_xp,\n    \n    -- Stats\n    bp.base_stat_hp,\n    bp.total_base_stats,\n    \n    -- Percentiles\n    ROUND(sp.hp_percentile * 100) AS hp_percentile,\n    ROUND(sp.total_stats_percentile * 100) AS total_stats_percentile,\n    \n    -- Evolution data\n    es.evolution_level,\n    \n    -- Additional attributes\n    bp.generation_number,\n    bp.is_legendary,\n    bp.is_mythical,\n    \n    -- Metadata\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM base_pokemon bp\nJOIN stat_percentiles sp ON bp.id = sp.id\nJOIN evolution_stage es ON bp.id = es.id\nORDER BY bp.total_base_stats DESC", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fct_pokemon": {"database": "nerd_facts", "schema": "public", "name": "fct_pokemon", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/fct_pokemon.sql", "original_file_path": "models/marts/pokemon/fct_pokemon.sql", "unique_id": "model.nerd_facts_dbt.fct_pokemon", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "fct_pokemon"], "alias": "fct_pokemon", "checksum": {"name": "sha256", "checksum": "0edf474d719bfa018a943e807ffa651a538c76ec5fa42fd995314832b991fe34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["primary_type", "secondary_type"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["primary_type", "secondary_type"]}], "unique_key": "pokemon_key"}, "created_at": 1742247126.5477223, "relation_name": "\"nerd_facts\".\"public\".\"fct_pokemon\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}, {'columns': ['primary_type', 'secondary_type']}],\n    unique_key = 'pokemon_key'\n  )\n}}\n\n/*\n  Model: fct_pokemon\n  Description: Core fact table for Pok\u00e9mon data with comprehensive attributes and classifications\n  \n  Notes:\n  - Contains essential information about each Pok\u00e9mon species\n  - Links to all related dimension tables (types, abilities, moves, etc.)\n  - Provides both source fields and derived/calculated metrics\n  - Includes generation, evolutionary, and classification data\n  - Serves as the central entity for all Pok\u00e9mon analysis\n*/\n\nWITH base_pokemon AS (\n    SELECT\n        -- Core identifiers\n        id AS pokemon_id,\n        name AS pokemon_name,\n        type_list[0] AS primary_type,\n        type_list[1] AS secondary_type,\n        generation_number,\n        is_legendary,\n        is_mythical,\n        \n        -- Physical attributes\n        height_dm,\n        weight_kg,\n        base_xp,\n        \n        -- Base stats - only use what exists in staging\n        base_stat_hp,\n        total_base_stats\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary key and identifiers\n    {{ dbt_utils.generate_surrogate_key(['bp.pokemon_id']) }} AS pokemon_key,\n    bp.pokemon_id,\n    \n    -- Core data\n    bp.pokemon_name,\n    bp.primary_type,\n    bp.secondary_type,\n    \n    -- Physical attributes\n    bp.height_dm / 10.0 AS height_m,\n    bp.weight_kg,\n    bp.base_xp,\n    \n    -- Stats\n    bp.base_stat_hp,\n    bp.total_base_stats,\n    \n    -- Type keys\n    {{ dbt_utils.generate_surrogate_key(['bp.primary_type']) }} AS primary_type_key,\n    {{ dbt_utils.generate_surrogate_key(['bp.secondary_type']) }} AS secondary_type_key,\n    \n    -- Additional attributes\n    bp.generation_number,\n    bp.is_legendary,\n    bp.is_mythical,\n    \n    -- Meta\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM base_pokemon bp\nWHERE bp.pokemon_id IS NOT NULL\nORDER BY bp.total_base_stats DESC", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.stg_netrunner_factions": {"database": "nerd_facts", "schema": "public", "name": "stg_netrunner_factions", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/netrunner/stg_netrunner_factions.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_factions.sql", "unique_id": "model.nerd_facts_dbt.stg_netrunner_factions", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "stg_netrunner_factions"], "alias": "stg_netrunner_factions", "checksum": {"name": "sha256", "checksum": "34f052485b803e5931469365e69db6850ba9b808a74ea142e1b3fc77d7f8bd5f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Android: Netrunner faction data with derived classifications", "columns": {"faction_id": {"name": "faction_id", "description": "Primary key for factions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_code": {"name": "faction_code", "description": "Unique faction code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_name": {"name": "faction_name", "description": "Full faction name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Corp/Runner side indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_mini_faction": {"name": "is_mini_faction", "description": "Whether this is a mini-faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "card_count": {"name": "card_count", "description": "Number of cards in this faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/netrunner/stg_netrunner.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742247702.6266608, "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_factions\"", "raw_code": "/*\n  Model: stg_netrunner_factions\n  Description: Standardizes Netrunner faction data from the raw source\n  Source: raw.netrunner_factions\n  \n  Note: DISTINCT is used to prevent duplicate faction entries\n  that might exist in the data source due to multiple versions.\n*/\n\nWITH raw_data AS (\n    -- Select all relevant columns from source\n    SELECT DISTINCT\n        code,\n        name,\n        side_code,         -- Corporation or Runner side\n        is_mini,           -- Whether this is a mini-faction\n        color             -- Faction color for UI visualization\n    FROM {{ source('netrunner', 'factions') }}\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT\n    -- Primary identifiers\n    code AS faction_code,\n    name AS faction_name,\n    \n    -- Side information\n    side_code,\n    CASE \n        WHEN side_code = 'corp' THEN 'Corporation'\n        WHEN side_code = 'runner' THEN 'Runner'\n        ELSE 'Unknown'\n    END AS side_name,\n    \n    -- Faction attributes\n    CASE\n        WHEN is_mini::TEXT = 'true' THEN TRUE\n        WHEN is_mini::TEXT = 'false' THEN FALSE\n        ELSE FALSE  -- Default value for NULL or invalid values\n    END AS is_mini,\n    color,\n    \n    -- Additional derived attributes\n    CASE\n        WHEN code IN ('haas-bioroid', 'jinteki', 'nbn', 'weyland-consortium') THEN TRUE\n        WHEN code IN ('anarch', 'criminal', 'shaper') THEN TRUE\n        ELSE FALSE\n    END AS is_core_faction,\n    \n    -- Track record creation\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM raw_data", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["faction_code", "faction_id"], "time_spine": null}, "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_factions_faction_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_factions_faction_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_factions_faction_id"], "alias": "unique_stg_netrunner_factions_faction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247702.6906755, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_id", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "faction_id", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_faction_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_faction_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_faction_id"], "alias": "not_null_stg_netrunner_factions_faction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247702.692278, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_id", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_id", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_factions_faction_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_factions_faction_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_factions_faction_code"], "alias": "unique_stg_netrunner_factions_faction_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247702.693619, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "faction_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_faction_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_faction_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_faction_code"], "alias": "not_null_stg_netrunner_factions_faction_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247702.6948829, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_faction_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_faction_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_faction_name"], "alias": "not_null_stg_netrunner_factions_faction_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247702.6961398, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_name", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_name", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_side_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_side_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_side_code"], "alias": "not_null_stg_netrunner_factions_side_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247702.6975381, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_netrunner_factions_side_code__corp__runner", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_netrunner_factions_side_code__corp__runner.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "accepted_values_stg_netrunner_factions_side_code__corp__runner"], "alias": "accepted_values_stg_netrunner_factions_side_code__corp__runner", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742247702.6991653, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["corp", "runner"], "column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0"], "alias": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb"}, "created_at": 1742247702.7162473, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": "dbt_utils"}}, "model.nerd_facts_dbt.stg_netrunner_packs": {"database": "nerd_facts", "schema": "public", "name": "stg_netrunner_packs", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/netrunner/stg_netrunner_packs.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_packs.sql", "unique_id": "model.nerd_facts_dbt.stg_netrunner_packs", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "stg_netrunner_packs"], "alias": "stg_netrunner_packs", "checksum": {"name": "sha256", "checksum": "398d1711008d109ab90af10b8d9eecfd82dd53b9210804cf5f5af973cde68392"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Android: Netrunner data pack data with release information", "columns": {"pack_id": {"name": "pack_id", "description": "Primary key for data packs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_code": {"name": "pack_code", "description": "Unique pack code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_name": {"name": "pack_name", "description": "Full pack name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_code": {"name": "cycle_code", "description": "Code reference to the cycle this pack belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_name": {"name": "cycle_name", "description": "Full name of the cycle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "Pack release date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "card_count": {"name": "card_count", "description": "Number of cards in this pack", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_core": {"name": "is_core", "description": "Whether this is a core set", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_deluxe": {"name": "is_deluxe", "description": "Whether this is a deluxe expansion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_rotation_proof": {"name": "is_rotation_proof", "description": "Whether cards in this pack are rotation-proof", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/netrunner/stg_netrunner.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742247764.5815198, "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_packs\"", "raw_code": "/*\n  Model: stg_netrunner_packs\n  Description: Standardizes Netrunner card pack data from the raw source\n  Source: raw.netrunner_packs\n  \n  Packs represent the physical card sets released for Netrunner, such as core sets,\n  deluxe expansions, and data packs within a cycle.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        code,\n        name,\n        position,\n        date_release,\n        size,\n        cycle_code\n    FROM {{ source('netrunner', 'packs') }}  -- Updated to use source macro\n    WHERE code IS NOT NULL -- Filter out invalid entries\n)\n\nSELECT\n    -- Primary identifiers\n    id,\n    code,\n    name AS pack_name,\n    \n    -- Release information\n    CASE\n        WHEN date_release = '' THEN NULL\n        ELSE TO_DATE(date_release, 'YYYY-MM-DD')\n    END AS release_date,\n    \n    -- Pack attributes\n    position AS pack_position,\n    NULLIF(size::TEXT, '0')::INTEGER AS card_count,  -- Fixed type casting\n    cycle_code,\n    \n    -- Derived fields\n    CASE\n        WHEN name ILIKE '%core%' THEN 'Core'\n        WHEN name ILIKE '%deluxe%' THEN 'Deluxe'\n        WHEN name ILIKE '%draft%' THEN 'Draft'\n        ELSE 'Data Pack'\n    END AS pack_type,\n    \n    -- Calculate approximate rotation status\n    CASE\n        WHEN cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin', 'honor-and-profit', 'lunar') \n        THEN 'Rotated'\n        WHEN cycle_code IS NULL THEN 'Unknown'\n        ELSE 'Legal'\n    END AS rotation_status,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["netrunner", "packs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.netrunner.packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["pack_code", "pack_id"], "time_spine": null}, "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_packs_pack_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_packs_pack_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_packs_pack_id"], "alias": "unique_stg_netrunner_packs_pack_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247764.6478379, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_id", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pack_id", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_pack_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_pack_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_pack_id"], "alias": "not_null_stg_netrunner_packs_pack_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247764.6494322, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_id", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pack_id", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_packs_pack_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_packs_pack_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_packs_pack_code"], "alias": "unique_stg_netrunner_packs_pack_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247764.6507242, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_code", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pack_code", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_pack_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_pack_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_pack_code"], "alias": "not_null_stg_netrunner_packs_pack_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247764.6519797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_code", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pack_code", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_pack_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_pack_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_pack_name"], "alias": "not_null_stg_netrunner_packs_pack_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247764.6532185, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_name", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pack_name", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_cycle_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_cycle_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_cycle_code"], "alias": "not_null_stg_netrunner_packs_cycle_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742247764.6546302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_code", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_code", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8"}, "created_at": 1742247764.6562648, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "release_date", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= current_date OR IS NULL", "column_name": "release_date", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0"], "alias": "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742247764.674609, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": "dbt_utils"}}, "model.nerd_facts_dbt.dim_netrunner_cards": {"database": "nerd_facts", "schema": "public", "name": "dim_netrunner_cards", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/dim_netrunner_cards.sql", "original_file_path": "models/marts/netrunner/dim_netrunner_cards.sql", "unique_id": "model.nerd_facts_dbt.dim_netrunner_cards", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "dim_netrunner_cards"], "alias": "dim_netrunner_cards", "checksum": {"name": "sha256", "checksum": "1329dfe8bca5e02ad6a70b0eb40eab53220cb074867275395958181fe7ada36e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742249354.5915952, "relation_name": "\"nerd_facts\".\"public\".\"dim_netrunner_cards\"", "raw_code": "/*\n  Model: dim_netrunner_cards\n  Description: Bare minimum dimension table for Android: Netrunner cards\n  \n  Note: No type casting to avoid numeric conversion issues\n*/\n\nSELECT\n    -- Primary identifiers\n    code AS card_code,\n    id AS card_id,\n    card_name,\n    \n    -- Card classifications  \n    type_name,\n    faction_name,\n    side_code,\n    \n    -- Raw values without any casting\n    influence_cost,\n    cost,\n    \n    -- Boolean value\n    is_unique_card,\n    \n    -- Pack information\n    pack_code,\n    \n    -- Add tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_netrunner_cards') }}\nWHERE code IS NOT NULL\nORDER BY side_code, faction_name, type_name", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.stg_netrunner_cards": {"database": "nerd_facts", "schema": "public", "name": "stg_netrunner_cards", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/netrunner/stg_netrunner_cards.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_cards.sql", "unique_id": "model.nerd_facts_dbt.stg_netrunner_cards", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "stg_netrunner_cards"], "alias": "stg_netrunner_cards", "checksum": {"name": "sha256", "checksum": "f5300df675a1dc846efad2c7dd28f26037ba4d10741de004deb9cc7d88eb54d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Android: Netrunner card data with cleaned values and derived classifications", "columns": {"card_id": {"name": "card_id", "description": "Primary key for cards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Card title", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_code": {"name": "type_code", "description": "Code reference to card type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_name": {"name": "type_name", "description": "Full type name (e.g., 'Identity', 'ICE')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_code": {"name": "faction_code", "description": "Code reference to card faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_name": {"name": "faction_name", "description": "Full faction name (e.g., 'Shaper', 'NBN')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Corp/Runner side indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_code": {"name": "pack_code", "description": "Code reference to the data pack containing the card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_code": {"name": "cycle_code", "description": "Code reference to the cycle the card belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost": {"name": "cost", "description": "Card play/rez cost (in credits)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "strength": {"name": "strength", "description": "ICE/breaker strength value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "advancement_cost": {"name": "advancement_cost", "description": "Advancement requirement for agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "agenda_points": {"name": "agenda_points", "description": "Points given for scoring agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "card_text": {"name": "card_text", "description": "Card ability text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "flavor_text": {"name": "flavor_text", "description": "Flavor text on the card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "illustrator": {"name": "illustrator", "description": "Card illustrator name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "keywords_array": {"name": "keywords_array", "description": "Array of card keywords/subtypes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_agenda": {"name": "is_agenda", "description": "Whether the card is an agenda", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_ice": {"name": "is_ice", "description": "Whether the card is ICE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_identity": {"name": "is_identity", "description": "Whether the card is an identity card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/netrunner/stg_netrunner.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742249588.3163865, "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_cards\"", "raw_code": "/*\n  Model: stg_netrunner_cards\n  Description: Standardizes Netrunner card data from the raw source with faction and type enrichment\n  Sources:\n    - raw.netrunner_cards (primary)\n    - raw.netrunner_factions (joining for faction names)\n    - raw.netrunner_types (joining for type names)\n  \n  Note: This model combines and replaces the previous stg_netrunner.sql model.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        id,\n        code,\n        title,\n        type_code,\n        faction_code,\n        pack_code,\n        position,\n        quantity,\n        uniqueness AS is_unique_card, \n        deck_limit,\n        minimum_deck_size,\n        influence_limit,\n        base_link,\n        cost,\n        faction_cost,\n        flavor,\n        illustrator,\n        keywords,\n        memory_cost,\n        side_code,\n        strength,\n        text,\n        trash_cost,\n        advancement_cost,\n        agenda_points\n    FROM {{ source('netrunner', 'cards') }}\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT\n    -- Primary identifiers\n    r.id,\n    r.code,\n    r.title AS card_name,\n    \n    -- Card type & faction metadata (without joins)\n    r.type_code,\n    r.type_code AS type_name, -- Temporary placeholder instead of t.name\n    r.faction_code,\n    r.faction_code AS faction_name, -- Temporary placeholder instead of f.name\n    r.side_code,\n    \n    -- Pack information\n    r.pack_code,\n    r.position,\n    r.quantity,\n    \n    -- Rest of fields remain unchanged\n    r.is_unique_card,\n    r.deck_limit,\n    r.minimum_deck_size,\n    r.influence_limit,\n    r.base_link,\n    r.cost,\n    r.faction_cost AS influence_cost,\n    r.memory_cost,\n    r.strength,\n    r.trash_cost,\n    r.advancement_cost,\n    r.agenda_points,\n    r.text AS card_text,\n    r.flavor AS flavor_text,\n    r.illustrator,\n    \n    -- Parse keywords into array for easier analysis\n    CASE \n        WHEN r.keywords IS NULL OR r.keywords = '' THEN NULL\n        ELSE string_to_array(r.keywords, ' - ')\n    END AS keywords_array,\n    \n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM raw_data r\n-- Remove JOIN statements", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["card_id"], "time_spine": null}, "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cards_card_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cards_card_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cards_card_id"], "alias": "unique_stg_netrunner_cards_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742249588.3799546, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_id", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "unique", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_card_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_card_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_card_id"], "alias": "not_null_stg_netrunner_cards_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742249588.3815327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_id", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_title.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_title"], "alias": "not_null_stg_netrunner_cards_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742249588.3828268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "title", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_type_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_type_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_type_code"], "alias": "not_null_stg_netrunner_cards_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742249588.3842268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_code", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_faction_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_faction_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_faction_code"], "alias": "not_null_stg_netrunner_cards_faction_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742249588.385486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_code", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_netrunner_cards_side_code__corp__runner", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_netrunner_cards_side_code__corp__runner.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "accepted_values_stg_netrunner_cards_side_code__corp__runner"], "alias": "accepted_values_stg_netrunner_cards_side_code__corp__runner", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742249588.3871248, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["corp", "runner"], "column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69"}, "created_at": 1742249588.404262, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "cost", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6"}, "created_at": 1742249588.4120276, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "strength", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "strength", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44"}, "created_at": 1742249588.4155188, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "advancement_cost", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "advancement_cost", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0"], "alias": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07"}, "created_at": 1742249588.4190404, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agenda_points", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 3, "column_name": "agenda_points", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL"], "alias": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2"}, "created_at": 1742249588.4257116, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_agenda", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "is_agenda = false OR agenda_points IS NOT NULL", "column_name": "is_agenda", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL"], "alias": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89"}, "created_at": 1742249588.429752, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_ice", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "is_ice = false OR strength IS NOT NULL", "column_name": "is_ice", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_"], "alias": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118"}, "created_at": 1742249588.4336026, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "NOT (is_agenda = true AND side_code = 'runner')", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_"], "alias": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060"}, "created_at": 1742249588.437356, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "(advancement_cost IS NULL AND agenda_points IS NULL) OR (advancement_cost IS NOT NULL AND agenda_points IS NOT NULL)", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "model.nerd_facts_dbt.dim_netrunner_factions": {"database": "nerd_facts", "schema": "public", "name": "dim_netrunner_factions", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/dim_netrunner_factions.sql", "original_file_path": "models/marts/netrunner/dim_netrunner_factions.sql", "unique_id": "model.nerd_facts_dbt.dim_netrunner_factions", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "dim_netrunner_factions"], "alias": "dim_netrunner_factions", "checksum": {"name": "sha256", "checksum": "7eb9f0313a604d3e3b8ad089a0e662298870d10379f95c049bca67770b950a68"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742249688.8281708, "relation_name": "\"nerd_facts\".\"public\".\"dim_netrunner_factions\"", "raw_code": "/*\n  Model: dim_netrunner_factions\n  Description: Dimension table for Android: Netrunner factions\n  \n  Notes:\n  - Provides comprehensive faction information and classifications\n  - Includes card counts and distributions across types\n  - Adds gameplay style classification and meta position\n  - Contains faction metadata and visual styling attributes\n*/\n\nWITH faction_base AS (\n    SELECT DISTINCT\n        f.faction_code,\n        f.faction_name,\n        f.side_code,\n        f.side_name,\n        f.is_mini AS is_mini_faction,\n        f.color\n    FROM {{ ref('stg_netrunner_factions') }} f\n),\n\ncard_counts AS (\n    SELECT\n        faction_code,\n        COUNT(DISTINCT c.id) AS num_cards,  -- Added c. prefix to resolve ambiguity\n        COUNT(DISTINCT CASE WHEN type_name = 'Identity' THEN c.id END) AS num_identities,\n        COUNT(DISTINCT CASE WHEN type_name = 'ICE' THEN c.id END) AS num_ice,\n        COUNT(DISTINCT CASE WHEN type_name = 'Program' AND card_text ILIKE '%Icebreaker%' THEN c.id END) AS num_icebreakers,\n        COUNT(DISTINCT CASE WHEN type_name = 'Agenda' THEN c.id END) AS num_agendas,\n        COUNT(DISTINCT CASE WHEN type_name IN ('Event', 'Operation') THEN c.id END) AS num_events_operations,\n        COUNT(DISTINCT CASE WHEN card_text ILIKE '%gain%credit%' OR \n                              card_text ILIKE '%take%credit%' OR\n                              card_text ILIKE '%credit for each%' THEN c.id END) AS num_economy_cards,\n        -- Add first release date\n        MIN(p.release_date) AS first_release_date,\n        -- Add most recent card release date\n        MAX(p.release_date) AS latest_release_date\n    FROM {{ ref('stg_netrunner_cards') }} c\n    LEFT JOIN {{ ref('stg_netrunner_packs') }} p ON c.pack_code = p.code\n    GROUP BY faction_code\n)\n\nSELECT\n    -- Generate surrogate key\n    {{ dbt_utils.generate_surrogate_key(['f.faction_code']) }} AS faction_key,\n    \n    -- Primary identifiers\n    f.faction_code,\n    f.faction_name,\n    f.side_code,\n    f.side_name,\n    f.is_mini_faction,\n    f.color,\n    \n    -- Card statistics\n    COALESCE(c.num_cards, 0) AS num_cards,\n    COALESCE(c.num_identities, 0) AS num_identities,\n    COALESCE(c.num_ice, 0) AS num_ice,\n    COALESCE(c.num_icebreakers, 0) AS num_icebreakers,\n    COALESCE(c.num_agendas, 0) AS num_agendas,\n    COALESCE(c.num_events_operations, 0) AS num_events_operations,\n    COALESCE(c.num_economy_cards, 0) AS num_economy_cards,\n    \n    -- Dates\n    c.first_release_date,\n    c.latest_release_date,\n    \n    -- Faction tier based on card count with improved thresholds\n    CASE\n        WHEN COALESCE(c.num_cards, 0) > 120 THEN 'Major'\n        WHEN COALESCE(c.num_cards, 0) > 70 THEN 'Standard'\n        WHEN COALESCE(c.num_cards, 0) > 20 THEN 'Minor'\n        ELSE 'Mini'\n    END AS faction_tier,\n    \n    -- Faction type based on side and characteristics with improved pattern matching\n    CASE\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%jinteki%' THEN 'Trap Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%haas-bioroid%' THEN 'Economy Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%nbn%' THEN 'Tag Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%weyland%' THEN 'Damage Corp'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%anarch%' THEN 'Disruption Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%criminal%' THEN 'Economy Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%shaper%' THEN 'Rig-Builder Runner'\n        ELSE 'Specialized'\n    END AS play_style,\n    \n    -- Economic strength based on economy card percentage\n    CASE\n        WHEN COALESCE(c.num_cards, 0) = 0 THEN 'Unknown'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 20 THEN 'Strong Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 15 THEN 'Good Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 10 THEN 'Moderate Economy'\n        ELSE 'Weak Economy'\n    END AS economy_strength,\n    \n    -- Iconic identity card for this faction with more comprehensive matching\n    CASE\n        WHEN f.faction_code = 'jinteki' THEN 'Personal Evolution'\n        WHEN f.faction_code = 'haas-bioroid' THEN 'Engineering the Future'\n        WHEN f.faction_code = 'nbn' THEN 'Making News'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'Building a Better World'\n        WHEN f.faction_code = 'anarch' THEN 'Noise'\n        WHEN f.faction_code = 'criminal' THEN 'Gabriel Santiago'\n        WHEN f.faction_code = 'shaper' THEN 'Kate \"Mac\" McCaffrey'\n        WHEN f.faction_code = 'adam' THEN 'Adam: Compulsive Hacker'\n        WHEN f.faction_code = 'apex' THEN 'Apex: Invasive Predator'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny Lebeau: Security Specialist'\n        ELSE 'Various'\n    END AS iconic_identity,\n    \n    -- Release wave with expanded categories\n    CASE\n        WHEN f.faction_code IN ('haas-bioroid', 'jinteki', 'nbn', 'weyland-consortium', 'anarch', 'criminal', 'shaper') THEN 'Core Set'\n        WHEN f.faction_code IN ('adam', 'apex', 'sunny-lebeau') THEN 'Data and Destiny'\n        ELSE 'Expansion'\n    END AS release_category,\n    \n    -- Meta position\n    CASE\n        WHEN f.faction_code IN ('nbn', 'haas-bioroid', 'criminal', 'shaper') THEN 'Tier 1'\n        WHEN f.faction_code IN ('jinteki', 'weyland-consortium', 'anarch') THEN 'Tier 2'\n        ELSE 'Tier 3'\n    END AS meta_position,\n    \n    -- CSS classes for styling\n    'faction-' || f.faction_code AS faction_css_class,\n    \n    -- Add hex color code with # prefix if not already present\n    CASE\n        WHEN f.color IS NULL THEN '#000000'  -- Default black\n        WHEN f.color LIKE '#%' THEN f.color\n        ELSE '#' || f.color\n    END AS color_hex,\n    \n    -- Faction abbreviation\n    CASE\n        WHEN f.faction_code = 'haas-bioroid' THEN 'HB'\n        WHEN f.faction_code = 'jinteki' THEN 'J'\n        WHEN f.faction_code = 'nbn' THEN 'NBN'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'W'\n        WHEN f.faction_code = 'anarch' THEN 'A'\n        WHEN f.faction_code = 'criminal' THEN 'C'\n        WHEN f.faction_code = 'shaper' THEN 'S'\n        WHEN f.faction_code = 'adam' THEN 'Adam'\n        WHEN f.faction_code = 'apex' THEN 'Apex'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny'\n        ELSE SUBSTRING(f.faction_name, 1, 1)\n    END AS faction_abbr,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM faction_base f\nLEFT JOIN card_counts c ON f.faction_code = c.faction_code\nORDER BY f.side_name, COALESCE(c.num_cards, 0) DESC", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}, {"name": "stg_netrunner_cards", "package": null, "version": null}, {"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions", "model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_netrunner_cards": {"database": "nerd_facts", "schema": "public", "name": "fact_netrunner_cards", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/fact_netrunner_cards.sql", "original_file_path": "models/marts/netrunner/fact_netrunner_cards.sql", "unique_id": "model.nerd_facts_dbt.fact_netrunner_cards", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "fact_netrunner_cards"], "alias": "fact_netrunner_cards", "checksum": {"name": "sha256", "checksum": "3775671ebe6c6b6c5d6eeabfd417ef05133a061f7b072ba722f0e08e9734c5da"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742249912.523844, "relation_name": "\"nerd_facts\".\"public\".\"fact_netrunner_cards\"", "raw_code": "/*\n  Model: fact_netrunner_cards\n  Description: Fact table for Android: Netrunner cards with metrics and relationships\n  \n  Notes:\n  - Contains key metrics about card usage, efficiency, and value\n  - Links to dimension tables for cards, factions, packs, and types\n  - Includes derived metrics for cards such as cost efficiency and power indices\n  - Provides temporal context through release dates and rotation status\n  - Combines multiple data sources for comprehensive analysis\n*/\n\nWITH card_metrics AS (\n    -- Calculate and derive card-specific metrics\n    SELECT\n        c.code AS card_code,\n        c.id AS card_id,\n        c.card_name,\n        c.faction_code,\n        c.side_code,\n        c.type_name,\n        c.pack_code,\n        \n        -- Core card attributes - keep as text for now\n        c.cost,\n        c.strength,\n        c.advancement_cost,\n        c.agenda_points,\n        c.memory_cost,\n        c.trash_cost,\n        c.influence_cost,\n        \n        -- Calculate cost efficiency metrics with proper type casting\n        CASE \n            -- For ICE, calculate strength-to-cost ratio\n            WHEN c.type_name = 'ICE' AND c.cost::TEXT ~ '^[0-9]+$' AND c.cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            -- For Agendas, calculate points-to-advancement ratio\n            WHEN c.type_name = 'Agenda' AND c.advancement_cost::TEXT ~ '^[0-9]+$' \n                 AND c.advancement_cost::NUMERIC > 0 AND c.agenda_points IS NOT NULL \n                 AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.advancement_cost::NUMERIC), 2)\n            \n            -- For Programs/Hardware, basic cost efficiency if applicable\n            WHEN c.type_name IN ('Program', 'Hardware') AND c.cost::TEXT ~ '^[0-9]+$' \n                 AND c.cost::NUMERIC > 0 AND c.strength IS NOT NULL \n                 AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS cost_efficiency_ratio,\n        \n        -- Calculate text length (proxy for card complexity)\n        LENGTH(c.card_text) AS text_length,\n        \n        -- Calculate influence efficiency with safe type casting\n        CASE\n            WHEN c.influence_cost::TEXT ~ '^[0-9]+$' AND c.influence_cost::NUMERIC > 0 \n                 AND c.agenda_points IS NOT NULL AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.influence_cost::NUMERIC), 2)\n            \n            WHEN c.influence_cost::TEXT ~ '^[0-9]+$' AND c.influence_cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.influence_cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS influence_efficiency,\n        \n        -- Keywords count\n        CASE WHEN c.keywords_array IS NOT NULL \n             THEN ARRAY_LENGTH(c.keywords_array, 1) \n             ELSE 0 \n        END AS keyword_count,\n        \n        -- Reference pack info\n        p.release_date,\n        p.cycle_code,\n        \n        -- Simulated usage data - no type casting needed here\n        CASE\n            WHEN c.card_name IN ('Account Siphon', 'Desperado', 'SanSan City Grid', \n                              'Astroscript Pilot Program', 'Hedge Fund', 'Sure Gamble') THEN 95\n            WHEN c.pack_code = 'core' AND c.faction_code IS NOT NULL THEN 70\n            WHEN c.faction_code IS NULL THEN 30\n            WHEN p.cycle_code IN ('genesis', 'creation-and-control') THEN 60\n            WHEN p.release_date IS NULL THEN 20\n            WHEN DATE_PART('year', p.release_date) <= 2014 THEN 65\n            WHEN DATE_PART('year', p.release_date) <= 2016 THEN 50\n            ELSE 40\n        END AS popularity_score\n        \n    FROM {{ ref('stg_netrunner_cards') }} c\n    LEFT JOIN {{ ref('stg_netrunner_packs') }} p ON c.pack_code = p.code\n)\n\nSELECT\n    -- Primary keys and relationships\n    {{ dbt_utils.generate_surrogate_key(['cm.card_code']) }} AS card_fact_key,\n    cm.card_code,\n    cm.card_id,\n    \n    -- Foreign keys to dimension tables\n    {{ dbt_utils.generate_surrogate_key(['cm.card_code']) }} AS card_key,\n    {{ dbt_utils.generate_surrogate_key(['cm.faction_code']) }} AS faction_key,\n    {{ dbt_utils.generate_surrogate_key(['cm.pack_code']) }} AS pack_key,\n    {{ dbt_utils.generate_surrogate_key(['cm.side_code', 'cm.type_name']) }} AS card_type_key,\n    \n    -- Essential card attributes \n    cm.card_name,\n    cm.faction_code,\n    cm.side_code,\n    cm.type_name,\n    cm.pack_code,\n    \n    -- Core card metrics with safe type handling\n    CASE WHEN cm.cost::TEXT ~ '^[0-9]+$' THEN cm.cost::INTEGER ELSE 0 END AS cost,\n    CASE WHEN cm.strength::TEXT ~ '^[0-9\\.]+$' THEN cm.strength::NUMERIC ELSE 0 END AS strength,\n    CASE WHEN cm.advancement_cost::TEXT ~ '^[0-9]+$' THEN cm.advancement_cost::INTEGER ELSE 0 END AS advancement_requirement,\n    CASE WHEN cm.agenda_points::TEXT ~ '^[0-9]+$' THEN cm.agenda_points::INTEGER ELSE 0 END AS agenda_points,\n    CASE WHEN cm.memory_cost::TEXT ~ '^[0-9]+$' THEN cm.memory_cost::INTEGER ELSE 0 END AS memory_cost,\n    CASE WHEN cm.trash_cost::TEXT ~ '^[0-9]+$' THEN cm.trash_cost::INTEGER ELSE 0 END AS trash_cost,\n    \n    -- Calculated metrics\n    cm.cost_efficiency_ratio,\n    cm.text_length AS complexity_score,\n    cm.influence_efficiency,\n    cm.keyword_count,\n    \n    -- Usage and popularity metrics\n    cm.popularity_score,\n    CASE\n        WHEN cm.popularity_score >= 80 THEN 'Meta Defining'\n        WHEN cm.popularity_score >= 60 THEN 'Staple'\n        WHEN cm.popularity_score >= 40 THEN 'Playable'\n        ELSE 'Niche'\n    END AS popularity_tier,\n    \n    -- Deck construction significance\n    CASE\n        WHEN cm.card_name IN ('Hedge Fund', 'Sure Gamble', 'IPO', 'Dirty Laundry') THEN 'Auto-include'\n        WHEN cm.popularity_score >= 75 THEN 'High Impact'\n        WHEN cm.popularity_score >= 50 THEN 'Medium Impact'\n        ELSE 'Low Impact'\n    END AS deck_impact,\n    \n    -- Time dimensions\n    cm.release_date,\n    cm.cycle_code,\n    CASE \n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin') THEN 'First Rotation'\n        WHEN cm.cycle_code IN ('lunar', 'order-and-chaos', 'sansan', 'mumbad') THEN 'Second Rotation'\n        ELSE 'Current'\n    END AS rotation_group,\n    \n    -- Card pool status (current as of 2025)\n    CASE\n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin', \n                           'lunar', 'order-and-chaos', 'sansan', 'mumbad',\n                           'flashpoint', 'red-sand') THEN 'Rotated'\n        WHEN cm.cycle_code IN ('terminal-directive', 'core2', 'kitara', 'reign-and-reverie') THEN 'Standard'\n        WHEN cm.cycle_code IS NULL THEN 'Unknown'\n        ELSE 'Standard'\n    END AS card_pool_status,\n    \n    -- Card value index (composite score)\n    ROUND(\n        (COALESCE(cm.popularity_score, 0) * 0.6) + \n        (COALESCE(cm.cost_efficiency_ratio, 0) * 20) +\n        (CASE WHEN cm.type_name = 'Identity' THEN 30 ELSE 0 END) +\n        (CASE WHEN cm.card_name IN ('Account Siphon', 'Astroscript Pilot Program', 'Jackson Howard') THEN 40 ELSE 0 END)\n    ) AS card_value_index,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM card_metrics cm", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}, {"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fct_netrunner_card_power": {"database": "nerd_facts", "schema": "public", "name": "fct_netrunner_card_power", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/fct_netrunner_card_power.sql", "original_file_path": "models/marts/netrunner/fct_netrunner_card_power.sql", "unique_id": "model.nerd_facts_dbt.fct_netrunner_card_power", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "fct_netrunner_card_power"], "alias": "fct_netrunner_card_power", "checksum": {"name": "sha256", "checksum": "7de757497b70e1e17dc0e6ea92244cabba05db30321b6c64d328f7ca79eb5d52"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742250485.293887, "relation_name": "\"nerd_facts\".\"public\".\"fct_netrunner_card_power\"", "raw_code": "/*\n  Model: fct_netrunner_card_power (Simplified)\n  Description: Basic version of card power metrics\n*/\n\nWITH card_base AS (\n    SELECT\n        code AS card_code,\n        id AS card_id,\n        card_name,  \n        type_name,  \n        side_code,\n        faction_code,\n        faction_name,\n        pack_code\n    FROM {{ ref('stg_netrunner_cards') }}\n    WHERE code IS NOT NULL\n)\n\nSELECT\n    -- Generate surrogate key for fact table\n    {{ dbt_utils.generate_surrogate_key(['c.card_code']) }} AS card_power_key,\n    \n    -- Foreign keys\n    {{ dbt_utils.generate_surrogate_key(['c.card_code']) }} AS card_key,\n    {{ dbt_utils.generate_surrogate_key(['c.faction_code']) }} AS faction_key,\n    {{ dbt_utils.generate_surrogate_key(['c.pack_code']) }} AS pack_key,\n    {{ dbt_utils.generate_surrogate_key(['c.side_code', 'c.type_name']) }} AS card_type_key,\n    \n    -- Card identifiers\n    c.card_code,\n    c.card_id,\n    c.card_name,\n    c.type_name,\n    c.faction_code,\n    c.faction_name,\n    c.side_code,\n    c.pack_code,\n    \n    -- Card timing classification (simple)\n    CASE\n        WHEN c.type_name IN ('Event', 'Operation') THEN 'One-time'\n        WHEN c.type_name IN ('Asset', 'Resource', 'Hardware', 'Program') THEN 'Permanent'\n        WHEN c.type_name = 'ICE' THEN 'Defensive'\n        WHEN c.type_name = 'Agenda' THEN 'Objective'\n        ELSE 'Other'\n    END AS card_timing,\n    \n    -- Simple power level classification (no calculations)\n    CASE\n        WHEN c.card_name IN ('Account Siphon', 'Corroder', 'Medium', 'Parasite', \n                           'SanSan City Grid', 'Astroscript Pilot Program', 'Desperado',\n                           'Sure Gamble', 'Hedge Fund', 'Jackson Howard') THEN 'High'\n        WHEN c.type_name IN ('Identity', 'Console') THEN 'High'\n        ELSE 'Standard'\n    END AS power_level,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM card_base c\nORDER BY c.side_code, c.faction_code, c.card_name", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_characters": {"database": "nerd_facts", "schema": "public", "name": "dim_characters", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/core/dim_characters.sql", "original_file_path": "models/marts/core/dim_characters.sql", "unique_id": "model.nerd_facts_dbt.dim_characters", "fqn": ["nerd_facts_dbt", "marts", "core", "dim_characters"], "alias": "dim_characters", "checksum": {"name": "sha256", "checksum": "93e7aee4b4009edd027052855f1b0b2a43dd8eaa34aac73cf2c64982161e15aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742251327.0601716, "relation_name": "\"nerd_facts\".\"public\".\"dim_characters\"", "raw_code": "/*\n  Model: dim_characters (Ultra-simplified)\n  Description: Minimal character dimension table\n*/\n\n-- Star Wars characters with hardcoded surrogate key inputs\nSELECT\n    {{ dbt_utils.generate_surrogate_key([\"'star_wars'\", 'id']) }} AS character_key,\n    'star_wars' AS universe,\n    id::TEXT AS character_source_id,  -- Cast to TEXT\n    name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_swapi_people') }}\n\nUNION ALL\n\n-- Pokemon with hardcoded surrogate key inputs\nSELECT\n    {{ dbt_utils.generate_surrogate_key([\"'pokemon'\", 'id']) }} AS character_key,\n    'pokemon' AS universe,\n    id::TEXT AS character_source_id,  -- Cast to TEXT\n    name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_pokeapi_pokemon') }}\n\nUNION ALL\n\n-- Netrunner with hardcoded surrogate key inputs\nSELECT\n    {{ dbt_utils.generate_surrogate_key([\"'netrunner'\", 'code']) }} AS character_key,\n    'netrunner' AS universe,\n    code AS character_source_id,  -- Already TEXT\n    card_name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_netrunner_cards') }}\nWHERE type_name = 'Identity'", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_locations": {"database": "nerd_facts", "schema": "public", "name": "dim_locations", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/core/dim_locations.sql", "original_file_path": "models/marts/core/dim_locations.sql", "unique_id": "model.nerd_facts_dbt.dim_locations", "fqn": ["nerd_facts_dbt", "marts", "core", "dim_locations"], "alias": "dim_locations", "checksum": {"name": "sha256", "checksum": "a7829308c2532d9d417d888caeb9df6a7bcb591c570abe56bf53642b9cdc8956"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742251525.5641189, "relation_name": "\"nerd_facts\".\"public\".\"dim_locations\"", "raw_code": "/*\n  Model: dim_locations (Simplified)\n  Description: Basic location dimension table with consistent TEXT types\n*/\n\nWITH sw_planets_minimal AS (\n    SELECT\n        'sw_' || id AS source_id,\n        'star_wars' AS universe,\n        planet_name AS location_name,\n        'Planet' AS location_type,\n        diameter::TEXT,  -- Cast to TEXT\n        rotation_period::TEXT,  -- Cast to TEXT\n        orbital_period::TEXT,  -- Cast to TEXT\n        gravity,\n        population::TEXT,  -- Cast to TEXT\n        climate,\n        terrain,\n        surface_water::TEXT  -- Cast to TEXT\n    FROM {{ ref('stg_swapi_planets') }}\n),\n\npokemon_regions_minimal AS (\n    -- Extract distinct regions from Pok\u00e9mon data with minimal fields\n    SELECT DISTINCT\n        'pkm_' || {{ dbt_utils.generate_surrogate_key(['region']) }} AS source_id,\n        'pokemon' AS universe,\n        region AS location_name,\n        'Region' AS location_type,\n        NULL::TEXT AS diameter,  -- Cast NULL to TEXT\n        NULL::TEXT AS rotation_period,  -- Cast NULL to TEXT\n        NULL::TEXT AS orbital_period,  -- Cast NULL to TEXT\n        '1 standard' AS gravity,\n        CASE  \n            WHEN region = 'Kanto' THEN '10000000'\n            ELSE '5000000'\n        END AS population,  -- String literals\n        'varied' AS climate,\n        'varied' AS terrain,\n        '30' AS surface_water  -- String literal\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE region IS NOT NULL\n),\n\nnetrunner_locations_minimal AS (\n    -- Create minimal Netrunner locations with text values\n    SELECT * FROM (VALUES\n        ('nr_1001', 'netrunner', 'New Angeles', 'Megacity', NULL::TEXT, NULL::TEXT, NULL::TEXT, 'high', '500000000', 'temperate', 'urban', '10'),\n        ('nr_1002', 'netrunner', 'The Moon', 'Colony', '3474', '27.3', '27.3', 'low', '5000000', 'artificial', 'lunar', '0')\n    ) AS v(source_id, universe, location_name, location_type, diameter, rotation_period, \n           orbital_period, gravity, population, climate, terrain, surface_water)\n)\n\n-- Rest of query remains the same\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['universe', 'source_id']) }} AS location_key,\n    source_id,\n    universe,\n    location_name,\n    location_type,\n    diameter,\n    rotation_period,\n    orbital_period,\n    gravity,\n    population,\n    climate,\n    terrain,\n    surface_water,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_planets_minimal\n    UNION ALL\n    SELECT * FROM pokemon_regions_minimal\n    UNION ALL\n    SELECT * FROM netrunner_locations_minimal\n) AS all_locations\nORDER BY universe, location_name", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets", "model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fct_power_ratings": {"database": "nerd_facts", "schema": "public", "name": "fct_power_ratings", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/core/fct_power_ratings.sql", "original_file_path": "models/marts/core/fct_power_ratings.sql", "unique_id": "model.nerd_facts_dbt.fct_power_ratings", "fqn": ["nerd_facts_dbt", "marts", "core", "fct_power_ratings"], "alias": "fct_power_ratings", "checksum": {"name": "sha256", "checksum": "54b1e8aec56b21bc6f14ba33cf3b164c692df0f14bc542ae045540291f6bf951"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/nerd_facts_dbt/models/marts/core/fct_power_ratings.sql", "unrendered_config": {"materialized": "table"}, "created_at": 1742251845.8296661, "relation_name": "\"nerd_facts\".\"public\".\"fct_power_ratings\"", "raw_code": "/*\n  Model: fct_power_ratings (Ultra-Simplified)\n  Description: Basic power metrics across universes with consistent types\n*/\n\nWITH sw_power AS (\n    SELECT\n        {{ dbt_utils.generate_surrogate_key([\"'star_wars'\", 'p.id::TEXT']) }} AS character_key,\n        'star_wars' AS universe,\n        p.id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE WHEN p.force_sensitive THEN 'true' ELSE 'false' END AS has_special_abilities  -- Use CASE instead of COALESCE\n    FROM {{ ref('stg_swapi_people') }} p\n),\n\npokemon_power AS (\n    SELECT\n        {{ dbt_utils.generate_surrogate_key([\"'pokemon'\", 'p.id::TEXT']) }} AS character_key,\n        'pokemon' AS universe,\n        p.id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'true' AS has_special_abilities  -- String literal instead of boolean\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n),\n\nnetrunner_power AS (\n    SELECT\n        {{ dbt_utils.generate_surrogate_key([\"'netrunner'\", 'c.code']) }} AS character_key,\n        'netrunner' AS universe,\n        c.code AS character_source_id,\n        c.card_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE \n            WHEN c.is_unique_card IS NULL THEN 'false'\n            -- Compare as text instead of using as boolean\n            WHEN c.is_unique_card = 'true' OR c.is_unique_card = 't' OR c.is_unique_card = '1' THEN 'true' \n            ELSE 'false' \n        END AS has_special_abilities\n    FROM {{ ref('stg_netrunner_cards') }} c\n    WHERE c.type_name = 'Identity'  -- Only include identity cards\n)\n\n-- Simply combine all data with minimal processing\nSELECT\n    character_key,\n    universe,\n    character_source_id,\n    character_name,\n    base_power,\n    mobility,\n    battle_experience,\n    has_special_abilities,\n    \n    -- Simple power score (all equal for now)\n    3 AS normalized_power_score,\n    \n    -- Simplified tier (all equal)\n    'C-Tier' AS power_tier,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_power\n    UNION ALL\n    SELECT * FROM pokemon_power\n    UNION ALL\n    SELECT * FROM netrunner_power\n) AS combined_power", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/core/fct_power_ratings.sql", "compiled": true, "compiled_code": "/*\n  Model: fct_power_ratings (Ultra-Simplified)\n  Description: Basic power metrics across universes with consistent types\n*/\n\nWITH sw_power AS (\n    SELECT\n        md5(cast(coalesce(cast('star_wars' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'star_wars' AS universe,\n        p.id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE WHEN p.force_sensitive THEN 'true' ELSE 'false' END AS has_special_abilities  -- Use CASE instead of COALESCE\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_people\" p\n),\n\npokemon_power AS (\n    SELECT\n        md5(cast(coalesce(cast('pokemon' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'pokemon' AS universe,\n        p.id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'true' AS has_special_abilities  -- String literal instead of boolean\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n),\n\nnetrunner_power AS (\n    SELECT\n        md5(cast(coalesce(cast('netrunner' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(c.code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'netrunner' AS universe,\n        c.code AS character_source_id,\n        c.card_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE \n            WHEN c.is_unique_card IS NULL THEN 'false'\n            -- Compare as text instead of using as boolean\n            WHEN c.is_unique_card = 'true' OR c.is_unique_card = 't' OR c.is_unique_card = '1' THEN 'true' \n            ELSE 'false' \n        END AS has_special_abilities\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    WHERE c.type_name = 'Identity'  -- Only include identity cards\n)\n\n-- Simply combine all data with minimal processing\nSELECT\n    character_key,\n    universe,\n    character_source_id,\n    character_name,\n    base_power,\n    mobility,\n    battle_experience,\n    has_special_abilities,\n    \n    -- Simple power score (all equal for now)\n    3 AS normalized_power_score,\n    \n    -- Simplified tier (all equal)\n    'C-Tier' AS power_tier,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_power\n    UNION ALL\n    SELECT * FROM pokemon_power\n    UNION ALL\n    SELECT * FROM netrunner_power\n) AS combined_power", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}}, "sources": {"source.nerd_facts_dbt.pokeapi.moves": {"database": "nerd_facts", "schema": "raw", "name": "moves", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.moves", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "moves"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_moves", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon moves including power, accuracy, and effect text", "columns": {"id": {"name": "id", "description": "Primary key for the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_moves\"", "created_at": 1742217558.1320987, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.pokemon": {"database": "nerd_facts", "schema": "raw", "name": "pokemon", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.pokemon", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "pokemon"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_pokemon", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon species, types, and stats", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_pokemon\"", "created_at": 1742217558.1331508, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.types": {"database": "nerd_facts", "schema": "raw", "name": "types", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.types", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "types"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon elemental types and effectiveness", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_types\"", "created_at": 1742217558.1332867, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.abilities": {"database": "nerd_facts", "schema": "raw", "name": "abilities", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.abilities", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "abilities"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_abilities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon abilities and effects", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_abilities\"", "created_at": 1742217558.1334078, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.items": {"database": "nerd_facts", "schema": "raw", "name": "items", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.items", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "items"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_items", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about items in the Pokemon games", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_items\"", "created_at": 1742217558.133541, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.generations": {"database": "nerd_facts", "schema": "raw", "name": "generations", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.generations", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "generations"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_generations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about different generations of Pokemon games", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_generations\"", "created_at": 1742217558.133652, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.locations": {"database": "nerd_facts", "schema": "raw", "name": "locations", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.locations", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "locations"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_locations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about locations in the Pokemon world", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_locations\"", "created_at": 1742217558.1337607, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.cards": {"database": "nerd_facts", "schema": "raw", "name": "cards", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/netrunner_sources.yml", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.cards", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "cards"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "", "identifier": "netrunner_cards", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Android: Netrunner cards", "columns": {"code": {"name": "code", "description": "Unique card code identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Card name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_code": {"name": "type_code", "description": "Code reference to card type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_code": {"name": "faction_code", "description": "Code reference to card faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Reference to card side (corp/runner)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_code": {"name": "pack_code", "description": "Code reference to the data pack containing the card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "text": {"name": "text", "description": "Card ability text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost": {"name": "cost", "description": "Card play/rez cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "strength": {"name": "strength", "description": "ICE/breaker strength value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "advancement_cost": {"name": "advancement_cost", "description": "Advancement requirement for agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "agenda_points": {"name": "agenda_points", "description": "Points given for scoring agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_cards\"", "created_at": 1742217558.1378038, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.factions": {"database": "nerd_facts", "schema": "raw", "name": "factions", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/netrunner_sources.yml", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.factions", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "factions"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "", "identifier": "netrunner_factions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Faction definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique faction code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Faction name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Corp/Runner side indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_factions\"", "created_at": 1742217558.1417525, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.types": {"database": "nerd_facts", "schema": "raw", "name": "types", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/netrunner_sources.yml", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.types", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "types"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "", "identifier": "netrunner_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Card type definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Type name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_types\"", "created_at": 1742217558.1457117, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.packs": {"database": "nerd_facts", "schema": "raw", "name": "packs", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/netrunner_sources.yml", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.packs", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "packs"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "", "identifier": "netrunner_packs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Data pack definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique pack code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Pack name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_code": {"name": "cycle_code", "description": "Code for the cycle this pack belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "date_release": {"name": "date_release", "description": "Release date of the pack", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_packs\"", "created_at": 1742217558.1487648, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.cycles": {"database": "nerd_facts", "schema": "raw", "name": "cycles", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/netrunner_sources.yml", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.cycles", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "cycles"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "", "identifier": "netrunner_cycles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Cycle definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique cycle code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Cycle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "position": {"name": "position", "description": "Cycle release order position", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_cycles\"", "created_at": 1742217558.1523402, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.subtypes": {"database": "nerd_facts", "schema": "raw", "name": "subtypes", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/netrunner_sources.yml", "original_file_path": "models/staging/netrunner/netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.subtypes", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "subtypes"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "", "identifier": "netrunner_subtypes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Subtype definitions for Android: Netrunner (derived from keywords)", "columns": {"code": {"name": "code", "description": "Unique subtype code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Subtype name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_subtypes\"", "created_at": 1742217558.1541727, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.starships": {"database": "nerd_facts", "schema": "raw", "name": "starships", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.starships", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "starships"], "source_name": "swapi", "source_description": "Star Wars API data source", "loader": "", "identifier": "swapi_starships", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars starships", "columns": {"id": {"name": "id", "description": "Primary key for starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Starship model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Company that manufactured the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_credits": {"name": "cost_in_credits", "description": "Purchase cost in galactic credits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Starship length in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum atmospheric speed in km/h", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Maximum passenger capacity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in kg", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Length of time the starship can sustain crew without resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hyperdrive_rating": {"name": "hyperdrive_rating", "description": "Hyperdrive class rating (lower is better)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "MGLT": {"name": "MGLT", "description": "Maximum speed in megalights per hour", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_class": {"name": "starship_class", "description": "Class of the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSON array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_names": {"name": "pilot_names", "description": "Array of pilot names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film names this starship appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the starship data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_starships\"", "created_at": 1742217558.1589386, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.films": {"database": "nerd_facts", "schema": "raw", "name": "films", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.films", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "films"], "source_name": "swapi", "source_description": "Star Wars API data source", "loader": "", "identifier": "swapi_films", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars films", "columns": {"id": {"name": "id", "description": "Primary key for film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Film title", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "episode_id": {"name": "episode_id", "description": "Episode number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "opening_crawl": {"name": "opening_crawl", "description": "Opening crawl text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "director": {"name": "director", "description": "Film director", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "producer": {"name": "producer", "description": "Film producer(s)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "Film release date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "characters": {"name": "characters", "description": "JSON array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people": {"name": "people", "description": "Alternative name for characters array", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planets": {"name": "planets", "description": "JSON array of planet references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starships": {"name": "starships", "description": "JSON array of starship references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles": {"name": "vehicles", "description": "JSON array of vehicle references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "JSON array of species references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "character_names": {"name": "character_names", "description": "Array of character names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planet_names": {"name": "planet_names", "description": "Array of planet names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_names": {"name": "species_names", "description": "Array of species names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_names": {"name": "starship_names", "description": "Array of starship names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_names": {"name": "vehicle_names", "description": "Array of vehicle names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the film data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_films\"", "created_at": 1742217558.1658823, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.people": {"database": "nerd_facts", "schema": "raw", "name": "people", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.people", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "people"], "source_name": "swapi", "source_description": "Star Wars API data source", "loader": "", "identifier": "swapi_people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars characters", "columns": {"id": {"name": "id", "description": "Primary key for character", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Character name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "mass": {"name": "mass", "description": "Mass in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_color": {"name": "hair_color", "description": "Character hair color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_color": {"name": "skin_color", "description": "Character skin color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_color": {"name": "eye_color", "description": "Character eye color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "birth_year": {"name": "birth_year", "description": "Birth year (BBY/ABY notation)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gender": {"name": "gender", "description": "Character gender", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld": {"name": "homeworld", "description": "Reference to character homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "appearances": {"name": "appearances", "description": "Alternative name for films array", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "JSON array of species references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles": {"name": "vehicles", "description": "JSON array of vehicle references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starships": {"name": "starships", "description": "JSON array of starship references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film names this character appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_names": {"name": "species_names", "description": "Array of species names this character belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_names": {"name": "vehicle_names", "description": "Array of vehicle names this character pilots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_names": {"name": "starship_names", "description": "Array of starship names this character pilots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the character data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_people\"", "created_at": 1742217558.1711252, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.planets": {"database": "nerd_facts", "schema": "raw", "name": "planets", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.planets", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "planets"], "source_name": "swapi", "source_description": "Star Wars API data source", "loader": "", "identifier": "swapi_planets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars planets", "columns": {"id": {"name": "id", "description": "Primary key for planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Planet name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rotation_period": {"name": "rotation_period", "description": "Time in hours for planet to complete one rotation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "orbital_period": {"name": "orbital_period", "description": "Time in days for planet to complete one orbit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "diameter": {"name": "diameter", "description": "Planet diameter in kilometers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "climate": {"name": "climate", "description": "Climate types on the planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gravity": {"name": "gravity", "description": "Gravitational force relative to standard", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "terrain": {"name": "terrain", "description": "Terrain types on the planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "surface_water": {"name": "surface_water", "description": "Percentage of planet covered by water", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "population": {"name": "population", "description": "Planet population count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "residents": {"name": "residents", "description": "JSON array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "resident_names": {"name": "resident_names", "description": "Array of resident names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film names this planet appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the planet data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_planets\"", "created_at": 1742217558.1750412, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.species": {"database": "nerd_facts", "schema": "raw", "name": "species", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.species", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "species"], "source_name": "swapi", "source_description": "Star Wars API data source", "loader": "", "identifier": "swapi_species", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars species", "columns": {"id": {"name": "id", "description": "Primary key for species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Species name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification": {"name": "classification", "description": "Species biological classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "designation": {"name": "designation", "description": "Species cognitive designation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_height": {"name": "average_height", "description": "Average height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_lifespan": {"name": "average_lifespan", "description": "Average lifespan in years", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_colors": {"name": "eye_colors", "description": "Comma-separated list of common eye colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_colors": {"name": "hair_colors", "description": "Comma-separated list of common hair colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_colors": {"name": "skin_colors", "description": "Comma-separated list of common skin colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld": {"name": "homeworld", "description": "Reference to species homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "language": {"name": "language", "description": "Primary language spoken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people": {"name": "people", "description": "JSON array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people_names": {"name": "people_names", "description": "Array of character names of this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film names this species appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the species data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_species\"", "created_at": 1742217558.179008, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.vehicles": {"database": "nerd_facts", "schema": "raw", "name": "vehicles", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.vehicles", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "vehicles"], "source_name": "swapi", "source_description": "Star Wars API data source", "loader": "", "identifier": "swapi_vehicles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars vehicles", "columns": {"id": {"name": "id", "description": "Primary key for vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Vehicle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Vehicle model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Company that manufactured the vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_credits": {"name": "cost_in_credits", "description": "Purchase cost in galactic credits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Vehicle length in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum atmospheric speed in km/h", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Maximum passenger capacity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in kg", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Length of time the vehicle can sustain crew without resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_class": {"name": "vehicle_class", "description": "Class of the vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSON array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_names": {"name": "pilot_names", "description": "Array of pilot names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Array of film names this vehicle appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the vehicle data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_vehicles\"", "created_at": 1742217558.1835847, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_people": {"database": "nerd_facts", "schema": "raw", "name": "swapi_people", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_people", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_people"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_people\"", "created_at": 1742217558.1837282, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_planets": {"database": "nerd_facts", "schema": "raw", "name": "swapi_planets", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_planets", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_planets"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_planets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_planets\"", "created_at": 1742217558.1838472, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_starships": {"database": "nerd_facts", "schema": "raw", "name": "swapi_starships", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_starships", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_starships"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_starships", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_starships\"", "created_at": 1742217558.1839585, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_vehicles": {"database": "nerd_facts", "schema": "raw", "name": "swapi_vehicles", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_vehicles", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_vehicles"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_vehicles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_vehicles\"", "created_at": 1742217558.1840672, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_species": {"database": "nerd_facts", "schema": "raw", "name": "swapi_species", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_species", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_species"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_species", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_species\"", "created_at": 1742217558.184176, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_films": {"database": "nerd_facts", "schema": "raw", "name": "swapi_films", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_films", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_films"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_films", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_films\"", "created_at": 1742217558.1842828, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_pokemon": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_pokemon", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_pokemon", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_pokemon"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_pokemon", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_pokemon\"", "created_at": 1742217558.1843972, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_types": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_types", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_types", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_types"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_types\"", "created_at": 1742217558.1845062, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_abilities": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_abilities", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_abilities", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_abilities"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_abilities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_abilities\"", "created_at": 1742217558.1846209, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_moves": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_moves", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_moves", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_moves"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_moves", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_moves\"", "created_at": 1742217558.184729, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_items": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_items", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_items", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_items"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_items", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_items\"", "created_at": 1742217558.1848366, "unrendered_database": null, "unrendered_schema": "raw"}}, "macros": {"macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3571043, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3579793, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3584135, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3588238, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.359531, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3602724, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3605623, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3611426, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3617527, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3628824, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3631377, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.363662, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.364122, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3648226, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3654532, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3662217, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3664799, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3666296, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3668535, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3670387, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3687284, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3694346, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.369729, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3699758, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3701828, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3703845, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3705983, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3715217, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3717432, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3724608, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {"name": "postgres__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql", "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) %}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"dbt-postgres 'microbatch' requires a `unique_key` config\") }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql", "macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.373014, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }}\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = {{ target }}.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and ({{ target }}.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ target }}.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and {{ target }}.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3745744, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3754692, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3757124, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3760004, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3769066, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3777106, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.378175, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.378574, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.378766, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3789492, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.37917, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3797193, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3803837, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3805673, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3807902, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.38129, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3815005, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3842533, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3845675, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3852348, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.385858, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3861742, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3868306, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.387208, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3875809, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3879452, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.388333, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3887227, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3898132, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.390065, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3902512, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3904333, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3906176, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3933454, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3953607, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.395868, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.396196, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3978684, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3981676, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.3989935, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4022067, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4030378, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4033484, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4035888, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.403958, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4041944, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4045568, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.404795, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4051223, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4053748, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4055877, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4059021, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4061267, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.40649, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4076216, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4085405, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4096062, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.409914, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4108377, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4166324, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.418216, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4208472, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4212832, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.422247, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4225836, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4234202, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.42491, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4264817, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4280941, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4291651, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4299388, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4303162, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4305396, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4336197, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.433967, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4341264, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4360647, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.436747, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4371448, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.437411, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4382145, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.441133, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4415932, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.442095, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4446955, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4449215, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.445216, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.446502, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4467313, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4469545, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4487593, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4821048, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4829206, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4843812, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4875176, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4880364, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.488315, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4884696, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4887123, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4889095, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4892535, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4896965, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4956012, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4958944, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4965794, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.49714, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.497925, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4984887, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4988563, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.4993238, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5000715, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5003548, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.500634, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.505887, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5091326, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.510357, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5115256, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5118282, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5124805, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5127282, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5129066, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5130932, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5132477, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.513476, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.513637, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5142493, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5144856, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.51614, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5179338, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5188916, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5193362, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5202703, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.521791, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.522741, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5230389, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5265343, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5274844, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5289257, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5292058, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.529339, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.530251, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5304756, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5309677, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5313523, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.531664, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5320768, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5323198, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5325603, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.532879, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5335884, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5338964, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5340824, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5345113, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5347605, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.534971, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5352156, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5357013, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5359385, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5362782, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.536649, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5369475, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5375316, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5377302, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5379186, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5380585, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5385947, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5388134, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5389166, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5391269, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5393434, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5399194, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5404577, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5407279, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5411344, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5425293, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5427458, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5432372, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5435398, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5438356, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5440836, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5456538, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5462353, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5465465, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5471208, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5475066, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5486267, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.549052, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5504365, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5511491, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5514443, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5517867, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.55207, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5525243, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5534353, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.554766, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5552094, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.555548, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5559733, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.556276, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5565405, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.556842, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.557259, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5576205, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5581284, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5584297, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5586917, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5589914, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.559272, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5595539, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.559805, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5601428, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5605114, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5612977, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5615566, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.561828, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5624924, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5627992, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5630279, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.563274, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5634434, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.564835, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5649953, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.565212, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5653622, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5658216, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5660627, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5662203, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5665061, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5668523, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.567157, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5674355, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5677266, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5685873, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5688279, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5691428, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5694463, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5709362, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.571695, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.575575, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5763009, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5767503, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5772195, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5777438, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5782247, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5790708, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5792887, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5804048, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5809393, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5816886, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5822914, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5823927, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5828273, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5831559, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5834959, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5838072, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5842528, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5845234, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5849307, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5852854, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.586156, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5884984, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5890176, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5893667, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.590116, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5907614, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5910666, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5914066, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5917313, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.592471, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5931876, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5935524, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5940642, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.594671, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5954196, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5958493, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5960894, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.596483, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.596692, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5971186, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5978425, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5988588, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5991678, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.5998986, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6010494, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6017513, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.601998, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6022327, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6029177, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6031647, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6035411, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.603733, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.604121, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6042957, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6046302, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6048212, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6051238, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6052864, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.605645, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6059246, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6062658, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6064487, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.607373, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.607533, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6082103, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6084275, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.608601, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6102438, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6107423, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.611189, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.611863, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6120648, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6135898, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6138568, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6141648, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6144867, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6146507, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6149843, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6151772, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6156402, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6158488, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6160784, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6166475, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6169696, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6171775, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6177356, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6182628, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6185064, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6191735, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.61954, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6197097, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.620022, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.620164, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.620565, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6207154, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.621065, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.621249, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6217272, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6219459, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6222389, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.622718, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6230314, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6233904, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6235716, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6238844, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.624023, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6243286, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6244895, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6249, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6252933, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6256747, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6258574, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.62625, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6265678, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6269546, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6271453, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6280184, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6282175, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6284306, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6286292, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6288364, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6290293, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6292355, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6294756, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.629689, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6298795, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6300845, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6302707, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6304777, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.63067, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.631312, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6321635, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.632468, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6329384, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.633263, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6334026, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6338103, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.63403, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6345997, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.635137, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6355374, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6357577, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6360452, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6361537, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6364844, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6366968, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6370933, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.637438, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6376388, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6379945, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6381662, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.638451, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6386623, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6390846, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6396058, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6400878, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.64032, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6407557, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6409817, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6416361, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.641968, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6423576, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.642728, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6430838, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6433864, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6445765, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6450055, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6452775, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6456478, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.645877, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6465502, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6475313, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6479285, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6483426, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6487815, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6496184, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6500058, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6505833, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6510441, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6514454, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.651909, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6523771, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6530545, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.654329, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.654901, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6562407, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6569943, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.657712, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6584446, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6598337, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6605659, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6618757, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.66242, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.663261, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6637635, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6642118, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6656628, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.670712, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.671277, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6718795, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.672493, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.673624, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.674159, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6746676, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6752672, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.675711, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.676735, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6787763, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6794696, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6805148, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6810718, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6816092, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6818526, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6825204, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6829627, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6837275, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.685154, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6896794, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6902156, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6905863, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6914968, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6932874, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6937392, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6944234, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6961436, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6966414, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6975505, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6984937, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6991475, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6995392, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.6998718, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7004817, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.701247, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7018802, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.702359, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7027607, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7032053, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7036245, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7043152, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7049048, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.705993, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7064152, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7065964, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7067747, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7069561, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7075179, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7081115, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7083611, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7088156, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7096646, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7104003, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7106905, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7109194, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7112696, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7115374, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.711762, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7119896, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7129729, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7153366, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7159686, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.717058, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7174585, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7179115, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7189283, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.720035, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7205956, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7216065, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7220664, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.722386, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7229216, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7240324, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7246063, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7249696, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7257178, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7267547, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7271254, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7273145, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7281969, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742217556.7301185, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.nerd_facts_dbt.unique_stg_netrunner_types_type_id.6c0873a4b5": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_types_type_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_types_type_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_types_type_id.6c0873a4b5", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_types_type_id"], "alias": "unique_stg_netrunner_types_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8168461, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_id", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "type_id", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_id.d7e0c6692f": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_types_type_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_types_type_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_id.d7e0c6692f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_types_type_id"], "alias": "not_null_stg_netrunner_types_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8181236, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_id", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_id", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.unique_stg_netrunner_types_type_code.f043eaac08": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_types_type_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_types_type_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_types_type_code.f043eaac08", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_types_type_code"], "alias": "unique_stg_netrunner_types_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8194716, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_code", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "type_code", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_code.dd9e128956": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_types_type_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_types_type_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_code.dd9e128956", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_types_type_code"], "alias": "not_null_stg_netrunner_types_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8211331, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_code", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_code", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_name.3d8e59b009": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_types_type_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_types_type_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_name.3d8e59b009", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_types_type_name"], "alias": "not_null_stg_netrunner_types_type_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8228385, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_name", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_name", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.accepted_values_stg_netrunner_types_side_code__corp__runner__None.ea3a9022cf": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_netrunner_types_side_code__corp__runner__None", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_types_side_code__corp__runner__None.ea3a9022cf", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "accepted_values_stg_netrunner_types_side_code__corp__runner__None"], "alias": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd"}, "created_at": 1742217557.8245, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["corp", "runner", null], "column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.fabff6255a": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.fabff6255a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0"], "alias": "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742217557.8287678, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": "dbt_utils"}}], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_id.eadb505df5": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cycles_cycle_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cycles_cycle_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_id.eadb505df5", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cycles_cycle_id"], "alias": "unique_stg_netrunner_cycles_cycle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8499615, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_id", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "cycle_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_id.62ac352d3f": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_cycle_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_cycle_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_id.62ac352d3f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_cycle_id"], "alias": "not_null_stg_netrunner_cycles_cycle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8515298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_id", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_code.4f84a84350": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cycles_cycle_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cycles_cycle_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_code.4f84a84350", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cycles_cycle_code"], "alias": "unique_stg_netrunner_cycles_cycle_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8533897, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_code", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "cycle_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_code.4c9240e6c1": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_cycle_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_cycle_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_code.4c9240e6c1", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_cycle_code"], "alias": "not_null_stg_netrunner_cycles_cycle_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8546612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_code", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_name.865301e9dd": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_cycle_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_cycle_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_name.865301e9dd", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_cycle_name"], "alias": "not_null_stg_netrunner_cycles_cycle_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8561409, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_name", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_name", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_position.b1a7d27022": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cycles_position", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cycles_position.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cycles_position.b1a7d27022", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cycles_position"], "alias": "unique_stg_netrunner_cycles_position", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1742217557.857697, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "position", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "position", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_position.4a0a7c8342": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_position", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_position.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_position.4a0a7c8342", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_position"], "alias": "not_null_stg_netrunner_cycles_position", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8589218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "position", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "position", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0.50541a18a6": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0.50541a18a6", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0"], "alias": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55"}, "created_at": 1742217557.860254, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_count", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "pack_count", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": "dbt_utils"}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0.e1ddce52f3": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0.e1ddce52f3", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0"], "alias": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca"}, "created_at": 1742217557.863755, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": "dbt_utils"}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL.8b14b6468a": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL.8b14b6468a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d"}, "created_at": 1742217557.8672268, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_release_date", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= current_date OR IS NULL", "column_name": "first_release_date", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": "dbt_utils"}}], "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_id.3449a40165": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_subtypes_subtype_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_subtypes_subtype_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_id.3449a40165", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_subtypes_subtype_id"], "alias": "unique_stg_netrunner_subtypes_subtype_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.871007, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_id", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "subtype_id", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_id.fca108b90f": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_subtypes_subtype_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_subtypes_subtype_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_id.fca108b90f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_subtypes_subtype_id"], "alias": "not_null_stg_netrunner_subtypes_subtype_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8723404, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_id", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtype_id", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_code.bed6436dd0": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_subtypes_subtype_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_subtypes_subtype_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_code.bed6436dd0", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_subtypes_subtype_code"], "alias": "unique_stg_netrunner_subtypes_subtype_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8735764, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_code", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "subtype_code", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_code.7e85af9991": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_subtypes_subtype_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_subtypes_subtype_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_code.7e85af9991", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_subtypes_subtype_code"], "alias": "not_null_stg_netrunner_subtypes_subtype_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.8749135, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_code", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtype_code", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_name.2c8839b12c": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_subtypes_subtype_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_subtypes_subtype_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_name.2c8839b12c", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_subtypes_subtype_name"], "alias": "not_null_stg_netrunner_subtypes_subtype_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742217557.876161, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_name", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtype_name", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0.d00a712176": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0.d00a712176", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0"], "alias": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223"}, "created_at": 1742217557.877412, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0.6f39ee868e": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0.6f39ee868e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0"], "alias": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0"}, "created_at": 1742217557.8817027, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "corp_count", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "corp_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0.0ea2524870": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0.0ea2524870", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0"], "alias": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4"}, "created_at": 1742217557.8851328, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "runner_count", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "runner_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count.5edd92ae57": [{"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count.5edd92ae57", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count"], "alias": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca"}, "created_at": 1742217557.8884315, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "card_count = corp_count + runner_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}]}, "parent_map": {"model.nerd_facts_dbt.stg_swapi_vehicles": ["source.nerd_facts_dbt.swapi.vehicles"], "model.nerd_facts_dbt.stg_swapi_starships": ["source.nerd_facts_dbt.swapi.starships"], "model.nerd_facts_dbt.stg_swapi_films": ["source.nerd_facts_dbt.swapi.films"], "model.nerd_facts_dbt.stg_swapi_planets": ["source.nerd_facts_dbt.swapi.planets"], "model.nerd_facts_dbt.stg_swapi_people": ["source.nerd_facts_dbt.swapi.people"], "model.nerd_facts_dbt.stg_swapi_species": ["source.nerd_facts_dbt.swapi.species"], "model.nerd_facts_dbt.bridge_sw_characters_films": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.dim_sw_planets": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.unique_stg_swapi_starships_id.faa87ea4e7": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.not_null_stg_swapi_starships_id.7ec0941917": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.accepted_values_stg_swapi_starships_manufacturer__Kuat_Drive_Yards__Corellian_Engineering_Corporation__Sienar_Fleet_Systems__Cygnus_Spaceworks__Incom_Corporation__Koensayr_Manufacturing.2fef0b1acf": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.not_null_stg_swapi_starships_max_atmosphering_speed.9fc07f34cf": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_max_atmosphering_speed___0_OR_IS_NULL.ec823ef959": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_max_atmosphering_speed__2000__0.8f9d0183b8": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_length___0_OR_IS_NULL.1915ec346c": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_hyperdrive_rating__10__0_5.de460c4fa4": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew___1_OR_IS_NULL.c35df747e6": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_passengers___0_OR_IS_NULL.176b315457": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_cargo_capacity___0_OR_IS_NULL.8339feb5a2": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_MGLT___0_OR_IS_NULL.4849ab31ba": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_created_at___current_date_OR_IS_NULL.242fb664ae": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_updated_at___current_date_OR_IS_NULL.b095dbe22e": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_name.e122ba7541": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_fetch_timestamp___current_date_OR_IS_NULL.108a9eded4": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_processed_timestamp___current_date_OR_IS_NULL.25b0c50c01": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew_numeric_passengers_numeric_50_OR_passengers_IS_NULL_OR_crew_IS_NULL_OR_crew_unknown_.2b12d505ec": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.unique_stg_swapi_films_id.14c2b7f5e2": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_id.4e52f2f208": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_fetch_timestamp___current_date_OR_IS_NULL.9ead7a24e3": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_processed_timestamp___current_date_OR_IS_NULL.af9118e795": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_created_at___current_date_OR_IS_NULL.21bd3a52c8": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_updated_at___current_date_OR_IS_NULL.a05d644c5a": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.unique_stg_swapi_people_id.61c011a764": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.not_null_stg_swapi_people_id.7a1b515eed": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_fetch_timestamp___current_date_OR_IS_NULL.c1ff3df31f": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_processed_timestamp___current_date_OR_IS_NULL.3f3804543b": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_created_at___current_date_OR_IS_NULL.d90eacaa04": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_updated_at___current_date_OR_IS_NULL.0570f7a92e": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.unique_stg_swapi_planets_id.6c040cab42": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.not_null_stg_swapi_planets_id.1980954ad2": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_fetch_timestamp___current_date_OR_IS_NULL.3efca725c6": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_processed_timestamp___current_date_OR_IS_NULL.b2e1f418c7": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_created_at___current_date_OR_IS_NULL.572e9515d3": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_updated_at___current_date_OR_IS_NULL.b02932a521": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.unique_stg_swapi_species_id.d223d89b92": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.not_null_stg_swapi_species_id.09ea9d15a8": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_fetch_timestamp___current_date_OR_IS_NULL.dbd26f1af7": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_processed_timestamp___current_date_OR_IS_NULL.ba30e961b6": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_created_at___current_date_OR_IS_NULL.8ad9a59359": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_updated_at___current_date_OR_IS_NULL.9ebc4b27db": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.unique_stg_swapi_vehicles_id.8b524818ea": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_id.fb013dcb6d": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_created_at___current_date_OR_IS_NULL.5aa7bfe34c": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_updated_at___current_date_OR_IS_NULL.26001bc232": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_name.0bd849278f": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_length_m___0_OR_IS_NULL.aa8c1ee5b8": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_fetch_timestamp___current_date_OR_IS_NULL.311b3e2dfd": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_processed_timestamp___current_date_OR_IS_NULL.301636d680": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11": ["source.nerd_facts_dbt.pokeapi.moves"], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9": ["source.nerd_facts_dbt.pokeapi.moves"], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3": ["source.nerd_facts_dbt.pokeapi.moves"], "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a": ["source.nerd_facts_dbt.netrunner.cards"], "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82": ["source.nerd_facts_dbt.netrunner.cards"], "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c": ["source.nerd_facts_dbt.netrunner.cards"], "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833": ["source.nerd_facts_dbt.netrunner.factions"], "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79": ["source.nerd_facts_dbt.netrunner.factions"], "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8": ["source.nerd_facts_dbt.netrunner.factions"], "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384": ["source.nerd_facts_dbt.netrunner.types"], "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5": ["source.nerd_facts_dbt.netrunner.types"], "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a": ["source.nerd_facts_dbt.netrunner.types"], "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799": ["source.nerd_facts_dbt.netrunner.packs"], "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b": ["source.nerd_facts_dbt.netrunner.packs"], "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f": ["source.nerd_facts_dbt.netrunner.cycles"], "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387": ["source.nerd_facts_dbt.netrunner.cycles"], "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f": ["source.nerd_facts_dbt.netrunner.subtypes"], "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda": ["source.nerd_facts_dbt.swapi.starships"], "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef": ["source.nerd_facts_dbt.swapi.starships"], "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803": ["source.nerd_facts_dbt.swapi.starships"], "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3": ["source.nerd_facts_dbt.swapi.people"], "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536": ["source.nerd_facts_dbt.swapi.people"], "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f": ["source.nerd_facts_dbt.swapi.people"], "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10": ["source.nerd_facts_dbt.swapi.planets"], "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70": ["source.nerd_facts_dbt.swapi.planets"], "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef": ["source.nerd_facts_dbt.swapi.planets"], "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172": ["source.nerd_facts_dbt.swapi.species"], "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9": ["source.nerd_facts_dbt.swapi.species"], "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1": ["source.nerd_facts_dbt.swapi.species"], "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3": ["source.nerd_facts_dbt.swapi.vehicles"], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039": ["source.nerd_facts_dbt.swapi.vehicles"], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c": ["source.nerd_facts_dbt.swapi.vehicles"], "model.nerd_facts_dbt.bridge_sw_starships_pilots": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_swapi_species", "model.nerd_facts_dbt.stg_swapi_starships"], "model.nerd_facts_dbt.dim_sw_films": ["model.nerd_facts_dbt.stg_swapi_films"], "model.nerd_facts_dbt.stg_swapi_vehicles_enhanced": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "model.nerd_facts_dbt.fct_starships": ["model.nerd_facts_dbt.stg_swapi_starships"], "model.nerd_facts_dbt.dim_sw_vehicles": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "model.nerd_facts_dbt.fct_sw_characters": ["model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.stg_pokeapi_abilities": [], "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_id.457541e664": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_id.b32af1eccd": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "model.nerd_facts_dbt.stg_pokeapi_items": [], "model.nerd_facts_dbt.stg_pokeapi_moves": ["source.nerd_facts_dbt.pokeapi.moves"], "test.nerd_facts_dbt.unique_stg_pokeapi_moves_id.d31ba0dc9a": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_id.4c6f071dca": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_name.a4c435275b": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_type.9c5cea1974": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_moves_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.6fabacbaa2": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "model.nerd_facts_dbt.stg_pokeapi_types": [], "model.nerd_facts_dbt.bridge_pokemon_abilities": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.bridge_pokemon_moves": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.stg_pokeapi_pokemon": [], "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_id.baf415230f": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_id.8963a375c3": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_primary_type.a9fc942428": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_primary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.b837f8595a": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_secondary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.1075ca03e0": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1.602c1d695a": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5.3f6adfb226": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5.a6018cd0d5": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_attack__255__10.7286f3bd1c": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_defense__255__20.d9238a3f47": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5.9846cc47c7": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_total_base_stats__1125__175.27f01b6086": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1.a95b5613de": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.dim_pokemon_abilities": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.dim_pokemon_moves": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "model.nerd_facts_dbt.dim_pokemon_types": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.fct_pokemon_matchups": ["model.nerd_facts_dbt.dim_pokemon_types", "model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.fct_pokemon_stats": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.fct_pokemon": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.stg_netrunner_factions": ["source.nerd_facts_dbt.netrunner.factions"], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b": ["model.nerd_facts_dbt.stg_netrunner_factions"], "model.nerd_facts_dbt.stg_netrunner_packs": ["source.nerd_facts_dbt.netrunner.packs"], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2": ["model.nerd_facts_dbt.stg_netrunner_packs"], "model.nerd_facts_dbt.dim_netrunner_cards": ["model.nerd_facts_dbt.stg_netrunner_cards"], "model.nerd_facts_dbt.stg_netrunner_cards": ["source.nerd_facts_dbt.netrunner.cards"], "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051": ["model.nerd_facts_dbt.stg_netrunner_cards"], "model.nerd_facts_dbt.dim_netrunner_factions": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_factions", "model.nerd_facts_dbt.stg_netrunner_packs"], "model.nerd_facts_dbt.fact_netrunner_cards": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_packs"], "model.nerd_facts_dbt.fct_netrunner_card_power": ["model.nerd_facts_dbt.stg_netrunner_cards"], "model.nerd_facts_dbt.dim_characters": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.dim_locations": ["model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_swapi_planets"], "model.nerd_facts_dbt.fct_power_ratings": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_swapi_people"], "source.nerd_facts_dbt.pokeapi.moves": [], "source.nerd_facts_dbt.pokeapi.pokemon": [], "source.nerd_facts_dbt.pokeapi.types": [], "source.nerd_facts_dbt.pokeapi.abilities": [], "source.nerd_facts_dbt.pokeapi.items": [], "source.nerd_facts_dbt.pokeapi.generations": [], "source.nerd_facts_dbt.pokeapi.locations": [], "source.nerd_facts_dbt.netrunner.cards": [], "source.nerd_facts_dbt.netrunner.factions": [], "source.nerd_facts_dbt.netrunner.types": [], "source.nerd_facts_dbt.netrunner.packs": [], "source.nerd_facts_dbt.netrunner.cycles": [], "source.nerd_facts_dbt.netrunner.subtypes": [], "source.nerd_facts_dbt.swapi.starships": [], "source.nerd_facts_dbt.swapi.films": [], "source.nerd_facts_dbt.swapi.people": [], "source.nerd_facts_dbt.swapi.planets": [], "source.nerd_facts_dbt.swapi.species": [], "source.nerd_facts_dbt.swapi.vehicles": [], "source.nerd_facts_dbt.raw.swapi_people": [], "source.nerd_facts_dbt.raw.swapi_planets": [], "source.nerd_facts_dbt.raw.swapi_starships": [], "source.nerd_facts_dbt.raw.swapi_vehicles": [], "source.nerd_facts_dbt.raw.swapi_species": [], "source.nerd_facts_dbt.raw.swapi_films": [], "source.nerd_facts_dbt.raw.pokeapi_pokemon": [], "source.nerd_facts_dbt.raw.pokeapi_types": [], "source.nerd_facts_dbt.raw.pokeapi_abilities": [], "source.nerd_facts_dbt.raw.pokeapi_moves": [], "source.nerd_facts_dbt.raw.pokeapi_items": []}, "child_map": {"model.nerd_facts_dbt.stg_swapi_vehicles": ["model.nerd_facts_dbt.dim_sw_vehicles", "model.nerd_facts_dbt.stg_swapi_vehicles_enhanced", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_created_at___current_date_OR_IS_NULL.5aa7bfe34c", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_fetch_timestamp___current_date_OR_IS_NULL.311b3e2dfd", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_length_m___0_OR_IS_NULL.aa8c1ee5b8", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_processed_timestamp___current_date_OR_IS_NULL.301636d680", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_updated_at___current_date_OR_IS_NULL.26001bc232", "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_id.fb013dcb6d", "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7", "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_name.0bd849278f", "test.nerd_facts_dbt.unique_stg_swapi_vehicles_id.8b524818ea"], "model.nerd_facts_dbt.stg_swapi_starships": ["model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.fct_starships", "test.nerd_facts_dbt.accepted_values_stg_swapi_starships_manufacturer__Kuat_Drive_Yards__Corellian_Engineering_Corporation__Sienar_Fleet_Systems__Cygnus_Spaceworks__Incom_Corporation__Koensayr_Manufacturing.2fef0b1acf", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_hyperdrive_rating__10__0_5.de460c4fa4", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_max_atmosphering_speed__2000__0.8f9d0183b8", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_MGLT___0_OR_IS_NULL.4849ab31ba", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_cargo_capacity___0_OR_IS_NULL.8339feb5a2", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_created_at___current_date_OR_IS_NULL.242fb664ae", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew___1_OR_IS_NULL.c35df747e6", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew_numeric_passengers_numeric_50_OR_passengers_IS_NULL_OR_crew_IS_NULL_OR_crew_unknown_.2b12d505ec", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_fetch_timestamp___current_date_OR_IS_NULL.108a9eded4", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_length___0_OR_IS_NULL.1915ec346c", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_max_atmosphering_speed___0_OR_IS_NULL.ec823ef959", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_passengers___0_OR_IS_NULL.176b315457", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_processed_timestamp___current_date_OR_IS_NULL.25b0c50c01", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_updated_at___current_date_OR_IS_NULL.b095dbe22e", "test.nerd_facts_dbt.not_null_stg_swapi_starships_id.7ec0941917", "test.nerd_facts_dbt.not_null_stg_swapi_starships_max_atmosphering_speed.9fc07f34cf", "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5", "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_name.e122ba7541", "test.nerd_facts_dbt.unique_stg_swapi_starships_id.faa87ea4e7"], "model.nerd_facts_dbt.stg_swapi_films": ["model.nerd_facts_dbt.bridge_sw_characters_films", "model.nerd_facts_dbt.dim_sw_films", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_created_at___current_date_OR_IS_NULL.21bd3a52c8", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_fetch_timestamp___current_date_OR_IS_NULL.9ead7a24e3", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_processed_timestamp___current_date_OR_IS_NULL.af9118e795", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_updated_at___current_date_OR_IS_NULL.a05d644c5a", "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696", "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4", "test.nerd_facts_dbt.not_null_stg_swapi_films_id.4e52f2f208", "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74", "test.nerd_facts_dbt.unique_stg_swapi_films_id.14c2b7f5e2"], "model.nerd_facts_dbt.stg_swapi_planets": ["model.nerd_facts_dbt.dim_locations", "model.nerd_facts_dbt.dim_sw_planets", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_created_at___current_date_OR_IS_NULL.572e9515d3", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_fetch_timestamp___current_date_OR_IS_NULL.3efca725c6", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_processed_timestamp___current_date_OR_IS_NULL.b2e1f418c7", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_updated_at___current_date_OR_IS_NULL.b02932a521", "test.nerd_facts_dbt.not_null_stg_swapi_planets_id.1980954ad2", "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78", "test.nerd_facts_dbt.unique_stg_swapi_planets_id.6c040cab42"], "model.nerd_facts_dbt.stg_swapi_people": ["model.nerd_facts_dbt.bridge_sw_characters_films", "model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.dim_characters", "model.nerd_facts_dbt.fct_power_ratings", "model.nerd_facts_dbt.fct_sw_characters", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_created_at___current_date_OR_IS_NULL.d90eacaa04", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_fetch_timestamp___current_date_OR_IS_NULL.c1ff3df31f", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_processed_timestamp___current_date_OR_IS_NULL.3f3804543b", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_updated_at___current_date_OR_IS_NULL.0570f7a92e", "test.nerd_facts_dbt.not_null_stg_swapi_people_id.7a1b515eed", "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f", "test.nerd_facts_dbt.unique_stg_swapi_people_id.61c011a764"], "model.nerd_facts_dbt.stg_swapi_species": ["model.nerd_facts_dbt.bridge_sw_starships_pilots", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_created_at___current_date_OR_IS_NULL.8ad9a59359", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_fetch_timestamp___current_date_OR_IS_NULL.dbd26f1af7", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_processed_timestamp___current_date_OR_IS_NULL.ba30e961b6", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_updated_at___current_date_OR_IS_NULL.9ebc4b27db", "test.nerd_facts_dbt.not_null_stg_swapi_species_id.09ea9d15a8", "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221", "test.nerd_facts_dbt.unique_stg_swapi_species_id.d223d89b92"], "model.nerd_facts_dbt.bridge_sw_characters_films": [], "model.nerd_facts_dbt.dim_sw_planets": [], "test.nerd_facts_dbt.unique_stg_swapi_starships_id.faa87ea4e7": [], "test.nerd_facts_dbt.not_null_stg_swapi_starships_id.7ec0941917": [], "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5": [], "test.nerd_facts_dbt.accepted_values_stg_swapi_starships_manufacturer__Kuat_Drive_Yards__Corellian_Engineering_Corporation__Sienar_Fleet_Systems__Cygnus_Spaceworks__Incom_Corporation__Koensayr_Manufacturing.2fef0b1acf": [], "test.nerd_facts_dbt.not_null_stg_swapi_starships_max_atmosphering_speed.9fc07f34cf": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_max_atmosphering_speed___0_OR_IS_NULL.ec823ef959": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_max_atmosphering_speed__2000__0.8f9d0183b8": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_length___0_OR_IS_NULL.1915ec346c": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_starships_hyperdrive_rating__10__0_5.de460c4fa4": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew___1_OR_IS_NULL.c35df747e6": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_passengers___0_OR_IS_NULL.176b315457": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_cargo_capacity___0_OR_IS_NULL.8339feb5a2": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_MGLT___0_OR_IS_NULL.4849ab31ba": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_created_at___current_date_OR_IS_NULL.242fb664ae": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_updated_at___current_date_OR_IS_NULL.b095dbe22e": [], "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_name.e122ba7541": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_fetch_timestamp___current_date_OR_IS_NULL.108a9eded4": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_processed_timestamp___current_date_OR_IS_NULL.25b0c50c01": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_starships_crew_numeric_passengers_numeric_50_OR_passengers_IS_NULL_OR_crew_IS_NULL_OR_crew_unknown_.2b12d505ec": [], "test.nerd_facts_dbt.unique_stg_swapi_films_id.14c2b7f5e2": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_id.4e52f2f208": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_fetch_timestamp___current_date_OR_IS_NULL.9ead7a24e3": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_processed_timestamp___current_date_OR_IS_NULL.af9118e795": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_created_at___current_date_OR_IS_NULL.21bd3a52c8": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_films_updated_at___current_date_OR_IS_NULL.a05d644c5a": [], "test.nerd_facts_dbt.unique_stg_swapi_people_id.61c011a764": [], "test.nerd_facts_dbt.not_null_stg_swapi_people_id.7a1b515eed": [], "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_fetch_timestamp___current_date_OR_IS_NULL.c1ff3df31f": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_processed_timestamp___current_date_OR_IS_NULL.3f3804543b": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_created_at___current_date_OR_IS_NULL.d90eacaa04": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_updated_at___current_date_OR_IS_NULL.0570f7a92e": [], "test.nerd_facts_dbt.unique_stg_swapi_planets_id.6c040cab42": [], "test.nerd_facts_dbt.not_null_stg_swapi_planets_id.1980954ad2": [], "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_fetch_timestamp___current_date_OR_IS_NULL.3efca725c6": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_processed_timestamp___current_date_OR_IS_NULL.b2e1f418c7": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_created_at___current_date_OR_IS_NULL.572e9515d3": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_planets_updated_at___current_date_OR_IS_NULL.b02932a521": [], "test.nerd_facts_dbt.unique_stg_swapi_species_id.d223d89b92": [], "test.nerd_facts_dbt.not_null_stg_swapi_species_id.09ea9d15a8": [], "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_fetch_timestamp___current_date_OR_IS_NULL.dbd26f1af7": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_processed_timestamp___current_date_OR_IS_NULL.ba30e961b6": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_created_at___current_date_OR_IS_NULL.8ad9a59359": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_species_updated_at___current_date_OR_IS_NULL.9ebc4b27db": [], "test.nerd_facts_dbt.unique_stg_swapi_vehicles_id.8b524818ea": [], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_id.fb013dcb6d": [], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_created_at___current_date_OR_IS_NULL.5aa7bfe34c": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_updated_at___current_date_OR_IS_NULL.26001bc232": [], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_name.0bd849278f": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_length_m___0_OR_IS_NULL.aa8c1ee5b8": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_fetch_timestamp___current_date_OR_IS_NULL.311b3e2dfd": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_vehicles_processed_timestamp___current_date_OR_IS_NULL.301636d680": [], "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11": [], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9": [], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3": [], "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a": [], "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82": [], "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c": [], "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833": [], "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79": [], "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8": [], "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384": [], "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5": [], "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a": [], "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799": [], "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b": [], "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f": [], "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387": [], "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f": [], "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda": [], "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef": [], "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803": [], "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f": [], "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd": [], "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912": [], "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f": [], "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3": [], "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536": [], "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f": [], "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10": [], "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70": [], "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef": [], "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172": [], "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9": [], "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1": [], "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3": [], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039": [], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c": [], "model.nerd_facts_dbt.bridge_sw_starships_pilots": [], "model.nerd_facts_dbt.dim_sw_films": [], "model.nerd_facts_dbt.stg_swapi_vehicles_enhanced": [], "model.nerd_facts_dbt.fct_starships": [], "model.nerd_facts_dbt.dim_sw_vehicles": [], "model.nerd_facts_dbt.fct_sw_characters": [], "model.nerd_facts_dbt.stg_pokeapi_abilities": ["test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d", "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e", "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a", "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_id.b32af1eccd", "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_id.457541e664"], "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_id.457541e664": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_id.b32af1eccd": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d": [], "model.nerd_facts_dbt.stg_pokeapi_items": [], "model.nerd_facts_dbt.stg_pokeapi_moves": ["model.nerd_facts_dbt.dim_pokemon_moves", "test.nerd_facts_dbt.accepted_values_stg_pokeapi_moves_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.6fabacbaa2", "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_id.4c6f071dca", "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_name.a4c435275b", "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_type.9c5cea1974", "test.nerd_facts_dbt.unique_stg_pokeapi_moves_id.d31ba0dc9a"], "test.nerd_facts_dbt.unique_stg_pokeapi_moves_id.d31ba0dc9a": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_id.4c6f071dca": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_name.a4c435275b": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_type.9c5cea1974": [], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_moves_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.6fabacbaa2": [], "model.nerd_facts_dbt.stg_pokeapi_types": [], "model.nerd_facts_dbt.bridge_pokemon_abilities": [], "model.nerd_facts_dbt.bridge_pokemon_moves": [], "model.nerd_facts_dbt.stg_pokeapi_pokemon": ["model.nerd_facts_dbt.bridge_pokemon_abilities", "model.nerd_facts_dbt.bridge_pokemon_moves", "model.nerd_facts_dbt.dim_characters", "model.nerd_facts_dbt.dim_locations", "model.nerd_facts_dbt.dim_pokemon_abilities", "model.nerd_facts_dbt.dim_pokemon_types", "model.nerd_facts_dbt.fct_pokemon", "model.nerd_facts_dbt.fct_pokemon_matchups", "model.nerd_facts_dbt.fct_pokemon_stats", "model.nerd_facts_dbt.fct_power_ratings", "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_primary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.b837f8595a", "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_secondary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.1075ca03e0", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5.3f6adfb226", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5.a6018cd0d5", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1.a95b5613de", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1.602c1d695a", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_attack__255__10.7286f3bd1c", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_defense__255__20.d9238a3f47", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5.9846cc47c7", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_total_base_stats__1125__175.27f01b6086", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb", "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_id.8963a375c3", "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b", "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_primary_type.a9fc942428", "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_id.baf415230f"], "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_id.baf415230f": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_id.8963a375c3": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_primary_type.a9fc942428": [], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_primary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.b837f8595a": [], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_pokemon_secondary_type__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.1075ca03e0": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_hp__255__1.602c1d695a": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_attack__255__5.3f6adfb226": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_defense__255__5.a6018cd0d5": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_attack__255__10.7286f3bd1c": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_special_defense__255__20.d9238a3f47": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_speed__255__5.9846cc47c7": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_total_base_stats__1125__175.27f01b6086": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_pokemon_generation__9__1.a95b5613de": [], "model.nerd_facts_dbt.dim_pokemon_abilities": [], "model.nerd_facts_dbt.dim_pokemon_moves": [], "model.nerd_facts_dbt.dim_pokemon_types": ["model.nerd_facts_dbt.fct_pokemon_matchups"], "model.nerd_facts_dbt.fct_pokemon_matchups": [], "model.nerd_facts_dbt.fct_pokemon_stats": [], "model.nerd_facts_dbt.fct_pokemon": [], "model.nerd_facts_dbt.stg_netrunner_factions": ["model.nerd_facts_dbt.dim_netrunner_factions", "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef", "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674", "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533"], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553": [], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef": [], "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b": [], "model.nerd_facts_dbt.stg_netrunner_packs": ["model.nerd_facts_dbt.dim_netrunner_factions", "model.nerd_facts_dbt.fact_netrunner_cards", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3", "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4", "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e"], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b": [], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2": [], "model.nerd_facts_dbt.dim_netrunner_cards": [], "model.nerd_facts_dbt.stg_netrunner_cards": ["model.nerd_facts_dbt.dim_characters", "model.nerd_facts_dbt.dim_netrunner_cards", "model.nerd_facts_dbt.dim_netrunner_factions", "model.nerd_facts_dbt.fact_netrunner_cards", "model.nerd_facts_dbt.fct_netrunner_card_power", "model.nerd_facts_dbt.fct_power_ratings", "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1", "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802"], "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f": [], "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051": [], "model.nerd_facts_dbt.dim_netrunner_factions": [], "model.nerd_facts_dbt.fact_netrunner_cards": [], "model.nerd_facts_dbt.fct_netrunner_card_power": [], "model.nerd_facts_dbt.dim_characters": [], "model.nerd_facts_dbt.dim_locations": [], "model.nerd_facts_dbt.fct_power_ratings": [], "source.nerd_facts_dbt.pokeapi.moves": ["model.nerd_facts_dbt.stg_pokeapi_moves", "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9", "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3", "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11"], "source.nerd_facts_dbt.pokeapi.pokemon": [], "source.nerd_facts_dbt.pokeapi.types": [], "source.nerd_facts_dbt.pokeapi.abilities": [], "source.nerd_facts_dbt.pokeapi.items": [], "source.nerd_facts_dbt.pokeapi.generations": [], "source.nerd_facts_dbt.pokeapi.locations": [], "source.nerd_facts_dbt.netrunner.cards": ["model.nerd_facts_dbt.stg_netrunner_cards", "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82", "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c", "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a"], "source.nerd_facts_dbt.netrunner.factions": ["model.nerd_facts_dbt.stg_netrunner_factions", "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79", "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8", "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833"], "source.nerd_facts_dbt.netrunner.types": ["test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5", "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a", "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384"], "source.nerd_facts_dbt.netrunner.packs": ["model.nerd_facts_dbt.stg_netrunner_packs", "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b", "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799"], "source.nerd_facts_dbt.netrunner.cycles": ["test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387", "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f"], "source.nerd_facts_dbt.netrunner.subtypes": ["test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f"], "source.nerd_facts_dbt.swapi.starships": ["model.nerd_facts_dbt.stg_swapi_starships", "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef", "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803", "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda"], "source.nerd_facts_dbt.swapi.films": ["model.nerd_facts_dbt.stg_swapi_films", "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f", "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd", "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912", "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f"], "source.nerd_facts_dbt.swapi.people": ["model.nerd_facts_dbt.stg_swapi_people", "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536", "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f", "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3"], "source.nerd_facts_dbt.swapi.planets": ["model.nerd_facts_dbt.stg_swapi_planets", "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70", "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef", "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10"], "source.nerd_facts_dbt.swapi.species": ["model.nerd_facts_dbt.stg_swapi_species", "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9", "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1", "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172"], "source.nerd_facts_dbt.swapi.vehicles": ["model.nerd_facts_dbt.stg_swapi_vehicles", "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039", "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c", "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3"], "source.nerd_facts_dbt.raw.swapi_people": [], "source.nerd_facts_dbt.raw.swapi_planets": [], "source.nerd_facts_dbt.raw.swapi_starships": [], "source.nerd_facts_dbt.raw.swapi_vehicles": [], "source.nerd_facts_dbt.raw.swapi_species": [], "source.nerd_facts_dbt.raw.swapi_films": [], "source.nerd_facts_dbt.raw.pokeapi_pokemon": [], "source.nerd_facts_dbt.raw.pokeapi_types": [], "source.nerd_facts_dbt.raw.pokeapi_abilities": [], "source.nerd_facts_dbt.raw.pokeapi_moves": [], "source.nerd_facts_dbt.raw.pokeapi_items": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}