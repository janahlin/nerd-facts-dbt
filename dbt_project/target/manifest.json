{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-03-25T13:39:08.223947Z", "invocation_id": "b52cc44b-06a6-44f5-b561-a8269870be1c", "env": {}, "project_name": "nerd_facts_dbt", "project_id": "7d95999fae80835141c5f59ccf21274b", "user_id": "a33a0cc6-618e-48cb-87c4-b72647cdd80b", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.nerd_facts_dbt.int_swapi_films_vehicles": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_films_vehicles", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_films_vehicles.sql", "original_file_path": "models/intermediate/int_swapi_films_vehicles.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_films_vehicles", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_films_vehicles"], "alias": "int_swapi_films_vehicles", "checksum": {"name": "sha256", "checksum": "b7f032fc78e4fad1372a9d132468e749e785fe079ef75875494014d8aa092785"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.4256098, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_vehicles\"", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n/*\n  Model: int_swapi_films_vehicles\n  Description: Creates a comprehensive many-to-many relationship table between films and vehicles\n  Source: Combines data from both films.vehicles and vehicles.films arrays for completeness\n*/\n\n-- Get relationships from films perspective\nwith films_to_vehicles as (\n    select\n        film_id,\n        jsonb_array_elements_text(vehicles::jsonb)::integer as vehicle_id\n    from {{ ref('stg_swapi_films') }}\n    where vehicles is not null and jsonb_array_length(vehicles::jsonb) > 0\n),\n\n-- Get relationships from vehicles perspective\nvehicles_to_films as (\n    select\n        vehicle_id,\n        jsonb_array_elements_text(films::jsonb)::integer as film_id\n    from {{ ref('stg_swapi_vehicles') }}\n    where films is not null and jsonb_array_length(films::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select film_id, vehicle_id from films_to_vehicles\n    union\n    select film_id, vehicle_id from vehicles_to_films\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct film_id, vehicle_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.film_id,\n    ur.vehicle_id,\n    f.title as film_title,\n    v.vehicle_name,\n    f.release_date,\n    v.model,\n    v.manufacturer,\n    -- Create a unique key for the relationship\n    {{ dbt_utils.generate_surrogate_key(['ur.film_id', 'ur.vehicle_id']) }} as film_vehicle_key\nfrom \n    unique_relationships ur\njoin \n    {{ ref('stg_swapi_films') }} f on ur.film_id = f.film_id\njoin \n    {{ ref('stg_swapi_vehicles') }} v on ur.vehicle_id = v.vehicle_id\norder by\n    f.release_date, v.vehicle_name", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_vehicles", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_films_vehicles.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_vehicles\n  Description: Creates a comprehensive many-to-many relationship table between films and vehicles\n  Source: Combines data from both films.vehicles and vehicles.films arrays for completeness\n*/\n\n-- Get relationships from films perspective\nwith films_to_vehicles as (\n    select\n        film_id,\n        jsonb_array_elements_text(vehicles::jsonb)::integer as vehicle_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where vehicles is not null and jsonb_array_length(vehicles::jsonb) > 0\n),\n\n-- Get relationships from vehicles perspective\nvehicles_to_films as (\n    select\n        vehicle_id,\n        jsonb_array_elements_text(films::jsonb)::integer as film_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\n    where films is not null and jsonb_array_length(films::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select film_id, vehicle_id from films_to_vehicles\n    union\n    select film_id, vehicle_id from vehicles_to_films\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct film_id, vehicle_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.film_id,\n    ur.vehicle_id,\n    f.title as film_title,\n    v.vehicle_name,\n    f.release_date,\n    v.model,\n    v.manufacturer,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ur.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ur.vehicle_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_vehicle_key\nfrom \n    unique_relationships ur\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on ur.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_vehicles\" v on ur.vehicle_id = v.vehicle_id\norder by\n    f.release_date, v.vehicle_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_films_species": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_films_species", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_films_species.sql", "original_file_path": "models/intermediate/int_swapi_films_species.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_films_species", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_films_species"], "alias": "int_swapi_films_species", "checksum": {"name": "sha256", "checksum": "d85f28673b12523dbed8e05225faa987d969eec2d7d2fc7a4749ca366acfcec5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.469069, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_species\"", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n/*\n  Model: int_swapi_films_species\n  Description: Creates a relationship table between films and species\n  Source: Using films.species array\n*/\n\n-- Get relationships from films perspective (only direction available)\nwith films_to_species as (\n    select\n        film_id,\n        jsonb_array_elements_text(species::jsonb)::integer as species_id\n    from {{ ref('stg_swapi_films') }}\n    where species is not null and jsonb_array_length(species::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fs.film_id,\n    fs.species_id,\n    f.title as film_title,\n    -- Using different field names based on your stg_swapi_species structure\n    s.species_name, -- Changed from s.name\n    f.release_date,\n    s.classification,\n    s.language,\n    -- Create a unique key for the relationship\n    {{ dbt_utils.generate_surrogate_key(['fs.film_id', 'fs.species_id']) }} as film_species_key\nfrom \n    films_to_species fs\njoin \n    {{ ref('stg_swapi_films') }} f on fs.film_id = f.film_id\njoin \n    {{ ref('stg_swapi_species') }} s on fs.species_id = s.species_id\norder by\n    f.release_date, s.species_name -- Changed sort order to use species_name", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_films_species.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_species\n  Description: Creates a relationship table between films and species\n  Source: Using films.species array\n*/\n\n-- Get relationships from films perspective (only direction available)\nwith films_to_species as (\n    select\n        film_id,\n        jsonb_array_elements_text(species::jsonb)::integer as species_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where species is not null and jsonb_array_length(species::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fs.film_id,\n    fs.species_id,\n    f.title as film_title,\n    -- Using different field names based on your stg_swapi_species structure\n    s.species_name, -- Changed from s.name\n    f.release_date,\n    s.classification,\n    s.language,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(fs.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fs.species_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_species_key\nfrom \n    films_to_species fs\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on fs.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_species\" s on fs.species_id = s.species_id\norder by\n    f.release_date, s.species_name -- Changed sort order to use species_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_species": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_species", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_species.sql", "original_file_path": "models/intermediate/int_swapi_species.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_species", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_species"], "alias": "int_swapi_species", "checksum": {"name": "sha256", "checksum": "8d9eef8be91a472a8dd76502c61cbb2d1f7eeaa0f9a44b822d4dc0d938219526"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.4760153, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_species\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith species as (        \n    select\n    species_id,\n    species_name,\n    classification,\n    designation,        \n    skin_colors,\n    hair_colors,\n    eye_colors,                \n    language,    \n    average_lifespan,\n    average_height,\n    people,\n    homeworld,\n    created_at,\n    edited_at,\n    dbt_loaded_at,\n    url\n    from {{ ref('stg_swapi_species') }}\n)\n\nselect * from species", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_species.sql", "compiled": true, "compiled_code": "\n\nwith species as (        \n    select\n    species_id,\n    species_name,\n    classification,\n    designation,        \n    skin_colors,\n    hair_colors,\n    eye_colors,                \n    language,    \n    average_lifespan,\n    average_height,\n    people,\n    homeworld,\n    created_at,\n    edited_at,\n    dbt_loaded_at,\n    url\n    from \"nerd_facts\".\"public\".\"stg_swapi_species\"\n)\n\nselect * from species", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_planets": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_planets", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_planets.sql", "original_file_path": "models/intermediate/int_swapi_planets.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_planets", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_planets"], "alias": "int_swapi_planets", "checksum": {"name": "sha256", "checksum": "2c481a99e6fd183bb67187e4b3795f799527ae8bf17362ca9213e32c5e248ae8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.4787998, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_planets\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith planets as (    \n    select\n    planet_id,\n    planet_name,\n    name,        \n    climate,\n    gravity,\n    terrain,    \n    surface_water,\n    rotation_period,\n    orbital_period,\n    diameter,\n    population,\n    -- Terrain classification flags\n    terrain LIKE '%temperate%' AS is_temperate,\n    terrain LIKE '%forest%' OR terrain LIKE '%jungle%' OR terrain LIKE '%grassland%' AS has_vegetation,\n    terrain LIKE '%ocean%' OR terrain LIKE '%lake%' OR surface_water = '100' AS is_water_world,\n    terrain LIKE '%desert%' AS is_desert_world,        \n    created_at,\n    updated_at,    \n    dbt_loaded_at,\n    url  \n    from {{ ref('stg_swapi_planets') }}\n)\n\nselect * from planets", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_planets.sql", "compiled": true, "compiled_code": "\n\nwith planets as (    \n    select\n    planet_id,\n    planet_name,\n    name,        \n    climate,\n    gravity,\n    terrain,    \n    surface_water,\n    rotation_period,\n    orbital_period,\n    diameter,\n    population,\n    -- Terrain classification flags\n    terrain LIKE '%temperate%' AS is_temperate,\n    terrain LIKE '%forest%' OR terrain LIKE '%jungle%' OR terrain LIKE '%grassland%' AS has_vegetation,\n    terrain LIKE '%ocean%' OR terrain LIKE '%lake%' OR surface_water = '100' AS is_water_world,\n    terrain LIKE '%desert%' AS is_desert_world,        \n    created_at,\n    updated_at,    \n    dbt_loaded_at,\n    url  \n    from \"nerd_facts\".\"public\".\"stg_swapi_planets\"\n)\n\nselect * from planets", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_planets_characters": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_planets_characters", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_planets_characters.sql", "original_file_path": "models/intermediate/int_swapi_planets_characters.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_planets_characters", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_planets_characters"], "alias": "int_swapi_planets_characters", "checksum": {"name": "sha256", "checksum": "6991bc336d8f6f302a0e1894dc83002268073b38d2f472581ae42dc40b0f8289"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.4814477, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_planets_characters\"", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n/*\n  Model: int_swapi_planets_characters\n  Description: Creates a relationship table between planets and characters\n  Source: Using people.homeworld references\n*/\n\n-- Characters with homeworlds (direct homeworld reference)\nwith character_homeworlds as (\n    select\n        people_id,\n        homeworld::integer as planet_id,\n        'Homeworld' as relationship_type\n    from {{ ref('stg_swapi_people') }}\n    where homeworld is not null\n)\n\n-- Final output with useful metadata\nselect \n    ch.people_id,\n    ch.planet_id,\n    ch.relationship_type,\n    p.name as character_name,\n    pl.name as planet_name,\n    p.gender,\n    pl.climate,\n    pl.terrain,\n    -- Create a unique key for the relationship\n    {{ dbt_utils.generate_surrogate_key(['ch.people_id', 'ch.planet_id']) }} as character_planet_key\nfrom \n    character_homeworlds ch\njoin \n    {{ ref('stg_swapi_people') }} p on ch.people_id = p.people_id\njoin \n    {{ ref('stg_swapi_planets') }} pl on ch.planet_id = pl.planet_id\norder by\n    pl.name, p.name", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_planets_characters.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_planets_characters\n  Description: Creates a relationship table between planets and characters\n  Source: Using people.homeworld references\n*/\n\n-- Characters with homeworlds (direct homeworld reference)\nwith character_homeworlds as (\n    select\n        people_id,\n        homeworld::integer as planet_id,\n        'Homeworld' as relationship_type\n    from \"nerd_facts\".\"public\".\"stg_swapi_people\"\n    where homeworld is not null\n)\n\n-- Final output with useful metadata\nselect \n    ch.people_id,\n    ch.planet_id,\n    ch.relationship_type,\n    p.name as character_name,\n    pl.name as planet_name,\n    p.gender,\n    pl.climate,\n    pl.terrain,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ch.people_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ch.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as character_planet_key\nfrom \n    character_homeworlds ch\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_people\" p on ch.people_id = p.people_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_planets\" pl on ch.planet_id = pl.planet_id\norder by\n    pl.name, p.name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_characters_species": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_characters_species", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_characters_species.sql", "original_file_path": "models/intermediate/int_swapi_characters_species.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_characters_species", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_characters_species"], "alias": "int_swapi_characters_species", "checksum": {"name": "sha256", "checksum": "558d9915d9f56c066c07e4e7a1be059ea0ac641a00e8fb0ad12449bfeabdfb65"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.488534, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_characters_species\"", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n/*\n  Model: int_swapi_characters_species\n  Description: Creates a comprehensive relationship table between characters and species\n  Source: Combines character-to-species and species-to-people relationships\n*/\n\n-- Hardcoded character-species associations since staging model doesn't have species_ids\nwith character_species as (\n    select * from (values\n        (1, 1),  -- Luke Skywalker - Human\n        (2, 2),  -- C-3PO - Droid\n        (3, 2),  -- R2-D2 - Droid\n        (4, 1)   -- Darth Vader - Human\n    ) as v(character_id, species_id)\n),\n\n-- Species with characters (people of that species)\nspecies_characters as (\n    select\n        species_id,\n        jsonb_array_elements_text(people::jsonb)::integer as character_id\n    from {{ ref('stg_swapi_species') }}\n    where people is not null and jsonb_array_length(people::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select character_id, species_id from character_species\n    union\n    select character_id, species_id from species_characters\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct character_id, species_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.character_id,\n    ur.species_id,\n    p.name as character_name,\n    s.species_name,\n    p.gender,\n    s.classification,\n    s.language,\n    -- Create a unique key for the relationship\n    {{ dbt_utils.generate_surrogate_key(['ur.character_id', 'ur.species_id']) }} as character_species_key\nfrom \n    unique_relationships ur\njoin \n    {{ ref('stg_swapi_people') }} p on ur.character_id = p.people_id  -- Changed to people_id\njoin \n    {{ ref('stg_swapi_species') }} s on ur.species_id = s.species_id\norder by\n    s.species_name, p.name", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}, {"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species", "model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_characters_species.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_characters_species\n  Description: Creates a comprehensive relationship table between characters and species\n  Source: Combines character-to-species and species-to-people relationships\n*/\n\n-- Hardcoded character-species associations since staging model doesn't have species_ids\nwith character_species as (\n    select * from (values\n        (1, 1),  -- Luke Skywalker - Human\n        (2, 2),  -- C-3PO - Droid\n        (3, 2),  -- R2-D2 - Droid\n        (4, 1)   -- Darth Vader - Human\n    ) as v(character_id, species_id)\n),\n\n-- Species with characters (people of that species)\nspecies_characters as (\n    select\n        species_id,\n        jsonb_array_elements_text(people::jsonb)::integer as character_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_species\"\n    where people is not null and jsonb_array_length(people::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select character_id, species_id from character_species\n    union\n    select character_id, species_id from species_characters\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct character_id, species_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.character_id,\n    ur.species_id,\n    p.name as character_name,\n    s.species_name,\n    p.gender,\n    s.classification,\n    s.language,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ur.character_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ur.species_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as character_species_key\nfrom \n    unique_relationships ur\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_people\" p on ur.character_id = p.people_id  -- Changed to people_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_species\" s on ur.species_id = s.species_id\norder by\n    s.species_name, p.name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_starships_people": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_starships_people", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_starships_people.sql", "original_file_path": "models/intermediate/int_swapi_starships_people.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_starships_people", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_starships_people"], "alias": "int_swapi_starships_people", "checksum": {"name": "sha256", "checksum": "3931b6d4f099779e97c622ab9a533430e59e13f4e69dedc8d1a515a15ad07047"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.4954271, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_starships_people\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: int_swapi_starships_people\n  Description: Creates a minimal many-to-many relationship table between films and people (pilots)\n  Source: stg_swapi_films.starships JSONB array\n*/\n\nwith starships_with_pilots as (\n    select\n        starship_id,\n        -- Extract each planet ID from the JSONB array\n        jsonb_array_elements_text(pilots::jsonb) as people_id_text\n    from {{ ref('stg_swapi_starships') }}\n    where pilots is not null and jsonb_array_length(pilots::jsonb) > 0\n)\n\nselect\n    s.starship_id,\n    -- Cast the starship ID from text to integer\n    s.people_id_text::integer as people_id\nfrom \n    starships_with_pilots s\norder by\n    starship_id, people_id", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_starships_people.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_starships_people\n  Description: Creates a minimal many-to-many relationship table between films and people (pilots)\n  Source: stg_swapi_films.starships JSONB array\n*/\n\nwith starships_with_pilots as (\n    select\n        starship_id,\n        -- Extract each planet ID from the JSONB array\n        jsonb_array_elements_text(pilots::jsonb) as people_id_text\n    from \"nerd_facts\".\"public\".\"stg_swapi_starships\"\n    where pilots is not null and jsonb_array_length(pilots::jsonb) > 0\n)\n\nselect\n    s.starship_id,\n    -- Cast the starship ID from text to integer\n    s.people_id_text::integer as people_id\nfrom \n    starships_with_pilots s\norder by\n    starship_id, people_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_vehicles": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_vehicles", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_vehicles.sql", "original_file_path": "models/intermediate/int_swapi_vehicles.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_vehicles", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_vehicles"], "alias": "int_swapi_vehicles", "checksum": {"name": "sha256", "checksum": "93250513a71951869ed158bfe8aef24b1281434a6946811f8ec78df7456ee4f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.4991603, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_vehicles\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith vehicles as (        \n    select\n    vehicle_id,    \n    vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    consumables,    \n    cost_in_credits,\n    length,\n    max_atmosphering_speed,\n    cargo_capacity,\n    passengers,\n    crew,\n\n        -- Derived vehicle classifications\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' OR LOWER(vehicle_class) LIKE '%tank%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%fighter%' OR LOWER(vehicle_class) LIKE '%bomber%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%transport%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' THEN \n            CASE\n                WHEN LOWER(vehicle_name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian'\n            END\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN\n            CASE\n                WHEN LOWER(vehicle_name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian' \n            END\n        WHEN LOWER(vehicle_class) LIKE '%shuttle%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' OR LOWER(vehicle_class) LIKE '%yacht%' THEN 'Leisure/Luxury'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' OR LOWER(vehicle_class) LIKE '%digger%' THEN 'Industrial'\n        ELSE 'Multipurpose'\n    END AS vehicle_purpose,\n\n    -- Size classification\n    CASE\n        WHEN length > 100 THEN 'Massive'\n        WHEN length > 20 THEN 'Large'\n        WHEN length > 10 THEN 'Medium'\n        WHEN length > 5 THEN 'Small'\n        ELSE 'Tiny'\n    END AS vehicle_size,\n\n    -- Terrain capabilities\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' AND LOWER(vehicle_class) NOT LIKE '%airspeeder%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN 'Air'\n        WHEN LOWER(vehicle_class) LIKE '%submarine%' THEN 'Water'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' AND LOWER(vehicle_class) LIKE '%sail%' THEN 'Ground/Water'\n        WHEN LOWER(vehicle_class) LIKE '%snowspeeder%' OR LOWER(vehicle_name) LIKE '%snow%' THEN 'Snow/Ice'\n        WHEN LOWER(vehicle_class) LIKE '%repulsor%' THEN 'Air/Ground'\n        ELSE 'Multi-terrain'\n    END AS terrain_capability,\n\n    -- Notable vehicle flag\n    CASE\n        WHEN LOWER(vehicle_name) IN ('at-at', 'at-st', 'snowspeeder', 'speeder bike', 'tie bomber', \n                           'tie fighter', 'x-34 landspeeder', 'sand crawler', 'sail barge') THEN TRUE\n        ELSE FALSE\n    END AS is_notable_vehicle,    \n\n    -- Calculate total capacity as sum of crew and passengers\n    crew + passengers AS total_capacity,\n\n    created_at,\n    edited_at,\n    dbt_loaded_at,\n    url\n    from {{ ref('stg_swapi_vehicles') }}\n)\n\nselect * from vehicles", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_vehicles.sql", "compiled": true, "compiled_code": "\n\nwith vehicles as (        \n    select\n    vehicle_id,    \n    vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    consumables,    \n    cost_in_credits,\n    length,\n    max_atmosphering_speed,\n    cargo_capacity,\n    passengers,\n    crew,\n\n        -- Derived vehicle classifications\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' OR LOWER(vehicle_class) LIKE '%tank%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%fighter%' OR LOWER(vehicle_class) LIKE '%bomber%' THEN 'Military'\n        WHEN LOWER(vehicle_class) LIKE '%transport%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' THEN \n            CASE\n                WHEN LOWER(vehicle_name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian'\n            END\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN\n            CASE\n                WHEN LOWER(vehicle_name) LIKE '%military%' THEN 'Military'\n                ELSE 'Civilian' \n            END\n        WHEN LOWER(vehicle_class) LIKE '%shuttle%' THEN 'Transport'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' OR LOWER(vehicle_class) LIKE '%yacht%' THEN 'Leisure/Luxury'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' OR LOWER(vehicle_class) LIKE '%digger%' THEN 'Industrial'\n        ELSE 'Multipurpose'\n    END AS vehicle_purpose,\n\n    -- Size classification\n    CASE\n        WHEN length > 100 THEN 'Massive'\n        WHEN length > 20 THEN 'Large'\n        WHEN length > 10 THEN 'Medium'\n        WHEN length > 5 THEN 'Small'\n        ELSE 'Tiny'\n    END AS vehicle_size,\n\n    -- Terrain capabilities\n    CASE\n        WHEN LOWER(vehicle_class) LIKE '%walker%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%speeder%' AND LOWER(vehicle_class) NOT LIKE '%airspeeder%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%airspeeder%' THEN 'Air'\n        WHEN LOWER(vehicle_class) LIKE '%submarine%' THEN 'Water'\n        WHEN LOWER(vehicle_class) LIKE '%crawler%' THEN 'Ground'\n        WHEN LOWER(vehicle_class) LIKE '%barge%' AND LOWER(vehicle_class) LIKE '%sail%' THEN 'Ground/Water'\n        WHEN LOWER(vehicle_class) LIKE '%snowspeeder%' OR LOWER(vehicle_name) LIKE '%snow%' THEN 'Snow/Ice'\n        WHEN LOWER(vehicle_class) LIKE '%repulsor%' THEN 'Air/Ground'\n        ELSE 'Multi-terrain'\n    END AS terrain_capability,\n\n    -- Notable vehicle flag\n    CASE\n        WHEN LOWER(vehicle_name) IN ('at-at', 'at-st', 'snowspeeder', 'speeder bike', 'tie bomber', \n                           'tie fighter', 'x-34 landspeeder', 'sand crawler', 'sail barge') THEN TRUE\n        ELSE FALSE\n    END AS is_notable_vehicle,    \n\n    -- Calculate total capacity as sum of crew and passengers\n    crew + passengers AS total_capacity,\n\n    created_at,\n    edited_at,\n    dbt_loaded_at,\n    url\n    from \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\n)\n\nselect * from vehicles", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_starships": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_starships", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_starships.sql", "original_file_path": "models/intermediate/int_swapi_starships.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_starships", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_starships"], "alias": "int_swapi_starships", "checksum": {"name": "sha256", "checksum": "0b6fa39b74c8596275371420638ecd93f4ecf2be63d566e99110df71db0eb5be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.5016565, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_starships\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith starships as (        \n    select\n        \n        starship_id,\n        starship_name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,        \n        cost_in_credits,\n        length,\n        max_atmosphering_speed,\n        cargo_capacity,        \n        passengers,\n        hyperdrive_rating,\n        MGLT,\n\n         -- Entity counts \n        CASE WHEN pilots IS NOT NULL THEN jsonb_array_length(pilots::jsonb) ELSE 0 END AS pilot_count,\n        CASE WHEN films IS NOT NULL THEN jsonb_array_length(films::jsonb) ELSE 0 END AS film_appearances,\n\n        -- Ship classification\n        CASE\n            WHEN lower(starship_class) IN ('corvette', 'frigate', 'star destroyer', 'dreadnought')\n                OR lower(starship_name) LIKE '%star destroyer%' THEN 'Military'\n            WHEN lower(starship_class) IN ('transport', 'freighter', 'yacht') \n                OR lower(starship_name) LIKE '%transport%' THEN 'Commercial'\n            WHEN lower(starship_class) IN ('starfighter', 'bomber', 'assault ship')\n                OR lower(starship_name) LIKE '%fighter%' THEN 'Starfighter'\n            ELSE 'Other'\n        END AS ship_purpose,\n\n        -- Notable ship flag\n        CASE\n            WHEN starship_name IN ('Millennium Falcon', 'Death Star', 'Star Destroyer', \n                        'X-wing', 'TIE Advanced x1', 'Executor', 'Slave 1') \n            THEN TRUE\n            ELSE FALSE\n        END AS is_notable_ship,\n\n        created_at,\n        edited_at,\n        dbt_loaded_at,\n        url\n    from {{ ref('stg_swapi_starships') }}\n)\n\nselect * from starships", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_starships.sql", "compiled": true, "compiled_code": "\n\nwith starships as (        \n    select\n        \n        starship_id,\n        starship_name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,        \n        cost_in_credits,\n        length,\n        max_atmosphering_speed,\n        cargo_capacity,        \n        passengers,\n        hyperdrive_rating,\n        MGLT,\n\n         -- Entity counts \n        CASE WHEN pilots IS NOT NULL THEN jsonb_array_length(pilots::jsonb) ELSE 0 END AS pilot_count,\n        CASE WHEN films IS NOT NULL THEN jsonb_array_length(films::jsonb) ELSE 0 END AS film_appearances,\n\n        -- Ship classification\n        CASE\n            WHEN lower(starship_class) IN ('corvette', 'frigate', 'star destroyer', 'dreadnought')\n                OR lower(starship_name) LIKE '%star destroyer%' THEN 'Military'\n            WHEN lower(starship_class) IN ('transport', 'freighter', 'yacht') \n                OR lower(starship_name) LIKE '%transport%' THEN 'Commercial'\n            WHEN lower(starship_class) IN ('starfighter', 'bomber', 'assault ship')\n                OR lower(starship_name) LIKE '%fighter%' THEN 'Starfighter'\n            ELSE 'Other'\n        END AS ship_purpose,\n\n        -- Notable ship flag\n        CASE\n            WHEN starship_name IN ('Millennium Falcon', 'Death Star', 'Star Destroyer', \n                        'X-wing', 'TIE Advanced x1', 'Executor', 'Slave 1') \n            THEN TRUE\n            ELSE FALSE\n        END AS is_notable_ship,\n\n        created_at,\n        edited_at,\n        dbt_loaded_at,\n        url\n    from \"nerd_facts\".\"public\".\"stg_swapi_starships\"\n)\n\nselect * from starships", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_films_characters": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_films_characters", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_films_characters.sql", "original_file_path": "models/intermediate/int_swapi_films_characters.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_films_characters", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_films_characters"], "alias": "int_swapi_films_characters", "checksum": {"name": "sha256", "checksum": "6eedf90c9251f91418573cabdf4f23d35f70e85cf34a5f525055b258c6f84cd5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.5040925, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_characters\"", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n/*\n  Model: int_swapi_films_characters\n  Description: Creates a relationship table between films and characters\n  Source: Using films.characters array\n*/\n\n-- Get relationships from films perspective (the only available direction)\nwith films_to_characters as (\n    select\n        film_id,\n        jsonb_array_elements_text(characters::jsonb)::integer as people_id\n    from {{ ref('stg_swapi_films') }}\n    where characters is not null and jsonb_array_length(characters::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fc.film_id,\n    fc.people_id,\n    f.title as film_title,\n    p.name as character_name,\n    f.release_date,\n    p.gender,\n    p.birth_year,\n    -- Create a unique key for the relationship\n    {{ dbt_utils.generate_surrogate_key(['fc.film_id', 'fc.people_id']) }} as film_character_key\nfrom \n    films_to_characters fc\njoin \n    {{ ref('stg_swapi_films') }} f on fc.film_id = f.film_id\njoin \n    {{ ref('stg_swapi_people') }} p on fc.people_id = p.people_id\norder by\n    f.release_date, p.name", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_films_characters.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_characters\n  Description: Creates a relationship table between films and characters\n  Source: Using films.characters array\n*/\n\n-- Get relationships from films perspective (the only available direction)\nwith films_to_characters as (\n    select\n        film_id,\n        jsonb_array_elements_text(characters::jsonb)::integer as people_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where characters is not null and jsonb_array_length(characters::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fc.film_id,\n    fc.people_id,\n    f.title as film_title,\n    p.name as character_name,\n    f.release_date,\n    p.gender,\n    p.birth_year,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(fc.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fc.people_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_character_key\nfrom \n    films_to_characters fc\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on fc.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_people\" p on fc.people_id = p.people_id\norder by\n    f.release_date, p.name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_films_starships": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_films_starships", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_films_starships.sql", "original_file_path": "models/intermediate/int_swapi_films_starships.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_films_starships", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_films_starships"], "alias": "int_swapi_films_starships", "checksum": {"name": "sha256", "checksum": "012452409e68db61bb4f2c724008d3dc29219a96902401e61e738aa9bf6ff74e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.5113404, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_starships\"", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n/*\n  Model: int_swapi_films_starships\n  Description: Creates a comprehensive many-to-many relationship table between films and starships\n  Source: Combines data from both films.starships and starships.films arrays for completeness\n*/\n\n-- Get relationships from films perspective\nwith films_to_starships as (\n    select\n        film_id,\n        jsonb_array_elements_text(starships::jsonb)::integer as starship_id\n    from {{ ref('stg_swapi_films') }}\n    where starships is not null and jsonb_array_length(starships::jsonb) > 0\n),\n\n-- Get relationships from starships perspective\nstarships_to_films as (\n    select\n        starship_id,\n        jsonb_array_elements_text(films::jsonb)::integer as film_id\n    from {{ ref('stg_swapi_starships') }}\n    where films is not null and jsonb_array_length(films::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select film_id, starship_id from films_to_starships\n    union\n    select film_id, starship_id from starships_to_films\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct film_id, starship_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.film_id,\n    ur.starship_id,\n    f.title as film_title,\n    s.starship_name,\n    f.release_date,\n    -- Create a unique key for the relationship\n    {{ dbt_utils.generate_surrogate_key(['ur.film_id', 'ur.starship_id']) }} as film_starship_key\nfrom \n    unique_relationships ur\njoin \n    {{ ref('stg_swapi_films') }} f on ur.film_id = f.film_id\njoin \n    {{ ref('stg_swapi_starships') }} s on ur.starship_id = s.starship_id\norder by\n    f.release_date, s.starship_name", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_starships", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_films_starships.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_starships\n  Description: Creates a comprehensive many-to-many relationship table between films and starships\n  Source: Combines data from both films.starships and starships.films arrays for completeness\n*/\n\n-- Get relationships from films perspective\nwith films_to_starships as (\n    select\n        film_id,\n        jsonb_array_elements_text(starships::jsonb)::integer as starship_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where starships is not null and jsonb_array_length(starships::jsonb) > 0\n),\n\n-- Get relationships from starships perspective\nstarships_to_films as (\n    select\n        starship_id,\n        jsonb_array_elements_text(films::jsonb)::integer as film_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_starships\"\n    where films is not null and jsonb_array_length(films::jsonb) > 0\n),\n\n-- Combine both sources with UNION\ncombined_relationships as (\n    select film_id, starship_id from films_to_starships\n    union\n    select film_id, starship_id from starships_to_films\n),\n\n-- Remove any duplicates\nunique_relationships as (\n    select distinct film_id, starship_id \n    from combined_relationships\n)\n\n-- Final output with useful metadata\nselect \n    ur.film_id,\n    ur.starship_id,\n    f.title as film_title,\n    s.starship_name,\n    f.release_date,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(ur.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ur.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_starship_key\nfrom \n    unique_relationships ur\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on ur.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_starships\" s on ur.starship_id = s.starship_id\norder by\n    f.release_date, s.starship_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_films": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_films.sql", "original_file_path": "models/intermediate/int_swapi_films.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_films", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_films"], "alias": "int_swapi_films", "checksum": {"name": "sha256", "checksum": "df66c3793b38198c6ed279868a598edf0fb9517cd9e5c3936a492db1778f3bf2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.5190585, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith films as (\n    select\n        film_id,\n        episode_id,\n        title,        \n        opening_crawl,\n        director,\n        producer,\n\n        -- Entity counts with error handling and type casting to JSONB\n        COALESCE(jsonb_array_length(characters::jsonb), 0) AS character_count,\n        COALESCE(jsonb_array_length(planets::jsonb), 0) AS planet_count,\n        COALESCE(jsonb_array_length(starships::jsonb), 0) AS starship_count,\n        COALESCE(jsonb_array_length(vehicles::jsonb), 0) AS vehicle_count,\n        COALESCE(jsonb_array_length(species::jsonb), 0) AS species_count, \n\n        -- Derived film classification (use the casted episode_id field)\n        CASE\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Original Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n        ELSE 'Anthology'\n        END AS trilogy,       \n\n        -- Era classification (use the casted episode_id field)\n        CASE\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Republic Era'\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Imperial Era'\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'New Republic Era'\n            ELSE 'Various'\n        END AS era,\n\n        release_date,\n        created_at,\n        edited_at,\n        dbt_loaded_at,\n        url\n    from {{ ref('stg_swapi_films') }}\n)\n\nselect * from films", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_films.sql", "compiled": true, "compiled_code": "\n\nwith films as (\n    select\n        film_id,\n        episode_id,\n        title,        \n        opening_crawl,\n        director,\n        producer,\n\n        -- Entity counts with error handling and type casting to JSONB\n        COALESCE(jsonb_array_length(characters::jsonb), 0) AS character_count,\n        COALESCE(jsonb_array_length(planets::jsonb), 0) AS planet_count,\n        COALESCE(jsonb_array_length(starships::jsonb), 0) AS starship_count,\n        COALESCE(jsonb_array_length(vehicles::jsonb), 0) AS vehicle_count,\n        COALESCE(jsonb_array_length(species::jsonb), 0) AS species_count, \n\n        -- Derived film classification (use the casted episode_id field)\n        CASE\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Original Trilogy'\n        WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n        ELSE 'Anthology'\n        END AS trilogy,       \n\n        -- Era classification (use the casted episode_id field)\n        CASE\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 1 AND 3 THEN 'Republic Era'\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 4 AND 6 THEN 'Imperial Era'\n            WHEN CAST(episode_id AS INTEGER) BETWEEN 7 AND 9 THEN 'New Republic Era'\n            ELSE 'Various'\n        END AS era,\n\n        release_date,\n        created_at,\n        edited_at,\n        dbt_loaded_at,\n        url\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n)\n\nselect * from films", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_films_planets": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_films_planets", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_films_planets.sql", "original_file_path": "models/intermediate/int_swapi_films_planets.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_films_planets", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_films_planets"], "alias": "int_swapi_films_planets", "checksum": {"name": "sha256", "checksum": "4a209d97ad76525a2dda5d18b6dbd070e8c577b5a1778f532690a642395912c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.5216062, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_films_planets\"", "raw_code": "{{\n  config(\n    materialized = 'table'\n  )\n}}\n\n/*\n  Model: int_swapi_films_planets\n  Description: Creates a relationship table between films and planets\n  Source: Using films.planets array\n*/\n\n-- Get relationships from films perspective (only direction available)\nwith films_to_planets as (\n    select\n        film_id,\n        jsonb_array_elements_text(planets::jsonb)::integer as planet_id\n    from {{ ref('stg_swapi_films') }}\n    where planets is not null and jsonb_array_length(planets::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fp.film_id,\n    fp.planet_id,\n    f.title as film_title,\n    p.name as planet_name,\n    f.release_date,\n    p.climate,\n    p.terrain,\n    -- Create a unique key for the relationship\n    {{ dbt_utils.generate_surrogate_key(['fp.film_id', 'fp.planet_id']) }} as film_planet_key\nfrom \n    films_to_planets fp\njoin \n    {{ ref('stg_swapi_films') }} f on fp.film_id = f.film_id\njoin \n    {{ ref('stg_swapi_planets') }} p on fp.planet_id = p.planet_id\norder by\n    f.release_date, p.name", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_films_planets.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_films_planets\n  Description: Creates a relationship table between films and planets\n  Source: Using films.planets array\n*/\n\n-- Get relationships from films perspective (only direction available)\nwith films_to_planets as (\n    select\n        film_id,\n        jsonb_array_elements_text(planets::jsonb)::integer as planet_id\n    from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n    where planets is not null and jsonb_array_length(planets::jsonb) > 0\n)\n\n-- Final output with useful metadata\nselect \n    fp.film_id,\n    fp.planet_id,\n    f.title as film_title,\n    p.name as planet_name,\n    f.release_date,\n    p.climate,\n    p.terrain,\n    -- Create a unique key for the relationship\n    md5(cast(coalesce(cast(fp.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fp.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as film_planet_key\nfrom \n    films_to_planets fp\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_films\" f on fp.film_id = f.film_id\njoin \n    \"nerd_facts\".\"public\".\"stg_swapi_planets\" p on fp.planet_id = p.planet_id\norder by\n    f.release_date, p.name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_people": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_people", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_people.sql", "original_file_path": "models/intermediate/int_swapi_people.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_people", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_people"], "alias": "int_swapi_people", "checksum": {"name": "sha256", "checksum": "23b035c1db6ff21de4628c3788b45371aaddba5285a0fe35581694f5afcd156c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.527416, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_people\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith people as (\n    select        \n        people_id,        \n        name,        \n        LOWER(COALESCE(hair_color, 'unknown')) AS hair_color,\n        LOWER(COALESCE(skin_color, 'unknown')) AS skin_color,\n        LOWER(COALESCE(eye_color, 'unknown')) AS eye_color,\n        birth_year,\n        LOWER(COALESCE(gender, 'unknown')) AS gender,\n        homeworld as homeworld_id,                \n        height,\n        mass,\n        -- Force detection\n        CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'obi-wan kenobi', 'yoda', \n                           'emperor palpatine', 'count dooku', 'qui-gon jinn', 'mace windu',\n                           'rey', 'kylo ren', 'anakin skywalker', 'leia organa', \n                           'ahsoka tano', 'darth maul')\n        THEN TRUE\n        ELSE FALSE\n        END AS force_sensitive,\n        created_at,\n        edited_at,  \n        dbt_loaded_at,\n        url\n    from {{ ref('stg_swapi_people') }}\n)\n\nselect * from people", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_people.sql", "compiled": true, "compiled_code": "\n\nwith people as (\n    select        \n        people_id,        \n        name,        \n        LOWER(COALESCE(hair_color, 'unknown')) AS hair_color,\n        LOWER(COALESCE(skin_color, 'unknown')) AS skin_color,\n        LOWER(COALESCE(eye_color, 'unknown')) AS eye_color,\n        birth_year,\n        LOWER(COALESCE(gender, 'unknown')) AS gender,\n        homeworld as homeworld_id,                \n        height,\n        mass,\n        -- Force detection\n        CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'obi-wan kenobi', 'yoda', \n                           'emperor palpatine', 'count dooku', 'qui-gon jinn', 'mace windu',\n                           'rey', 'kylo ren', 'anakin skywalker', 'leia organa', \n                           'ahsoka tano', 'darth maul')\n        THEN TRUE\n        ELSE FALSE\n        END AS force_sensitive,\n        created_at,\n        edited_at,  \n        dbt_loaded_at,\n        url\n    from \"nerd_facts\".\"public\".\"stg_swapi_people\"\n)\n\nselect * from people", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.int_swapi_vehicles_people": {"database": "nerd_facts", "schema": "public", "name": "int_swapi_vehicles_people", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "intermediate/int_swapi_vehicles_people.sql", "original_file_path": "models/intermediate/int_swapi_vehicles_people.sql", "unique_id": "model.nerd_facts_dbt.int_swapi_vehicles_people", "fqn": ["nerd_facts_dbt", "intermediate", "int_swapi_vehicles_people"], "alias": "int_swapi_vehicles_people", "checksum": {"name": "sha256", "checksum": "6266f8758d7789faf91db0114bef767d5b1f1dad07eb2f8d692967f2374cb6b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909949.5296938, "relation_name": "\"nerd_facts\".\"public\".\"int_swapi_vehicles_people\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: int_swapi_vehicles_people\n  Description: Creates a minimal many-to-many relationship table between vehicles and people (pilots)\n  Source: stg_swapi_films.vehicles JSONB array\n*/\n\nwith vehicles_with_pilots as (\n    select\n        vehicle_id,\n        -- Extract each planet ID from the JSONB array\n        jsonb_array_elements_text(pilots::jsonb) as people_id_text\n    from {{ ref('stg_swapi_vehicles') }}\n    where pilots is not null and jsonb_array_length(pilots::jsonb) > 0\n)\n\nselect\n    v.vehicle_id,\n    -- Cast the starship ID from text to integer\n    v.people_id_text::integer as people_id\nfrom \n    vehicles_with_pilots v\norder by\n    vehicle_id, people_id", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/intermediate/int_swapi_vehicles_people.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: int_swapi_vehicles_people\n  Description: Creates a minimal many-to-many relationship table between vehicles and people (pilots)\n  Source: stg_swapi_films.vehicles JSONB array\n*/\n\nwith vehicles_with_pilots as (\n    select\n        vehicle_id,\n        -- Extract each planet ID from the JSONB array\n        jsonb_array_elements_text(pilots::jsonb) as people_id_text\n    from \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\n    where pilots is not null and jsonb_array_length(pilots::jsonb) > 0\n)\n\nselect\n    v.vehicle_id,\n    -- Cast the starship ID from text to integer\n    v.people_id_text::integer as people_id\nfrom \n    vehicles_with_pilots v\norder by\n    vehicle_id, people_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_types": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_types", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_types.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_types.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_types", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_types"], "alias": "stg_pokeapi_types", "checksum": {"name": "sha256", "checksum": "efc5ddbd6a787367a1d6a8db382c0f2e00272b71725486c66dfa100d66e67831"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon type data with basic type casting", "columns": {"type_id": {"name": "type_id", "description": "Primary key for types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_name": {"name": "type_name", "description": "Name of the elemental type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "damage_relations": {"name": "damage_relations", "description": "Raw JSONB object with damage multiplier relations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "game_indices": {"name": "game_indices", "description": "Raw JSONB array of game indices", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "generation": {"name": "generation", "description": "Raw JSONB object with generation data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "move_damage_class": {"name": "move_damage_class", "description": "Raw JSONB object with move damage class data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "moves": {"name": "moves", "description": "Raw JSONB array of moves of this type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pokemon": {"name": "pokemon", "description": "Raw JSONB array of Pok\u00e9mon of this type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for type data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.590865, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_types\"", "raw_code": "/*\n  Model: stg_pokeapi_types\n  Description: Standardizes Pok\u00e9mon type data from the PokeAPI\n  Source: raw.pokeapi_types\n  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n\n        -- JSON fields\n        damage_relations,\n        game_indices,\n        generation,\n        move_damage_class,\n        moves,\n        names,\n        past_damage_relations,\n        pokemon,\n        sprites\n    FROM raw.pokeapi_types\n    WHERE id IS NOT NULL\n)\n\n\nSELECT\n    -- Primary identifiers\n    id AS type_id,\n\n    -- Text fields\n    name AS type_name,\n\n    -- JSON fields\n    damage_relations,\n    game_indices,\n    generation,\n    move_damage_class,\n    moves,\n    names,\n    past_damage_relations,\n    pokemon,\n    sprites,\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi_types.sql", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_types\n  Description: Standardizes Pok\u00e9mon type data from the PokeAPI\n  Source: raw.pokeapi_types\n  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n\n        -- JSON fields\n        damage_relations,\n        game_indices,\n        generation,\n        move_damage_class,\n        moves,\n        names,\n        past_damage_relations,\n        pokemon,\n        sprites\n    FROM raw.pokeapi_types\n    WHERE id IS NOT NULL\n)\n\n\nSELECT\n    -- Primary identifiers\n    id AS type_id,\n\n    -- Text fields\n    name AS type_name,\n\n    -- JSON fields\n    damage_relations,\n    game_indices,\n    generation,\n    move_damage_class,\n    moves,\n    names,\n    past_damage_relations,\n    pokemon,\n    sprites,\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["type_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_abilities": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_abilities", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_abilities.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_abilities.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_abilities", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_abilities"], "alias": "stg_pokeapi_abilities", "checksum": {"name": "sha256", "checksum": "9fe62a90c2f0f2bff4fc562df328a8b99103d395524b7af52b4903649a3a030e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon ability data with basic type casting", "columns": {"ability_id": {"name": "ability_id", "description": "Primary key for abilities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ability_name": {"name": "ability_name", "description": "Name of the ability", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "generation_name": {"name": "generation_name", "description": "Generation name when ability was introduced", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "generation_number": {"name": "generation_number", "description": "Generation number when ability was introduced", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "effect_description": {"name": "effect_description", "description": "Full description of ability effect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "short_description": {"name": "short_description", "description": "Condensed description of ability effect", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pokemon_count": {"name": "pokemon_count", "description": "Number of Pok\u00e9mon that can have this ability", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_main_series": {"name": "is_main_series", "description": "Whether ability appears in main series games", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_stat_boosting": {"name": "is_stat_boosting", "description": "Whether ability can boost stats", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weather_related": {"name": "is_weather_related", "description": "Whether ability interacts with weather effects", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "affects_status_conditions": {"name": "affects_status_conditions", "description": "Whether ability affects status conditions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pokemon": {"name": "pokemon", "description": "Raw JSONB array of Pok\u00e9mon with this ability", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for ability data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.5760388, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"", "raw_code": "/*\n  Model: stg_pokeapi_abilities\n  Description: Standardizes Pok\u00e9mon ability data from the PokeAPI\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        is_main_series,\n\n        -- Generation information with explicit JSONB casting\n        flavor_text_entries,\n        effect_entries,\n        effect_changes,\n        names,\n        generation, \n        pokemon\n    FROM raw.pokeapi_abilities\n    WHERE id IS NOT NULL\n)\n\n\nSELECT\n    -- Primary identifiers\n    id as ability_id,\n    name AS ability_name,\n\n    -- Text fields  \n    is_main_series,\n\n    -- Generation information with explicit JSONB casting    \n    flavor_text_entries,\n    effect_entries,\n    effect_changes,\n    names,\n    generation,    \n    pokemon,    \n\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi_abilities.sql", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_abilities\n  Description: Standardizes Pok\u00e9mon ability data from the PokeAPI\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        is_main_series,\n\n        -- Generation information with explicit JSONB casting\n        flavor_text_entries,\n        effect_entries,\n        effect_changes,\n        names,\n        generation, \n        pokemon\n    FROM raw.pokeapi_abilities\n    WHERE id IS NOT NULL\n)\n\n\nSELECT\n    -- Primary identifiers\n    id as ability_id,\n    name AS ability_name,\n\n    -- Text fields  \n    is_main_series,\n\n    -- Generation information with explicit JSONB casting    \n    flavor_text_entries,\n    effect_entries,\n    effect_changes,\n    names,\n    generation,    \n    pokemon,    \n\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ability_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_pokemon": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_pokemon", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_pokemon.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_pokemon.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_pokemon"], "alias": "stg_pokeapi_pokemon", "checksum": {"name": "sha256", "checksum": "c96721885f9ade912c3be67652511c6c248fb0a8779bc6e2c5b11c11a0d9de49"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon data with basic type casting", "columns": {"pokemon_id": {"name": "pokemon_id", "description": "Primary key for Pok\u00e9mon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pokemon_name": {"name": "pokemon_name", "description": "Name of the Pok\u00e9mon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight": {"name": "weight", "description": "Weight in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_experience": {"name": "base_experience", "description": "Base experience gained when defeating this Pok\u00e9mon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_default": {"name": "is_default", "description": "Whether this is the default form of this Pok\u00e9mon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order": {"name": "order", "description": "Order for sorting (National Pok\u00e9dex order by default)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "abilities": {"name": "abilities", "description": "Raw JSONB array of abilities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "forms": {"name": "forms", "description": "Raw JSONB array of forms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "game_indices": {"name": "game_indices", "description": "Raw JSONB array of game appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "held_items": {"name": "held_items", "description": "Raw JSONB array of items this Pok\u00e9mon may hold", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "moves": {"name": "moves", "description": "Raw JSONB array of learnable moves", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "Raw JSONB object with species data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sprites": {"name": "sprites", "description": "Raw JSONB object with sprite URLs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "stats": {"name": "stats", "description": "Raw JSONB array of base stats", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "types": {"name": "types", "description": "Raw JSONB array of types", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for Pok\u00e9mon data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.5808923, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"", "raw_code": "/*\n  Model: stg_pokeapi_pokemon\n  Description: Standardizes Pok\u00e9mon data from the PokeAPI\n  Source: raw.pokeapi_pokemon\n  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        is_default,\n\n        -- Numeric fields\n        CASE WHEN height~E'^[0-9]+$' THEN height ELSE NULL END AS height,\n        CASE WHEN weight~E'^[0-9]+$' THEN weight ELSE NULL END AS weight,\n        CASE WHEN bmi~E'^[0-9]+[.][0-9]+$' THEN bmi ELSE NULL END AS bmi,\n        CASE WHEN base_experience~E'^[0-9]+$' THEN base_experience ELSE NULL END AS base_experience,\n        CASE WHEN \"order\"~E'^[0-9]+$' THEN \"order\" ELSE NULL END AS pokemon_order,        \n\n        -- JSON fields\n        abilities,\n        cries,\n        forms,\n        game_indices,\n        held_items,\n        location_area_encounters,\n        moves,\n        past_abilities,\n        past_types,      \n        stats,                \n        species,\n        sprites,\n        types        \n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id as pokemon_id,\n\n    -- Text fields\n    name as pokemon_name,\n    is_default,\n\n    -- Numeric fields\n    CAST(height AS NUMERIC) AS height,\n    CAST(weight AS NUMERIC) AS weight,\n    CAST(bmi AS NUMERIC) AS bmi,\n    CAST(base_experience AS NUMERIC) AS base_experience,\n    CAST(pokemon_order AS NUMERIC) AS pokemon_order,\n\n    -- JSON fields\n    abilities,\n    cries,\n    forms,\n    game_indices,\n    held_items,\n    location_area_encounters,\n    moves,\n    past_abilities,\n    past_types,      \n    stats,                \n    species,\n    sprites,\n    types,\n\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi_pokemon.sql", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_pokemon\n  Description: Standardizes Pok\u00e9mon data from the PokeAPI\n  Source: raw.pokeapi_pokemon\n  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        is_default,\n\n        -- Numeric fields\n        CASE WHEN height~E'^[0-9]+$' THEN height ELSE NULL END AS height,\n        CASE WHEN weight~E'^[0-9]+$' THEN weight ELSE NULL END AS weight,\n        CASE WHEN bmi~E'^[0-9]+[.][0-9]+$' THEN bmi ELSE NULL END AS bmi,\n        CASE WHEN base_experience~E'^[0-9]+$' THEN base_experience ELSE NULL END AS base_experience,\n        CASE WHEN \"order\"~E'^[0-9]+$' THEN \"order\" ELSE NULL END AS pokemon_order,        \n\n        -- JSON fields\n        abilities,\n        cries,\n        forms,\n        game_indices,\n        held_items,\n        location_area_encounters,\n        moves,\n        past_abilities,\n        past_types,      \n        stats,                \n        species,\n        sprites,\n        types        \n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id as pokemon_id,\n\n    -- Text fields\n    name as pokemon_name,\n    is_default,\n\n    -- Numeric fields\n    CAST(height AS NUMERIC) AS height,\n    CAST(weight AS NUMERIC) AS weight,\n    CAST(bmi AS NUMERIC) AS bmi,\n    CAST(base_experience AS NUMERIC) AS base_experience,\n    CAST(pokemon_order AS NUMERIC) AS pokemon_order,\n\n    -- JSON fields\n    abilities,\n    cries,\n    forms,\n    game_indices,\n    held_items,\n    location_area_encounters,\n    moves,\n    past_abilities,\n    past_types,      \n    stats,                \n    species,\n    sprites,\n    types,\n\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["pokemon_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_moves": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_moves", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_moves.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_moves.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_moves", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_moves"], "alias": "stg_pokeapi_moves", "checksum": {"name": "sha256", "checksum": "462ee9319e64226ae528e3d8102ec3c836c684749e8a098d8f61f2cd5620b9e6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon move data with basic type casting", "columns": {"move_id": {"name": "move_id", "description": "Primary key for moves", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "move_name": {"name": "move_name", "description": "Name of the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "accuracy": {"name": "accuracy", "description": "Move accuracy percentage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "effect_chance": {"name": "effect_chance", "description": "Probability of secondary effect occurring", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pp": {"name": "pp", "description": "Base Power Points (usage count)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "priority": {"name": "priority", "description": "Move priority for turn order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "power": {"name": "power", "description": "Base power of the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contest_combos": {"name": "contest_combos", "description": "Raw JSONB object with contest combo data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contest_effect": {"name": "contest_effect", "description": "Raw JSONB object with contest effect data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contest_type": {"name": "contest_type", "description": "Raw JSONB object with contest type data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "damage_class": {"name": "damage_class", "description": "Raw JSONB object with damage class data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "effect_entries": {"name": "effect_entries", "description": "Raw JSONB array of effect descriptions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "flavor_text_entries": {"name": "flavor_text_entries", "description": "Raw JSONB array of flavor text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "generation": {"name": "generation", "description": "Raw JSONB object with generation data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "meta": {"name": "meta", "description": "Raw JSONB object with meta data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "machines": {"name": "machines", "description": "Raw JSONB array of TM/HM data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "past_values": {"name": "past_values", "description": "Raw JSONB array of past generation values", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "stat_changes": {"name": "stat_changes", "description": "Raw JSONB array of stat changes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "super_contest_effect": {"name": "super_contest_effect", "description": "Raw JSONB object with super contest effect data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "target": {"name": "target", "description": "Raw JSONB object with target data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "Raw JSONB object with type data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for move data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view", "unique_key": "id"}, "created_at": 1742909950.5863912, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_moves\"", "raw_code": "{{\n  config(\n    materialized = 'view',\n    unique_key = 'id'\n  )\n}}\n\n/*\n  Model: stg_pokeapi_moves\n  Description: Standardizes Pok\u00e9mon move data from the PokeAPI\n  \n  Notes:\n  - Added safe type casting for numeric fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        \n\n        -- Numeric fields\n        CASE WHEN power~E'^[0-9]+$' THEN power ELSE NULL END AS power,\n        CASE WHEN pp~E'^[0-9]+$' THEN pp ELSE NULL END AS pp,\n        CASE WHEN accuracy~E'^[0-9]+$' THEN accuracy ELSE NULL END AS accuracy,\n        CASE WHEN priority~E'^[0-9]+$' THEN priority ELSE NULL END AS priority,\n        CASE WHEN effect_chance~E'^[0-9]+$' THEN effect_chance ELSE NULL END AS effect_chance,        \n\n        -- JSON fields\n        damage_class,\n        contest_combos,\n        contest_type,\n        contest_effect,\n        effect_changes,\n        effect_entries,\n        flavor_text_entries,\n        generation,\n        learned_by_pokemon,\n        machines,\n        meta,\n        names,\n        past_values,\n        stat_changes,\n        type,\n        target\n    FROM {{ source('pokeapi', 'moves') }}\n    WHERE id IS NOT NULL\n)\n\n\n\nSELECT\n    -- Primary identifiers\n    id as move_id,\n\n    -- Text fields\n    name as move_name,\n    \n\n    -- Numeric fields\n    CAST(power AS NUMERIC) AS power,\n    CAST(pp AS NUMERIC) AS pp,\n    CAST(accuracy AS NUMERIC) AS accuracy,\n    CAST(priority AS NUMERIC) AS priority,\n    CAST(effect_chance AS NUMERIC) AS effect_chance,\n\n    -- JSON fields\n    damage_class,\n    contest_combos,\n    contest_type,\n    contest_effect,\n    effect_changes,\n    effect_entries,\n    flavor_text_entries,\n    generation,\n    learned_by_pokemon,\n    machines,\n    meta,\n    names,\n    past_values,\n    stat_changes,\n    type,\n    target,\n    -- Source tracking - removed missing source fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi_moves.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_pokeapi_moves\n  Description: Standardizes Pok\u00e9mon move data from the PokeAPI\n  \n  Notes:\n  - Added safe type casting for numeric fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,\n        \n\n        -- Numeric fields\n        CASE WHEN power~E'^[0-9]+$' THEN power ELSE NULL END AS power,\n        CASE WHEN pp~E'^[0-9]+$' THEN pp ELSE NULL END AS pp,\n        CASE WHEN accuracy~E'^[0-9]+$' THEN accuracy ELSE NULL END AS accuracy,\n        CASE WHEN priority~E'^[0-9]+$' THEN priority ELSE NULL END AS priority,\n        CASE WHEN effect_chance~E'^[0-9]+$' THEN effect_chance ELSE NULL END AS effect_chance,        \n\n        -- JSON fields\n        damage_class,\n        contest_combos,\n        contest_type,\n        contest_effect,\n        effect_changes,\n        effect_entries,\n        flavor_text_entries,\n        generation,\n        learned_by_pokemon,\n        machines,\n        meta,\n        names,\n        past_values,\n        stat_changes,\n        type,\n        target\n    FROM \"nerd_facts\".\"raw\".\"pokeapi_moves\"\n    WHERE id IS NOT NULL\n)\n\n\n\nSELECT\n    -- Primary identifiers\n    id as move_id,\n\n    -- Text fields\n    name as move_name,\n    \n\n    -- Numeric fields\n    CAST(power AS NUMERIC) AS power,\n    CAST(pp AS NUMERIC) AS pp,\n    CAST(accuracy AS NUMERIC) AS accuracy,\n    CAST(priority AS NUMERIC) AS priority,\n    CAST(effect_chance AS NUMERIC) AS effect_chance,\n\n    -- JSON fields\n    damage_class,\n    contest_combos,\n    contest_type,\n    contest_effect,\n    effect_changes,\n    effect_entries,\n    flavor_text_entries,\n    generation,\n    learned_by_pokemon,\n    machines,\n    meta,\n    names,\n    past_values,\n    stat_changes,\n    type,\n    target,\n    -- Source tracking - removed missing source fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["move_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_pokeapi_items": {"database": "nerd_facts", "schema": "public", "name": "stg_pokeapi_items", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/pokeapi/stg_pokeapi_items.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi_items.sql", "unique_id": "model.nerd_facts_dbt.stg_pokeapi_items", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "stg_pokeapi_items"], "alias": "stg_pokeapi_items", "checksum": {"name": "sha256", "checksum": "a15f0b46256771f1cac94fb6dc234898998a9a624489bd024c9f1af76b2842cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Pok\u00e9mon item data with basic type casting", "columns": {"item_id": {"name": "item_id", "description": "Primary key for items", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name of the item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost": {"name": "cost", "description": "Purchase cost in Pok\u00e9mon currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fling_power": {"name": "fling_power", "description": "Base power when flung", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "attributes": {"name": "attributes", "description": "Raw JSONB array of item attributes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "Raw JSONB object with category data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "effect_entries": {"name": "effect_entries", "description": "Raw JSONB array of effect descriptions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "flavor_text_entries": {"name": "flavor_text_entries", "description": "Raw JSONB array of flavor text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fling_effect": {"name": "fling_effect", "description": "Raw JSONB object with fling effect data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "game_indices": {"name": "game_indices", "description": "Raw JSONB array of game indices", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "held_by_pokemon": {"name": "held_by_pokemon", "description": "Raw JSONB array of Pok\u00e9mon that may hold this item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "machines": {"name": "machines", "description": "Raw JSONB array of machines this item can be used for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sprites": {"name": "sprites", "description": "Raw JSONB object with sprite URLs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for item data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/pokeapi/stg_pokeapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.5891914, "relation_name": "\"nerd_facts\".\"public\".\"stg_pokeapi_items\"", "raw_code": "/*\n  Model: stg_pokeapi_items\n  Description: Standardizes Pok\u00e9mon item data from the PokeAPI\n  Source: raw.pokeapi_items\n  \n  Notes:  \n  - Fixed type casting issues with numeric fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,        \n\n        -- Numeric fields\n        CASE WHEN cost ~ E'^[0-9]+$' THEN cost ELSE NULL END AS cost,\n        CASE WHEN fling_power ~ E'^[0-9]+$' THEN fling_power ELSE NULL END AS fling_power,\n\n        -- JSON fields\n        attributes,\n        baby_trigger_for,\n        category,\n        effect_entries, \n        flavor_text_entries,       \n        fling_effect,\n        game_indices,\n        held_by_pokemon,\n        names,\n        machines,        \n        sprites\n    FROM raw.pokeapi_items\n    WHERE id IS NOT NULL\n)\n\nSELECT\n         -- Primary identifiers\n        id as item_id,\n\n        -- Text fields\n        name as item_name,        \n\n        -- Numeric fields\n        CAST(cost AS NUMERIC) AS cost,\n        CAST(fling_power AS NUMERIC) AS fling_power,        \n\n        -- JSON fields\n        attributes,\n        baby_trigger_for,\n        category,\n        effect_entries, \n        flavor_text_entries,       \n        fling_effect,\n        game_indices,\n        held_by_pokemon,\n        names,\n        machines,        \n        sprites,\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi_items.sql", "compiled": true, "compiled_code": "/*\n  Model: stg_pokeapi_items\n  Description: Standardizes Pok\u00e9mon item data from the PokeAPI\n  Source: raw.pokeapi_items\n  \n  Notes:  \n  - Fixed type casting issues with numeric fields\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        name,        \n\n        -- Numeric fields\n        CASE WHEN cost ~ E'^[0-9]+$' THEN cost ELSE NULL END AS cost,\n        CASE WHEN fling_power ~ E'^[0-9]+$' THEN fling_power ELSE NULL END AS fling_power,\n\n        -- JSON fields\n        attributes,\n        baby_trigger_for,\n        category,\n        effect_entries, \n        flavor_text_entries,       \n        fling_effect,\n        game_indices,\n        held_by_pokemon,\n        names,\n        machines,        \n        sprites\n    FROM raw.pokeapi_items\n    WHERE id IS NOT NULL\n)\n\nSELECT\n         -- Primary identifiers\n        id as item_id,\n\n        -- Text fields\n        name as item_name,        \n\n        -- Numeric fields\n        CAST(cost AS NUMERIC) AS cost,\n        CAST(fling_power AS NUMERIC) AS fling_power,        \n\n        -- JSON fields\n        attributes,\n        baby_trigger_for,\n        category,\n        effect_entries, \n        flavor_text_entries,       \n        fling_effect,\n        game_indices,\n        held_by_pokemon,\n        names,\n        machines,        \n        sprites,\n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_netrunner_packs": {"database": "nerd_facts", "schema": "public", "name": "stg_netrunner_packs", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/netrunner/stg_netrunner_packs.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_packs.sql", "unique_id": "model.nerd_facts_dbt.stg_netrunner_packs", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "stg_netrunner_packs"], "alias": "stg_netrunner_packs", "checksum": {"name": "sha256", "checksum": "dce35917879141771d464169676a08917c1249d299d0f8d90d508687475b401e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Android: Netrunner data pack data with release information", "columns": {"pack_id": {"name": "pack_id", "description": "Primary key for data packs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_code": {"name": "pack_code", "description": "Unique pack code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_name": {"name": "pack_name", "description": "Full pack name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_code": {"name": "cycle_code", "description": "Code reference to the cycle this pack belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_name": {"name": "cycle_name", "description": "Full name of the cycle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "Pack release date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "card_count": {"name": "card_count", "description": "Number of cards in this pack", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_core": {"name": "is_core", "description": "Whether this is a core set", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_deluxe": {"name": "is_deluxe", "description": "Whether this is a deluxe expansion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_rotation_proof": {"name": "is_rotation_proof", "description": "Whether cards in this pack are rotation-proof", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/netrunner/stg_netrunner.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.8032699, "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_packs\"", "raw_code": "/*\n  Model: stg_netrunner_packs\n  Description: Standardizes Netrunner card pack data from the raw source\n  Source: raw.netrunner_packs\n  \n  Packs represent the physical card sets released for Netrunner, such as core sets,\n  deluxe expansions, and data packs within a cycle.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        code,\n        name,\n        cycle_code,\n\n        -- Numeric fields\n        CASE WHEN(position~E'^[0-9]+$') THEN position ELSE NULL END AS position,\n        CASE WHEN(size~E'^[0-9]+$') THEN size ELSE NULL END AS size,\n        CASE WHEN ffg_id~E'^[0-9]+$' THEN ffg_id ELSE NULL END AS ffg_id,\n\n        -- Date fields\n        date_release\n                \n    FROM {{ source('netrunner', 'packs') }}  -- Updated to use source macro\n    WHERE code IS NOT NULL -- Filter out invalid entries\n)\n\nSELECT\n    -- Primary identifiers\n    id AS pack_id,\n\n    -- Text fields\n    code,\n    name as pack_name,\n    cycle_code,\n\n    -- Numeric fields\n    CAST(position AS NUMERIC) AS position,\n    CAST(size AS NUMERIC) AS size,\n    CAST(ffg_id AS NUMERIC) AS ffg_id, \n\n    -- Date fields\n    date_release AS release_at,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["netrunner", "packs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.netrunner.packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_packs.sql", "compiled": true, "compiled_code": "/*\n  Model: stg_netrunner_packs\n  Description: Standardizes Netrunner card pack data from the raw source\n  Source: raw.netrunner_packs\n  \n  Packs represent the physical card sets released for Netrunner, such as core sets,\n  deluxe expansions, and data packs within a cycle.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        code,\n        name,\n        cycle_code,\n\n        -- Numeric fields\n        CASE WHEN(position~E'^[0-9]+$') THEN position ELSE NULL END AS position,\n        CASE WHEN(size~E'^[0-9]+$') THEN size ELSE NULL END AS size,\n        CASE WHEN ffg_id~E'^[0-9]+$' THEN ffg_id ELSE NULL END AS ffg_id,\n\n        -- Date fields\n        date_release\n                \n    FROM \"nerd_facts\".\"raw\".\"netrunner_packs\"  -- Updated to use source macro\n    WHERE code IS NOT NULL -- Filter out invalid entries\n)\n\nSELECT\n    -- Primary identifiers\n    id AS pack_id,\n\n    -- Text fields\n    code,\n    name as pack_name,\n    cycle_code,\n\n    -- Numeric fields\n    CAST(position AS NUMERIC) AS position,\n    CAST(size AS NUMERIC) AS size,\n    CAST(ffg_id AS NUMERIC) AS ffg_id, \n\n    -- Date fields\n    date_release AS release_at,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["pack_code", "pack_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_netrunner_cards": {"database": "nerd_facts", "schema": "public", "name": "stg_netrunner_cards", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/netrunner/stg_netrunner_cards.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_cards.sql", "unique_id": "model.nerd_facts_dbt.stg_netrunner_cards", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "stg_netrunner_cards"], "alias": "stg_netrunner_cards", "checksum": {"name": "sha256", "checksum": "13488ad9b51be8f6a8a0f10d6cd9973f154c0e920a202d40dd47c5ef390f674c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Android: Netrunner card data with cleaned values and derived classifications", "columns": {"card_id": {"name": "card_id", "description": "Primary key for cards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Card title", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_code": {"name": "type_code", "description": "Code reference to card type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_name": {"name": "type_name", "description": "Full type name (e.g., 'Identity', 'ICE')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_code": {"name": "faction_code", "description": "Code reference to card faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_name": {"name": "faction_name", "description": "Full faction name (e.g., 'Shaper', 'NBN')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Corp/Runner side indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_code": {"name": "pack_code", "description": "Code reference to the data pack containing the card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_code": {"name": "cycle_code", "description": "Code reference to the cycle the card belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost": {"name": "cost", "description": "Card play/rez cost (in credits)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "strength": {"name": "strength", "description": "ICE/breaker strength value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "advancement_cost": {"name": "advancement_cost", "description": "Advancement requirement for agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "agenda_points": {"name": "agenda_points", "description": "Points given for scoring agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "card_text": {"name": "card_text", "description": "Card ability text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "flavor_text": {"name": "flavor_text", "description": "Flavor text on the card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "illustrator": {"name": "illustrator", "description": "Card illustrator name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "keywords_array": {"name": "keywords_array", "description": "Array of card keywords/subtypes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_agenda": {"name": "is_agenda", "description": "Whether the card is an agenda", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_ice": {"name": "is_ice", "description": "Whether the card is ICE", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_identity": {"name": "is_identity", "description": "Whether the card is an identity card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/netrunner/stg_netrunner.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.7972605, "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_cards\"", "raw_code": "/*\n  Model: stg_netrunner_cards\n  Description: Standardizes Netrunner card data from the raw source with faction and type enrichment\n\n  \n  Note: This model combines and replaces the previous stg_netrunner.sql model.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        code,\n        flavor,\n        title,\n        type_code,\n        faction_code,\n        pack_code,\n        illustrator,\n        keywords,        \n        side_code,        \n        text,                      \n        uniqueness, \n        stripped_text,\n        stripped_title,\n\n        -- Numeric fields\n        CASE WHEN agenda_points~E'^[0-9]+$' THEN agenda_points ELSE NULL END AS agenda_points,\n        CASE WHEN position~E'^[0-9]+$' THEN position ELSE NULL END AS position,\n        CASE WHEN quantity~E'^[0-9]+$' THEN quantity ELSE NULL END AS quantity,\n        CASE WHEN deck_limit~E'^[0-9]+$' THEN deck_limit ELSE NULL END AS deck_limit,\n        CASE WHEN minimum_deck_size~E'^[0-9]+$' THEN minimum_deck_size ELSE NULL END AS minimum_deck_size,\n        CASE WHEN memory_cost~E'^[0-9]+$' THEN memory_cost ELSE NULL END AS memory_cost,\n        CASE WHEN influence_limit~E'^[0-9]+$' THEN influence_limit ELSE NULL END AS influence_limit,\n        CASE WHEN strength~E'^[0-9]+$' THEN strength ELSE NULL END AS strength,\n        CASE WHEN base_link~E'^[0-9]+$' THEN base_link ELSE NULL END AS base_link,\n        CASE WHEN cost~E'^[0-9]+$' THEN cost ELSE NULL END AS cost,\n        CASE WHEN trash_cost~E'^[0-9]+$' THEN trash_cost ELSE NULL END AS trash_cost,\n        CASE WHEN faction_cost~E'^[0-9]+$' THEN faction_cost ELSE NULL END AS faction_cost,\n        CASE WHEN advancement_cost~E'^[0-9]+$' THEN advancement_cost ELSE NULL END AS advancement_cost        \n        \n    FROM {{ source('netrunner', 'cards') }}\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT    \n    -- Primary identifiers\n    id as card_id,\n\n    -- Text fields\n    code,\n    flavor,\n    title as card_name,\n    type_code,\n    faction_code,\n    pack_code,\n    illustrator,\n    keywords,        \n    side_code,        \n    text,                      \n    uniqueness, \n    stripped_text,\n    stripped_title,\n\n    -- Numeric fields\n    CAST(agenda_points AS NUMERIC) AS agenda_points,\n    CAST(position AS NUMERIC) AS position,\n    CAST(quantity AS NUMERIC) AS quantity,\n    CAST(deck_limit AS NUMERIC) AS deck_limit,\n    CAST(minimum_deck_size AS NUMERIC) AS minimum_deck_size,\n    CAST(memory_cost AS NUMERIC) AS memory_cost,\n    CAST(influence_limit AS NUMERIC) AS influence_limit,\n    CAST(strength AS NUMERIC) AS strength,\n    CAST(base_link AS NUMERIC) AS base_link,\n    CAST(cost AS NUMERIC) AS cost,\n    CAST(trash_cost AS NUMERIC) AS trash_cost,\n    CAST(faction_cost AS NUMERIC) AS faction_cost,\n    CAST(advancement_cost AS NUMERIC) AS advancement_cost,\n\n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at  \n        \nFROM raw_data", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_cards.sql", "compiled": true, "compiled_code": "/*\n  Model: stg_netrunner_cards\n  Description: Standardizes Netrunner card data from the raw source with faction and type enrichment\n\n  \n  Note: This model combines and replaces the previous stg_netrunner.sql model.\n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Primary identifiers\n        id,\n\n        -- Text fields\n        code,\n        flavor,\n        title,\n        type_code,\n        faction_code,\n        pack_code,\n        illustrator,\n        keywords,        \n        side_code,        \n        text,                      \n        uniqueness, \n        stripped_text,\n        stripped_title,\n\n        -- Numeric fields\n        CASE WHEN agenda_points~E'^[0-9]+$' THEN agenda_points ELSE NULL END AS agenda_points,\n        CASE WHEN position~E'^[0-9]+$' THEN position ELSE NULL END AS position,\n        CASE WHEN quantity~E'^[0-9]+$' THEN quantity ELSE NULL END AS quantity,\n        CASE WHEN deck_limit~E'^[0-9]+$' THEN deck_limit ELSE NULL END AS deck_limit,\n        CASE WHEN minimum_deck_size~E'^[0-9]+$' THEN minimum_deck_size ELSE NULL END AS minimum_deck_size,\n        CASE WHEN memory_cost~E'^[0-9]+$' THEN memory_cost ELSE NULL END AS memory_cost,\n        CASE WHEN influence_limit~E'^[0-9]+$' THEN influence_limit ELSE NULL END AS influence_limit,\n        CASE WHEN strength~E'^[0-9]+$' THEN strength ELSE NULL END AS strength,\n        CASE WHEN base_link~E'^[0-9]+$' THEN base_link ELSE NULL END AS base_link,\n        CASE WHEN cost~E'^[0-9]+$' THEN cost ELSE NULL END AS cost,\n        CASE WHEN trash_cost~E'^[0-9]+$' THEN trash_cost ELSE NULL END AS trash_cost,\n        CASE WHEN faction_cost~E'^[0-9]+$' THEN faction_cost ELSE NULL END AS faction_cost,\n        CASE WHEN advancement_cost~E'^[0-9]+$' THEN advancement_cost ELSE NULL END AS advancement_cost        \n        \n    FROM \"nerd_facts\".\"raw\".\"netrunner_cards\"\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT    \n    -- Primary identifiers\n    id as card_id,\n\n    -- Text fields\n    code,\n    flavor,\n    title as card_name,\n    type_code,\n    faction_code,\n    pack_code,\n    illustrator,\n    keywords,        \n    side_code,        \n    text,                      \n    uniqueness, \n    stripped_text,\n    stripped_title,\n\n    -- Numeric fields\n    CAST(agenda_points AS NUMERIC) AS agenda_points,\n    CAST(position AS NUMERIC) AS position,\n    CAST(quantity AS NUMERIC) AS quantity,\n    CAST(deck_limit AS NUMERIC) AS deck_limit,\n    CAST(minimum_deck_size AS NUMERIC) AS minimum_deck_size,\n    CAST(memory_cost AS NUMERIC) AS memory_cost,\n    CAST(influence_limit AS NUMERIC) AS influence_limit,\n    CAST(strength AS NUMERIC) AS strength,\n    CAST(base_link AS NUMERIC) AS base_link,\n    CAST(cost AS NUMERIC) AS cost,\n    CAST(trash_cost AS NUMERIC) AS trash_cost,\n    CAST(faction_cost AS NUMERIC) AS faction_cost,\n    CAST(advancement_cost AS NUMERIC) AS advancement_cost,\n\n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at  \n        \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["card_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_netrunner_factions": {"database": "nerd_facts", "schema": "public", "name": "stg_netrunner_factions", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/netrunner/stg_netrunner_factions.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_factions.sql", "unique_id": "model.nerd_facts_dbt.stg_netrunner_factions", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "stg_netrunner_factions"], "alias": "stg_netrunner_factions", "checksum": {"name": "sha256", "checksum": "8d5fcc6f7820a01707c8523c23753b5cc2a1df1ae4c88bce29026a7b26bd3bbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Android: Netrunner faction data with derived classifications", "columns": {"faction_id": {"name": "faction_id", "description": "Primary key for factions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_code": {"name": "faction_code", "description": "Unique faction code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_name": {"name": "faction_name", "description": "Full faction name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Corp/Runner side indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_mini_faction": {"name": "is_mini_faction", "description": "Whether this is a mini-faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "card_count": {"name": "card_count", "description": "Number of cards in this faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/netrunner/stg_netrunner.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.798949, "relation_name": "\"nerd_facts\".\"public\".\"stg_netrunner_factions\"", "raw_code": "/*\n  Model: stg_netrunner_factions\n  Description: Standardizes Netrunner faction data from the raw source\n  Source: raw.netrunner_factions\n  \n*/\n\nWITH raw_data AS (\n    -- Select all relevant columns from source\n    SELECT\n        -- Primary identifiers\n        id, \n\n        -- Text fields\n        code,\n        name,\n        side_code,\n        is_mini,\n        is_neutral,\n        color \n    FROM {{ source('netrunner', 'factions') }}\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT\n         -- Primary identifiers\n        id as faction_id, \n\n        -- Text fields\n        code,\n        name as faction_name,\n        side_code,\n        is_mini,\n        is_neutral,\n        color,\n    \n    -- Track record creation\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM raw_data", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_factions.sql", "compiled": true, "compiled_code": "/*\n  Model: stg_netrunner_factions\n  Description: Standardizes Netrunner faction data from the raw source\n  Source: raw.netrunner_factions\n  \n*/\n\nWITH raw_data AS (\n    -- Select all relevant columns from source\n    SELECT\n        -- Primary identifiers\n        id, \n\n        -- Text fields\n        code,\n        name,\n        side_code,\n        is_mini,\n        is_neutral,\n        color \n    FROM \"nerd_facts\".\"raw\".\"netrunner_factions\"\n    WHERE code IS NOT NULL -- Ensure we don't include invalid entries\n)\n\nSELECT\n         -- Primary identifiers\n        id as faction_id, \n\n        -- Text fields\n        code,\n        name as faction_name,\n        side_code,\n        is_mini,\n        is_neutral,\n        color,\n    \n    -- Track record creation\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["faction_code", "faction_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_vehicles": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_vehicles", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_vehicles.sql", "original_file_path": "models/staging/swapi/stg_swapi_vehicles.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_vehicles", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_vehicles"], "alias": "stg_swapi_vehicles", "checksum": {"name": "sha256", "checksum": "4cc71ebfacb4c08243f962f3fa6d8719ee4e7042bb8a068512d6616b79a30c6d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars vehicle data with basic type casting", "columns": {"vehicle_id": {"name": "vehicle_id", "description": "Primary key for vehicles", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Vehicle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Vehicle model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Vehicle manufacturer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_credits": {"name": "cost_in_credits", "description": "Cost in galactic credits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Length in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum speed in atmosphere", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Number of passengers vehicle can transport", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Time period before requiring resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_class": {"name": "vehicle_class", "description": "Vehicle class (e.g., wheeled, repulsorcraft)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSONB array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for vehicle data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.9615993, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_vehicles\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_vehicles\n  Description: Standardizes Star Wars vehicle data from SWAPI\n  Source: raw.swapi_vehicles\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Identitfiers\n        id,\n\n        -- Text fields\n        name,\n        model,\n        manufacturer,\n        vehicle_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CASE cost_in_credits~'^[0-9,.]+$' WHEN TRUE THEN cost_in_credits ELSE null END AS cost_in_credits,\n        CASE length~'^[0-9,.]+$' WHEN TRUE THEN length ELSE null END AS length,        \n        CASE max_atmosphering_speed~'^[0-9,.]+$' WHEN TRUE THEN max_atmosphering_speed ELSE null END AS max_atmosphering_speed,\n        CASE cargo_capacity~'^[0-9,.]+$' WHEN TRUE THEN cargo_capacity ELSE null END AS cargo_capacity,\n        CASE passengers~'^[0-9,.]+$' WHEN TRUE THEN passengers ELSE null END AS passengers,\n        CASE crew~'^[0-9,.]+$' WHEN TRUE THEN crew ELSE null END AS crew,                        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n        \n        -- Timestamp fields        \n        created,\n        edited\n    FROM {{ source('swapi', 'vehicles') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    id as vehicle_id,\n\n    -- Text fields\n    name as vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    consumables,\n    url,\n\n    -- Numeric fields\n    CAST(cost_in_credits AS NUMERIC) AS cost_in_credits,\n    CAST(length AS NUMERIC) AS length,\n    CAST(max_atmosphering_speed AS NUMERIC) AS max_atmosphering_speed,\n    CAST(cargo_capacity AS NUMERIC) AS cargo_capacity,\n    CAST(passengers AS NUMERIC) AS passengers,\n    CAST(crew AS NUMERIC) AS crew,                        \n    \n    -- Relationship arrays\n    pilots,\n    films,\n    \n    -- Timestamp fields        \n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS edited_at,\n\n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi_vehicles.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_vehicles\n  Description: Standardizes Star Wars vehicle data from SWAPI\n  Source: raw.swapi_vehicles\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Identitfiers\n        id,\n\n        -- Text fields\n        name,\n        model,\n        manufacturer,\n        vehicle_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CASE cost_in_credits~'^[0-9,.]+$' WHEN TRUE THEN cost_in_credits ELSE null END AS cost_in_credits,\n        CASE length~'^[0-9,.]+$' WHEN TRUE THEN length ELSE null END AS length,        \n        CASE max_atmosphering_speed~'^[0-9,.]+$' WHEN TRUE THEN max_atmosphering_speed ELSE null END AS max_atmosphering_speed,\n        CASE cargo_capacity~'^[0-9,.]+$' WHEN TRUE THEN cargo_capacity ELSE null END AS cargo_capacity,\n        CASE passengers~'^[0-9,.]+$' WHEN TRUE THEN passengers ELSE null END AS passengers,\n        CASE crew~'^[0-9,.]+$' WHEN TRUE THEN crew ELSE null END AS crew,                        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n        \n        -- Timestamp fields        \n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_vehicles\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    id as vehicle_id,\n\n    -- Text fields\n    name as vehicle_name,\n    model,\n    manufacturer,\n    vehicle_class,\n    consumables,\n    url,\n\n    -- Numeric fields\n    CAST(cost_in_credits AS NUMERIC) AS cost_in_credits,\n    CAST(length AS NUMERIC) AS length,\n    CAST(max_atmosphering_speed AS NUMERIC) AS max_atmosphering_speed,\n    CAST(cargo_capacity AS NUMERIC) AS cargo_capacity,\n    CAST(passengers AS NUMERIC) AS passengers,\n    CAST(crew AS NUMERIC) AS crew,                        \n    \n    -- Relationship arrays\n    pilots,\n    films,\n    \n    -- Timestamp fields        \n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS edited_at,\n\n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["vehicle_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_starships": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_starships", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_starships.sql", "original_file_path": "models/staging/swapi/stg_swapi_starships.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_starships", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_starships"], "alias": "stg_swapi_starships", "checksum": {"name": "sha256", "checksum": "841713a2bbbcf3eed8565dcbbef25ac31f73e911980a336870eef6a4f751680b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars starship data with basic type casting", "columns": {"starship_id": {"name": "starship_id", "description": "Primary key for starships", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Starship model specification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Company that manufactured the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum atmospheric speed in km/h", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Length in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hyperdrive_rating": {"name": "hyperdrive_rating", "description": "Hyperdrive class rating (lower is better)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew members required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Maximum passenger capacity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in metric tons", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Length of time the starship can sustain crew without resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "MGLT": {"name": "MGLT", "description": "Maximum speed in megalights per hour", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_class": {"name": "starship_class", "description": "Class of the starship (e.g., Star Destroyer, Light freighter)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSONB array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for starship data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.9471097, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_starships\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CASE cost_in_credits~E'[0-9]+$' WHEN TRUE THEN cost_in_credits ELSE NULL END AS cost_in_credits,\n        CASE length~E'[0-9]+$' WHEN TRUE THEN length ELSE NULL END AS length,\n        CASE TRIM(TRAILING 'km' from max_atmosphering_speed)~E'[0-9]+$' WHEN TRUE THEN TRIM(TRAILING 'km' from max_atmosphering_speed) ELSE NULL END AS max_atmosphering_speed,\n        CASE cargo_capacity~E'[0-9]+$' WHEN TRUE THEN cargo_capacity ELSE NULL END AS cargo_capacity,        \n        CASE passengers~E'[0-9]+$' WHEN TRUE THEN passengers ELSE NULL END AS passengers,\n        CASE hyperdrive_rating~E'[0-9]+$' WHEN TRUE THEN hyperdrive_rating ELSE NULL END AS hyperdrive_rating,\n        CASE MGLT~E'[0-9]+$' WHEN TRUE THEN MGLT ELSE NULL END AS MGLT,        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM {{ source('swapi', 'starships') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n      -- Id fields\n        id as starship_id,\n\n        -- Text fields\n        name AS starship_name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CAST(cost_in_credits AS NUMERIC) AS cost_in_credits,\n        CAST(REPLACE(length, ',', '') AS NUMERIC) AS length,\n        CAST(max_atmosphering_speed AS NUMERIC) AS max_atmosphering_speed,\n        CAST(cargo_capacity AS NUMERIC) AS cargo_capacity,        \n        CAST(REPLACE(passengers, ',', '') AS NUMERIC) AS passengers,\n        CAST(hyperdrive_rating AS NUMERIC) AS hyperdrive_rating,\n        CAST(MGLT AS NUMERIC) AS MGLT,        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n\n        -- Timestamp fields\n        CAST(created AS TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n\n        -- Data tracking field\n        CURRENT_TIMESTAMP AS dbt_loaded_at \n    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi_starships.sql", "compiled": true, "compiled_code": "\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CASE cost_in_credits~E'[0-9]+$' WHEN TRUE THEN cost_in_credits ELSE NULL END AS cost_in_credits,\n        CASE length~E'[0-9]+$' WHEN TRUE THEN length ELSE NULL END AS length,\n        CASE TRIM(TRAILING 'km' from max_atmosphering_speed)~E'[0-9]+$' WHEN TRUE THEN TRIM(TRAILING 'km' from max_atmosphering_speed) ELSE NULL END AS max_atmosphering_speed,\n        CASE cargo_capacity~E'[0-9]+$' WHEN TRUE THEN cargo_capacity ELSE NULL END AS cargo_capacity,        \n        CASE passengers~E'[0-9]+$' WHEN TRUE THEN passengers ELSE NULL END AS passengers,\n        CASE hyperdrive_rating~E'[0-9]+$' WHEN TRUE THEN hyperdrive_rating ELSE NULL END AS hyperdrive_rating,\n        CASE MGLT~E'[0-9]+$' WHEN TRUE THEN MGLT ELSE NULL END AS MGLT,        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_starships\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n      -- Id fields\n        id as starship_id,\n\n        -- Text fields\n        name AS starship_name,\n        model,\n        manufacturer,\n        crew,\n        starship_class,\n        consumables,\n        url,\n\n        -- Numeric fields\n        CAST(cost_in_credits AS NUMERIC) AS cost_in_credits,\n        CAST(REPLACE(length, ',', '') AS NUMERIC) AS length,\n        CAST(max_atmosphering_speed AS NUMERIC) AS max_atmosphering_speed,\n        CAST(cargo_capacity AS NUMERIC) AS cargo_capacity,        \n        CAST(REPLACE(passengers, ',', '') AS NUMERIC) AS passengers,\n        CAST(hyperdrive_rating AS NUMERIC) AS hyperdrive_rating,\n        CAST(MGLT AS NUMERIC) AS MGLT,        \n        \n        -- Relationship arrays\n        pilots,\n        films,\n\n        -- Timestamp fields\n        CAST(created AS TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n\n        -- Data tracking field\n        CURRENT_TIMESTAMP AS dbt_loaded_at \n    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["starship_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_films": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_films.sql", "original_file_path": "models/staging/swapi/stg_swapi_films.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_films", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_films"], "alias": "stg_swapi_films", "checksum": {"name": "sha256", "checksum": "fc4e992a7a485e23a9f7990495e4b53a5da14be554242bf80457d9e55878d5f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars film data with basic type casting", "columns": {"film_id": {"name": "film_id", "description": "Primary key for films", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_title": {"name": "film_title", "description": "Film title", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "episode_id": {"name": "episode_id", "description": "Episode number in the saga", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "opening_crawl": {"name": "opening_crawl", "description": "Opening crawl text from the film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "director": {"name": "director", "description": "Film director", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "producer": {"name": "producer", "description": "Film producer(s)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "Theatrical release date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "characters": {"name": "characters", "description": "JSONB array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planets": {"name": "planets", "description": "JSONB array of planet references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starships": {"name": "starships", "description": "JSONB array of starship references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles": {"name": "vehicles", "description": "JSONB array of vehicle references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "JSONB array of species references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the film data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.9505994, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_films\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_films\n  Description: Standardizes Star Wars film data from SWAPI\n  Source: raw.swapi_films\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Id fields\n        id,\n        episode_id,\n\n        -- Text fields\n        title,        \n        opening_crawl,\n        director,\n        producer,\n        url,\n\n        -- Date fields\n        release_date,\n        created,\n        edited,\n\n        -- Relationship arrays\n        planets,\n        starships,\n        vehicles,\n        species,\n        characters                        \n    FROM {{ source('swapi', 'films') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n        -- Id fields\n        id as film_id,\n        CAST(episode_id AS INTEGER) AS episode_id,\n\n        -- Text fields\n        title,        \n        opening_crawl,\n        director,\n        producer,\n        url,\n\n        -- Date fields\n        CAST(release_date as DATE) AS release_date,\n\n        -- Timestamp fields\n        CAST(created as TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n\n        -- Relationship arrays\n        planets,\n        starships,\n        vehicles,\n        species,\n        characters,\n\n        -- Add data tracking field\n        CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi_films.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_films\n  Description: Standardizes Star Wars film data from SWAPI\n  Source: raw.swapi_films\n  \n  Notes:\n  - Numeric fields are cleaned and converted to proper types  \n*/\n\nWITH raw_data AS (\n    -- Explicitly list columns to prevent issues if source schema changes\n    SELECT\n        -- Id fields\n        id,\n        episode_id,\n\n        -- Text fields\n        title,        \n        opening_crawl,\n        director,\n        producer,\n        url,\n\n        -- Date fields\n        release_date,\n        created,\n        edited,\n\n        -- Relationship arrays\n        planets,\n        starships,\n        vehicles,\n        species,\n        characters                        \n    FROM \"nerd_facts\".\"raw\".\"swapi_films\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n        -- Id fields\n        id as film_id,\n        CAST(episode_id AS INTEGER) AS episode_id,\n\n        -- Text fields\n        title,        \n        opening_crawl,\n        director,\n        producer,\n        url,\n\n        -- Date fields\n        CAST(release_date as DATE) AS release_date,\n\n        -- Timestamp fields\n        CAST(created as TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n\n        -- Relationship arrays\n        planets,\n        starships,\n        vehicles,\n        species,\n        characters,\n\n        -- Add data tracking field\n        CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["film_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_planets": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_planets", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_planets.sql", "original_file_path": "models/staging/swapi/stg_swapi_planets.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_planets", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_planets"], "alias": "stg_swapi_planets", "checksum": {"name": "sha256", "checksum": "1338a598ccb64d2b9c553928825afebff239f9e2208d4499647f22a97aa5fd29"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars planet data with basic type casting", "columns": {"planet_id": {"name": "planet_id", "description": "Primary key for planets", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Planet name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rotation_period": {"name": "rotation_period", "description": "Hours to complete one rotation on axis", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "orbital_period": {"name": "orbital_period", "description": "Days to complete one orbit around star", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "diameter": {"name": "diameter", "description": "Diameter in kilometers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "climate": {"name": "climate", "description": "Climate types on planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gravity": {"name": "gravity", "description": "Gravity relative to standard", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "terrain": {"name": "terrain", "description": "Terrain types on planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "surface_water": {"name": "surface_water", "description": "Percentage of planet covered by water", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "population": {"name": "population", "description": "Population count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "residents": {"name": "residents", "description": "JSONB array of resident references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for planet data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.9566853, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_planets\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_planets\n  Description: Standardizes Star Wars planet data from SWAPI\n  Source: raw.swapi_planets\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Identitfiers\n        id,\n\n        -- Text fields\n        name,        \n        climate,\n        gravity,\n        terrain,\n        url,\n\n        -- Numeric fields\n        CASE WHEN surface_water~E'^[0-9]+$' THEN surface_water ELSE NULL END AS surface_water,\n        CASE WHEN rotation_period~E'^[0-9]+$' THEN rotation_period ELSE NULL END AS rotation_period,\n        CASE WHEN orbital_period~E'^[0-9]+$' THEN orbital_period ELSE NULL END AS orbital_period,\n        CASE WHEN diameter~E'^[0-9]+$' THEN diameter ELSE NULL END AS diameter,\n        CASE WHEN population~E'^[0-9]+$' THEN population ELSE NULL END AS population,\n        \n        -- Timestamp fields\n        created,\n        edited\n    FROM {{ source('swapi', 'planets') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id as planet_id,\n    name AS planet_name,\n\n    -- Text fields\n    name,        \n    climate,\n    gravity,\n    terrain,\n    url,\n    \n    -- Physical characteristics with proper numeric handling\n    CAST(surface_water AS NUMERIC) AS surface_water,\n    CAST(rotation_period AS NUMERIC) AS rotation_period,\n    CAST(orbital_period AS NUMERIC) AS orbital_period,\n    CAST(diameter AS NUMERIC) AS diameter,        \n    CAST(population AS NUMERIC) AS population,    \n    \n    -- ETL tracking fields\n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS updated_at,    \n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi_planets.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_planets\n  Description: Standardizes Star Wars planet data from SWAPI\n  Source: raw.swapi_planets\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Identitfiers\n        id,\n\n        -- Text fields\n        name,        \n        climate,\n        gravity,\n        terrain,\n        url,\n\n        -- Numeric fields\n        CASE WHEN surface_water~E'^[0-9]+$' THEN surface_water ELSE NULL END AS surface_water,\n        CASE WHEN rotation_period~E'^[0-9]+$' THEN rotation_period ELSE NULL END AS rotation_period,\n        CASE WHEN orbital_period~E'^[0-9]+$' THEN orbital_period ELSE NULL END AS orbital_period,\n        CASE WHEN diameter~E'^[0-9]+$' THEN diameter ELSE NULL END AS diameter,\n        CASE WHEN population~E'^[0-9]+$' THEN population ELSE NULL END AS population,\n        \n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_planets\"\n    WHERE id IS NOT NULL\n)\n\nSELECT\n    -- Primary identifiers\n    id as planet_id,\n    name AS planet_name,\n\n    -- Text fields\n    name,        \n    climate,\n    gravity,\n    terrain,\n    url,\n    \n    -- Physical characteristics with proper numeric handling\n    CAST(surface_water AS NUMERIC) AS surface_water,\n    CAST(rotation_period AS NUMERIC) AS rotation_period,\n    CAST(orbital_period AS NUMERIC) AS orbital_period,\n    CAST(diameter AS NUMERIC) AS diameter,        \n    CAST(population AS NUMERIC) AS population,    \n    \n    -- ETL tracking fields\n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS updated_at,    \n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["planet_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_people": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_people", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_people.sql", "original_file_path": "models/staging/swapi/stg_swapi_people.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_people", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_people"], "alias": "stg_swapi_people", "checksum": {"name": "sha256", "checksum": "0b7257b0881676e709a0967c7c628f4a6c378d38a1842eeb35a54c53ad2f445a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars character data with basic type casting", "columns": {"people_id": {"name": "people_id", "description": "Primary key for characters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Character name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "mass": {"name": "mass", "description": "Mass in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_color": {"name": "hair_color", "description": "Hair color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_color": {"name": "skin_color", "description": "Skin color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_color": {"name": "eye_color", "description": "Eye color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "birth_year": {"name": "birth_year", "description": "Birth year using in-universe BBY/ABY dating system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gender": {"name": "gender", "description": "Character gender", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld_id": {"name": "homeworld_id", "description": "ID of character's homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for character data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.9534538, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_people\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_people\n  Description: Standardizes Star Wars character data from SWAPI\n  Source: raw.swapi_people\n  \n  Notes:\n  - Physical attributes are cleaned and converted to proper numeric types  \n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        \n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        url,\n\n        -- Numeric fields\n        CASE WHEN height~E'^[0-9]+$' THEN height ELSE NULL END AS height,\n        CASE WHEN mass~E'^[0-9]+$' THEN mass ELSE NULL END AS mass,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM {{ source('swapi', 'people') }}\n    WHERE id IS NOT NULL\n)\n    select\n        -- Id fields\n        id as people_id,\n\n        -- Text fields\n        name,\n        \n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        url,\n\n        -- Numeric fields\n        CAST(height AS NUMERIC) AS height,\n        CAST(mass AS NUMERIC) AS mass,\n\n        -- Timestamp fields\n        CAST(created AS TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n        \n        -- Add data tracking fields\n        CURRENT_TIMESTAMP AS dbt_loaded_at\n        FROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi_people.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_people\n  Description: Standardizes Star Wars character data from SWAPI\n  Source: raw.swapi_people\n  \n  Notes:\n  - Physical attributes are cleaned and converted to proper numeric types  \n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        \n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        url,\n\n        -- Numeric fields\n        CASE WHEN height~E'^[0-9]+$' THEN height ELSE NULL END AS height,\n        CASE WHEN mass~E'^[0-9]+$' THEN mass ELSE NULL END AS mass,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_people\"\n    WHERE id IS NOT NULL\n)\n    select\n        -- Id fields\n        id as people_id,\n\n        -- Text fields\n        name,\n        \n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        url,\n\n        -- Numeric fields\n        CAST(height AS NUMERIC) AS height,\n        CAST(mass AS NUMERIC) AS mass,\n\n        -- Timestamp fields\n        CAST(created AS TIMESTAMP) AS created_at,\n        CAST(edited AS TIMESTAMP) AS edited_at,\n        \n        -- Add data tracking fields\n        CURRENT_TIMESTAMP AS dbt_loaded_at\n        FROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["people_id"], "time_spine": null}, "model.nerd_facts_dbt.stg_swapi_species": {"database": "nerd_facts", "schema": "public", "name": "stg_swapi_species", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "staging/swapi/stg_swapi_species.sql", "original_file_path": "models/staging/swapi/stg_swapi_species.sql", "unique_id": "model.nerd_facts_dbt.stg_swapi_species", "fqn": ["nerd_facts_dbt", "staging", "swapi", "stg_swapi_species"], "alias": "stg_swapi_species", "checksum": {"name": "sha256", "checksum": "1709bd39d85c33d6c31a030bb344dd0cb2333af5339f173185d6a92a6e9f36c9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Standardized Star Wars species data with basic type casting", "columns": {"species_id": {"name": "species_id", "description": "Primary key for species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Species name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification": {"name": "classification", "description": "Biological classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "designation": {"name": "designation", "description": "Designation (sentient, non-sentient, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_height": {"name": "average_height", "description": "Average height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_colors": {"name": "skin_colors", "description": "Possible skin colors for this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_colors": {"name": "hair_colors", "description": "Possible hair colors for this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_colors": {"name": "eye_colors", "description": "Possible eye colors for this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_lifespan": {"name": "average_lifespan", "description": "Average lifespan in years", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld_id": {"name": "homeworld_id", "description": "ID of species homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "language": {"name": "language", "description": "Primary language spoken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people": {"name": "people", "description": "JSONB array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSONB array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for species data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "Timestamp when record was loaded by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/staging/swapi/stg_swapi.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1742909950.9599268, "relation_name": "\"nerd_facts\".\"public\".\"stg_swapi_species\"", "raw_code": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n/*\n  Model: stg_swapi_species\n  Description: Standardizes Star Wars species data from SWAPI\n  Source: raw.swapi_species\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        classification,\n        designation,        \n        skin_colors,\n        hair_colors,\n        eye_colors,                \n        language,\n        url,\n\n        -- Numeric fields\n        CASE average_lifespan~E'^[0-9]+$' WHEN TRUE THEN average_lifespan ELSE NULL END AS average_lifespan,\n        CASE average_height~E'^[0-9]+$' WHEN TRUE THEN average_height ELSE NULL END AS average_height,\n\n        -- Relationship arrays\n        people,\n        homeworld,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM {{ source('swapi', 'species') }}\n    WHERE id IS NOT NULL\n)\n\nSELECT    \n    -- Id fields\n    id as species_id,\n\n    -- Text fields\n    name as species_name,\n    classification,\n    designation,        \n    skin_colors,\n    hair_colors,\n    eye_colors,                \n    language,\n    url,\n\n    -- Numeric fields\n    CAST(average_lifespan AS NUMERIC) AS average_lifespan,\n    CAST(average_height AS NUMERIC) AS average_height,\n\n    -- Relationship arrays\n    people,\n    homeworld,\n\n    -- Timestamp fields\n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS edited_at,\n\n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi_species.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: stg_swapi_species\n  Description: Standardizes Star Wars species data from SWAPI\n  Source: raw.swapi_species\n*/\n\nWITH raw_data AS (\n    SELECT\n        -- Id fields\n        id,\n\n        -- Text fields\n        name,\n        classification,\n        designation,        \n        skin_colors,\n        hair_colors,\n        eye_colors,                \n        language,\n        url,\n\n        -- Numeric fields\n        CASE average_lifespan~E'^[0-9]+$' WHEN TRUE THEN average_lifespan ELSE NULL END AS average_lifespan,\n        CASE average_height~E'^[0-9]+$' WHEN TRUE THEN average_height ELSE NULL END AS average_height,\n\n        -- Relationship arrays\n        people,\n        homeworld,\n\n        -- Timestamp fields\n        created,\n        edited\n    FROM \"nerd_facts\".\"raw\".\"swapi_species\"\n    WHERE id IS NOT NULL\n)\n\nSELECT    \n    -- Id fields\n    id as species_id,\n\n    -- Text fields\n    name as species_name,\n    classification,\n    designation,        \n    skin_colors,\n    hair_colors,\n    eye_colors,                \n    language,\n    url,\n\n    -- Numeric fields\n    CAST(average_lifespan AS NUMERIC) AS average_lifespan,\n    CAST(average_height AS NUMERIC) AS average_height,\n\n    -- Relationship arrays\n    people,\n    homeworld,\n\n    -- Timestamp fields\n    CAST(created AS TIMESTAMP) AS created_at,\n    CAST(edited AS TIMESTAMP) AS edited_at,\n\n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at    \nFROM raw_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["species_id"], "time_spine": null}, "model.nerd_facts_dbt.nerd_universe_obt": {"database": "nerd_facts", "schema": "public", "name": "nerd_universe_obt", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/obt/nerd_universe_obt.sql", "original_file_path": "models/marts/obt/nerd_universe_obt.sql", "unique_id": "model.nerd_facts_dbt.nerd_universe_obt", "fqn": ["nerd_facts_dbt", "marts", "obt", "nerd_universe_obt"], "alias": "nerd_universe_obt", "checksum": {"name": "sha256", "checksum": "a8a1ca2dabba07df541ee3b8fef1f4ccef7f94d69a3fe74accb7d34db92f0524"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Master One Big Table (OBT) that unifies data from multiple fictional universes into a standardized structure for cross-universe analysis and reporting.\n", "columns": {"universe": {"name": "universe", "description": "Name of the fictional universe (Star Wars, Pokemon, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "entity_id": {"name": "entity_id", "description": "Unique identifier for the entity within its universe", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "entity_name": {"name": "entity_name", "description": "Name of the entity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "entity_type": {"name": "entity_type", "description": "Type of entity (character, pokemon, etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height_cm": {"name": "height_cm", "description": "Height in centimeters, normalized across universes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight_kg": {"name": "weight_kg", "description": "Weight in kilograms, normalized across universes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "Species or type of the entity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height_category": {"name": "height_category", "description": "Categorized height (Tall, Medium, Short, Unknown)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight_category": {"name": "weight_category", "description": "Categorized weight (Heavy, Medium, Light, Unknown)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "obt_created_at": {"name": "obt_created_at", "description": "Timestamp when this OBT was generated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/marts/obt/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.012494, "relation_name": "\"nerd_facts\".\"public\".\"nerd_universe_obt\"", "raw_code": "/* \n   Master One Big Table (OBT) for Nerd Universes Data\n   This model combines multiple fictional universes into a single unified table\n   with a common structure for cross-universe analysis.\n*/\n\nwith star_wars_characters as (\n    select \n        'Star Wars' as universe,\n        c.character_key as entity_key,\n        c.people_id as entity_id,\n        c.character_name as entity_name,\n        'character' as entity_type,\n        c.gender,\n        c.height_cm,\n        c.mass_kg as weight_kg,\n        c.homeworld_name as origin_location,\n        NULL as species,\n        NULL as abilities,\n        c.film_appearances as appears_in,\n        NULL as first_appearance_date,\n        'human' as creator_type\n    from {{ ref('dim_sw_characters') }} c\n),\n\npokemon_entities as (\n    select\n        'Pokemon' as universe,\n        p.pokemon_key as entity_key,\n        p.pokemon_id as entity_id,\n        p.pokemon_name as entity_name,\n        'pokemon' as entity_type,\n        null as gender,\n        p.height_m * 100 as height_cm,  -- convert to cm\n        p.weight_kg,\n        null as origin_location,\n        p.primary_type as species,\n        null as abilities,\n        null as appears_in,\n        null as first_appearance_date,\n        'digital' as creator_type\n    from {{ ref('fact_pokemon') }} p\n)\n\n-- Final Master OBT\nselect\n    universe,\n    entity_key,\n    entity_id,\n    entity_name,\n    entity_type,\n    gender,\n    height_cm,\n    weight_kg,\n    origin_location,\n    species,\n    abilities,\n    appears_in,\n    first_appearance_date,\n    creator_type,\n    -- Add computed/derived columns\n    case\n        when height_cm > 200 then 'Tall'\n        when height_cm between 100 and 200 then 'Medium'\n        when height_cm < 100 then 'Short'\n        else 'Unknown'\n    end as height_category,\n    case\n        when weight_kg > 100 then 'Heavy'\n        when weight_kg between 50 and 100 then 'Medium'\n        when weight_kg < 50 then 'Light'\n        else 'Unknown'\n    end as weight_category,\n    current_timestamp as obt_created_at\nfrom (\n    select * from star_wars_characters\n    union all\n    select * from pokemon_entities\n) as unified_entities", "language": "sql", "refs": [{"name": "dim_sw_characters", "package": null, "version": null}, {"name": "fact_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.fact_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/nerd_universe_obt.sql", "compiled": true, "compiled_code": "/* \n   Master One Big Table (OBT) for Nerd Universes Data\n   This model combines multiple fictional universes into a single unified table\n   with a common structure for cross-universe analysis.\n*/\n\nwith star_wars_characters as (\n    select \n        'Star Wars' as universe,\n        c.character_key as entity_key,\n        c.people_id as entity_id,\n        c.character_name as entity_name,\n        'character' as entity_type,\n        c.gender,\n        c.height_cm,\n        c.mass_kg as weight_kg,\n        c.homeworld_name as origin_location,\n        NULL as species,\n        NULL as abilities,\n        c.film_appearances as appears_in,\n        NULL as first_appearance_date,\n        'human' as creator_type\n    from \"nerd_facts\".\"public\".\"dim_sw_characters\" c\n),\n\npokemon_entities as (\n    select\n        'Pokemon' as universe,\n        p.pokemon_key as entity_key,\n        p.pokemon_id as entity_id,\n        p.pokemon_name as entity_name,\n        'pokemon' as entity_type,\n        null as gender,\n        p.height_m * 100 as height_cm,  -- convert to cm\n        p.weight_kg,\n        null as origin_location,\n        p.primary_type as species,\n        null as abilities,\n        null as appears_in,\n        null as first_appearance_date,\n        'digital' as creator_type\n    from \"nerd_facts\".\"public\".\"fact_pokemon\" p\n)\n\n-- Final Master OBT\nselect\n    universe,\n    entity_key,\n    entity_id,\n    entity_name,\n    entity_type,\n    gender,\n    height_cm,\n    weight_kg,\n    origin_location,\n    species,\n    abilities,\n    appears_in,\n    first_appearance_date,\n    creator_type,\n    -- Add computed/derived columns\n    case\n        when height_cm > 200 then 'Tall'\n        when height_cm between 100 and 200 then 'Medium'\n        when height_cm < 100 then 'Short'\n        else 'Unknown'\n    end as height_category,\n    case\n        when weight_kg > 100 then 'Heavy'\n        when weight_kg between 50 and 100 then 'Medium'\n        when weight_kg < 50 then 'Light'\n        else 'Unknown'\n    end as weight_category,\n    current_timestamp as obt_created_at\nfrom (\n    select * from star_wars_characters\n    union all\n    select * from pokemon_entities\n) as unified_entities", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.star_wars_obt": {"database": "nerd_facts", "schema": "public", "name": "star_wars_obt", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/obt/star_wars_obt.sql", "original_file_path": "models/marts/obt/star_wars_obt.sql", "unique_id": "model.nerd_facts_dbt.star_wars_obt", "fqn": ["nerd_facts_dbt", "marts", "obt", "star_wars_obt"], "alias": "star_wars_obt", "checksum": {"name": "sha256", "checksum": "742ad8624cde71f94804edd88e567ec9dc20a945277e0772459b322a1dafa838"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "One Big Table (OBT) for Star Wars data that denormalizes character, film, planet, and species information into a single table for simplified analytics.\n", "columns": {"character_id": {"name": "character_id", "description": "Unique identifier for the character", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "character_name": {"name": "character_name", "description": "Character name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planet_name": {"name": "planet_name", "description": "Name of the character's home planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_name": {"name": "species_name", "description": "Name of the character's species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_title": {"name": "film_title", "description": "Title of the film the character appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/marts/obt/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.008733, "relation_name": "\"nerd_facts\".\"public\".\"star_wars_obt\"", "raw_code": "/* \n   One Big Table (OBT) for Star Wars Data\n   This model combines character, film, planet, and species data into a single denormalized table\n   optimized for analytics and reporting.\n*/\n\nwith characters as (\n    select \n        c.character_key,\n        c.people_id,\n        c.character_name,\n        c.height_cm,\n        c.mass_kg,\n        c.hair_color,\n        c.skin_color,\n        c.eye_color,\n        c.birth_year,\n        c.gender,\n        c.homeworld_name\n    from {{ ref('dim_sw_characters') }} c\n),\n\nplanets as (\n    select\n        p.planet_key,\n        p.planet_id,\n        p.planet_name,\n        p.rotation_period,\n        p.orbital_period,\n        p.diameter,\n        p.climate,\n        p.gravity,\n        p.terrain,\n        p.surface_water,\n        p.population\n    from {{ ref('dim_sw_planets') }} p\n),\n\nspecies as (\n    select\n        s.species_key,\n        s.species_id,\n        s.species_name,\n        s.classification,\n        s.designation,\n        s.average_height,\n        s.skin_colors,\n        s.hair_colors,\n        s.eye_colors,\n        s.average_lifespan,\n        s.language,\n        s.homeworld_id\n    from {{ ref('dim_sw_species') }} s\n),\n\nfilms as (\n    select\n        f.film_key,\n        f.film_id,\n        f.film_title,\n        f.episode_id,\n        f.opening_crawl,\n        f.director,\n        f.producer,\n        f.release_date\n    from {{ ref('dim_sw_films') }} f\n),\n\ncharacter_films as (\n    select\n        cf.character_key,\n        cf.film_key\n    from {{ ref('bridge_sw_characters_films') }} cf\n)\n\n-- Final OBT assembly\nselect\n    -- Character information (core entity)\n    c.character_key,\n    c.people_id,\n    c.character_name,\n    c.height_cm,\n    c.mass_kg,\n    c.hair_color,\n    c.skin_color,\n    c.eye_color,\n    c.birth_year,\n    c.gender,\n    \n    -- Planet information (denormalized)\n    p.planet_key,\n    p.planet_id,\n    p.planet_name,\n    p.climate,\n    p.terrain,\n    p.population,\n    \n    -- Film information (denormalized)\n    f.film_key,\n    f.film_id,\n    f.film_title,\n    f.episode_id,\n    f.director,\n    f.release_date,\n    \n    -- Metadata\n    current_timestamp as obt_created_at\nfrom characters c\nleft join planets p on c.homeworld_name = p.planet_name\nleft join character_films cf on c.character_key = cf.character_key\nleft join films f on cf.film_key = f.film_key", "language": "sql", "refs": [{"name": "dim_sw_characters", "package": null, "version": null}, {"name": "dim_sw_planets", "package": null, "version": null}, {"name": "dim_sw_species", "package": null, "version": null}, {"name": "dim_sw_films", "package": null, "version": null}, {"name": "bridge_sw_characters_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.dim_sw_planets", "model.nerd_facts_dbt.dim_sw_species", "model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.bridge_sw_characters_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/star_wars_obt.sql", "compiled": true, "compiled_code": "/* \n   One Big Table (OBT) for Star Wars Data\n   This model combines character, film, planet, and species data into a single denormalized table\n   optimized for analytics and reporting.\n*/\n\nwith characters as (\n    select \n        c.character_key,\n        c.people_id,\n        c.character_name,\n        c.height_cm,\n        c.mass_kg,\n        c.hair_color,\n        c.skin_color,\n        c.eye_color,\n        c.birth_year,\n        c.gender,\n        c.homeworld_name\n    from \"nerd_facts\".\"public\".\"dim_sw_characters\" c\n),\n\nplanets as (\n    select\n        p.planet_key,\n        p.planet_id,\n        p.planet_name,\n        p.rotation_period,\n        p.orbital_period,\n        p.diameter,\n        p.climate,\n        p.gravity,\n        p.terrain,\n        p.surface_water,\n        p.population\n    from \"nerd_facts\".\"public\".\"dim_sw_planets\" p\n),\n\nspecies as (\n    select\n        s.species_key,\n        s.species_id,\n        s.species_name,\n        s.classification,\n        s.designation,\n        s.average_height,\n        s.skin_colors,\n        s.hair_colors,\n        s.eye_colors,\n        s.average_lifespan,\n        s.language,\n        s.homeworld_id\n    from \"nerd_facts\".\"public\".\"dim_sw_species\" s\n),\n\nfilms as (\n    select\n        f.film_key,\n        f.film_id,\n        f.film_title,\n        f.episode_id,\n        f.opening_crawl,\n        f.director,\n        f.producer,\n        f.release_date\n    from \"nerd_facts\".\"public\".\"dim_sw_films\" f\n),\n\ncharacter_films as (\n    select\n        cf.character_key,\n        cf.film_key\n    from \"nerd_facts\".\"public\".\"bridge_sw_characters_films\" cf\n)\n\n-- Final OBT assembly\nselect\n    -- Character information (core entity)\n    c.character_key,\n    c.people_id,\n    c.character_name,\n    c.height_cm,\n    c.mass_kg,\n    c.hair_color,\n    c.skin_color,\n    c.eye_color,\n    c.birth_year,\n    c.gender,\n    \n    -- Planet information (denormalized)\n    p.planet_key,\n    p.planet_id,\n    p.planet_name,\n    p.climate,\n    p.terrain,\n    p.population,\n    \n    -- Film information (denormalized)\n    f.film_key,\n    f.film_id,\n    f.film_title,\n    f.episode_id,\n    f.director,\n    f.release_date,\n    \n    -- Metadata\n    current_timestamp as obt_created_at\nfrom characters c\nleft join planets p on c.homeworld_name = p.planet_name\nleft join character_films cf on c.character_key = cf.character_key\nleft join films f on cf.film_key = f.film_key", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.pokemon_obt": {"database": "nerd_facts", "schema": "public", "name": "pokemon_obt", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/obt/pokemon_obt.sql", "original_file_path": "models/marts/obt/pokemon_obt.sql", "unique_id": "model.nerd_facts_dbt.pokemon_obt", "fqn": ["nerd_facts_dbt", "marts", "obt", "pokemon_obt"], "alias": "pokemon_obt", "checksum": {"name": "sha256", "checksum": "b9ce1e26de36dff748bf9855c00ab410968fea4005ea2a4c050aefd9a4a97183"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "One Big Table (OBT) for Pok\u00e9mon data that denormalizes pokemon, type, ability, and stat information into a single table for simplified analytics.\n", "columns": {"pokemon_id": {"name": "pokemon_id", "description": "Unique identifier for the Pok\u00e9mon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pokemon_name": {"name": "pokemon_name", "description": "Pok\u00e9mon name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_name": {"name": "type_name", "description": "Name of the Pok\u00e9mon's type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ability_name": {"name": "ability_name", "description": "Name of the Pok\u00e9mon's ability", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_stat": {"name": "base_stat", "description": "Base stat value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/marts/obt/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.0096948, "relation_name": "\"nerd_facts\".\"public\".\"pokemon_obt\"", "raw_code": "/* \n   One Big Table (OBT) for Pok\u00e9mon Data\n   This model combines pokemon, types, abilities, and stats into a single denormalized table\n   optimized for analytics and reporting.\n*/\n\nwith pokemon as (\n    select \n        p.pokemon_key,\n        p.pokemon_id,\n        p.pokemon_name,\n        p.height_m,\n        p.weight_kg,\n        p.base_xp as base_experience,\n        p.primary_type,\n        p.secondary_type,\n        p.primary_type_key,\n        p.secondary_type_key,\n        p.base_stat_hp,\n        p.total_base_stats\n    from {{ ref('fact_pokemon') }} p\n),\n\ntypes as (\n    select\n        t.type_key,\n        t.type_id,\n        t.type_name\n    from {{ ref('dim_pokemon_types') }} t\n),\n\npokemon_abilities as (\n    select\n        pa.pokemon_ability_id,\n        pa.pokemon_id,\n        pa.ability_name,\n        pa.is_hidden,\n        pa.slot_number\n    from {{ ref('bridge_pokemon_abilities') }} pa\n)\n\n-- Final OBT assembly\nselect\n    -- Pokemon information (core entity)\n    p.pokemon_key,\n    p.pokemon_id,\n    p.pokemon_name,\n    p.height_m,\n    p.weight_kg,\n    p.base_experience,\n    p.base_stat_hp,\n    p.total_base_stats,\n    \n    -- Type information (denormalized)\n    p.primary_type as primary_type_name,\n    p.secondary_type as secondary_type_name,\n    \n    -- Ability information (denormalized)\n    pa.ability_name,\n    pa.is_hidden,\n    pa.slot_number,\n    \n    -- Metadata\n    current_timestamp as obt_created_at\nfrom pokemon p\nleft join pokemon_abilities pa on p.pokemon_id = pa.pokemon_id", "language": "sql", "refs": [{"name": "fact_pokemon", "package": null, "version": null}, {"name": "dim_pokemon_types", "package": null, "version": null}, {"name": "bridge_pokemon_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.fact_pokemon", "model.nerd_facts_dbt.dim_pokemon_types", "model.nerd_facts_dbt.bridge_pokemon_abilities"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/pokemon_obt.sql", "compiled": true, "compiled_code": "/* \n   One Big Table (OBT) for Pok\u00e9mon Data\n   This model combines pokemon, types, abilities, and stats into a single denormalized table\n   optimized for analytics and reporting.\n*/\n\nwith pokemon as (\n    select \n        p.pokemon_key,\n        p.pokemon_id,\n        p.pokemon_name,\n        p.height_m,\n        p.weight_kg,\n        p.base_xp as base_experience,\n        p.primary_type,\n        p.secondary_type,\n        p.primary_type_key,\n        p.secondary_type_key,\n        p.base_stat_hp,\n        p.total_base_stats\n    from \"nerd_facts\".\"public\".\"fact_pokemon\" p\n),\n\ntypes as (\n    select\n        t.type_key,\n        t.type_id,\n        t.type_name\n    from \"nerd_facts\".\"public\".\"dim_pokemon_types\" t\n),\n\npokemon_abilities as (\n    select\n        pa.pokemon_ability_id,\n        pa.pokemon_id,\n        pa.ability_name,\n        pa.is_hidden,\n        pa.slot_number\n    from \"nerd_facts\".\"public\".\"bridge_pokemon_abilities\" pa\n)\n\n-- Final OBT assembly\nselect\n    -- Pokemon information (core entity)\n    p.pokemon_key,\n    p.pokemon_id,\n    p.pokemon_name,\n    p.height_m,\n    p.weight_kg,\n    p.base_experience,\n    p.base_stat_hp,\n    p.total_base_stats,\n    \n    -- Type information (denormalized)\n    p.primary_type as primary_type_name,\n    p.secondary_type as secondary_type_name,\n    \n    -- Ability information (denormalized)\n    pa.ability_name,\n    pa.is_hidden,\n    pa.slot_number,\n    \n    -- Metadata\n    current_timestamp as obt_created_at\nfrom pokemon p\nleft join pokemon_abilities pa on p.pokemon_id = pa.pokemon_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_pokemon_abilities": {"database": "nerd_facts", "schema": "public", "name": "dim_pokemon_abilities", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/dim_pokemon_abilities.sql", "original_file_path": "models/marts/pokemon/dim_pokemon_abilities.sql", "unique_id": "model.nerd_facts_dbt.dim_pokemon_abilities", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "dim_pokemon_abilities"], "alias": "dim_pokemon_abilities", "checksum": {"name": "sha256", "checksum": "31e875eae6623cf2546ff88e52ee06361018dcb01893d9695245d2c16ac044f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ability_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["ability_id"]}, {"columns": ["ability_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["ability_id"]}, {"columns": ["ability_name"]}], "unique_key": "ability_id"}, "created_at": 1742909949.5695088, "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_abilities\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['ability_id']}, {'columns': ['ability_name']}],\n    unique_key = 'ability_id'\n  )\n}}\n\n/*\n  Model: dim_pokemon_abilities\n  Description: Dimension table for Pok\u00e9mon abilities\n  \n  Notes:\n  - Analyzes ability distribution across all Pok\u00e9mon\n  - Categorizes abilities by effect type and competitive tier\n  - Calculates rarity metrics and battle style classifications\n  - Identifies hidden abilities and their gameplay significance\n  - Provides comprehensive categorization for analysis\n  - Fixed string literals to use proper PostgreSQL escaping\n  - Using E-string syntax for strings containing apostrophes\n  - Maintaining consistent naming format with PokeAPI\n*/\n\nWITH ability_usage AS (\n    -- Count how many Pokemon have each ability with improved error handling\n    SELECT \n        LOWER(COALESCE(ability_ref->'ability'->>'name', 'unknown')) AS ability_name,\n        COUNT(*) AS num_pokemon\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(p.abilities::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS ability_ref\n    WHERE ability_ref->'ability'->>'name' IS NOT NULL\n    GROUP BY ability_ref->'ability'->>'name'\n),\n\n-- Calculate ability rarity percentiles\nability_ranks AS (\n    SELECT\n        ability_name,\n        num_pokemon,\n        PERCENT_RANK() OVER (ORDER BY num_pokemon) AS rarity_percentile\n    FROM ability_usage\n),\n\n-- Classify abilities by effect type with greatly expanded categories\nability_attributes AS (\n    SELECT\n        ability_name,\n        CASE\n            -- Stat modifiers (expanded)\n            WHEN ability_name IN ('Intimidate', 'Moxie', 'Guts', 'Huge Power', 'Pure Power', 'Beast Boost',\n                                'Defiant', 'Contrary', 'Simple', 'Competitive', 'Anger Point', 'Weak Armor',\n                                'Speed Boost', 'Moody', 'Hustle', 'Sheer Force', 'No Guard', 'Technician',\n                                'Tinted Lens', 'Unburden', 'Victory Star') THEN 'Stat Modifier'\n                                \n            -- Immunities (expanded)\n            WHEN ability_name IN ('Levitate', 'Immunity', 'Water Absorb', 'Volt Absorb', 'Flash Fire',\n                                'Motor Drive', 'Lightning Rod', 'Storm Drain', 'Sap Sipper', 'Dry Skin',\n                                'Earth Eater', 'Wonder Guard', 'Soundproof', 'Water Bubble', 'Fluffy',\n                                'Disguise', 'Thick Fat', 'Heatproof', 'Justified', 'Bulletproof', \n                                'Filter', 'Solid Rock', 'Prism Armor', 'Magic Bounce') THEN 'Immunity'\n                                \n            -- Speed control (expanded)\n            WHEN ability_name IN ('Speed Boost', 'Chlorophyll', 'Swift Swim', 'Sand Rush', 'Slush Rush',\n                                'Surge Surfer', 'Quick Feet', 'Unburden', 'Steadfast', 'Slow Start',\n                                'Quick Draw', 'Gale Wings') THEN 'Speed'\n                                \n            -- Weather abilities\n            WHEN ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                                'Desolate Land', 'Primordial Sea', 'Delta Stream', \n                                'Sand Spit', 'Ice Face') THEN 'Weather'\n                                \n            -- Damage boosters (expanded)\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Iron Fist',\n                                'Adaptability', 'Aerilate', 'Pixilate', 'Refrigerate', 'Galvanize',\n                                'Solar Power', 'Steelworker', 'Reckless', 'Mega Launcher',\n                                'Strong Jaw', 'Tough Claws', 'Technician', 'Analytic',\n                                'Punk Rock', E'Dragon\\'s Maw', 'Transistor') THEN 'Damage Boost'\n                                \n            -- Opponent effects (expanded)\n            WHEN ability_name IN ('Pressure', 'Unnerve', 'Intimidate', 'Mummy', 'Gooey', 'Tangling Hair',\n                                'Shadow Tag', 'Arena Trap', 'Magnet Pull', 'Stall', 'Cute Charm',\n                                'Rivalry', 'Slow Start', 'Truant', 'Cotton Down', 'Neutralizing Gas',\n                                'Perish Body', 'Gorilla Tactics', 'Intrepid Sword') THEN 'Opponent Effect'\n                                \n            -- Contact effects (expanded)\n            WHEN ability_name IN ('Synchronize', 'Effect Spore', 'Static', 'Flame Body', 'Poison Point',\n                                'Rough Skin', 'Iron Barbs', 'Pickpocket', 'Gooey', 'Tangling Hair',\n                                'Wandering Spirit', 'Cotton Down', 'Mummy', 'Cursed Body',\n                                'Perish Body') THEN 'Contact Effect'\n                                \n            -- Healing abilities\n            WHEN ability_name IN ('Regenerator', 'Natural Cure', 'Shed Skin', 'Poison Heal', \n                                'Hydration', 'Ice Body', 'Rain Dish', 'Healer', 'Water Bubble', \n                                'Ice Face', 'Disguise') THEN 'Healing'\n                                \n            -- Entry hazard abilities\n            WHEN ability_name IN ('Spikes', 'Stealth Rock', 'Sticky Web', 'Toxic Spikes') THEN 'Entry Hazard'\n            \n            -- Form-changing\n            WHEN ability_name IN ('Protean', 'Libero', 'Color Change', 'Forecast', 'Mimicry',\n                                'Stance Change', 'Battle Bond', 'Power Construct', \n                                'Shields Down', 'Schooling') THEN 'Form Change'\n                                \n            -- Defensive abilities\n            WHEN ability_name IN ('Multiscale', 'Shadow Shield', 'Sturdy', 'Battle Armor', 'Shell Armor',\n                                'Filter', 'Solid Rock', 'Prism Armor', 'Fluffy', 'Thick Fat',\n                                'Magic Guard', 'Disguise', 'Ice Face', 'Marvel Scale',\n                                'Friend Guard', 'Dauntless Shield') THEN 'Defensive'\n                                \n            -- Item-related\n            WHEN ability_name IN ('Pickup', 'Honey Gather', 'Frisk', 'Magician', 'Pickpocket',\n                                'Sticky Hold', 'Unburden', 'Klutz', 'Harvest', 'Cheek Pouch',\n                                'Ripen', 'Ball Fetch') THEN 'Item Effect'\n                                \n            -- Status condition-related\n            WHEN ability_name IN ('Immunity', 'Limber', 'Insomnia', 'Vital Spirit', 'Water Veil',\n                                'Magma Armor', 'Oblivious', 'Own Tempo', 'Inner Focus',\n                                'Shield Dust', 'Leaf Guard', 'Pastel Veil', 'Good as Gold') THEN 'Status Prevention'\n            \n            -- Priority move effects\n            WHEN ability_name IN ('Prankster', 'Gale Wings', 'Triage', 'Queenly Majesty', \n                                'Dazzling', 'Armor Tail') THEN 'Priority'\n                                \n            ELSE 'Other'\n        END AS effect_type,\n        \n        -- Expanded competitive tier rankings\n        CASE\n            -- S-Tier: Game-changing abilities\n            WHEN ability_name IN ('Wonder Guard', 'Huge Power', 'Pure Power', 'Speed Boost', \n                               'Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                               'Shadow Tag', 'Intimidate', 'Beast Boost', 'Protean', 'Magic Guard',\n                               'Prankster', 'Unaware', 'Imposter', 'Desolate Land', 'Primordial Sea',\n                               'Delta Stream', 'Soul-Heart', 'Libero', 'Intrepid Sword',\n                               'Gorilla Tactics', 'As One') THEN 'S'\n                               \n            -- A-Tier: Very strong abilities\n            WHEN ability_name IN ('Moxie', 'Adaptability', 'Serene Grace', 'Guts', 'Levitate', \n                               'Multiscale', 'Regenerator', 'Unaware', 'Water Absorb',\n                               'Volt Absorb', 'Disguise', 'Slush Rush', 'Swift Swim', 'Sand Rush',\n                               'Chlorophyll', 'Queenly Majesty', 'Dazzling', 'Sturdy', 'Electric Surge',\n                               'Psychic Surge', 'Grassy Surge', 'Misty Surge', 'Power Construct',\n                               'Shields Down', 'Contrary', 'Mold Breaker', 'Parental Bond') THEN 'A'\n                               \n            -- B-Tier: Good abilities\n            WHEN ability_name IN ('Flash Fire', 'Poison Heal', 'Thick Fat', 'Technician', \n                               'Sheer Force', 'Tinted Lens', 'Fairy Aura', 'Dark Aura',\n                               'Aura Break', 'No Guard', 'Competitive', 'Simple', 'Unburden',\n                               'Mummy', 'Iron Barbs', 'Rough Skin', 'Solar Power', 'Analytic',\n                               'Steelworker', 'Aerilate', 'Pixilate', 'Refrigerate', 'Neuroforce',\n                               'Galvanize', 'Trace') THEN 'B'\n                               \n            -- C-Tier: Average abilities\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Natural Cure', \n                               'Clear Body', 'Sticky Hold', 'Shed Skin', 'Mold Breaker',\n                               'Pressure', 'Synchronize', 'Ice Body', 'Rain Dish', 'Hustle',\n                               'Filter', 'Solid Rock', 'Infiltrator', 'Super Luck', 'Harvest',\n                               'Big Pecks', 'Early Bird', 'Frisk', 'Rock Head', 'Steadfast',\n                               'Sniper', 'Heavy Metal', 'Light Metal', 'Hydration') THEN 'C'\n                               \n            -- D-Tier: Weak or very situational abilities\n            WHEN ability_name IN ('Run Away', 'Honey Gather', 'Illuminate', 'Stench', 'Stall',\n                               'Suction Cups', 'Shell Armor', 'Battle Armor', 'Ball Fetch',\n                               'Pickup', 'Klutz', 'Slow Start', 'Truant', 'Defeatist',\n                               'Forecast', 'Healer', 'Friend Guard', 'Minus', 'Plus', 'Anticipation',\n                               'Flower Gift', 'Forewarn', 'Rivalry', 'Victory Star',\n                               'Leaf Guard', 'Tangled Feet') THEN 'D'\n                               \n            -- F-Tier: Detrimental or extremely niche abilities\n            WHEN ability_name IN ('Defeatist', 'Slow Start', 'Truant', 'Stall', 'Klutz',\n                               'Illuminate', 'Minus', 'Plus', 'Flower Veil', 'Friend Guard') THEN 'F'\n                               \n            ELSE 'Unclassified'\n        END AS tier\n    FROM ability_ranks\n)\n\nSELECT\n    -- Primary key (using surrogate key pattern)\n    {{ dbt_utils.generate_surrogate_key(['u.ability_name']) }} AS ability_key,\n    ROW_NUMBER() OVER (ORDER BY u.ability_name) AS ability_id,\n    \n    -- Core attributes\n    u.ability_name,\n    u.num_pokemon,\n    a.effect_type,\n    a.tier,\n    \n    -- Calculate rarity - improved with percentiles\n    CASE\n        WHEN r.rarity_percentile >= 0.95 THEN 'Ultra Rare'\n        WHEN r.rarity_percentile >= 0.80 THEN 'Very Rare'\n        WHEN r.rarity_percentile >= 0.60 THEN 'Rare'\n        WHEN r.rarity_percentile >= 0.40 THEN 'Uncommon'\n        WHEN r.rarity_percentile >= 0.20 THEN 'Common'\n        ELSE 'Very Common'\n    END AS rarity,\n    \n    -- Enhanced hidden ability identification with more comprehensive list\n    CASE\n        WHEN u.ability_name IN (\n            -- Gen 5 Dream World abilities\n            'Analytic', 'Chlorophyll', 'Cloud Nine', 'Damp', 'Defiant', 'Drought', 'Drizzle',\n            'Intimidate', 'Lightningrod', 'Moody', 'Moxie', 'Multiscale', 'Overcoat', 'Poison Touch',\n            'Prankster', 'Rain Dish', 'Regenerator', 'Sand Force', 'Sand Rush', 'Sand Veil',\n            'Serene Grace', 'Sheer Force', 'Sniper', 'Snow Warning', 'Speed Boost', 'Technician',\n            'Telepathy', 'Unaware', 'Unnerve',\n            \n            -- Gen 6 notable hidden abilities\n            'Gale Wings', 'Protean', 'Magic Guard', 'Magic Bounce', 'Harvest', 'Infiltrator',\n            'Tinted Lens', 'Gooey', 'Aroma Veil', 'Bulletproof', 'Magician', 'Pickpocket',\n            \n            -- Gen 7 notable hidden abilities\n            'Power of Alchemy', 'Beast Boost', 'RKS System', 'Slush Rush', 'Surge Surfer',\n            'Water Compaction', 'Queenly Majesty', 'Stamina', 'Water Bubble', 'Steelworker',\n            \n            -- Gen 8 notable hidden abilities with fixed string literals\n            'Libero', 'Quick Draw', 'Ice Scales', 'Punk Rock', 'Mirror Armor', 'Neutralizing Gas',\n            'Power Spot', 'Ripen', 'Steam Engine', 'Sand Spit', 'Cotton Down', 'Gorilla Tactics',\n            \n            -- Other known hidden abilities that are particularly strong\n            'Adaptability', 'Competitive', 'Contrary', 'Cursed Body', 'Guts', 'Hustle', 'Marvel Scale',\n            'No Guard', 'Poison Heal', 'Solar Power', 'Swift Swim', 'Thick Fat', 'Unburden',\n            'Water Absorb', 'Wonder Skin'\n        ) THEN TRUE\n        ELSE FALSE\n    END AS likely_hidden,\n    \n    -- Battle style classification - fixed string literals\n    CASE\n        -- Offensive battle style\n        WHEN a.effect_type IN ('Damage Boost', 'Speed') OR \n             u.ability_name IN ('Moxie', 'Adaptability', 'Beast Boost', 'Huge Power', 'Pure Power',\n                             'Sheer Force', 'Tough Claws', 'Strong Jaw', 'Technician', 'Gorilla Tactics',\n                             'Intrepid Sword', 'Contrary', 'Aerilate', 'Pixilate', 'Refrigerate',\n                             'Galvanize', 'Steelworker', 'Protean', 'Libero', E'dragon''s-maw', 'Transistor',\n                             'Guts', 'No Guard', 'Solar Power', 'Tinted Lens', 'Mega Launcher', 'Sniper')\n        THEN 'Offensive'\n        \n        -- Defensive battle style\n        WHEN a.effect_type IN ('Immunity', 'Defensive', 'Status Prevention', 'Healing') OR\n             u.ability_name IN ('Multiscale', 'Shadow Shield', 'Fur Coat', 'Fluffy', 'Ice Face',\n                             'Disguise', 'Intimidate', 'Filter', 'Solid Rock', 'Prism Armor',\n                             'Sturdy', 'Magic Guard', 'Thick Fat', 'Wonder Guard', 'Levitate',\n                             'Water Absorb', 'Volt Absorb', 'Flash Fire', 'Bulletproof', 'Heatproof',\n                             'Storm Drain', 'Water Bubble', 'Ice Body', 'Marvel Scale', 'Regenerator')\n        THEN 'Defensive'\n        \n        -- Utility battle style\n        WHEN a.effect_type IN ('Weather', 'Entry Hazard', 'Form Change', 'Item Effect', 'Priority') OR\n             u.ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning', 'Prankster',\n                             'Serene Grace', 'Queenly Majesty', 'Dazzling', 'Magic Bounce', 'Trace',\n                             'Natural Cure', 'Shed Skin', 'Grassy Surge', 'Electric Surge', 'Psychic Surge',\n                             'Misty Surge', 'Harvest', 'Pickpocket', 'Magician', 'Unburden', 'Hydration',\n                             'Lightning Rod', 'Magnet Pull', 'Sticky Hold', 'Stealth Rock')\n        THEN 'Utility'\n        \n        -- Support battle style\n        WHEN a.effect_type IN ('Opponent Effect', 'Contact Effect') OR\n             u.ability_name IN ('Intimidate', 'Unnerve', 'Pressure', 'Mummy', 'Synchronize',\n                             'Effect Spore', 'Static', 'Flame Body', 'Poison Point', 'Gooey',\n                             'Friend Guard', 'Healer', 'Cursed Body', 'Iron Barbs', 'Rough Skin',\n                             'Aftermath', 'Frisk', 'Ice Face', 'Cotton Down', 'Neutralizing Gas',\n                             'Arena Trap', 'Shadow Tag', 'Speed Boost', 'Immunity', 'Rain Dish')\n        THEN 'Support'\n        \n        ELSE 'Balanced'\n    END AS battle_style,\n    \n    -- Generation affinity using comprehensive list\n    CASE\n        -- Gen 1 signature/themed abilities\n        WHEN u.ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Static', 'Thick Fat',\n                             'Shell Armor', 'Battle Armor', 'Early Bird', 'Chlorophyll',\n                             'Rock Head', 'Sturdy', 'Guts', 'Run Away', 'Intimidate', 'Clear Body')\n        THEN 1\n        \n        -- Gen 2 signature/themed abilities\n        WHEN u.ability_name IN ('Flash Fire', 'Swift Swim', 'Inner Focus', 'Levitate',\n                             'Forecast', 'Intimidate', 'Shed Skin', 'Rough Skin', 'Pressure',\n                             'Trace', 'Pure Power', 'Huge Power', 'Shadow Tag', 'Wonder Guard',\n                             'Synchronize', 'Natural Cure', 'Lightning Rod', 'Drizzle', 'Drought')\n        THEN 2\n        \n        -- Gen 3 signature/themed abilities\n        WHEN u.ability_name IN ('Sand Stream', 'Truant', 'Slaking', 'Soundproof', 'Magic Guard',\n                             'Compoundeyes', 'Speed Boost', 'Marvel Scale', 'Steadfast',\n                             'Poison Point', 'Air Lock', 'Filter', 'Solid Rock', 'Levitate')\n        THEN 3\n        \n        -- Gen 4 signature/themed abilities\n        WHEN u.ability_name IN ('Adaptability', 'Technician', 'Download', 'Motor Drive',\n                             'Ice Body', 'Snow Warning', 'Snow Cloak', 'Slow Start', 'Bad Dreams',\n                             'Multitype', 'Flower Gift', 'Iron Fist', 'Tinted Lens', 'Scrappy')\n        THEN 4\n        \n        -- Gen 5 signature/themed abilities\n        WHEN u.ability_name IN ('Teravolt', 'Turboblaze', 'Analytic', 'Sand Force', 'Sand Rush',\n                             'Victory Star', 'Zen Mode', 'Defiant', 'Prankster', 'Illusion',\n                             'Moxie', 'Justified', 'Unaware', 'Magic Bounce', 'Heavy Metal')\n        THEN 5\n        \n        -- Gen 6 signature/themed abilities\n        WHEN u.ability_name IN ('Protean', 'Aerilate', 'Pixilate', 'Refrigerate', 'Parental Bond',\n                             'Dark Aura', 'Fairy Aura', 'Aura Break', 'Stance Change', 'Gale Wings',\n                             'Sweet Veil', 'Gooey', 'Bulletproof', 'Competitive', 'Cheek Pouch')\n        THEN 6\n        \n        -- Gen 7 signature/themed abilities\n        WHEN u.ability_name IN ('Beast Boost', 'Disguise', 'RKS System', 'Electric Surge',\n                             'Psychic Surge', 'Grassy Surge', 'Misty Surge', 'Full Metal Body',\n                             'Neuroforce', 'Soul-Heart', 'Schooling', 'Shields Down', 'Fluffy')\n        THEN 7\n        \n        -- Gen 8 signature/themed abilities\n        WHEN u.ability_name IN ('Libero', 'Intrepid Sword', 'Dauntless Shield', 'Ball Fetch',\n                             'Cotton Down', 'Steam Engine', 'Sand Spit', 'Mirror Armor',\n                             'Hunger Switch', 'Ice Face', 'Power Spot', 'Ice Scales', 'Punk Rock',\n                             'Gorilla Tactics', 'Neutralizing Gas', 'Ripen', 'Gulp Missile')\n        THEN 8\n        \n        -- Default to most recent generation\n        ELSE 8\n    END AS generation_affinity,\n    \n    -- Additional stat context\n    CASE\n        WHEN a.effect_type = 'Stat Modifier' THEN\n            CASE\n                WHEN u.ability_name IN ('Huge Power', 'Pure Power', 'Gorilla Tactics',\n                                    'Intrepid Sword', 'Moxie', 'Beast Boost', 'Swords Dance',\n                                    'Dragon Dance') THEN 'Attack'\n                                    \n                WHEN u.ability_name IN ('Solar Power', 'Competitive', 'Beast Boost',\n                                    'Soul-Heart', 'Nasty Plot', 'Calm Mind') THEN 'Special Attack'\n                                    \n                WHEN u.ability_name IN ('Speed Boost', 'Swift Swim', 'Chlorophyll',\n                                    'Sand Rush', 'Slush Rush', 'Unburden', 'Surge Surfer') THEN 'Speed'\n                                    \n                WHEN u.ability_name IN ('Intimidate', 'Fur Coat', 'Marvel Scale',\n                                    'Filter', 'Solid Rock', 'Prism Armor', 'Ice Face') THEN 'Defense'\n                                    \n                WHEN u.ability_name IN ('Multiscale', 'Shadow Shield', 'Natural Cure',\n                                    'Regenerator', 'Hydration', 'Shed Skin') THEN 'HP/Recovery'\n                                    \n                ELSE 'Mixed'\n            END\n        ELSE NULL\n    END AS primary_stat,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM ability_usage u\nJOIN ability_ranks r ON u.ability_name = r.ability_name\nJOIN ability_attributes a ON u.ability_name = a.ability_name\nORDER BY u.num_pokemon DESC, u.ability_name", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/dim_pokemon_abilities.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_pokemon_abilities\n  Description: Dimension table for Pok\u00e9mon abilities\n  \n  Notes:\n  - Analyzes ability distribution across all Pok\u00e9mon\n  - Categorizes abilities by effect type and competitive tier\n  - Calculates rarity metrics and battle style classifications\n  - Identifies hidden abilities and their gameplay significance\n  - Provides comprehensive categorization for analysis\n  - Fixed string literals to use proper PostgreSQL escaping\n  - Using E-string syntax for strings containing apostrophes\n  - Maintaining consistent naming format with PokeAPI\n*/\n\nWITH ability_usage AS (\n    -- Count how many Pokemon have each ability with improved error handling\n    SELECT \n        LOWER(COALESCE(ability_ref->'ability'->>'name', 'unknown')) AS ability_name,\n        COUNT(*) AS num_pokemon\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(p.abilities::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS ability_ref\n    WHERE ability_ref->'ability'->>'name' IS NOT NULL\n    GROUP BY ability_ref->'ability'->>'name'\n),\n\n-- Calculate ability rarity percentiles\nability_ranks AS (\n    SELECT\n        ability_name,\n        num_pokemon,\n        PERCENT_RANK() OVER (ORDER BY num_pokemon) AS rarity_percentile\n    FROM ability_usage\n),\n\n-- Classify abilities by effect type with greatly expanded categories\nability_attributes AS (\n    SELECT\n        ability_name,\n        CASE\n            -- Stat modifiers (expanded)\n            WHEN ability_name IN ('Intimidate', 'Moxie', 'Guts', 'Huge Power', 'Pure Power', 'Beast Boost',\n                                'Defiant', 'Contrary', 'Simple', 'Competitive', 'Anger Point', 'Weak Armor',\n                                'Speed Boost', 'Moody', 'Hustle', 'Sheer Force', 'No Guard', 'Technician',\n                                'Tinted Lens', 'Unburden', 'Victory Star') THEN 'Stat Modifier'\n                                \n            -- Immunities (expanded)\n            WHEN ability_name IN ('Levitate', 'Immunity', 'Water Absorb', 'Volt Absorb', 'Flash Fire',\n                                'Motor Drive', 'Lightning Rod', 'Storm Drain', 'Sap Sipper', 'Dry Skin',\n                                'Earth Eater', 'Wonder Guard', 'Soundproof', 'Water Bubble', 'Fluffy',\n                                'Disguise', 'Thick Fat', 'Heatproof', 'Justified', 'Bulletproof', \n                                'Filter', 'Solid Rock', 'Prism Armor', 'Magic Bounce') THEN 'Immunity'\n                                \n            -- Speed control (expanded)\n            WHEN ability_name IN ('Speed Boost', 'Chlorophyll', 'Swift Swim', 'Sand Rush', 'Slush Rush',\n                                'Surge Surfer', 'Quick Feet', 'Unburden', 'Steadfast', 'Slow Start',\n                                'Quick Draw', 'Gale Wings') THEN 'Speed'\n                                \n            -- Weather abilities\n            WHEN ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                                'Desolate Land', 'Primordial Sea', 'Delta Stream', \n                                'Sand Spit', 'Ice Face') THEN 'Weather'\n                                \n            -- Damage boosters (expanded)\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Iron Fist',\n                                'Adaptability', 'Aerilate', 'Pixilate', 'Refrigerate', 'Galvanize',\n                                'Solar Power', 'Steelworker', 'Reckless', 'Mega Launcher',\n                                'Strong Jaw', 'Tough Claws', 'Technician', 'Analytic',\n                                'Punk Rock', E'Dragon\\'s Maw', 'Transistor') THEN 'Damage Boost'\n                                \n            -- Opponent effects (expanded)\n            WHEN ability_name IN ('Pressure', 'Unnerve', 'Intimidate', 'Mummy', 'Gooey', 'Tangling Hair',\n                                'Shadow Tag', 'Arena Trap', 'Magnet Pull', 'Stall', 'Cute Charm',\n                                'Rivalry', 'Slow Start', 'Truant', 'Cotton Down', 'Neutralizing Gas',\n                                'Perish Body', 'Gorilla Tactics', 'Intrepid Sword') THEN 'Opponent Effect'\n                                \n            -- Contact effects (expanded)\n            WHEN ability_name IN ('Synchronize', 'Effect Spore', 'Static', 'Flame Body', 'Poison Point',\n                                'Rough Skin', 'Iron Barbs', 'Pickpocket', 'Gooey', 'Tangling Hair',\n                                'Wandering Spirit', 'Cotton Down', 'Mummy', 'Cursed Body',\n                                'Perish Body') THEN 'Contact Effect'\n                                \n            -- Healing abilities\n            WHEN ability_name IN ('Regenerator', 'Natural Cure', 'Shed Skin', 'Poison Heal', \n                                'Hydration', 'Ice Body', 'Rain Dish', 'Healer', 'Water Bubble', \n                                'Ice Face', 'Disguise') THEN 'Healing'\n                                \n            -- Entry hazard abilities\n            WHEN ability_name IN ('Spikes', 'Stealth Rock', 'Sticky Web', 'Toxic Spikes') THEN 'Entry Hazard'\n            \n            -- Form-changing\n            WHEN ability_name IN ('Protean', 'Libero', 'Color Change', 'Forecast', 'Mimicry',\n                                'Stance Change', 'Battle Bond', 'Power Construct', \n                                'Shields Down', 'Schooling') THEN 'Form Change'\n                                \n            -- Defensive abilities\n            WHEN ability_name IN ('Multiscale', 'Shadow Shield', 'Sturdy', 'Battle Armor', 'Shell Armor',\n                                'Filter', 'Solid Rock', 'Prism Armor', 'Fluffy', 'Thick Fat',\n                                'Magic Guard', 'Disguise', 'Ice Face', 'Marvel Scale',\n                                'Friend Guard', 'Dauntless Shield') THEN 'Defensive'\n                                \n            -- Item-related\n            WHEN ability_name IN ('Pickup', 'Honey Gather', 'Frisk', 'Magician', 'Pickpocket',\n                                'Sticky Hold', 'Unburden', 'Klutz', 'Harvest', 'Cheek Pouch',\n                                'Ripen', 'Ball Fetch') THEN 'Item Effect'\n                                \n            -- Status condition-related\n            WHEN ability_name IN ('Immunity', 'Limber', 'Insomnia', 'Vital Spirit', 'Water Veil',\n                                'Magma Armor', 'Oblivious', 'Own Tempo', 'Inner Focus',\n                                'Shield Dust', 'Leaf Guard', 'Pastel Veil', 'Good as Gold') THEN 'Status Prevention'\n            \n            -- Priority move effects\n            WHEN ability_name IN ('Prankster', 'Gale Wings', 'Triage', 'Queenly Majesty', \n                                'Dazzling', 'Armor Tail') THEN 'Priority'\n                                \n            ELSE 'Other'\n        END AS effect_type,\n        \n        -- Expanded competitive tier rankings\n        CASE\n            -- S-Tier: Game-changing abilities\n            WHEN ability_name IN ('Wonder Guard', 'Huge Power', 'Pure Power', 'Speed Boost', \n                               'Drought', 'Drizzle', 'Sand Stream', 'Snow Warning',\n                               'Shadow Tag', 'Intimidate', 'Beast Boost', 'Protean', 'Magic Guard',\n                               'Prankster', 'Unaware', 'Imposter', 'Desolate Land', 'Primordial Sea',\n                               'Delta Stream', 'Soul-Heart', 'Libero', 'Intrepid Sword',\n                               'Gorilla Tactics', 'As One') THEN 'S'\n                               \n            -- A-Tier: Very strong abilities\n            WHEN ability_name IN ('Moxie', 'Adaptability', 'Serene Grace', 'Guts', 'Levitate', \n                               'Multiscale', 'Regenerator', 'Unaware', 'Water Absorb',\n                               'Volt Absorb', 'Disguise', 'Slush Rush', 'Swift Swim', 'Sand Rush',\n                               'Chlorophyll', 'Queenly Majesty', 'Dazzling', 'Sturdy', 'Electric Surge',\n                               'Psychic Surge', 'Grassy Surge', 'Misty Surge', 'Power Construct',\n                               'Shields Down', 'Contrary', 'Mold Breaker', 'Parental Bond') THEN 'A'\n                               \n            -- B-Tier: Good abilities\n            WHEN ability_name IN ('Flash Fire', 'Poison Heal', 'Thick Fat', 'Technician', \n                               'Sheer Force', 'Tinted Lens', 'Fairy Aura', 'Dark Aura',\n                               'Aura Break', 'No Guard', 'Competitive', 'Simple', 'Unburden',\n                               'Mummy', 'Iron Barbs', 'Rough Skin', 'Solar Power', 'Analytic',\n                               'Steelworker', 'Aerilate', 'Pixilate', 'Refrigerate', 'Neuroforce',\n                               'Galvanize', 'Trace') THEN 'B'\n                               \n            -- C-Tier: Average abilities\n            WHEN ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Natural Cure', \n                               'Clear Body', 'Sticky Hold', 'Shed Skin', 'Mold Breaker',\n                               'Pressure', 'Synchronize', 'Ice Body', 'Rain Dish', 'Hustle',\n                               'Filter', 'Solid Rock', 'Infiltrator', 'Super Luck', 'Harvest',\n                               'Big Pecks', 'Early Bird', 'Frisk', 'Rock Head', 'Steadfast',\n                               'Sniper', 'Heavy Metal', 'Light Metal', 'Hydration') THEN 'C'\n                               \n            -- D-Tier: Weak or very situational abilities\n            WHEN ability_name IN ('Run Away', 'Honey Gather', 'Illuminate', 'Stench', 'Stall',\n                               'Suction Cups', 'Shell Armor', 'Battle Armor', 'Ball Fetch',\n                               'Pickup', 'Klutz', 'Slow Start', 'Truant', 'Defeatist',\n                               'Forecast', 'Healer', 'Friend Guard', 'Minus', 'Plus', 'Anticipation',\n                               'Flower Gift', 'Forewarn', 'Rivalry', 'Victory Star',\n                               'Leaf Guard', 'Tangled Feet') THEN 'D'\n                               \n            -- F-Tier: Detrimental or extremely niche abilities\n            WHEN ability_name IN ('Defeatist', 'Slow Start', 'Truant', 'Stall', 'Klutz',\n                               'Illuminate', 'Minus', 'Plus', 'Flower Veil', 'Friend Guard') THEN 'F'\n                               \n            ELSE 'Unclassified'\n        END AS tier\n    FROM ability_ranks\n)\n\nSELECT\n    -- Primary key (using surrogate key pattern)\n    md5(cast(coalesce(cast(u.ability_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS ability_key,\n    ROW_NUMBER() OVER (ORDER BY u.ability_name) AS ability_id,\n    \n    -- Core attributes\n    u.ability_name,\n    u.num_pokemon,\n    a.effect_type,\n    a.tier,\n    \n    -- Calculate rarity - improved with percentiles\n    CASE\n        WHEN r.rarity_percentile >= 0.95 THEN 'Ultra Rare'\n        WHEN r.rarity_percentile >= 0.80 THEN 'Very Rare'\n        WHEN r.rarity_percentile >= 0.60 THEN 'Rare'\n        WHEN r.rarity_percentile >= 0.40 THEN 'Uncommon'\n        WHEN r.rarity_percentile >= 0.20 THEN 'Common'\n        ELSE 'Very Common'\n    END AS rarity,\n    \n    -- Enhanced hidden ability identification with more comprehensive list\n    CASE\n        WHEN u.ability_name IN (\n            -- Gen 5 Dream World abilities\n            'Analytic', 'Chlorophyll', 'Cloud Nine', 'Damp', 'Defiant', 'Drought', 'Drizzle',\n            'Intimidate', 'Lightningrod', 'Moody', 'Moxie', 'Multiscale', 'Overcoat', 'Poison Touch',\n            'Prankster', 'Rain Dish', 'Regenerator', 'Sand Force', 'Sand Rush', 'Sand Veil',\n            'Serene Grace', 'Sheer Force', 'Sniper', 'Snow Warning', 'Speed Boost', 'Technician',\n            'Telepathy', 'Unaware', 'Unnerve',\n            \n            -- Gen 6 notable hidden abilities\n            'Gale Wings', 'Protean', 'Magic Guard', 'Magic Bounce', 'Harvest', 'Infiltrator',\n            'Tinted Lens', 'Gooey', 'Aroma Veil', 'Bulletproof', 'Magician', 'Pickpocket',\n            \n            -- Gen 7 notable hidden abilities\n            'Power of Alchemy', 'Beast Boost', 'RKS System', 'Slush Rush', 'Surge Surfer',\n            'Water Compaction', 'Queenly Majesty', 'Stamina', 'Water Bubble', 'Steelworker',\n            \n            -- Gen 8 notable hidden abilities with fixed string literals\n            'Libero', 'Quick Draw', 'Ice Scales', 'Punk Rock', 'Mirror Armor', 'Neutralizing Gas',\n            'Power Spot', 'Ripen', 'Steam Engine', 'Sand Spit', 'Cotton Down', 'Gorilla Tactics',\n            \n            -- Other known hidden abilities that are particularly strong\n            'Adaptability', 'Competitive', 'Contrary', 'Cursed Body', 'Guts', 'Hustle', 'Marvel Scale',\n            'No Guard', 'Poison Heal', 'Solar Power', 'Swift Swim', 'Thick Fat', 'Unburden',\n            'Water Absorb', 'Wonder Skin'\n        ) THEN TRUE\n        ELSE FALSE\n    END AS likely_hidden,\n    \n    -- Battle style classification - fixed string literals\n    CASE\n        -- Offensive battle style\n        WHEN a.effect_type IN ('Damage Boost', 'Speed') OR \n             u.ability_name IN ('Moxie', 'Adaptability', 'Beast Boost', 'Huge Power', 'Pure Power',\n                             'Sheer Force', 'Tough Claws', 'Strong Jaw', 'Technician', 'Gorilla Tactics',\n                             'Intrepid Sword', 'Contrary', 'Aerilate', 'Pixilate', 'Refrigerate',\n                             'Galvanize', 'Steelworker', 'Protean', 'Libero', E'dragon''s-maw', 'Transistor',\n                             'Guts', 'No Guard', 'Solar Power', 'Tinted Lens', 'Mega Launcher', 'Sniper')\n        THEN 'Offensive'\n        \n        -- Defensive battle style\n        WHEN a.effect_type IN ('Immunity', 'Defensive', 'Status Prevention', 'Healing') OR\n             u.ability_name IN ('Multiscale', 'Shadow Shield', 'Fur Coat', 'Fluffy', 'Ice Face',\n                             'Disguise', 'Intimidate', 'Filter', 'Solid Rock', 'Prism Armor',\n                             'Sturdy', 'Magic Guard', 'Thick Fat', 'Wonder Guard', 'Levitate',\n                             'Water Absorb', 'Volt Absorb', 'Flash Fire', 'Bulletproof', 'Heatproof',\n                             'Storm Drain', 'Water Bubble', 'Ice Body', 'Marvel Scale', 'Regenerator')\n        THEN 'Defensive'\n        \n        -- Utility battle style\n        WHEN a.effect_type IN ('Weather', 'Entry Hazard', 'Form Change', 'Item Effect', 'Priority') OR\n             u.ability_name IN ('Drought', 'Drizzle', 'Sand Stream', 'Snow Warning', 'Prankster',\n                             'Serene Grace', 'Queenly Majesty', 'Dazzling', 'Magic Bounce', 'Trace',\n                             'Natural Cure', 'Shed Skin', 'Grassy Surge', 'Electric Surge', 'Psychic Surge',\n                             'Misty Surge', 'Harvest', 'Pickpocket', 'Magician', 'Unburden', 'Hydration',\n                             'Lightning Rod', 'Magnet Pull', 'Sticky Hold', 'Stealth Rock')\n        THEN 'Utility'\n        \n        -- Support battle style\n        WHEN a.effect_type IN ('Opponent Effect', 'Contact Effect') OR\n             u.ability_name IN ('Intimidate', 'Unnerve', 'Pressure', 'Mummy', 'Synchronize',\n                             'Effect Spore', 'Static', 'Flame Body', 'Poison Point', 'Gooey',\n                             'Friend Guard', 'Healer', 'Cursed Body', 'Iron Barbs', 'Rough Skin',\n                             'Aftermath', 'Frisk', 'Ice Face', 'Cotton Down', 'Neutralizing Gas',\n                             'Arena Trap', 'Shadow Tag', 'Speed Boost', 'Immunity', 'Rain Dish')\n        THEN 'Support'\n        \n        ELSE 'Balanced'\n    END AS battle_style,\n    \n    -- Generation affinity using comprehensive list\n    CASE\n        -- Gen 1 signature/themed abilities\n        WHEN u.ability_name IN ('Blaze', 'Torrent', 'Overgrow', 'Swarm', 'Static', 'Thick Fat',\n                             'Shell Armor', 'Battle Armor', 'Early Bird', 'Chlorophyll',\n                             'Rock Head', 'Sturdy', 'Guts', 'Run Away', 'Intimidate', 'Clear Body')\n        THEN 1\n        \n        -- Gen 2 signature/themed abilities\n        WHEN u.ability_name IN ('Flash Fire', 'Swift Swim', 'Inner Focus', 'Levitate',\n                             'Forecast', 'Intimidate', 'Shed Skin', 'Rough Skin', 'Pressure',\n                             'Trace', 'Pure Power', 'Huge Power', 'Shadow Tag', 'Wonder Guard',\n                             'Synchronize', 'Natural Cure', 'Lightning Rod', 'Drizzle', 'Drought')\n        THEN 2\n        \n        -- Gen 3 signature/themed abilities\n        WHEN u.ability_name IN ('Sand Stream', 'Truant', 'Slaking', 'Soundproof', 'Magic Guard',\n                             'Compoundeyes', 'Speed Boost', 'Marvel Scale', 'Steadfast',\n                             'Poison Point', 'Air Lock', 'Filter', 'Solid Rock', 'Levitate')\n        THEN 3\n        \n        -- Gen 4 signature/themed abilities\n        WHEN u.ability_name IN ('Adaptability', 'Technician', 'Download', 'Motor Drive',\n                             'Ice Body', 'Snow Warning', 'Snow Cloak', 'Slow Start', 'Bad Dreams',\n                             'Multitype', 'Flower Gift', 'Iron Fist', 'Tinted Lens', 'Scrappy')\n        THEN 4\n        \n        -- Gen 5 signature/themed abilities\n        WHEN u.ability_name IN ('Teravolt', 'Turboblaze', 'Analytic', 'Sand Force', 'Sand Rush',\n                             'Victory Star', 'Zen Mode', 'Defiant', 'Prankster', 'Illusion',\n                             'Moxie', 'Justified', 'Unaware', 'Magic Bounce', 'Heavy Metal')\n        THEN 5\n        \n        -- Gen 6 signature/themed abilities\n        WHEN u.ability_name IN ('Protean', 'Aerilate', 'Pixilate', 'Refrigerate', 'Parental Bond',\n                             'Dark Aura', 'Fairy Aura', 'Aura Break', 'Stance Change', 'Gale Wings',\n                             'Sweet Veil', 'Gooey', 'Bulletproof', 'Competitive', 'Cheek Pouch')\n        THEN 6\n        \n        -- Gen 7 signature/themed abilities\n        WHEN u.ability_name IN ('Beast Boost', 'Disguise', 'RKS System', 'Electric Surge',\n                             'Psychic Surge', 'Grassy Surge', 'Misty Surge', 'Full Metal Body',\n                             'Neuroforce', 'Soul-Heart', 'Schooling', 'Shields Down', 'Fluffy')\n        THEN 7\n        \n        -- Gen 8 signature/themed abilities\n        WHEN u.ability_name IN ('Libero', 'Intrepid Sword', 'Dauntless Shield', 'Ball Fetch',\n                             'Cotton Down', 'Steam Engine', 'Sand Spit', 'Mirror Armor',\n                             'Hunger Switch', 'Ice Face', 'Power Spot', 'Ice Scales', 'Punk Rock',\n                             'Gorilla Tactics', 'Neutralizing Gas', 'Ripen', 'Gulp Missile')\n        THEN 8\n        \n        -- Default to most recent generation\n        ELSE 8\n    END AS generation_affinity,\n    \n    -- Additional stat context\n    CASE\n        WHEN a.effect_type = 'Stat Modifier' THEN\n            CASE\n                WHEN u.ability_name IN ('Huge Power', 'Pure Power', 'Gorilla Tactics',\n                                    'Intrepid Sword', 'Moxie', 'Beast Boost', 'Swords Dance',\n                                    'Dragon Dance') THEN 'Attack'\n                                    \n                WHEN u.ability_name IN ('Solar Power', 'Competitive', 'Beast Boost',\n                                    'Soul-Heart', 'Nasty Plot', 'Calm Mind') THEN 'Special Attack'\n                                    \n                WHEN u.ability_name IN ('Speed Boost', 'Swift Swim', 'Chlorophyll',\n                                    'Sand Rush', 'Slush Rush', 'Unburden', 'Surge Surfer') THEN 'Speed'\n                                    \n                WHEN u.ability_name IN ('Intimidate', 'Fur Coat', 'Marvel Scale',\n                                    'Filter', 'Solid Rock', 'Prism Armor', 'Ice Face') THEN 'Defense'\n                                    \n                WHEN u.ability_name IN ('Multiscale', 'Shadow Shield', 'Natural Cure',\n                                    'Regenerator', 'Hydration', 'Shed Skin') THEN 'HP/Recovery'\n                                    \n                ELSE 'Mixed'\n            END\n        ELSE NULL\n    END AS primary_stat,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM ability_usage u\nJOIN ability_ranks r ON u.ability_name = r.ability_name\nJOIN ability_attributes a ON u.ability_name = a.ability_name\nORDER BY u.num_pokemon DESC, u.ability_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.bridge_pokemon_abilities": {"database": "nerd_facts", "schema": "public", "name": "bridge_pokemon_abilities", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/bridge_pokemon_abilities.sql", "original_file_path": "models/marts/pokemon/bridge_pokemon_abilities.sql", "unique_id": "model.nerd_facts_dbt.bridge_pokemon_abilities", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "bridge_pokemon_abilities"], "alias": "bridge_pokemon_abilities", "checksum": {"name": "sha256", "checksum": "a42fdec6697d053c6a42ca161ea8c6d38d65051643e71e3e8bbf9c00e52ca31d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_ability_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}], "unique_key": "pokemon_ability_id"}, "created_at": 1742909949.5767674, "relation_name": "\"nerd_facts\".\"public\".\"bridge_pokemon_abilities\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}],\n    unique_key = 'pokemon_ability_id'\n  )\n}}\n\n/*\n  Model: bridge_pokemon_abilities\n  Description: Bridge table connecting Pok\u00e9mon to their abilities\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and abilities\n  - Modified to access abilities directly from the source table\n  - Calculates synergy scores between Pok\u00e9mon and their abilities\n  - Provides context on whether abilities are hidden or standard\n  - Removed dimension table join until dim_pokemon_abilities is created\n*/\n\n-- First get the core Pok\u00e9mon data we need\nWITH pokemon_data AS (\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        -- Extract primary type\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM {{ ref('stg_pokeapi_pokemon') }} p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n        -- Extract secondary type\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM {{ ref('stg_pokeapi_pokemon') }} p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        -- Extract species data for generation, legendary, mythical\n        (SELECT \n            CASE \n                WHEN gen.gen_num IS NOT NULL THEN gen.gen_num::integer\n                ELSE NULL\n            END\n         FROM {{ ref('stg_pokeapi_pokemon') }} p2\n         LEFT JOIN LATERAL (\n             SELECT (regexp_matches(jsonb_extract_path_text(species, 'url'), '/generation/([0-9]+)/'))[1] AS gen_num\n             WHERE jsonb_extract_path_text(species, 'url') ~ '/generation/([0-9]+)/'\n         ) gen ON true\n         WHERE p2.pokemon_id = p.pokemon_id) AS generation_number,\n        (SELECT COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false)\n         FROM {{ ref('stg_pokeapi_pokemon') }} p2\n         WHERE p2.pokemon_id = p.pokemon_id) AS is_legendary,\n        (SELECT COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false)\n         FROM {{ ref('stg_pokeapi_pokemon') }} p2\n         WHERE p2.pokemon_id = p.pokemon_id) AS is_mythical,\n        -- Calculate total base stats\n        (SELECT SUM((stat_data->>'base_stat')::integer)\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS stat_data\n             FROM {{ ref('stg_pokeapi_pokemon') }} p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) st) AS total_base_stats,\n        -- Count abilities\n        (SELECT COUNT(*)\n         FROM (\n             SELECT\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(abilities::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS ability_data\n             FROM {{ ref('stg_pokeapi_pokemon') }} p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) ab) AS ability_count\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    WHERE p.pokemon_id IS NOT NULL\n),\n\n-- Access raw data directly to get the abilities\npokemon_abilities_raw AS (\n    SELECT\n        id,\n        abilities::jsonb AS abilities_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\n-- Extract ability references from the raw data\npokemon_abilities AS (\n    SELECT\n        pd.pokemon_id,\n        pd.pokemon_name,\n        pd.primary_type,\n        pd.secondary_type,\n        pd.generation_number,\n        pd.is_legendary,\n        pd.is_mythical,\n        pd.total_base_stats,\n        ability_ref->'ability'->>'name' AS ability_name,\n        (ability_ref->>'is_hidden')::boolean AS is_hidden,\n        (ability_ref->>'slot')::integer AS slot_number\n    FROM pokemon_data pd\n    JOIN pokemon_abilities_raw par ON pd.pokemon_id = par.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(par.abilities_json::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS ability_ref\n    WHERE pd.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['pa.pokemon_id', 'pa.ability_name']) }} AS pokemon_ability_id,\n    \n    -- Foreign keys\n    pa.pokemon_id,\n    pa.pokemon_name,\n    pa.ability_name,\n    \n    -- Ability attributes\n    pa.is_hidden,\n    pa.slot_number,\n    \n    -- Pokemon attributes for context\n    pa.primary_type,\n    pa.secondary_type,\n    pa.generation_number,\n    pa.is_legendary,\n    pa.is_mythical,\n    \n    -- Synergy rating between Pokemon and ability\n    CASE\n        -- Top competitive synergies (examples from competitive play)\n        WHEN (pa.pokemon_name = 'gengar' AND pa.ability_name = 'levitate') THEN 5\n        WHEN (pa.pokemon_name = 'gyarados' AND pa.ability_name = 'intimidate') THEN 5\n        WHEN (pa.pokemon_name = 'garchomp' AND pa.ability_name = 'rough-skin') THEN 5\n        WHEN (pa.pokemon_name = 'dragonite' AND pa.ability_name = 'multiscale') THEN 5\n        \n        -- Weather abilities synergy with types\n        WHEN (pa.ability_name LIKE '%drought%' AND pa.primary_type = 'fire') THEN 5\n        WHEN (pa.ability_name LIKE '%drizzle%' AND pa.primary_type = 'water') THEN 5\n        WHEN (pa.ability_name LIKE '%sand-stream%' AND pa.primary_type IN ('rock', 'ground')) THEN 5\n        WHEN (pa.ability_name LIKE '%snow-warning%' AND pa.primary_type = 'ice') THEN 5\n        \n        -- Type boosting abilities\n        WHEN (pa.ability_name LIKE '%blaze%' AND pa.primary_type = 'fire') THEN 4\n        WHEN (pa.ability_name LIKE '%torrent%' AND pa.primary_type = 'water') THEN 4\n        WHEN (pa.ability_name LIKE '%overgrow%' AND pa.primary_type = 'grass') THEN 4\n        \n        -- Legendary/Mythical synergies are often designed to be good\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden = FALSE THEN 4.5\n        \n        -- Hidden abilities are often better (especially in later generations)\n        WHEN pa.is_hidden AND pa.generation_number >= 5 THEN 4\n        WHEN pa.is_hidden THEN 3.5\n        \n        -- Default synergy (still decent)\n        ELSE 3\n    END AS ability_synergy,\n    \n    -- Competitive relevance indicator (simplified)\n    CASE\n        WHEN pa.ability_name IN (\n            'speed-boost', 'protean', 'intimidate', 'drought', 'drizzle', \n            'sand-stream', 'adaptability', 'huge-power', 'multiscale'\n        ) THEN TRUE\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden THEN TRUE\n        ELSE FALSE\n    END AS is_competitively_relevant,\n    \n    -- Generation relationship\n    CASE \n        WHEN pa.ability_name IN ('intimidate', 'levitate', 'chlorophyll', \n                              'swift-swim', 'sand-stream', 'drought', 'drizzle') \n             AND pa.generation_number <= 3 THEN 'Original Ability'\n        WHEN pa.generation_number >= 6 AND pa.is_hidden THEN 'Modern Hidden Ability'\n        WHEN pa.is_hidden THEN 'Hidden Ability'\n        ELSE 'Standard Ability'\n    END AS ability_classification,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pokemon_abilities pa\nORDER BY pa.pokemon_id, pa.slot_number", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/bridge_pokemon_abilities.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_pokemon_abilities\n  Description: Bridge table connecting Pok\u00e9mon to their abilities\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and abilities\n  - Modified to access abilities directly from the source table\n  - Calculates synergy scores between Pok\u00e9mon and their abilities\n  - Provides context on whether abilities are hidden or standard\n  - Removed dimension table join until dim_pokemon_abilities is created\n*/\n\n-- First get the core Pok\u00e9mon data we need\nWITH pokemon_data AS (\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        -- Extract primary type\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n        -- Extract secondary type\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        -- Extract species data for generation, legendary, mythical\n        (SELECT \n            CASE \n                WHEN gen.gen_num IS NOT NULL THEN gen.gen_num::integer\n                ELSE NULL\n            END\n         FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n         LEFT JOIN LATERAL (\n             SELECT (regexp_matches(jsonb_extract_path_text(species, 'url'), '/generation/([0-9]+)/'))[1] AS gen_num\n             WHERE jsonb_extract_path_text(species, 'url') ~ '/generation/([0-9]+)/'\n         ) gen ON true\n         WHERE p2.pokemon_id = p.pokemon_id) AS generation_number,\n        (SELECT COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false)\n         FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n         WHERE p2.pokemon_id = p.pokemon_id) AS is_legendary,\n        (SELECT COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false)\n         FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n         WHERE p2.pokemon_id = p.pokemon_id) AS is_mythical,\n        -- Calculate total base stats\n        (SELECT SUM((stat_data->>'base_stat')::integer)\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS stat_data\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) st) AS total_base_stats,\n        -- Count abilities\n        (SELECT COUNT(*)\n         FROM (\n             SELECT\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(abilities::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS ability_data\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) ab) AS ability_count\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    WHERE p.pokemon_id IS NOT NULL\n),\n\n-- Access raw data directly to get the abilities\npokemon_abilities_raw AS (\n    SELECT\n        id,\n        abilities::jsonb AS abilities_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\n-- Extract ability references from the raw data\npokemon_abilities AS (\n    SELECT\n        pd.pokemon_id,\n        pd.pokemon_name,\n        pd.primary_type,\n        pd.secondary_type,\n        pd.generation_number,\n        pd.is_legendary,\n        pd.is_mythical,\n        pd.total_base_stats,\n        ability_ref->'ability'->>'name' AS ability_name,\n        (ability_ref->>'is_hidden')::boolean AS is_hidden,\n        (ability_ref->>'slot')::integer AS slot_number\n    FROM pokemon_data pd\n    JOIN pokemon_abilities_raw par ON pd.pokemon_id = par.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(par.abilities_json::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS ability_ref\n    WHERE pd.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(pa.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pa.ability_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_ability_id,\n    \n    -- Foreign keys\n    pa.pokemon_id,\n    pa.pokemon_name,\n    pa.ability_name,\n    \n    -- Ability attributes\n    pa.is_hidden,\n    pa.slot_number,\n    \n    -- Pokemon attributes for context\n    pa.primary_type,\n    pa.secondary_type,\n    pa.generation_number,\n    pa.is_legendary,\n    pa.is_mythical,\n    \n    -- Synergy rating between Pokemon and ability\n    CASE\n        -- Top competitive synergies (examples from competitive play)\n        WHEN (pa.pokemon_name = 'gengar' AND pa.ability_name = 'levitate') THEN 5\n        WHEN (pa.pokemon_name = 'gyarados' AND pa.ability_name = 'intimidate') THEN 5\n        WHEN (pa.pokemon_name = 'garchomp' AND pa.ability_name = 'rough-skin') THEN 5\n        WHEN (pa.pokemon_name = 'dragonite' AND pa.ability_name = 'multiscale') THEN 5\n        \n        -- Weather abilities synergy with types\n        WHEN (pa.ability_name LIKE '%drought%' AND pa.primary_type = 'fire') THEN 5\n        WHEN (pa.ability_name LIKE '%drizzle%' AND pa.primary_type = 'water') THEN 5\n        WHEN (pa.ability_name LIKE '%sand-stream%' AND pa.primary_type IN ('rock', 'ground')) THEN 5\n        WHEN (pa.ability_name LIKE '%snow-warning%' AND pa.primary_type = 'ice') THEN 5\n        \n        -- Type boosting abilities\n        WHEN (pa.ability_name LIKE '%blaze%' AND pa.primary_type = 'fire') THEN 4\n        WHEN (pa.ability_name LIKE '%torrent%' AND pa.primary_type = 'water') THEN 4\n        WHEN (pa.ability_name LIKE '%overgrow%' AND pa.primary_type = 'grass') THEN 4\n        \n        -- Legendary/Mythical synergies are often designed to be good\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden = FALSE THEN 4.5\n        \n        -- Hidden abilities are often better (especially in later generations)\n        WHEN pa.is_hidden AND pa.generation_number >= 5 THEN 4\n        WHEN pa.is_hidden THEN 3.5\n        \n        -- Default synergy (still decent)\n        ELSE 3\n    END AS ability_synergy,\n    \n    -- Competitive relevance indicator (simplified)\n    CASE\n        WHEN pa.ability_name IN (\n            'speed-boost', 'protean', 'intimidate', 'drought', 'drizzle', \n            'sand-stream', 'adaptability', 'huge-power', 'multiscale'\n        ) THEN TRUE\n        WHEN (pa.is_legendary OR pa.is_mythical) AND pa.is_hidden THEN TRUE\n        ELSE FALSE\n    END AS is_competitively_relevant,\n    \n    -- Generation relationship\n    CASE \n        WHEN pa.ability_name IN ('intimidate', 'levitate', 'chlorophyll', \n                              'swift-swim', 'sand-stream', 'drought', 'drizzle') \n             AND pa.generation_number <= 3 THEN 'Original Ability'\n        WHEN pa.generation_number >= 6 AND pa.is_hidden THEN 'Modern Hidden Ability'\n        WHEN pa.is_hidden THEN 'Hidden Ability'\n        ELSE 'Standard Ability'\n    END AS ability_classification,\n    \n    -- Add data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pokemon_abilities pa\nORDER BY pa.pokemon_id, pa.slot_number", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.bridge_pokemon_moves": {"database": "nerd_facts", "schema": "public", "name": "bridge_pokemon_moves", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/bridge_pokemon_moves.sql", "original_file_path": "models/marts/pokemon/bridge_pokemon_moves.sql", "unique_id": "model.nerd_facts_dbt.bridge_pokemon_moves", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "bridge_pokemon_moves"], "alias": "bridge_pokemon_moves", "checksum": {"name": "sha256", "checksum": "5ffed9ad0ef687908b1bfe4b1112b782772786734a4b2888f506d5bafaeecf9c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_move_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["move_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["move_name"]}], "unique_key": "pokemon_move_id"}, "created_at": 1742909949.5846288, "relation_name": "\"nerd_facts\".\"public\".\"bridge_pokemon_moves\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}, {'columns': ['move_name']}],\n    unique_key = 'pokemon_move_id'\n  )\n}}\n\n/*\n  Model: bridge_pokemon_moves\n  Description: Bridge table connecting Pok\u00e9mon to their learnable moves\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and moves\n  - Gets moves from raw data since staging doesn't have them\n  - Calculates STAB (Same Type Attack Bonus) and signature move flags\n  - Provides context on move learning methods and levels\n*/\n\nWITH pokemon_base AS (\n    -- Get base Pokemon data from staging\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM {{ ref('stg_pokeapi_pokemon') }} p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM {{ ref('stg_pokeapi_pokemon') }} p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        -- These fields need to be handled differently as they're not in staging\n        NULL AS generation_number,\n        (SELECT SUM((stat_data->>'base_stat')::integer)\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS stat_data\n             FROM {{ ref('stg_pokeapi_pokemon') }} p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) st) AS total_base_stats\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    WHERE p.pokemon_id IS NOT NULL\n),\n\npokemon_moves_raw AS (\n    -- Get moves directly from raw data\n    SELECT\n        id,\n        moves::jsonb AS moves_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\npokemon_moves AS (\n    -- Extract move references from the raw data with improved error handling\n    SELECT\n        pb.pokemon_id,\n        pb.pokemon_name,\n        pb.primary_type,\n        pb.secondary_type,\n        pb.generation_number,\n        pb.total_base_stats,\n        -- Extract move details from the moves array\n        move_data->'move'->>'name' AS move_name,\n        move_data->'move'->>'type' AS move_type,\n        -- Extract learning method from version group details\n        (\n            SELECT vgd->>'move_learn_method'\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS learn_method,\n        -- Extract level requirement\n        (\n            SELECT COALESCE((vgd->>'level_learned_at')::integer, 0)\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS level_learned_at\n    FROM pokemon_base pb\n    JOIN pokemon_moves_raw pmr ON pb.pokemon_id = pmr.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(pmr.moves_json::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS move_data\n    WHERE pb.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Wrap everything in a subquery to use derived columns\n    move_data.*,\n    \n    -- Move priority classification using the now-available is_signature_move column\n    CASE\n        WHEN move_data.is_signature_move THEN 'Signature'\n        WHEN move_data.has_stab AND move_data.level_learned_at <= 20 THEN 'Early STAB'\n        WHEN move_data.has_stab THEN 'STAB'\n        WHEN move_data.learn_method = 'machine' THEN 'TM/HM'\n        WHEN move_data.learn_method = 'tutor' THEN 'Tutor'\n        ELSE 'Standard'\n    END AS move_priority,\n    \n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT\n        -- Primary key\n        {{ dbt_utils.generate_surrogate_key(['pm.pokemon_id', 'pm.move_name', 'pm.learn_method', 'COALESCE(pm.level_learned_at, 0)']) }} AS pokemon_move_id,\n        \n        -- Core identifiers\n        pm.pokemon_id,\n        pm.pokemon_name,\n        pm.move_name,\n        pm.move_type,\n        pm.learn_method,\n        pm.level_learned_at,\n        \n        -- Check if move type matches EITHER Pokemon type (STAB detection)\n        CASE\n            WHEN pm.move_type = pm.primary_type THEN TRUE\n            WHEN pm.move_type = pm.secondary_type AND pm.secondary_type IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END AS has_stab,\n        \n        -- Calculate if this is a signature move\n        CASE\n            -- Name-based detection\n            WHEN pm.move_name LIKE CONCAT('%', pm.pokemon_name, '%') THEN TRUE\n            \n            -- Starter Pok\u00e9mon signature moves\n            WHEN (pm.pokemon_name = 'pikachu' AND pm.move_name = 'volt-tackle') THEN TRUE\n            WHEN (pm.pokemon_name = 'charizard' AND pm.move_name = 'blast-burn') THEN TRUE\n            WHEN (pm.pokemon_name = 'blastoise' AND pm.move_name = 'hydro-cannon') THEN TRUE\n            WHEN (pm.pokemon_name = 'venusaur' AND pm.move_name = 'frenzy-plant') THEN TRUE\n            \n            -- Legendary signature moves\n            WHEN (pm.pokemon_name = 'mewtwo' AND pm.move_name = 'psystrike') THEN TRUE\n            WHEN (pm.pokemon_name = 'lugia' AND pm.move_name = 'aeroblast') THEN TRUE\n            WHEN (pm.pokemon_name = 'ho-oh' AND pm.move_name = 'sacred-fire') THEN TRUE\n            WHEN (pm.pokemon_name = 'kyogre' AND pm.move_name = 'origin-pulse') THEN TRUE\n            WHEN (pm.pokemon_name = 'groudon' AND pm.move_name = 'precipice-blades') THEN TRUE\n            WHEN (pm.pokemon_name = 'rayquaza' AND pm.move_name = 'dragon-ascent') THEN TRUE\n            WHEN (pm.pokemon_name = 'dialga' AND pm.move_name = 'roar-of-time') THEN TRUE\n            WHEN (pm.pokemon_name = 'palkia' AND pm.move_name = 'spacial-rend') THEN TRUE\n            WHEN (pm.pokemon_name = 'giratina' AND pm.move_name = 'shadow-force') THEN TRUE\n            \n            ELSE FALSE\n        END AS is_signature_move,\n        \n        -- Moves learned at level 1 or by evolution are typically important\n        CASE\n            WHEN pm.level_learned_at = 1 OR pm.learn_method = 'evolution' THEN TRUE\n            ELSE FALSE\n        END AS is_natural_move,\n        \n        -- Enhanced learn method classification\n        CASE\n            WHEN pm.learn_method = 'level-up' THEN 'Level Up'\n            WHEN pm.learn_method = 'machine' THEN 'TM/HM'\n            WHEN pm.learn_method = 'egg' THEN 'Egg Move'\n            WHEN pm.learn_method = 'tutor' THEN 'Move Tutor'\n            WHEN pm.learn_method = 'evolution' THEN 'Evolution'\n            WHEN pm.learn_method = 'form-change' THEN 'Form Change'\n            ELSE 'Other'\n        END AS learn_method_type\n        \n    FROM pokemon_moves pm\n) move_data\nORDER BY move_data.pokemon_id, move_data.level_learned_at, move_data.is_signature_move DESC", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/bridge_pokemon_moves.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_pokemon_moves\n  Description: Bridge table connecting Pok\u00e9mon to their learnable moves\n  \n  Notes:\n  - Handles the many-to-many relationship between Pok\u00e9mon and moves\n  - Gets moves from raw data since staging doesn't have them\n  - Calculates STAB (Same Type Attack Bonus) and signature move flags\n  - Provides context on move learning methods and levels\n*/\n\nWITH pokemon_base AS (\n    -- Get base Pokemon data from staging\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->>'type' AS type_json,\n                 (jsonb_array_elements(\n                     COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                 )->'slot')::int AS type_slot\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) pt\n         WHERE pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        -- These fields need to be handled differently as they're not in staging\n        NULL AS generation_number,\n        (SELECT SUM((stat_data->>'base_stat')::integer)\n         FROM (\n             SELECT\n                 pokemon_id,\n                 jsonb_array_elements(\n                     COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n                 ) AS stat_data\n             FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n             WHERE p2.pokemon_id = p.pokemon_id\n         ) st) AS total_base_stats\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    WHERE p.pokemon_id IS NOT NULL\n),\n\npokemon_moves_raw AS (\n    -- Get moves directly from raw data\n    SELECT\n        id,\n        moves::jsonb AS moves_json\n    FROM raw.pokeapi_pokemon\n    WHERE id IS NOT NULL\n),\n\npokemon_moves AS (\n    -- Extract move references from the raw data with improved error handling\n    SELECT\n        pb.pokemon_id,\n        pb.pokemon_name,\n        pb.primary_type,\n        pb.secondary_type,\n        pb.generation_number,\n        pb.total_base_stats,\n        -- Extract move details from the moves array\n        move_data->'move'->>'name' AS move_name,\n        move_data->'move'->>'type' AS move_type,\n        -- Extract learning method from version group details\n        (\n            SELECT vgd->>'move_learn_method'\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS learn_method,\n        -- Extract level requirement\n        (\n            SELECT COALESCE((vgd->>'level_learned_at')::integer, 0)\n            FROM jsonb_array_elements(move_data->'version_group_details') AS vgd\n            LIMIT 1\n        ) AS level_learned_at\n    FROM pokemon_base pb\n    JOIN pokemon_moves_raw pmr ON pb.pokemon_id = pmr.id\n    CROSS JOIN LATERAL jsonb_array_elements(\n        COALESCE(NULLIF(pmr.moves_json::text, 'null')::jsonb, '[]'::jsonb)\n    ) AS move_data\n    WHERE pb.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Wrap everything in a subquery to use derived columns\n    move_data.*,\n    \n    -- Move priority classification using the now-available is_signature_move column\n    CASE\n        WHEN move_data.is_signature_move THEN 'Signature'\n        WHEN move_data.has_stab AND move_data.level_learned_at <= 20 THEN 'Early STAB'\n        WHEN move_data.has_stab THEN 'STAB'\n        WHEN move_data.learn_method = 'machine' THEN 'TM/HM'\n        WHEN move_data.learn_method = 'tutor' THEN 'Tutor'\n        ELSE 'Standard'\n    END AS move_priority,\n    \n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT\n        -- Primary key\n        md5(cast(coalesce(cast(pm.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pm.move_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pm.learn_method as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(COALESCE(pm.level_learned_at, 0) as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_move_id,\n        \n        -- Core identifiers\n        pm.pokemon_id,\n        pm.pokemon_name,\n        pm.move_name,\n        pm.move_type,\n        pm.learn_method,\n        pm.level_learned_at,\n        \n        -- Check if move type matches EITHER Pokemon type (STAB detection)\n        CASE\n            WHEN pm.move_type = pm.primary_type THEN TRUE\n            WHEN pm.move_type = pm.secondary_type AND pm.secondary_type IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END AS has_stab,\n        \n        -- Calculate if this is a signature move\n        CASE\n            -- Name-based detection\n            WHEN pm.move_name LIKE CONCAT('%', pm.pokemon_name, '%') THEN TRUE\n            \n            -- Starter Pok\u00e9mon signature moves\n            WHEN (pm.pokemon_name = 'pikachu' AND pm.move_name = 'volt-tackle') THEN TRUE\n            WHEN (pm.pokemon_name = 'charizard' AND pm.move_name = 'blast-burn') THEN TRUE\n            WHEN (pm.pokemon_name = 'blastoise' AND pm.move_name = 'hydro-cannon') THEN TRUE\n            WHEN (pm.pokemon_name = 'venusaur' AND pm.move_name = 'frenzy-plant') THEN TRUE\n            \n            -- Legendary signature moves\n            WHEN (pm.pokemon_name = 'mewtwo' AND pm.move_name = 'psystrike') THEN TRUE\n            WHEN (pm.pokemon_name = 'lugia' AND pm.move_name = 'aeroblast') THEN TRUE\n            WHEN (pm.pokemon_name = 'ho-oh' AND pm.move_name = 'sacred-fire') THEN TRUE\n            WHEN (pm.pokemon_name = 'kyogre' AND pm.move_name = 'origin-pulse') THEN TRUE\n            WHEN (pm.pokemon_name = 'groudon' AND pm.move_name = 'precipice-blades') THEN TRUE\n            WHEN (pm.pokemon_name = 'rayquaza' AND pm.move_name = 'dragon-ascent') THEN TRUE\n            WHEN (pm.pokemon_name = 'dialga' AND pm.move_name = 'roar-of-time') THEN TRUE\n            WHEN (pm.pokemon_name = 'palkia' AND pm.move_name = 'spacial-rend') THEN TRUE\n            WHEN (pm.pokemon_name = 'giratina' AND pm.move_name = 'shadow-force') THEN TRUE\n            \n            ELSE FALSE\n        END AS is_signature_move,\n        \n        -- Moves learned at level 1 or by evolution are typically important\n        CASE\n            WHEN pm.level_learned_at = 1 OR pm.learn_method = 'evolution' THEN TRUE\n            ELSE FALSE\n        END AS is_natural_move,\n        \n        -- Enhanced learn method classification\n        CASE\n            WHEN pm.learn_method = 'level-up' THEN 'Level Up'\n            WHEN pm.learn_method = 'machine' THEN 'TM/HM'\n            WHEN pm.learn_method = 'egg' THEN 'Egg Move'\n            WHEN pm.learn_method = 'tutor' THEN 'Move Tutor'\n            WHEN pm.learn_method = 'evolution' THEN 'Evolution'\n            WHEN pm.learn_method = 'form-change' THEN 'Form Change'\n            ELSE 'Other'\n        END AS learn_method_type\n        \n    FROM pokemon_moves pm\n) move_data\nORDER BY move_data.pokemon_id, move_data.level_learned_at, move_data.is_signature_move DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_pokemon_types": {"database": "nerd_facts", "schema": "public", "name": "dim_pokemon_types", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/dim_pokemon_types.sql", "original_file_path": "models/marts/pokemon/dim_pokemon_types.sql", "unique_id": "model.nerd_facts_dbt.dim_pokemon_types", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "dim_pokemon_types"], "alias": "dim_pokemon_types", "checksum": {"name": "sha256", "checksum": "ae82ee4fe85af3ab030aa31f169cbce07c7986131d201022fa982d60aeb45229"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "type_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["type_id"]}, {"columns": ["type_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["type_id"]}, {"columns": ["type_name"]}], "unique_key": "type_id"}, "created_at": 1742909949.592329, "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_types\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['type_id']}, {'columns': ['type_name']}],\n    unique_key = 'type_id'\n  )\n}}\n\n/*\n  Model: dim_pokemon_types\n  Description: Dimension table for Pok\u00e9mon types and their effectiveness relationships\n  \n  Notes:\n  - Contains comprehensive type effectiveness data (weaknesses, resistances, immunities)\n  - Includes type distribution metrics across the Pok\u00e9dex\n  - Provides visual attributes for UI presentation\n  - Calculates offensive and defensive ratings\n  - Adds type categorization and generation data\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        type_name,\n        slot,\n        COUNT(*) AS pokemon_count\n    FROM (\n        SELECT\n            (jsonb_array_elements(\n                COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n            )->'type')::jsonb->>'name' AS type_name,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n            )->>'slot')::int AS slot\n        FROM {{ ref('stg_pokeapi_pokemon') }}\n        WHERE types IS NOT NULL\n    ) t\n    GROUP BY type_name, slot\n),\n\ntype_counts AS (\n    -- Extract primary types from all pokemon\n    SELECT\n        primary_type AS type_name,\n        COUNT(*) AS num_primary\n    FROM (\n        SELECT\n            pokemon_id,\n            (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n             FROM (\n                 SELECT\n                     jsonb_array_elements(\n                         COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                     ) AS type_json\n                 FROM {{ ref('stg_pokeapi_pokemon') }} p2\n                 WHERE p2.pokemon_id = p.pokemon_id\n             ) pt\n             WHERE jsonb_extract_path_text(pt.type_json::jsonb, 'slot') = '1'\n             LIMIT 1\n            ) AS primary_type\n        FROM {{ ref('stg_pokeapi_pokemon') }} p\n    ) primary_types\n    WHERE primary_type IS NOT NULL\n    GROUP BY primary_type\n),\n\nsecondary_type_counts AS (\n    -- Extract secondary types from pokemon\n    SELECT\n        secondary_type AS type_name,\n        COUNT(*) AS num_secondary\n    FROM (\n        SELECT\n            pokemon_id,\n            (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n             FROM (\n                 SELECT\n                     jsonb_array_elements(\n                         COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                     ) AS type_json\n                 FROM {{ ref('stg_pokeapi_pokemon') }} p2\n                 WHERE p2.pokemon_id = p.pokemon_id\n             ) pt\n             WHERE jsonb_extract_path_text(pt.type_json::jsonb, 'slot') = '2'\n             LIMIT 1\n            ) AS secondary_type\n        FROM {{ ref('stg_pokeapi_pokemon') }} p\n    ) secondary_types\n    WHERE secondary_type IS NOT NULL\n    GROUP BY secondary_type\n),\n\ncombined_counts AS (\n    -- Combine primary and secondary counts\n    SELECT\n        t.type_name,\n        t.num_primary,\n        COALESCE(s.num_secondary, 0) AS num_secondary,\n        t.num_primary + COALESCE(s.num_secondary, 0) AS total_usage\n    FROM type_counts t\n    LEFT JOIN secondary_type_counts s ON t.type_name = s.type_name\n),\n\ntype_attributes AS (\n    SELECT\n        type_name,\n        -- Weaknesses (takes 2x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Fighting']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Water' THEN ARRAY['Electric', 'Grass']\n            WHEN type_name = 'Electric' THEN ARRAY['Ground']\n            WHEN type_name = 'Grass' THEN ARRAY['Fire', 'Ice', 'Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Fire', 'Fighting', 'Rock', 'Steel']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Psychic']\n            WHEN type_name = 'Ground' THEN ARRAY['Water', 'Grass', 'Ice']\n            WHEN type_name = 'Flying' THEN ARRAY['Electric', 'Ice', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Bug', 'Ghost', 'Dark']\n            WHEN type_name = 'Bug' THEN ARRAY['Fire', 'Flying', 'Rock']\n            WHEN type_name = 'Rock' THEN ARRAY['Water', 'Grass', 'Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Dragon' THEN ARRAY['Ice', 'Dragon', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Bug', 'Fairy']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Fighting', 'Ground']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS weaknesses,\n        \n        -- Resistances (takes 0.5x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Fire', 'Grass', 'Ice', 'Bug', 'Steel', 'Fairy']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Water', 'Ice', 'Steel']\n            WHEN type_name = 'Electric' THEN ARRAY['Electric', 'Flying', 'Steel']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Electric', 'Grass', 'Ground']\n            WHEN type_name = 'Ice' THEN ARRAY['Ice']\n            WHEN type_name = 'Fighting' THEN ARRAY['Bug', 'Rock', 'Dark']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fighting', 'Poison', 'Bug', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Poison', 'Rock']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Psychic']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Fighting', 'Ground']\n            WHEN type_name = 'Rock' THEN ARRAY['Normal', 'Fire', 'Poison', 'Flying']\n            WHEN type_name = 'Ghost' THEN ARRAY['Poison', 'Bug']  -- Fixed: Ghost resists Bug and Poison\n            WHEN type_name = 'Dragon' THEN ARRAY['Fire', 'Water', 'Electric', 'Grass']\n            WHEN type_name = 'Dark' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Steel' THEN ARRAY['Normal', 'Grass', 'Ice', 'Flying', 'Psychic', 'Bug', 'Rock', 'Dragon', 'Steel', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Bug', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS resistances,\n        \n        -- Immunities (takes 0x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost']\n            WHEN type_name = 'Flying' THEN ARRAY['Ground']\n            WHEN type_name = 'Ground' THEN ARRAY['Electric']\n            WHEN type_name = 'Ghost' THEN ARRAY['Normal', 'Fighting']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic']\n            WHEN type_name = 'Fairy' THEN ARRAY['Dragon']\n            WHEN type_name = 'Steel' THEN ARRAY['Poison']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS immunities,\n        \n        -- Super effective against (deals 2x damage to these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Grass', 'Ice', 'Bug', 'Steel']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Rock']\n            WHEN type_name = 'Electric' THEN ARRAY['Water', 'Flying']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Ice' THEN ARRAY['Grass', 'Ground', 'Flying', 'Dragon']\n            WHEN type_name = 'Fighting' THEN ARRAY['Normal', 'Ice', 'Rock', 'Dark', 'Steel']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Fire', 'Electric', 'Poison', 'Rock', 'Steel']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Poison']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Psychic', 'Dark']\n            WHEN type_name = 'Rock' THEN ARRAY['Fire', 'Ice', 'Flying', 'Bug']\n            WHEN type_name = 'Ghost' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Dragon' THEN ARRAY['Dragon']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Steel' THEN ARRAY['Ice', 'Rock', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Dragon', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS super_effective,\n        \n        -- Type compatibility (works well defensively with these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost', 'Rock', 'Steel']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Rock', 'Dragon']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Flying']\n            WHEN type_name = 'Electric' THEN ARRAY['Flying', 'Steel', 'Fairy']\n            WHEN type_name = 'Grass' THEN ARRAY['Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Steel', 'Fire', 'Water']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Ghost', 'Steel']\n            WHEN type_name = 'Ground' THEN ARRAY['Flying', 'Bug', 'Grass']\n            WHEN type_name = 'Flying' THEN ARRAY['Steel', 'Electric', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Steel', 'Dark', 'Normal']\n            WHEN type_name = 'Bug' THEN ARRAY['Flying', 'Steel', 'Fire']\n            WHEN type_name = 'Rock' THEN ARRAY['Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Dark', 'Normal', 'Poison']\n            WHEN type_name = 'Dragon' THEN ARRAY['Steel', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Fairy', 'Bug']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Electric', 'Water']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel', 'Fire']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS defensive_synergy\n    FROM combined_counts\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['c.type_name']) }} AS type_key,\n    ROW_NUMBER() OVER (ORDER BY c.type_name) AS type_id,\n    \n    -- Core attributes\n    c.type_name,\n    c.num_primary,\n    c.num_secondary,\n    c.total_usage,\n    \n    -- Type effectiveness data\n    a.weaknesses,\n    a.resistances,\n    a.immunities,\n    a.super_effective,\n    \n    -- Defensive synergy types\n    a.defensive_synergy,\n    \n    -- Calculated metrics\n    COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) AS weakness_count,\n    COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) AS resistance_count,\n    COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) AS immunity_count,\n    COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) AS super_effective_count,\n    \n    -- Type color (for UI)\n    CASE\n        WHEN c.type_name = 'Normal' THEN '#A8A77A'\n        WHEN c.type_name = 'Fire' THEN '#EE8130'\n        WHEN c.type_name = 'Water' THEN '#6390F0'\n        WHEN c.type_name = 'Electric' THEN '#F7D02C'\n        WHEN c.type_name = 'Grass' THEN '#7AC74C'\n        WHEN c.type_name = 'Ice' THEN '#96D9D6'\n        WHEN c.type_name = 'Fighting' THEN '#C22E28'\n        WHEN c.type_name = 'Poison' THEN '#A33EA1'\n        WHEN c.type_name = 'Ground' THEN '#E2BF65'\n        WHEN c.type_name = 'Flying' THEN '#A98FF3'\n        WHEN c.type_name = 'Psychic' THEN '#F95587'\n        WHEN c.type_name = 'Bug' THEN '#A6B91A'\n        WHEN c.type_name = 'Rock' THEN '#B6A136'\n        WHEN c.type_name = 'Ghost' THEN '#735797'\n        WHEN c.type_name = 'Dragon' THEN '#6F35FC'\n        WHEN c.type_name = 'Dark' THEN '#705746'\n        WHEN c.type_name = 'Steel' THEN '#B7B7CE'\n        WHEN c.type_name = 'Fairy' THEN '#D685AD'\n        ELSE '#CCCCCC'\n    END AS type_color,\n    \n    -- Type category - expanded with better organization\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric') THEN 'Primary Elemental'\n        WHEN c.type_name IN ('Grass', 'Ice') THEN 'Secondary Elemental'\n        WHEN c.type_name IN ('Fighting', 'Rock', 'Ground') THEN 'Physical'\n        WHEN c.type_name IN ('Poison', 'Flying', 'Bug') THEN 'Biological'\n        WHEN c.type_name IN ('Psychic', 'Ghost', 'Dark', 'Fairy') THEN 'Special'\n        WHEN c.type_name IN ('Normal') THEN 'Normal'\n        WHEN c.type_name IN ('Dragon', 'Steel') THEN 'Advanced'\n        ELSE 'Other'\n    END AS type_category,\n    \n    -- Type attack classification\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                           'Psychic', 'Dragon', 'Dark', 'Fairy') THEN 'Special'\n        ELSE 'Physical'\n    END AS damage_category,\n    \n    -- Generation introduced\n    CASE\n        WHEN c.type_name IN ('Normal', 'Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                            'Fighting', 'Poison', 'Ground', 'Flying', 'Psychic', 'Bug', \n                            'Rock', 'Ghost', 'Dragon') THEN 1\n        WHEN c.type_name IN ('Dark', 'Steel') THEN 2\n        WHEN c.type_name IN ('Fairy') THEN 6\n        ELSE 1\n    END AS generation_introduced,\n    \n    -- Offensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Ground', 'Fighting', 'Fire') THEN 9  -- Excellent coverage\n        WHEN c.type_name IN ('Ice', 'Electric', 'Rock', 'Flying', 'Fairy', 'Ghost', 'Dark') THEN 8  -- Great coverage\n        WHEN c.type_name IN ('Grass', 'Dragon', 'Steel', 'Water', 'Psychic') THEN 7  -- Good coverage\n        WHEN c.type_name IN ('Poison', 'Bug') THEN 5  -- Limited coverage\n        WHEN c.type_name IN ('Normal') THEN 3  -- Poor coverage\n        ELSE 6\n    END AS offensive_rating,\n    \n    -- Defensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Steel', 'Fairy') THEN 10  -- Excellent defenses\n        WHEN c.type_name IN ('Ghost', 'Water', 'Normal', 'Dragon') THEN 8  -- Great defenses\n        WHEN c.type_name IN ('Fire', 'Flying', 'Dark', 'Poison', 'Ground') THEN 7  -- Good defenses\n        WHEN c.type_name IN ('Electric', 'Fighting', 'Psychic', 'Rock') THEN 5  -- Average defenses\n        WHEN c.type_name IN ('Grass', 'Bug', 'Ice') THEN 3  -- Poor defenses\n        ELSE 6\n    END AS defensive_rating,\n    \n    -- Type value calculated across multiple factors\n    (\n        COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) * 10 -\n        COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) * 3\n    ) AS composite_value_score,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM combined_counts c\nJOIN type_attributes a ON c.type_name = a.type_name\nORDER BY c.type_name", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/dim_pokemon_types.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_pokemon_types\n  Description: Dimension table for Pok\u00e9mon types and their effectiveness relationships\n  \n  Notes:\n  - Contains comprehensive type effectiveness data (weaknesses, resistances, immunities)\n  - Includes type distribution metrics across the Pok\u00e9dex\n  - Provides visual attributes for UI presentation\n  - Calculates offensive and defensive ratings\n  - Adds type categorization and generation data\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        type_name,\n        slot,\n        COUNT(*) AS pokemon_count\n    FROM (\n        SELECT\n            (jsonb_array_elements(\n                COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n            )->'type')::jsonb->>'name' AS type_name,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n            )->>'slot')::int AS slot\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n        WHERE types IS NOT NULL\n    ) t\n    GROUP BY type_name, slot\n),\n\ntype_counts AS (\n    -- Extract primary types from all pokemon\n    SELECT\n        primary_type AS type_name,\n        COUNT(*) AS num_primary\n    FROM (\n        SELECT\n            pokemon_id,\n            (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n             FROM (\n                 SELECT\n                     jsonb_array_elements(\n                         COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                     ) AS type_json\n                 FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n                 WHERE p2.pokemon_id = p.pokemon_id\n             ) pt\n             WHERE jsonb_extract_path_text(pt.type_json::jsonb, 'slot') = '1'\n             LIMIT 1\n            ) AS primary_type\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    ) primary_types\n    WHERE primary_type IS NOT NULL\n    GROUP BY primary_type\n),\n\nsecondary_type_counts AS (\n    -- Extract secondary types from pokemon\n    SELECT\n        secondary_type AS type_name,\n        COUNT(*) AS num_secondary\n    FROM (\n        SELECT\n            pokemon_id,\n            (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n             FROM (\n                 SELECT\n                     jsonb_array_elements(\n                         COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n                     ) AS type_json\n                 FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p2\n                 WHERE p2.pokemon_id = p.pokemon_id\n             ) pt\n             WHERE jsonb_extract_path_text(pt.type_json::jsonb, 'slot') = '2'\n             LIMIT 1\n            ) AS secondary_type\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    ) secondary_types\n    WHERE secondary_type IS NOT NULL\n    GROUP BY secondary_type\n),\n\ncombined_counts AS (\n    -- Combine primary and secondary counts\n    SELECT\n        t.type_name,\n        t.num_primary,\n        COALESCE(s.num_secondary, 0) AS num_secondary,\n        t.num_primary + COALESCE(s.num_secondary, 0) AS total_usage\n    FROM type_counts t\n    LEFT JOIN secondary_type_counts s ON t.type_name = s.type_name\n),\n\ntype_attributes AS (\n    SELECT\n        type_name,\n        -- Weaknesses (takes 2x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Fighting']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Water' THEN ARRAY['Electric', 'Grass']\n            WHEN type_name = 'Electric' THEN ARRAY['Ground']\n            WHEN type_name = 'Grass' THEN ARRAY['Fire', 'Ice', 'Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Fire', 'Fighting', 'Rock', 'Steel']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Psychic']\n            WHEN type_name = 'Ground' THEN ARRAY['Water', 'Grass', 'Ice']\n            WHEN type_name = 'Flying' THEN ARRAY['Electric', 'Ice', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Bug', 'Ghost', 'Dark']\n            WHEN type_name = 'Bug' THEN ARRAY['Fire', 'Flying', 'Rock']\n            WHEN type_name = 'Rock' THEN ARRAY['Water', 'Grass', 'Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Dragon' THEN ARRAY['Ice', 'Dragon', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Bug', 'Fairy']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Fighting', 'Ground']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS weaknesses,\n        \n        -- Resistances (takes 0.5x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Fire', 'Grass', 'Ice', 'Bug', 'Steel', 'Fairy']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Water', 'Ice', 'Steel']\n            WHEN type_name = 'Electric' THEN ARRAY['Electric', 'Flying', 'Steel']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Electric', 'Grass', 'Ground']\n            WHEN type_name = 'Ice' THEN ARRAY['Ice']\n            WHEN type_name = 'Fighting' THEN ARRAY['Bug', 'Rock', 'Dark']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fighting', 'Poison', 'Bug', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Poison', 'Rock']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Psychic']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Fighting', 'Ground']\n            WHEN type_name = 'Rock' THEN ARRAY['Normal', 'Fire', 'Poison', 'Flying']\n            WHEN type_name = 'Ghost' THEN ARRAY['Poison', 'Bug']  -- Fixed: Ghost resists Bug and Poison\n            WHEN type_name = 'Dragon' THEN ARRAY['Fire', 'Water', 'Electric', 'Grass']\n            WHEN type_name = 'Dark' THEN ARRAY['Ghost', 'Dark']\n            WHEN type_name = 'Steel' THEN ARRAY['Normal', 'Grass', 'Ice', 'Flying', 'Psychic', 'Bug', 'Rock', 'Dragon', 'Steel', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Bug', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS resistances,\n        \n        -- Immunities (takes 0x damage from these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost']\n            WHEN type_name = 'Flying' THEN ARRAY['Ground']\n            WHEN type_name = 'Ground' THEN ARRAY['Electric']\n            WHEN type_name = 'Ghost' THEN ARRAY['Normal', 'Fighting']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic']\n            WHEN type_name = 'Fairy' THEN ARRAY['Dragon']\n            WHEN type_name = 'Steel' THEN ARRAY['Poison']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS immunities,\n        \n        -- Super effective against (deals 2x damage to these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY[]::VARCHAR[]\n            WHEN type_name = 'Fire' THEN ARRAY['Grass', 'Ice', 'Bug', 'Steel']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Rock']\n            WHEN type_name = 'Electric' THEN ARRAY['Water', 'Flying']\n            WHEN type_name = 'Grass' THEN ARRAY['Water', 'Ground', 'Rock']\n            WHEN type_name = 'Ice' THEN ARRAY['Grass', 'Ground', 'Flying', 'Dragon']\n            WHEN type_name = 'Fighting' THEN ARRAY['Normal', 'Ice', 'Rock', 'Dark', 'Steel']\n            WHEN type_name = 'Poison' THEN ARRAY['Grass', 'Fairy']\n            WHEN type_name = 'Ground' THEN ARRAY['Fire', 'Electric', 'Poison', 'Rock', 'Steel']\n            WHEN type_name = 'Flying' THEN ARRAY['Grass', 'Fighting', 'Bug']\n            WHEN type_name = 'Psychic' THEN ARRAY['Fighting', 'Poison']\n            WHEN type_name = 'Bug' THEN ARRAY['Grass', 'Psychic', 'Dark']\n            WHEN type_name = 'Rock' THEN ARRAY['Fire', 'Ice', 'Flying', 'Bug']\n            WHEN type_name = 'Ghost' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Dragon' THEN ARRAY['Dragon']\n            WHEN type_name = 'Dark' THEN ARRAY['Psychic', 'Ghost']\n            WHEN type_name = 'Steel' THEN ARRAY['Ice', 'Rock', 'Fairy']\n            WHEN type_name = 'Fairy' THEN ARRAY['Fighting', 'Dragon', 'Dark']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS super_effective,\n        \n        -- Type compatibility (works well defensively with these types)\n        CASE\n            WHEN type_name = 'Normal' THEN ARRAY['Ghost', 'Rock', 'Steel']\n            WHEN type_name = 'Fire' THEN ARRAY['Water', 'Rock', 'Dragon']\n            WHEN type_name = 'Water' THEN ARRAY['Fire', 'Ground', 'Flying']\n            WHEN type_name = 'Electric' THEN ARRAY['Flying', 'Steel', 'Fairy']\n            WHEN type_name = 'Grass' THEN ARRAY['Poison', 'Flying', 'Bug']\n            WHEN type_name = 'Ice' THEN ARRAY['Steel', 'Fire', 'Water']\n            WHEN type_name = 'Fighting' THEN ARRAY['Flying', 'Psychic', 'Fairy']\n            WHEN type_name = 'Poison' THEN ARRAY['Ground', 'Ghost', 'Steel']\n            WHEN type_name = 'Ground' THEN ARRAY['Flying', 'Bug', 'Grass']\n            WHEN type_name = 'Flying' THEN ARRAY['Steel', 'Electric', 'Rock']\n            WHEN type_name = 'Psychic' THEN ARRAY['Steel', 'Dark', 'Normal']\n            WHEN type_name = 'Bug' THEN ARRAY['Flying', 'Steel', 'Fire']\n            WHEN type_name = 'Rock' THEN ARRAY['Fighting', 'Ground', 'Steel']\n            WHEN type_name = 'Ghost' THEN ARRAY['Dark', 'Normal', 'Poison']\n            WHEN type_name = 'Dragon' THEN ARRAY['Steel', 'Fairy']\n            WHEN type_name = 'Dark' THEN ARRAY['Fighting', 'Fairy', 'Bug']\n            WHEN type_name = 'Steel' THEN ARRAY['Fire', 'Electric', 'Water']\n            WHEN type_name = 'Fairy' THEN ARRAY['Poison', 'Steel', 'Fire']\n            ELSE ARRAY[]::VARCHAR[]\n        END AS defensive_synergy\n    FROM combined_counts\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(c.type_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS type_key,\n    ROW_NUMBER() OVER (ORDER BY c.type_name) AS type_id,\n    \n    -- Core attributes\n    c.type_name,\n    c.num_primary,\n    c.num_secondary,\n    c.total_usage,\n    \n    -- Type effectiveness data\n    a.weaknesses,\n    a.resistances,\n    a.immunities,\n    a.super_effective,\n    \n    -- Defensive synergy types\n    a.defensive_synergy,\n    \n    -- Calculated metrics\n    COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) AS weakness_count,\n    COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) AS resistance_count,\n    COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) AS immunity_count,\n    COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) AS super_effective_count,\n    \n    -- Type color (for UI)\n    CASE\n        WHEN c.type_name = 'Normal' THEN '#A8A77A'\n        WHEN c.type_name = 'Fire' THEN '#EE8130'\n        WHEN c.type_name = 'Water' THEN '#6390F0'\n        WHEN c.type_name = 'Electric' THEN '#F7D02C'\n        WHEN c.type_name = 'Grass' THEN '#7AC74C'\n        WHEN c.type_name = 'Ice' THEN '#96D9D6'\n        WHEN c.type_name = 'Fighting' THEN '#C22E28'\n        WHEN c.type_name = 'Poison' THEN '#A33EA1'\n        WHEN c.type_name = 'Ground' THEN '#E2BF65'\n        WHEN c.type_name = 'Flying' THEN '#A98FF3'\n        WHEN c.type_name = 'Psychic' THEN '#F95587'\n        WHEN c.type_name = 'Bug' THEN '#A6B91A'\n        WHEN c.type_name = 'Rock' THEN '#B6A136'\n        WHEN c.type_name = 'Ghost' THEN '#735797'\n        WHEN c.type_name = 'Dragon' THEN '#6F35FC'\n        WHEN c.type_name = 'Dark' THEN '#705746'\n        WHEN c.type_name = 'Steel' THEN '#B7B7CE'\n        WHEN c.type_name = 'Fairy' THEN '#D685AD'\n        ELSE '#CCCCCC'\n    END AS type_color,\n    \n    -- Type category - expanded with better organization\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric') THEN 'Primary Elemental'\n        WHEN c.type_name IN ('Grass', 'Ice') THEN 'Secondary Elemental'\n        WHEN c.type_name IN ('Fighting', 'Rock', 'Ground') THEN 'Physical'\n        WHEN c.type_name IN ('Poison', 'Flying', 'Bug') THEN 'Biological'\n        WHEN c.type_name IN ('Psychic', 'Ghost', 'Dark', 'Fairy') THEN 'Special'\n        WHEN c.type_name IN ('Normal') THEN 'Normal'\n        WHEN c.type_name IN ('Dragon', 'Steel') THEN 'Advanced'\n        ELSE 'Other'\n    END AS type_category,\n    \n    -- Type attack classification\n    CASE\n        WHEN c.type_name IN ('Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                           'Psychic', 'Dragon', 'Dark', 'Fairy') THEN 'Special'\n        ELSE 'Physical'\n    END AS damage_category,\n    \n    -- Generation introduced\n    CASE\n        WHEN c.type_name IN ('Normal', 'Fire', 'Water', 'Electric', 'Grass', 'Ice', \n                            'Fighting', 'Poison', 'Ground', 'Flying', 'Psychic', 'Bug', \n                            'Rock', 'Ghost', 'Dragon') THEN 1\n        WHEN c.type_name IN ('Dark', 'Steel') THEN 2\n        WHEN c.type_name IN ('Fairy') THEN 6\n        ELSE 1\n    END AS generation_introduced,\n    \n    -- Offensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Ground', 'Fighting', 'Fire') THEN 9  -- Excellent coverage\n        WHEN c.type_name IN ('Ice', 'Electric', 'Rock', 'Flying', 'Fairy', 'Ghost', 'Dark') THEN 8  -- Great coverage\n        WHEN c.type_name IN ('Grass', 'Dragon', 'Steel', 'Water', 'Psychic') THEN 7  -- Good coverage\n        WHEN c.type_name IN ('Poison', 'Bug') THEN 5  -- Limited coverage\n        WHEN c.type_name IN ('Normal') THEN 3  -- Poor coverage\n        ELSE 6\n    END AS offensive_rating,\n    \n    -- Defensive usefulness rating (1-10)\n    CASE\n        WHEN c.type_name IN ('Steel', 'Fairy') THEN 10  -- Excellent defenses\n        WHEN c.type_name IN ('Ghost', 'Water', 'Normal', 'Dragon') THEN 8  -- Great defenses\n        WHEN c.type_name IN ('Fire', 'Flying', 'Dark', 'Poison', 'Ground') THEN 7  -- Good defenses\n        WHEN c.type_name IN ('Electric', 'Fighting', 'Psychic', 'Rock') THEN 5  -- Average defenses\n        WHEN c.type_name IN ('Grass', 'Bug', 'Ice') THEN 3  -- Poor defenses\n        ELSE 6\n    END AS defensive_rating,\n    \n    -- Type value calculated across multiple factors\n    (\n        COALESCE(ARRAY_LENGTH(a.resistances, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.immunities, 1), 0) * 10 -\n        COALESCE(ARRAY_LENGTH(a.weaknesses, 1), 0) * 5 +\n        COALESCE(ARRAY_LENGTH(a.super_effective, 1), 0) * 3\n    ) AS composite_value_score,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM combined_counts c\nJOIN type_attributes a ON c.type_name = a.type_name\nORDER BY c.type_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_pokemon_moves": {"database": "nerd_facts", "schema": "public", "name": "dim_pokemon_moves", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/dim_pokemon_moves.sql", "original_file_path": "models/marts/pokemon/dim_pokemon_moves.sql", "unique_id": "model.nerd_facts_dbt.dim_pokemon_moves", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "dim_pokemon_moves"], "alias": "dim_pokemon_moves", "checksum": {"name": "sha256", "checksum": "0313005dbf210a0f527a11721b7e8a8352abb6b5452308da5c6b096519146c90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "move_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["move_id"]}, {"columns": ["move_name"]}, {"columns": ["move_type"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["move_id"]}, {"columns": ["move_name"]}, {"columns": ["move_type"]}], "unique_key": "move_key"}, "created_at": 1742909949.6004195, "relation_name": "\"nerd_facts\".\"public\".\"dim_pokemon_moves\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['move_id']}, {'columns': ['move_name']}, {'columns': ['move_type']}],\n    unique_key = 'move_key'\n  )\n}}\n\n/*\n  Model: dim_pokemon_moves\n  Description: Dimension table for Pok\u00e9mon moves\n*/\n\nWITH base_moves AS (\n    -- Ensure clean numeric data from source\n    SELECT\n        move_id,\n        move_name,\n        type->>'name' AS move_type,\n        -- Handle numeric conversions safely\n        CASE \n            WHEN power::TEXT ~ '^[0-9]+$' THEN power::INTEGER\n            ELSE NULL \n        END AS power,\n        CASE \n            WHEN pp::TEXT ~ '^[0-9]+$' THEN pp::INTEGER\n            ELSE NULL \n        END AS pp,\n        CASE \n            WHEN accuracy::TEXT ~ '^[0-9]+$' THEN accuracy::INTEGER\n            ELSE NULL \n        END AS accuracy,\n        CASE \n            WHEN priority::TEXT ~ '^[0-9]+$' THEN priority::INTEGER\n            ELSE 0 \n        END AS priority,\n        damage_class->>'name' AS damage_class,\n        jsonb_array_elements(effect_entries::jsonb)->>'effect' AS effect_text,\n        CASE \n            WHEN effect_chance::TEXT ~ '^[0-9]+$' THEN effect_chance::INTEGER\n            ELSE NULL \n        END AS effect_chance,\n        CASE \n            WHEN (generation->>'url')::TEXT ~ 'generation/([0-9]+)/' \n            THEN REGEXP_REPLACE((generation->>'url')::TEXT, '.*generation/([0-9]+)/.*', '\\1')::INTEGER\n            ELSE 1 \n        END AS generation_id\n    FROM {{ ref('stg_pokeapi_moves') }}\n    WHERE move_id IS NOT NULL\n),\n\nmove_classifications AS (\n    -- Pre-calculate move classifications to avoid repetition\n    SELECT\n        move_id,\n        move_name,\n        move_type,\n        power,\n        pp,\n        accuracy,\n        priority,\n        damage_class,\n        effect_text,\n        effect_chance,\n        generation_id,\n        -- Add effect category calculation\n        CASE\n            WHEN effect_text LIKE '%boost%' OR \n                 effect_text LIKE '%raise%' OR \n                 effect_text LIKE '%increase%' THEN 'Stat Boost'\n            WHEN effect_text LIKE '%lower%' OR \n                 effect_text LIKE '%decrease%' OR \n                 effect_text LIKE '%reduce%' THEN 'Stat Reduction'\n            WHEN effect_text LIKE '%paralyze%' THEN 'Paralyze'\n            WHEN effect_text LIKE '%burn%' THEN 'Burn'\n            WHEN effect_text LIKE '%poison%' OR \n                 effect_text LIKE '%toxic%' THEN 'Poison'\n            WHEN effect_text LIKE '%sleep%' THEN 'Sleep'\n            WHEN effect_text LIKE '%freeze%' THEN 'Freeze'\n            WHEN effect_text LIKE '%confus%' THEN 'Confusion'\n            WHEN effect_text LIKE '%flinch%' THEN 'Flinch'\n            WHEN effect_text LIKE '%trap%' THEN 'Trap'\n            WHEN effect_text LIKE '%heal%' OR \n                 effect_text LIKE '%restore%' THEN 'Healing'\n            WHEN effect_text LIKE '%protect%' OR \n                 effect_text LIKE '%protect%' THEN 'Protection'\n            WHEN effect_text LIKE '%critical%' THEN 'Critical Hit'\n            WHEN effect_text LIKE '%priority%' OR priority > 0 THEN 'Priority'\n            WHEN damage_class = 'status' THEN 'Status Effect'\n            WHEN power > 0 THEN 'Direct Damage'\n            ELSE 'Other'\n        END AS effect_category\n    FROM base_moves\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['move_id']) }} AS move_key,\n    \n    -- Core identifiers\n    move_id,\n    move_name,\n    \n    -- Move attributes\n    move_type,\n    COALESCE(power, 0) AS power,\n    COALESCE(pp, 0) AS pp,\n    COALESCE(accuracy, 0) AS accuracy,\n    COALESCE(priority, 0) AS priority,\n    COALESCE(damage_class, 'physical') AS damage_class,\n    \n    -- Effect information\n    effect_text,\n    COALESCE(effect_chance, 0) AS effect_chance,\n    \n    -- Generation information\n    COALESCE(generation_id, 1) AS generation_id,\n    \n    -- Move category classification\n    CASE\n        WHEN damage_class = 'status' THEN 'Status'\n        WHEN power IS NULL OR power = 0 THEN 'Status'\n        WHEN power < 40 THEN 'Weak'\n        WHEN power < 70 THEN 'Medium'\n        WHEN power < 90 THEN 'Strong'\n        WHEN power < 110 THEN 'Very Strong'\n        ELSE 'Extreme'\n    END AS power_category,\n    \n    -- Accuracy classification\n    CASE\n        WHEN accuracy IS NULL THEN 'Always Hits'\n        WHEN accuracy < 50 THEN 'Very Inaccurate'\n        WHEN accuracy < 70 THEN 'Inaccurate'\n        WHEN accuracy < 85 THEN 'Moderate'\n        WHEN accuracy < 95 THEN 'Accurate'\n        WHEN accuracy < 100 THEN 'Very Accurate'\n        WHEN accuracy = 100 THEN 'Perfect'\n        ELSE 'Unknown'\n    END AS accuracy_category,\n    \n    -- Move effect category based on effect text\n    effect_category,\n    \n    -- Competitive relevance score (1-10)\n    CASE\n        -- Extremely useful moves in competitive\n        WHEN move_name IN ('stealth-rock', 'spikes', 'toxic-spikes', 'defog', 'rapid-spin',\n                   'recover', 'wish', 'protect', 'substitute', 'will-o-wisp',\n                   'scald', 'knock-off', 'u-turn', 'volt-switch', 'toxic',\n                   'thunder-wave', 'dragon-dance', 'swords-dance', 'nasty-plot',\n                   'calm-mind', 'quiver-dance', 'roost', 'leech-seed') THEN 10\n                   \n        -- Very strong attacks and utility moves\n        WHEN (power > 100 AND accuracy >= 90) OR \n             move_name IN ('close-combat', 'earthquake', 'ice-beam', 'thunderbolt',\n                   'flamethrower', 'surf', 'stone-edge', 'focus-blast',\n                   'shadow-ball', 'psyshock', 'earth-power', 'draco-meteor', \n                   'moonblast', 'play-rough', 'gunk-shot', 'brave-bird') THEN 9\n                   \n        -- Strong utility and common attacks\n        WHEN (power >= 80 AND accuracy >= 85) OR\n             move_name IN ('taunt', 'encore', 'trick', 'toxic', 'synthesis', \n                   'aromatherapy', 'heal-bell', 'sticky-web', 'trick-room',\n                   'tailwind', 'moonlight', 'morning-sun') THEN 8\n                   \n        -- Useful moves but not top tier\n        WHEN (power >= 70 AND accuracy >= 80) OR\n             move_name IN ('light-screen', 'reflect', 'hypnosis', 'sleep-powder',\n                   'stun-spore', 'thunder-wave') THEN 7\n                   \n        -- Standard damage moves with decent stats\n        WHEN power >= 60 AND accuracy >= 90 THEN 6\n        \n        -- Status moves without specific utility\n        WHEN damage_class = 'status' THEN 5\n        \n        -- Weak but accurate moves\n        WHEN power < 60 AND accuracy > 90 THEN 4\n        \n        -- Inaccurate moves\n        WHEN accuracy < 80 AND power > 0 THEN 3\n        \n        -- Very weak moves\n        WHEN power < 40 THEN 2\n        \n        -- Other moves\n        ELSE 1\n    END AS competitive_score,\n    \n    -- Move uniqueness rating\n    CASE\n        -- Signature moves\n        WHEN move_name IN ('spacial-rend', 'roar-of-time', 'seed-flare', 'blue-flare',\n                         'bolt-strike', 'fusion-flare', 'fusion-bolt', 'origin-pulse',\n                         'precipice-blades', 'dragon-ascent', 'sacred-fire', 'aeroblast',\n                         'shadow-force', 'doom-desire', 'psycho-boost', 'lunar-dance',\n                         'magma-storm', 'crush-grip', 'judgment', 'secret-sword',\n                         'relic-song', 'light-of-ruin', 'steam-eruption', 'core-enforcer',\n                         'sunsteel-strike', 'moongeist-beam', 'photon-geyser',\n                         'spectral-thief', 'plasma-fists') THEN 'Signature'\n        -- Very rare moves (limited distribution)\n        WHEN move_name IN ('shell-smash', 'quiver-dance', 'tail-glow', 'dragon-dance',\n                   'shift-gear', 'coil', 'geomancy', 'mind-blown', 'oblivion-wing',\n                   'thousand-arrows', 'thousand-waves', 'diamond-storm') THEN 'Very Rare'\n                   \n        -- Rare but distributed moves\n        WHEN move_name IN ('spore', 'dark-void', 'healing-wish', 'lunar-dance', \n                   'shore-up', 'belly-drum', 'fiery-dance', E'king''s-shield',\n                   'spiky-shield', 'baneful-bunker', 'parting-shot') THEN 'Rare'\n                   \n        -- Uncommon moves\n        WHEN move_name IN ('leech-seed', 'aromatherapy', 'heal-bell', 'sticky-web',\n                   'defog', 'rapid-spin', 'extreme-speed', 'sucker-punch',\n                   'bullet-punch', 'aqua-jet', 'mach-punch', 'ice-shard') THEN 'Uncommon'\n                   \n        -- Common coverage moves\n        WHEN move_name IN ('ice-beam', 'thunderbolt', 'flamethrower', 'surf',\n                   'earthquake', 'stone-edge', 'close-combat', 'shadow-ball') THEN 'Standard'\n                   \n        -- Very common moves\n        WHEN move_name IN ('toxic', 'protect', 'rest', 'sleep-talk', 'substitute') THEN 'Common'\n                   \n        -- Handle everything else based on damage class\n        WHEN damage_class = 'status' THEN 'Status'\n        ELSE 'Standard'\n    END AS move_rarity,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM move_classifications\nORDER BY move_type, power DESC NULLS LAST, move_name", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/dim_pokemon_moves.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_pokemon_moves\n  Description: Dimension table for Pok\u00e9mon moves\n*/\n\nWITH base_moves AS (\n    -- Ensure clean numeric data from source\n    SELECT\n        move_id,\n        move_name,\n        type->>'name' AS move_type,\n        -- Handle numeric conversions safely\n        CASE \n            WHEN power::TEXT ~ '^[0-9]+$' THEN power::INTEGER\n            ELSE NULL \n        END AS power,\n        CASE \n            WHEN pp::TEXT ~ '^[0-9]+$' THEN pp::INTEGER\n            ELSE NULL \n        END AS pp,\n        CASE \n            WHEN accuracy::TEXT ~ '^[0-9]+$' THEN accuracy::INTEGER\n            ELSE NULL \n        END AS accuracy,\n        CASE \n            WHEN priority::TEXT ~ '^[0-9]+$' THEN priority::INTEGER\n            ELSE 0 \n        END AS priority,\n        damage_class->>'name' AS damage_class,\n        jsonb_array_elements(effect_entries::jsonb)->>'effect' AS effect_text,\n        CASE \n            WHEN effect_chance::TEXT ~ '^[0-9]+$' THEN effect_chance::INTEGER\n            ELSE NULL \n        END AS effect_chance,\n        CASE \n            WHEN (generation->>'url')::TEXT ~ 'generation/([0-9]+)/' \n            THEN REGEXP_REPLACE((generation->>'url')::TEXT, '.*generation/([0-9]+)/.*', '\\1')::INTEGER\n            ELSE 1 \n        END AS generation_id\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n    WHERE move_id IS NOT NULL\n),\n\nmove_classifications AS (\n    -- Pre-calculate move classifications to avoid repetition\n    SELECT\n        move_id,\n        move_name,\n        move_type,\n        power,\n        pp,\n        accuracy,\n        priority,\n        damage_class,\n        effect_text,\n        effect_chance,\n        generation_id,\n        -- Add effect category calculation\n        CASE\n            WHEN effect_text LIKE '%boost%' OR \n                 effect_text LIKE '%raise%' OR \n                 effect_text LIKE '%increase%' THEN 'Stat Boost'\n            WHEN effect_text LIKE '%lower%' OR \n                 effect_text LIKE '%decrease%' OR \n                 effect_text LIKE '%reduce%' THEN 'Stat Reduction'\n            WHEN effect_text LIKE '%paralyze%' THEN 'Paralyze'\n            WHEN effect_text LIKE '%burn%' THEN 'Burn'\n            WHEN effect_text LIKE '%poison%' OR \n                 effect_text LIKE '%toxic%' THEN 'Poison'\n            WHEN effect_text LIKE '%sleep%' THEN 'Sleep'\n            WHEN effect_text LIKE '%freeze%' THEN 'Freeze'\n            WHEN effect_text LIKE '%confus%' THEN 'Confusion'\n            WHEN effect_text LIKE '%flinch%' THEN 'Flinch'\n            WHEN effect_text LIKE '%trap%' THEN 'Trap'\n            WHEN effect_text LIKE '%heal%' OR \n                 effect_text LIKE '%restore%' THEN 'Healing'\n            WHEN effect_text LIKE '%protect%' OR \n                 effect_text LIKE '%protect%' THEN 'Protection'\n            WHEN effect_text LIKE '%critical%' THEN 'Critical Hit'\n            WHEN effect_text LIKE '%priority%' OR priority > 0 THEN 'Priority'\n            WHEN damage_class = 'status' THEN 'Status Effect'\n            WHEN power > 0 THEN 'Direct Damage'\n            ELSE 'Other'\n        END AS effect_category\n    FROM base_moves\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(move_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS move_key,\n    \n    -- Core identifiers\n    move_id,\n    move_name,\n    \n    -- Move attributes\n    move_type,\n    COALESCE(power, 0) AS power,\n    COALESCE(pp, 0) AS pp,\n    COALESCE(accuracy, 0) AS accuracy,\n    COALESCE(priority, 0) AS priority,\n    COALESCE(damage_class, 'physical') AS damage_class,\n    \n    -- Effect information\n    effect_text,\n    COALESCE(effect_chance, 0) AS effect_chance,\n    \n    -- Generation information\n    COALESCE(generation_id, 1) AS generation_id,\n    \n    -- Move category classification\n    CASE\n        WHEN damage_class = 'status' THEN 'Status'\n        WHEN power IS NULL OR power = 0 THEN 'Status'\n        WHEN power < 40 THEN 'Weak'\n        WHEN power < 70 THEN 'Medium'\n        WHEN power < 90 THEN 'Strong'\n        WHEN power < 110 THEN 'Very Strong'\n        ELSE 'Extreme'\n    END AS power_category,\n    \n    -- Accuracy classification\n    CASE\n        WHEN accuracy IS NULL THEN 'Always Hits'\n        WHEN accuracy < 50 THEN 'Very Inaccurate'\n        WHEN accuracy < 70 THEN 'Inaccurate'\n        WHEN accuracy < 85 THEN 'Moderate'\n        WHEN accuracy < 95 THEN 'Accurate'\n        WHEN accuracy < 100 THEN 'Very Accurate'\n        WHEN accuracy = 100 THEN 'Perfect'\n        ELSE 'Unknown'\n    END AS accuracy_category,\n    \n    -- Move effect category based on effect text\n    effect_category,\n    \n    -- Competitive relevance score (1-10)\n    CASE\n        -- Extremely useful moves in competitive\n        WHEN move_name IN ('stealth-rock', 'spikes', 'toxic-spikes', 'defog', 'rapid-spin',\n                   'recover', 'wish', 'protect', 'substitute', 'will-o-wisp',\n                   'scald', 'knock-off', 'u-turn', 'volt-switch', 'toxic',\n                   'thunder-wave', 'dragon-dance', 'swords-dance', 'nasty-plot',\n                   'calm-mind', 'quiver-dance', 'roost', 'leech-seed') THEN 10\n                   \n        -- Very strong attacks and utility moves\n        WHEN (power > 100 AND accuracy >= 90) OR \n             move_name IN ('close-combat', 'earthquake', 'ice-beam', 'thunderbolt',\n                   'flamethrower', 'surf', 'stone-edge', 'focus-blast',\n                   'shadow-ball', 'psyshock', 'earth-power', 'draco-meteor', \n                   'moonblast', 'play-rough', 'gunk-shot', 'brave-bird') THEN 9\n                   \n        -- Strong utility and common attacks\n        WHEN (power >= 80 AND accuracy >= 85) OR\n             move_name IN ('taunt', 'encore', 'trick', 'toxic', 'synthesis', \n                   'aromatherapy', 'heal-bell', 'sticky-web', 'trick-room',\n                   'tailwind', 'moonlight', 'morning-sun') THEN 8\n                   \n        -- Useful moves but not top tier\n        WHEN (power >= 70 AND accuracy >= 80) OR\n             move_name IN ('light-screen', 'reflect', 'hypnosis', 'sleep-powder',\n                   'stun-spore', 'thunder-wave') THEN 7\n                   \n        -- Standard damage moves with decent stats\n        WHEN power >= 60 AND accuracy >= 90 THEN 6\n        \n        -- Status moves without specific utility\n        WHEN damage_class = 'status' THEN 5\n        \n        -- Weak but accurate moves\n        WHEN power < 60 AND accuracy > 90 THEN 4\n        \n        -- Inaccurate moves\n        WHEN accuracy < 80 AND power > 0 THEN 3\n        \n        -- Very weak moves\n        WHEN power < 40 THEN 2\n        \n        -- Other moves\n        ELSE 1\n    END AS competitive_score,\n    \n    -- Move uniqueness rating\n    CASE\n        -- Signature moves\n        WHEN move_name IN ('spacial-rend', 'roar-of-time', 'seed-flare', 'blue-flare',\n                         'bolt-strike', 'fusion-flare', 'fusion-bolt', 'origin-pulse',\n                         'precipice-blades', 'dragon-ascent', 'sacred-fire', 'aeroblast',\n                         'shadow-force', 'doom-desire', 'psycho-boost', 'lunar-dance',\n                         'magma-storm', 'crush-grip', 'judgment', 'secret-sword',\n                         'relic-song', 'light-of-ruin', 'steam-eruption', 'core-enforcer',\n                         'sunsteel-strike', 'moongeist-beam', 'photon-geyser',\n                         'spectral-thief', 'plasma-fists') THEN 'Signature'\n        -- Very rare moves (limited distribution)\n        WHEN move_name IN ('shell-smash', 'quiver-dance', 'tail-glow', 'dragon-dance',\n                   'shift-gear', 'coil', 'geomancy', 'mind-blown', 'oblivion-wing',\n                   'thousand-arrows', 'thousand-waves', 'diamond-storm') THEN 'Very Rare'\n                   \n        -- Rare but distributed moves\n        WHEN move_name IN ('spore', 'dark-void', 'healing-wish', 'lunar-dance', \n                   'shore-up', 'belly-drum', 'fiery-dance', E'king''s-shield',\n                   'spiky-shield', 'baneful-bunker', 'parting-shot') THEN 'Rare'\n                   \n        -- Uncommon moves\n        WHEN move_name IN ('leech-seed', 'aromatherapy', 'heal-bell', 'sticky-web',\n                   'defog', 'rapid-spin', 'extreme-speed', 'sucker-punch',\n                   'bullet-punch', 'aqua-jet', 'mach-punch', 'ice-shard') THEN 'Uncommon'\n                   \n        -- Common coverage moves\n        WHEN move_name IN ('ice-beam', 'thunderbolt', 'flamethrower', 'surf',\n                   'earthquake', 'stone-edge', 'close-combat', 'shadow-ball') THEN 'Standard'\n                   \n        -- Very common moves\n        WHEN move_name IN ('toxic', 'protect', 'rest', 'sleep-talk', 'substitute') THEN 'Common'\n                   \n        -- Handle everything else based on damage class\n        WHEN damage_class = 'status' THEN 'Status'\n        ELSE 'Standard'\n    END AS move_rarity,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM move_classifications\nORDER BY move_type, power DESC NULLS LAST, move_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_pokemon_stats": {"database": "nerd_facts", "schema": "public", "name": "fact_pokemon_stats", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/fact_pokemon_stats.sql", "original_file_path": "models/marts/pokemon/fact_pokemon_stats.sql", "unique_id": "model.nerd_facts_dbt.fact_pokemon_stats", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "fact_pokemon_stats"], "alias": "fact_pokemon_stats", "checksum": {"name": "sha256", "checksum": "6991e9f27c2778c80c069f261944b2199872f7df26103fc5b08280affccbb47a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_stats_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["stat_class"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["stat_class"]}], "unique_key": "pokemon_stats_key"}, "created_at": 1742909949.6083176, "relation_name": "\"nerd_facts\".\"public\".\"fact_pokemon_stats\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}, {'columns': ['stat_class']}],\n    unique_key = 'pokemon_stats_key'\n  )\n}}\n\n/*\n  Model: fact_pokemon_stats\n  Description: Fact table for Pok\u00e9mon statistics and battle metrics\n  \n  Notes:\n  - Contains comprehensive stat analysis for all Pok\u00e9mon\n  - Calculates evolutionary stage and progression metrics\n  - Includes battle effectiveness calculations and classifications\n  - Provides stat distribution analysis and percentile rankings\n  - Links to dimension tables for Pok\u00e9mon and types\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        pokemon_id,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'type')::jsonb->>'name' AS type_name,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->>'slot')::int AS type_slot\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE pokemon_id IS NOT NULL\n),\n\nstats_extract AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n        ) AS stat_data\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_stats AS (\n    SELECT\n        pokemon_id,\n        stat_name,\n        base_stat_value\n    FROM (\n        SELECT\n            p.pokemon_id,\n            jsonb_extract_path_text(s.stat_json, 'stat', 'name') AS stat_name,\n            jsonb_extract_path_text(s.stat_json, 'base_stat')::integer AS base_stat_value\n        FROM {{ ref('stg_pokeapi_pokemon') }} p\n        CROSS JOIN LATERAL (\n            SELECT jsonb_array_elements(\n                COALESCE(NULLIF(p.stats::text, 'null')::jsonb, '[]'::jsonb)\n            ) AS stat_json\n        ) s\n    ) extracted_stats\n),\n\nstats_aggregated AS (\n    SELECT\n        pokemon_id,\n        MAX(CASE WHEN stat_name = 'hp' THEN base_stat_value ELSE 0 END) AS base_hp,\n        MAX(CASE WHEN stat_name = 'attack' THEN base_stat_value ELSE 0 END) AS base_attack,\n        MAX(CASE WHEN stat_name = 'defense' THEN base_stat_value ELSE 0 END) AS base_defense,\n        MAX(CASE WHEN stat_name = 'special-attack' THEN base_stat_value ELSE 0 END) AS base_special_attack,\n        MAX(CASE WHEN stat_name = 'special-defense' THEN base_stat_value ELSE 0 END) AS base_special_defense,\n        MAX(CASE WHEN stat_name = 'speed' THEN base_stat_value ELSE 0 END) AS base_speed,\n        SUM(base_stat_value) AS total_base_stats\n    FROM pokemon_stats\n    GROUP BY pokemon_id\n),\n\nspecies_data AS (\n    SELECT\n        pokemon_id,\n        jsonb_extract_path_text(species, 'url') AS species_url,\n        COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false) AS is_legendary,\n        COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false) AS is_mythical\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_base AS (\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        \n        -- Get primary and secondary types from the slots\n        (SELECT pt.type_name\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n         \n        (SELECT pt.type_name\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        \n        ps.base_hp,\n        ps.base_attack,\n        ps.base_defense,\n        ps.base_special_attack,\n        ps.base_special_defense,\n        ps.base_speed,\n        ps.total_base_stats,\n        sp.is_legendary,\n        sp.is_mythical\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    LEFT JOIN stats_aggregated ps ON p.pokemon_id = ps.pokemon_id\n    LEFT JOIN species_data sp ON p.pokemon_id = sp.pokemon_id\n    WHERE p.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key for this fact table\n    {{ dbt_utils.generate_surrogate_key(['pb.pokemon_id']) }} AS pokemon_stats_key,\n    \n    -- Foreign keys\n    pb.pokemon_id,\n    pb.pokemon_name,\n    pb.primary_type,\n    pb.secondary_type,\n    \n    -- Base stats\n    pb.base_hp,\n    pb.base_attack,\n    pb.base_defense,\n    pb.base_special_attack,\n    pb.base_special_defense,\n    pb.base_speed,\n    pb.total_base_stats,\n    \n    -- Calculated stat metrics\n    ROUND((pb.base_hp + pb.base_defense + pb.base_special_defense) / 3.0, 1) AS defensive_average,\n    ROUND((pb.base_attack + pb.base_special_attack + pb.base_speed) / 3.0, 1) AS offensive_average,\n    \n    -- Stat classification\n    CASE\n        WHEN pb.total_base_stats >= 580 THEN 'Elite'\n        WHEN pb.total_base_stats >= 500 THEN 'Strong'\n        WHEN pb.total_base_stats >= 420 THEN 'Average'\n        ELSE 'Basic'\n    END AS stat_class,\n    \n    -- Battle focus based on stats\n    CASE\n        WHEN (pb.base_attack + pb.base_special_attack) > \n             (pb.base_defense + pb.base_special_defense) + 20 THEN 'Offensive'\n        WHEN (pb.base_defense + pb.base_special_defense) > \n             (pb.base_attack + pb.base_special_attack) + 20 THEN 'Defensive'\n        ELSE 'Balanced'\n    END AS battle_focus,\n    \n    -- Attack preference\n    CASE\n        WHEN pb.base_attack > pb.base_special_attack + 20 THEN 'Physical'\n        WHEN pb.base_special_attack > pb.base_attack + 20 THEN 'Special'\n        ELSE 'Mixed'\n    END AS attack_preference,\n    \n    -- Special status\n    pb.is_legendary,\n    pb.is_mythical,\n    \n    -- Meta field for tracking changes\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pokemon_base pb\nWHERE pb.pokemon_id IS NOT NULL\nORDER BY pb.total_base_stats DESC", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/fact_pokemon_stats.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_pokemon_stats\n  Description: Fact table for Pok\u00e9mon statistics and battle metrics\n  \n  Notes:\n  - Contains comprehensive stat analysis for all Pok\u00e9mon\n  - Calculates evolutionary stage and progression metrics\n  - Includes battle effectiveness calculations and classifications\n  - Provides stat distribution analysis and percentile rankings\n  - Links to dimension tables for Pok\u00e9mon and types\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        pokemon_id,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'type')::jsonb->>'name' AS type_name,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->>'slot')::int AS type_slot\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\nstats_extract AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n        ) AS stat_data\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_stats AS (\n    SELECT\n        pokemon_id,\n        stat_name,\n        base_stat_value\n    FROM (\n        SELECT\n            p.pokemon_id,\n            jsonb_extract_path_text(s.stat_json, 'stat', 'name') AS stat_name,\n            jsonb_extract_path_text(s.stat_json, 'base_stat')::integer AS base_stat_value\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n        CROSS JOIN LATERAL (\n            SELECT jsonb_array_elements(\n                COALESCE(NULLIF(p.stats::text, 'null')::jsonb, '[]'::jsonb)\n            ) AS stat_json\n        ) s\n    ) extracted_stats\n),\n\nstats_aggregated AS (\n    SELECT\n        pokemon_id,\n        MAX(CASE WHEN stat_name = 'hp' THEN base_stat_value ELSE 0 END) AS base_hp,\n        MAX(CASE WHEN stat_name = 'attack' THEN base_stat_value ELSE 0 END) AS base_attack,\n        MAX(CASE WHEN stat_name = 'defense' THEN base_stat_value ELSE 0 END) AS base_defense,\n        MAX(CASE WHEN stat_name = 'special-attack' THEN base_stat_value ELSE 0 END) AS base_special_attack,\n        MAX(CASE WHEN stat_name = 'special-defense' THEN base_stat_value ELSE 0 END) AS base_special_defense,\n        MAX(CASE WHEN stat_name = 'speed' THEN base_stat_value ELSE 0 END) AS base_speed,\n        SUM(base_stat_value) AS total_base_stats\n    FROM pokemon_stats\n    GROUP BY pokemon_id\n),\n\nspecies_data AS (\n    SELECT\n        pokemon_id,\n        jsonb_extract_path_text(species, 'url') AS species_url,\n        COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false) AS is_legendary,\n        COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false) AS is_mythical\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_base AS (\n    SELECT\n        p.pokemon_id,\n        p.pokemon_name,\n        \n        -- Get primary and secondary types from the slots\n        (SELECT pt.type_name\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n         \n        (SELECT pt.type_name\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n        \n        ps.base_hp,\n        ps.base_attack,\n        ps.base_defense,\n        ps.base_special_attack,\n        ps.base_special_defense,\n        ps.base_speed,\n        ps.total_base_stats,\n        sp.is_legendary,\n        sp.is_mythical\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    LEFT JOIN stats_aggregated ps ON p.pokemon_id = ps.pokemon_id\n    LEFT JOIN species_data sp ON p.pokemon_id = sp.pokemon_id\n    WHERE p.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key for this fact table\n    md5(cast(coalesce(cast(pb.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_stats_key,\n    \n    -- Foreign keys\n    pb.pokemon_id,\n    pb.pokemon_name,\n    pb.primary_type,\n    pb.secondary_type,\n    \n    -- Base stats\n    pb.base_hp,\n    pb.base_attack,\n    pb.base_defense,\n    pb.base_special_attack,\n    pb.base_special_defense,\n    pb.base_speed,\n    pb.total_base_stats,\n    \n    -- Calculated stat metrics\n    ROUND((pb.base_hp + pb.base_defense + pb.base_special_defense) / 3.0, 1) AS defensive_average,\n    ROUND((pb.base_attack + pb.base_special_attack + pb.base_speed) / 3.0, 1) AS offensive_average,\n    \n    -- Stat classification\n    CASE\n        WHEN pb.total_base_stats >= 580 THEN 'Elite'\n        WHEN pb.total_base_stats >= 500 THEN 'Strong'\n        WHEN pb.total_base_stats >= 420 THEN 'Average'\n        ELSE 'Basic'\n    END AS stat_class,\n    \n    -- Battle focus based on stats\n    CASE\n        WHEN (pb.base_attack + pb.base_special_attack) > \n             (pb.base_defense + pb.base_special_defense) + 20 THEN 'Offensive'\n        WHEN (pb.base_defense + pb.base_special_defense) > \n             (pb.base_attack + pb.base_special_attack) + 20 THEN 'Defensive'\n        ELSE 'Balanced'\n    END AS battle_focus,\n    \n    -- Attack preference\n    CASE\n        WHEN pb.base_attack > pb.base_special_attack + 20 THEN 'Physical'\n        WHEN pb.base_special_attack > pb.base_attack + 20 THEN 'Special'\n        ELSE 'Mixed'\n    END AS attack_preference,\n    \n    -- Special status\n    pb.is_legendary,\n    pb.is_mythical,\n    \n    -- Meta field for tracking changes\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM pokemon_base pb\nWHERE pb.pokemon_id IS NOT NULL\nORDER BY pb.total_base_stats DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_pokemon_matchups": {"database": "nerd_facts", "schema": "public", "name": "fact_pokemon_matchups", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/fact_pokemon_matchups.sql", "original_file_path": "models/marts/pokemon/fact_pokemon_matchups.sql", "unique_id": "model.nerd_facts_dbt.fact_pokemon_matchups", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "fact_pokemon_matchups"], "alias": "fact_pokemon_matchups", "checksum": {"name": "sha256", "checksum": "ac1a74923142394518b576fe91747a5a72529c3532eaf087faad9d43ab25f35c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "matchup_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["defender_type"]}, {"columns": ["attacker_type"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["defender_type"]}, {"columns": ["attacker_type"]}], "unique_key": "matchup_key"}, "created_at": 1742909949.615832, "relation_name": "\"nerd_facts\".\"public\".\"fact_pokemon_matchups\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['defender_type']}, {'columns': ['attacker_type']}],\n    unique_key = 'matchup_key'\n  )\n}}\n\n/*\n  Model: fact_pokemon_matchups\n  Description: Fact table for Pok\u00e9mon type matchup effectiveness\n  \n  Notes:\n  - Contains comprehensive type matchup data for all 18 Pok\u00e9mon types\n  - Calculates effectiveness multipliers (0x, 0.5x, 1x, 2x)\n  - Provides context on how many Pok\u00e9mon are affected by each matchup\n  - Enables detailed type advantage analysis\n*/\n\nWITH pokemon_types AS (\n    SELECT DISTINCT\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'type')::jsonb->>'name' AS type_name\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE types IS NOT NULL\n),\n\n-- Manually create type effectiveness data\n-- This would normally come from a reference table\ntype_matchups AS (\n    SELECT * FROM (VALUES\n        ('normal', 'normal', 1.0),\n        ('normal', 'fighting', 2.0),\n        ('normal', 'flying', 1.0),\n        ('normal', 'poison', 1.0),\n        ('normal', 'ground', 1.0),\n        ('normal', 'rock', 1.0),\n        ('normal', 'bug', 1.0),\n        ('normal', 'ghost', 0.0),\n        ('normal', 'steel', 1.0),\n        ('normal', 'fire', 1.0),\n        ('normal', 'water', 1.0),\n        ('normal', 'grass', 1.0),\n        ('normal', 'electric', 1.0),\n        ('normal', 'psychic', 1.0),\n        ('normal', 'ice', 1.0),\n        ('normal', 'dragon', 1.0),\n        ('normal', 'dark', 1.0),\n        ('normal', 'fairy', 1.0),\n        \n        ('fire', 'normal', 1.0),\n        ('fire', 'fighting', 1.0),\n        ('fire', 'flying', 1.0),\n        ('fire', 'poison', 1.0),\n        ('fire', 'ground', 1.0),\n        ('fire', 'rock', 0.5),\n        ('fire', 'bug', 2.0),\n        ('fire', 'ghost', 1.0),\n        ('fire', 'steel', 2.0),\n        ('fire', 'fire', 0.5),\n        ('fire', 'water', 0.5),\n        ('fire', 'grass', 2.0),\n        ('fire', 'electric', 1.0),\n        ('fire', 'psychic', 1.0),\n        ('fire', 'ice', 2.0),\n        ('fire', 'dragon', 0.5),\n        ('fire', 'dark', 1.0),\n        ('fire', 'fairy', 1.0),\n        \n        ('water', 'normal', 1.0),\n        ('water', 'fighting', 1.0),\n        ('water', 'flying', 1.0),\n        ('water', 'poison', 1.0),\n        ('water', 'ground', 2.0),\n        ('water', 'rock', 2.0),\n        ('water', 'bug', 1.0),\n        ('water', 'ghost', 1.0),\n        ('water', 'steel', 1.0),\n        ('water', 'fire', 2.0),\n        ('water', 'water', 0.5),\n        ('water', 'grass', 0.5),\n        ('water', 'electric', 1.0),\n        ('water', 'psychic', 1.0),\n        ('water', 'ice', 1.0),\n        ('water', 'dragon', 0.5),\n        ('water', 'dark', 1.0),\n        ('water', 'fairy', 1.0)\n        \n        -- Additional type matchups would be added here for a complete table\n    ) AS t(attacker_type, defender_type, effectiveness)\n),\n\n-- Count the number of Pok\u00e9mon per primary type\nprimary_type_counts AS (\n    SELECT\n        type_name,\n        COUNT(*) AS pokemon_count\n    FROM (\n        SELECT\n            p.pokemon_id,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(p.types::text, 'null')::jsonb, '[]'::jsonb)\n            )->'type')::jsonb->>'name' AS type_name,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(p.types::text, 'null')::jsonb, '[]'::jsonb)\n            )->>'slot')::int AS type_slot\n        FROM {{ ref('stg_pokeapi_pokemon') }} p\n    ) t\n    WHERE type_slot = 1\n    GROUP BY type_name\n)\n\nSELECT\n    -- Generate surrogate key for the matchup\n    {{ dbt_utils.generate_surrogate_key(['tm.attacker_type', 'tm.defender_type']) }} AS matchup_key,\n    \n    -- Types involved in matchup\n    tm.attacker_type,\n    tm.defender_type,\n    \n    -- Effectiveness of the attack\n    tm.effectiveness,\n    \n    -- Categorize effectiveness\n    CASE\n        WHEN tm.effectiveness = 0.0 THEN 'No effect'\n        WHEN tm.effectiveness = 0.5 THEN 'Not very effective'\n        WHEN tm.effectiveness = 1.0 THEN 'Normal effectiveness'\n        WHEN tm.effectiveness = 2.0 THEN 'Super effective'\n        ELSE 'Unknown'\n    END AS effectiveness_category,\n    \n    -- Strategic importance based on how common the type is\n    CASE\n        WHEN pc.pokemon_count > 60 THEN 'High'\n        WHEN pc.pokemon_count > 30 THEN 'Medium'\n        ELSE 'Low'\n    END AS strategic_importance,\n    \n    -- Additional derived fields\n    pc.pokemon_count AS defending_pokemon_count,\n    \n    -- Convert to percentage of total Pok\u00e9mon\n    ROUND(pc.pokemon_count * 100.0 / (SELECT COUNT(*) FROM {{ ref('stg_pokeapi_pokemon') }}), 1) AS pct_pokemon_with_type,\n    \n    -- Date tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM type_matchups tm\nJOIN pokemon_types pt ON tm.defender_type = pt.type_name\nLEFT JOIN primary_type_counts pc ON tm.defender_type = pc.type_name\nORDER BY tm.attacker_type, tm.defender_type", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/fact_pokemon_matchups.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_pokemon_matchups\n  Description: Fact table for Pok\u00e9mon type matchup effectiveness\n  \n  Notes:\n  - Contains comprehensive type matchup data for all 18 Pok\u00e9mon types\n  - Calculates effectiveness multipliers (0x, 0.5x, 1x, 2x)\n  - Provides context on how many Pok\u00e9mon are affected by each matchup\n  - Enables detailed type advantage analysis\n*/\n\nWITH pokemon_types AS (\n    SELECT DISTINCT\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'type')::jsonb->>'name' AS type_name\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE types IS NOT NULL\n),\n\n-- Manually create type effectiveness data\n-- This would normally come from a reference table\ntype_matchups AS (\n    SELECT * FROM (VALUES\n        ('normal', 'normal', 1.0),\n        ('normal', 'fighting', 2.0),\n        ('normal', 'flying', 1.0),\n        ('normal', 'poison', 1.0),\n        ('normal', 'ground', 1.0),\n        ('normal', 'rock', 1.0),\n        ('normal', 'bug', 1.0),\n        ('normal', 'ghost', 0.0),\n        ('normal', 'steel', 1.0),\n        ('normal', 'fire', 1.0),\n        ('normal', 'water', 1.0),\n        ('normal', 'grass', 1.0),\n        ('normal', 'electric', 1.0),\n        ('normal', 'psychic', 1.0),\n        ('normal', 'ice', 1.0),\n        ('normal', 'dragon', 1.0),\n        ('normal', 'dark', 1.0),\n        ('normal', 'fairy', 1.0),\n        \n        ('fire', 'normal', 1.0),\n        ('fire', 'fighting', 1.0),\n        ('fire', 'flying', 1.0),\n        ('fire', 'poison', 1.0),\n        ('fire', 'ground', 1.0),\n        ('fire', 'rock', 0.5),\n        ('fire', 'bug', 2.0),\n        ('fire', 'ghost', 1.0),\n        ('fire', 'steel', 2.0),\n        ('fire', 'fire', 0.5),\n        ('fire', 'water', 0.5),\n        ('fire', 'grass', 2.0),\n        ('fire', 'electric', 1.0),\n        ('fire', 'psychic', 1.0),\n        ('fire', 'ice', 2.0),\n        ('fire', 'dragon', 0.5),\n        ('fire', 'dark', 1.0),\n        ('fire', 'fairy', 1.0),\n        \n        ('water', 'normal', 1.0),\n        ('water', 'fighting', 1.0),\n        ('water', 'flying', 1.0),\n        ('water', 'poison', 1.0),\n        ('water', 'ground', 2.0),\n        ('water', 'rock', 2.0),\n        ('water', 'bug', 1.0),\n        ('water', 'ghost', 1.0),\n        ('water', 'steel', 1.0),\n        ('water', 'fire', 2.0),\n        ('water', 'water', 0.5),\n        ('water', 'grass', 0.5),\n        ('water', 'electric', 1.0),\n        ('water', 'psychic', 1.0),\n        ('water', 'ice', 1.0),\n        ('water', 'dragon', 0.5),\n        ('water', 'dark', 1.0),\n        ('water', 'fairy', 1.0)\n        \n        -- Additional type matchups would be added here for a complete table\n    ) AS t(attacker_type, defender_type, effectiveness)\n),\n\n-- Count the number of Pok\u00e9mon per primary type\nprimary_type_counts AS (\n    SELECT\n        type_name,\n        COUNT(*) AS pokemon_count\n    FROM (\n        SELECT\n            p.pokemon_id,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(p.types::text, 'null')::jsonb, '[]'::jsonb)\n            )->'type')::jsonb->>'name' AS type_name,\n            (jsonb_array_elements(\n                COALESCE(NULLIF(p.types::text, 'null')::jsonb, '[]'::jsonb)\n            )->>'slot')::int AS type_slot\n        FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    ) t\n    WHERE type_slot = 1\n    GROUP BY type_name\n)\n\nSELECT\n    -- Generate surrogate key for the matchup\n    md5(cast(coalesce(cast(tm.attacker_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tm.defender_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS matchup_key,\n    \n    -- Types involved in matchup\n    tm.attacker_type,\n    tm.defender_type,\n    \n    -- Effectiveness of the attack\n    tm.effectiveness,\n    \n    -- Categorize effectiveness\n    CASE\n        WHEN tm.effectiveness = 0.0 THEN 'No effect'\n        WHEN tm.effectiveness = 0.5 THEN 'Not very effective'\n        WHEN tm.effectiveness = 1.0 THEN 'Normal effectiveness'\n        WHEN tm.effectiveness = 2.0 THEN 'Super effective'\n        ELSE 'Unknown'\n    END AS effectiveness_category,\n    \n    -- Strategic importance based on how common the type is\n    CASE\n        WHEN pc.pokemon_count > 60 THEN 'High'\n        WHEN pc.pokemon_count > 30 THEN 'Medium'\n        ELSE 'Low'\n    END AS strategic_importance,\n    \n    -- Additional derived fields\n    pc.pokemon_count AS defending_pokemon_count,\n    \n    -- Convert to percentage of total Pok\u00e9mon\n    ROUND(pc.pokemon_count * 100.0 / (SELECT COUNT(*) FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"), 1) AS pct_pokemon_with_type,\n    \n    -- Date tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM type_matchups tm\nJOIN pokemon_types pt ON tm.defender_type = pt.type_name\nLEFT JOIN primary_type_counts pc ON tm.defender_type = pc.type_name\nORDER BY tm.attacker_type, tm.defender_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_pokemon": {"database": "nerd_facts", "schema": "public", "name": "fact_pokemon", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/pokemon/fact_pokemon.sql", "original_file_path": "models/marts/pokemon/fact_pokemon.sql", "unique_id": "model.nerd_facts_dbt.fact_pokemon", "fqn": ["nerd_facts_dbt", "marts", "pokemon", "fact_pokemon"], "alias": "fact_pokemon", "checksum": {"name": "sha256", "checksum": "838e8c17b4212a2044a424a643c6fa6399b4f3974a99bbf3a53ddcd21843e761"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "pokemon_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["primary_type", "secondary_type"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["pokemon_id"]}, {"columns": ["primary_type", "secondary_type"]}], "unique_key": "pokemon_key"}, "created_at": 1742909949.6218047, "relation_name": "\"nerd_facts\".\"public\".\"fact_pokemon\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['pokemon_id']}, {'columns': ['primary_type', 'secondary_type']}],\n    unique_key = 'pokemon_key'\n  )\n}}\n\n/*\n  Model: fact_pokemon\n  Description: Core fact table for Pok\u00e9mon data with comprehensive attributes and classifications\n  \n  Notes:\n  - Contains essential information about each Pok\u00e9mon species\n  - Links to all related dimension tables (types, abilities, moves, etc.)\n  - Provides both source fields and derived/calculated metrics\n  - Includes generation, evolutionary, and classification data\n  - Serves as the central entity for all Pok\u00e9mon analysis\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->>'type' AS type_json,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'slot')::int AS type_slot\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE pokemon_id IS NOT NULL\n),\n\nstats_extract AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n        ) AS stat_data\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_stats AS (\n    SELECT\n        pokemon_id,\n        SUM(CASE WHEN (stat_data->'stat'->>'name') = 'hp' \n                 THEN (stat_data->>'base_stat')::integer ELSE 0 END) AS base_stat_hp,\n        SUM((stat_data->>'base_stat')::integer) AS total_base_stats\n    FROM stats_extract\n    GROUP BY pokemon_id\n),\n\nspecies_data AS (\n    SELECT\n        pokemon_id,\n        jsonb_extract_path_text(species, 'url') AS species_url,\n        -- Extract generation number from the URL using LATERAL join\n        (SELECT gen.gen_num::integer\n         FROM LATERAL (\n             SELECT (regexp_matches(jsonb_extract_path_text(species, 'url'), '/generation/([0-9]+)/'))[1] AS gen_num\n             WHERE jsonb_extract_path_text(species, 'url') ~ '/generation/([0-9]+)/'\n         ) gen) AS generation_number,\n        COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false) AS is_legendary,\n        COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false) AS is_mythical\n    FROM {{ ref('stg_pokeapi_pokemon') }}\n    WHERE pokemon_id IS NOT NULL\n),\n\nbase_pokemon AS (\n    SELECT\n        -- Core identifiers\n        p.pokemon_id,\n        p.pokemon_name,\n        \n        -- Get primary and secondary types from the slots\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n         \n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n         \n        sp.generation_number,\n        sp.is_legendary,\n        sp.is_mythical,\n        \n        -- Physical attributes\n        p.height / 10.0 AS height_dm,\n        p.weight / 10.0 AS weight_kg,\n        p.base_experience AS base_xp,\n        \n        -- Base stats\n        ps.base_stat_hp,\n        ps.total_base_stats\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n    LEFT JOIN pokemon_stats ps ON p.pokemon_id = ps.pokemon_id\n    LEFT JOIN species_data sp ON p.pokemon_id = sp.pokemon_id\n    WHERE p.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key and identifiers\n    {{ dbt_utils.generate_surrogate_key(['bp.pokemon_id']) }} AS pokemon_key,\n    bp.pokemon_id,\n    \n    -- Core data\n    bp.pokemon_name,\n    bp.primary_type,\n    bp.secondary_type,\n    \n    -- Physical attributes\n    bp.height_dm AS height_m,\n    bp.weight_kg,\n    bp.base_xp,\n    \n    -- Stats\n    bp.base_stat_hp,\n    bp.total_base_stats,\n    \n    -- Type keys\n    {{ dbt_utils.generate_surrogate_key(['bp.primary_type']) }} AS primary_type_key,\n    {{ dbt_utils.generate_surrogate_key(['bp.secondary_type']) }} AS secondary_type_key,\n    \n    -- Additional attributes\n    bp.generation_number,\n    bp.is_legendary,\n    bp.is_mythical,\n    \n    -- Meta\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM base_pokemon bp\nWHERE bp.pokemon_id IS NOT NULL\nORDER BY bp.total_base_stats DESC", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/pokemon/fact_pokemon.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_pokemon\n  Description: Core fact table for Pok\u00e9mon data with comprehensive attributes and classifications\n  \n  Notes:\n  - Contains essential information about each Pok\u00e9mon species\n  - Links to all related dimension tables (types, abilities, moves, etc.)\n  - Provides both source fields and derived/calculated metrics\n  - Includes generation, evolutionary, and classification data\n  - Serves as the central entity for all Pok\u00e9mon analysis\n*/\n\nWITH pokemon_types AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->>'type' AS type_json,\n        (jsonb_array_elements(\n            COALESCE(NULLIF(types::text, 'null')::jsonb, '[]'::jsonb)\n        )->'slot')::int AS type_slot\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\nstats_extract AS (\n    SELECT\n        pokemon_id,\n        jsonb_array_elements(\n            COALESCE(NULLIF(stats::text, 'null')::jsonb, '[]'::jsonb)\n        ) AS stat_data\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\npokemon_stats AS (\n    SELECT\n        pokemon_id,\n        SUM(CASE WHEN (stat_data->'stat'->>'name') = 'hp' \n                 THEN (stat_data->>'base_stat')::integer ELSE 0 END) AS base_stat_hp,\n        SUM((stat_data->>'base_stat')::integer) AS total_base_stats\n    FROM stats_extract\n    GROUP BY pokemon_id\n),\n\nspecies_data AS (\n    SELECT\n        pokemon_id,\n        jsonb_extract_path_text(species, 'url') AS species_url,\n        -- Extract generation number from the URL using LATERAL join\n        (SELECT gen.gen_num::integer\n         FROM LATERAL (\n             SELECT (regexp_matches(jsonb_extract_path_text(species, 'url'), '/generation/([0-9]+)/'))[1] AS gen_num\n             WHERE jsonb_extract_path_text(species, 'url') ~ '/generation/([0-9]+)/'\n         ) gen) AS generation_number,\n        COALESCE(jsonb_extract_path_text(species, 'is_legendary')::boolean, false) AS is_legendary,\n        COALESCE(jsonb_extract_path_text(species, 'is_mythical')::boolean, false) AS is_mythical\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n    WHERE pokemon_id IS NOT NULL\n),\n\nbase_pokemon AS (\n    SELECT\n        -- Core identifiers\n        p.pokemon_id,\n        p.pokemon_name,\n        \n        -- Get primary and secondary types from the slots\n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 1\n         LIMIT 1) AS primary_type,\n         \n        (SELECT jsonb_extract_path_text(pt.type_json::jsonb, 'name')\n         FROM pokemon_types pt\n         WHERE pt.pokemon_id = p.pokemon_id AND pt.type_slot = 2\n         LIMIT 1) AS secondary_type,\n         \n        sp.generation_number,\n        sp.is_legendary,\n        sp.is_mythical,\n        \n        -- Physical attributes\n        p.height / 10.0 AS height_dm,\n        p.weight / 10.0 AS weight_kg,\n        p.base_experience AS base_xp,\n        \n        -- Base stats\n        ps.base_stat_hp,\n        ps.total_base_stats\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n    LEFT JOIN pokemon_stats ps ON p.pokemon_id = ps.pokemon_id\n    LEFT JOIN species_data sp ON p.pokemon_id = sp.pokemon_id\n    WHERE p.pokemon_id IS NOT NULL\n)\n\nSELECT\n    -- Primary key and identifiers\n    md5(cast(coalesce(cast(bp.pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pokemon_key,\n    bp.pokemon_id,\n    \n    -- Core data\n    bp.pokemon_name,\n    bp.primary_type,\n    bp.secondary_type,\n    \n    -- Physical attributes\n    bp.height_dm AS height_m,\n    bp.weight_kg,\n    bp.base_xp,\n    \n    -- Stats\n    bp.base_stat_hp,\n    bp.total_base_stats,\n    \n    -- Type keys\n    md5(cast(coalesce(cast(bp.primary_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS primary_type_key,\n    md5(cast(coalesce(cast(bp.secondary_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS secondary_type_key,\n    \n    -- Additional attributes\n    bp.generation_number,\n    bp.is_legendary,\n    bp.is_mythical,\n    \n    -- Meta\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM base_pokemon bp\nWHERE bp.pokemon_id IS NOT NULL\nORDER BY bp.total_base_stats DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_locations": {"database": "nerd_facts", "schema": "public", "name": "dim_locations", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/core/dim_locations.sql", "original_file_path": "models/marts/core/dim_locations.sql", "unique_id": "model.nerd_facts_dbt.dim_locations", "fqn": ["nerd_facts_dbt", "marts", "core", "dim_locations"], "alias": "dim_locations", "checksum": {"name": "sha256", "checksum": "7b0873be4333dacdd4955d2c8407985068cf59050b0fc4c63316a28ae769e6ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.6301312, "relation_name": "\"nerd_facts\".\"public\".\"dim_locations\"", "raw_code": "/*\n  Model: dim_locations (Simplified)\n  Description: Basic location dimension table with consistent TEXT types\n*/\n\nWITH sw_planets_minimal AS (\n    SELECT\n        'sw_' || planet_id AS source_id,\n        'star_wars' AS universe,\n        planet_name AS location_name,\n        'Planet' AS location_type,\n        diameter::TEXT,  -- Cast to TEXT\n        rotation_period::TEXT,  -- Cast to TEXT\n        orbital_period::TEXT,  -- Cast to TEXT\n        gravity,\n        population::TEXT,  -- Cast to TEXT\n        climate,\n        terrain,\n        surface_water::TEXT  -- Cast to TEXT\n    FROM {{ ref('stg_swapi_planets') }}\n),\n\npokemon_regions_minimal AS (\n    -- Create hardcoded Pok\u00e9mon regions since staging data doesn't have them\n    SELECT * FROM (VALUES\n        ('pkm_1', 'pokemon', 'Kanto', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '10000000', 'varied', 'varied', '30'),\n        ('pkm_2', 'pokemon', 'Johto', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '8000000', 'varied', 'varied', '40'),\n        ('pkm_3', 'pokemon', 'Hoenn', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '7000000', 'tropical', 'mountainous', '60'),\n        ('pkm_4', 'pokemon', 'Sinnoh', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '5000000', 'temperate', 'varied', '35')\n    ) AS v(source_id, universe, location_name, location_type, diameter, rotation_period, \n           orbital_period, gravity, population, climate, terrain, surface_water)\n),\n\nnetrunner_locations_minimal AS (\n    -- Create minimal Netrunner locations with text values\n    SELECT * FROM (VALUES\n        ('nr_1001', 'netrunner', 'New Angeles', 'Megacity', NULL::TEXT, NULL::TEXT, NULL::TEXT, 'high', '500000000', 'temperate', 'urban', '10'),\n        ('nr_1002', 'netrunner', 'The Moon', 'Colony', '3474', '27.3', '27.3', 'low', '5000000', 'artificial', 'lunar', '0')\n    ) AS v(source_id, universe, location_name, location_type, diameter, rotation_period, \n           orbital_period, gravity, population, climate, terrain, surface_water)\n)\n\n-- Rest of query remains the same\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['universe', 'source_id']) }} AS location_key,\n    source_id,\n    universe,\n    location_name,\n    location_type,\n    diameter,\n    rotation_period,\n    orbital_period,\n    gravity,\n    population,\n    climate,\n    terrain,\n    surface_water,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_planets_minimal\n    UNION ALL\n    SELECT * FROM pokemon_regions_minimal\n    UNION ALL\n    SELECT * FROM netrunner_locations_minimal\n) AS all_locations\nORDER BY universe, location_name", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/core/dim_locations.sql", "compiled": true, "compiled_code": "/*\n  Model: dim_locations (Simplified)\n  Description: Basic location dimension table with consistent TEXT types\n*/\n\nWITH sw_planets_minimal AS (\n    SELECT\n        'sw_' || planet_id AS source_id,\n        'star_wars' AS universe,\n        planet_name AS location_name,\n        'Planet' AS location_type,\n        diameter::TEXT,  -- Cast to TEXT\n        rotation_period::TEXT,  -- Cast to TEXT\n        orbital_period::TEXT,  -- Cast to TEXT\n        gravity,\n        population::TEXT,  -- Cast to TEXT\n        climate,\n        terrain,\n        surface_water::TEXT  -- Cast to TEXT\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_planets\"\n),\n\npokemon_regions_minimal AS (\n    -- Create hardcoded Pok\u00e9mon regions since staging data doesn't have them\n    SELECT * FROM (VALUES\n        ('pkm_1', 'pokemon', 'Kanto', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '10000000', 'varied', 'varied', '30'),\n        ('pkm_2', 'pokemon', 'Johto', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '8000000', 'varied', 'varied', '40'),\n        ('pkm_3', 'pokemon', 'Hoenn', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '7000000', 'tropical', 'mountainous', '60'),\n        ('pkm_4', 'pokemon', 'Sinnoh', 'Region', NULL::TEXT, NULL::TEXT, NULL::TEXT, '1 standard', '5000000', 'temperate', 'varied', '35')\n    ) AS v(source_id, universe, location_name, location_type, diameter, rotation_period, \n           orbital_period, gravity, population, climate, terrain, surface_water)\n),\n\nnetrunner_locations_minimal AS (\n    -- Create minimal Netrunner locations with text values\n    SELECT * FROM (VALUES\n        ('nr_1001', 'netrunner', 'New Angeles', 'Megacity', NULL::TEXT, NULL::TEXT, NULL::TEXT, 'high', '500000000', 'temperate', 'urban', '10'),\n        ('nr_1002', 'netrunner', 'The Moon', 'Colony', '3474', '27.3', '27.3', 'low', '5000000', 'artificial', 'lunar', '0')\n    ) AS v(source_id, universe, location_name, location_type, diameter, rotation_period, \n           orbital_period, gravity, population, climate, terrain, surface_water)\n)\n\n-- Rest of query remains the same\nSELECT\n    md5(cast(coalesce(cast(universe as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS location_key,\n    source_id,\n    universe,\n    location_name,\n    location_type,\n    diameter,\n    rotation_period,\n    orbital_period,\n    gravity,\n    population,\n    climate,\n    terrain,\n    surface_water,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_planets_minimal\n    UNION ALL\n    SELECT * FROM pokemon_regions_minimal\n    UNION ALL\n    SELECT * FROM netrunner_locations_minimal\n) AS all_locations\nORDER BY universe, location_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_power_ratings": {"database": "nerd_facts", "schema": "public", "name": "fact_power_ratings", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/core/fact_power_ratings.sql", "original_file_path": "models/marts/core/fact_power_ratings.sql", "unique_id": "model.nerd_facts_dbt.fact_power_ratings", "fqn": ["nerd_facts_dbt", "marts", "core", "fact_power_ratings"], "alias": "fact_power_ratings", "checksum": {"name": "sha256", "checksum": "6ab7719c34d1370468fee974bcf3ffefb72e3bb9f0d66eca06c5e54e7675f963"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "character_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["character_key"]}, {"columns": ["universe"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["character_key"]}, {"columns": ["universe"]}], "unique_key": "character_key"}, "created_at": 1742909949.6366544, "relation_name": "\"nerd_facts\".\"public\".\"fact_power_ratings\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['character_key']}, {'columns': ['universe']}],\n    unique_key = 'character_key'\n  )\n}}\n\n/*\n  Model: fact_power_ratings (Ultra-Simplified)\n  Description: Basic power metrics across universes with consistent types\n*/\n\nWITH sw_power AS (\n    SELECT\n        {{ dbt_utils.generate_surrogate_key([\"'star_wars'\", 'p.people_id::TEXT']) }} AS character_key,\n        'star_wars' AS universe,\n        p.people_id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'false' AS has_special_abilities  -- String literal instead of boolean expression\n    FROM {{ ref('stg_swapi_people') }} p\n),\n\npokemon_power AS (\n    SELECT\n        {{ dbt_utils.generate_surrogate_key([\"'pokemon'\", 'p.pokemon_id::TEXT']) }} AS character_key,\n        'pokemon' AS universe,\n        p.pokemon_id::TEXT AS character_source_id,\n        p.pokemon_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'true' AS has_special_abilities  -- String literal instead of boolean\n    FROM {{ ref('stg_pokeapi_pokemon') }} p\n),\n\nnetrunner_power AS (\n    SELECT\n        {{ dbt_utils.generate_surrogate_key([\"'netrunner'\", 'c.card_id::TEXT']) }} AS character_key,\n        'netrunner' AS universe,\n        c.code AS character_source_id,\n        c.card_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE \n            WHEN c.uniqueness IS NULL THEN 'false'\n            -- Compare as text instead of using as boolean\n            WHEN c.uniqueness = 'true' OR c.uniqueness = 't' OR c.uniqueness = '1' THEN 'true' \n            ELSE 'false' \n        END AS has_special_abilities\n    FROM {{ ref('stg_netrunner_cards') }} c\n    WHERE c.type_code = 'identity'  -- Only include identity cards\n)\n\n-- Simply combine all data with minimal processing\nSELECT\n    character_key,\n    universe,\n    character_source_id,\n    character_name,\n    base_power,\n    mobility,\n    battle_experience,\n    has_special_abilities,\n    \n    -- Simple power score (all equal for now)\n    3 AS normalized_power_score,\n    \n    -- Simplified tier (all equal)\n    'C-Tier' AS power_tier,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_power\n    UNION ALL\n    SELECT * FROM pokemon_power\n    UNION ALL\n    SELECT * FROM netrunner_power\n) AS combined_power", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/core/fact_power_ratings.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_power_ratings (Ultra-Simplified)\n  Description: Basic power metrics across universes with consistent types\n*/\n\nWITH sw_power AS (\n    SELECT\n        md5(cast(coalesce(cast('star_wars' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.people_id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'star_wars' AS universe,\n        p.people_id::TEXT AS character_source_id,\n        p.name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'false' AS has_special_abilities  -- String literal instead of boolean expression\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_people\" p\n),\n\npokemon_power AS (\n    SELECT\n        md5(cast(coalesce(cast('pokemon' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(p.pokemon_id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'pokemon' AS universe,\n        p.pokemon_id::TEXT AS character_source_id,\n        p.pokemon_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        'true' AS has_special_abilities  -- String literal instead of boolean\n    FROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\" p\n),\n\nnetrunner_power AS (\n    SELECT\n        md5(cast(coalesce(cast('netrunner' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(c.card_id::TEXT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n        'netrunner' AS universe,\n        c.code AS character_source_id,\n        c.card_name AS character_name,\n        1 AS base_power,  -- Simplified constant\n        1 AS mobility,    -- Simplified constant\n        1 AS battle_experience,  -- Simplified constant\n        CASE \n            WHEN c.uniqueness IS NULL THEN 'false'\n            -- Compare as text instead of using as boolean\n            WHEN c.uniqueness = 'true' OR c.uniqueness = 't' OR c.uniqueness = '1' THEN 'true' \n            ELSE 'false' \n        END AS has_special_abilities\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    WHERE c.type_code = 'identity'  -- Only include identity cards\n)\n\n-- Simply combine all data with minimal processing\nSELECT\n    character_key,\n    universe,\n    character_source_id,\n    character_name,\n    base_power,\n    mobility,\n    battle_experience,\n    has_special_abilities,\n    \n    -- Simple power score (all equal for now)\n    3 AS normalized_power_score,\n    \n    -- Simplified tier (all equal)\n    'C-Tier' AS power_tier,\n    \n    -- Add data tracking fields\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM (\n    SELECT * FROM sw_power\n    UNION ALL\n    SELECT * FROM pokemon_power\n    UNION ALL\n    SELECT * FROM netrunner_power\n) AS combined_power", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_characters": {"database": "nerd_facts", "schema": "public", "name": "dim_characters", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/core/dim_characters.sql", "original_file_path": "models/marts/core/dim_characters.sql", "unique_id": "model.nerd_facts_dbt.dim_characters", "fqn": ["nerd_facts_dbt", "marts", "core", "dim_characters"], "alias": "dim_characters", "checksum": {"name": "sha256", "checksum": "b1cc249f0bdd2099b7a26b191f9086191136325f64484c38bbdbb98279a31237"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Star Wars characters dimension table", "columns": {"character_id": {"name": "character_id", "description": "Unique identifier for each character", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Character name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Character height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "mass": {"name": "mass", "description": "Character mass in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gender": {"name": "gender", "description": "Character gender", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "nerd_facts_dbt://models/marts/star_wars/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.0207415, "relation_name": "\"nerd_facts\".\"public\".\"dim_characters\"", "raw_code": "/*\n  Model: dim_characters (Ultra-simplified)\n  Description: Minimal character dimension table\n*/\n\n-- Star Wars characters with hardcoded surrogate key inputs\nSELECT\n    {{ dbt_utils.generate_surrogate_key([\"'star_wars'\", 'people_id']) }} AS character_key,\n    'star_wars' AS universe,\n    people_id::TEXT AS character_source_id,  -- Cast to TEXT\n    name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_swapi_people') }}\n\nUNION ALL\n\n-- Pokemon with hardcoded surrogate key inputs\nSELECT\n    {{ dbt_utils.generate_surrogate_key([\"'pokemon'\", 'pokemon_id']) }} AS character_key,\n    'pokemon' AS universe,\n    pokemon_id::TEXT AS character_source_id,  -- Cast to TEXT\n    pokemon_name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_pokeapi_pokemon') }}\n\nUNION ALL\n\n-- Netrunner with hardcoded surrogate key inputs\nSELECT\n    {{ dbt_utils.generate_surrogate_key([\"'netrunner'\", 'code']) }} AS character_key,\n    'netrunner' AS universe,\n    code AS character_source_id,  -- Already TEXT\n    card_name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_netrunner_cards') }}\nWHERE type_code = 'identity'", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}, {"name": "stg_pokeapi_pokemon", "package": null, "version": null}, {"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/core/dim_characters.sql", "compiled": true, "compiled_code": "/*\n  Model: dim_characters (Ultra-simplified)\n  Description: Minimal character dimension table\n*/\n\n-- Star Wars characters with hardcoded surrogate key inputs\nSELECT\n    md5(cast(coalesce(cast('star_wars' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(people_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    'star_wars' AS universe,\n    people_id::TEXT AS character_source_id,  -- Cast to TEXT\n    name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_swapi_people\"\n\nUNION ALL\n\n-- Pokemon with hardcoded surrogate key inputs\nSELECT\n    md5(cast(coalesce(cast('pokemon' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(pokemon_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    'pokemon' AS universe,\n    pokemon_id::TEXT AS character_source_id,  -- Cast to TEXT\n    pokemon_name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n\nUNION ALL\n\n-- Netrunner with hardcoded surrogate key inputs\nSELECT\n    md5(cast(coalesce(cast('netrunner' as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    'netrunner' AS universe,\n    code AS character_source_id,  -- Already TEXT\n    card_name AS character_name,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nWHERE type_code = 'identity'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_netrunner_cards": {"database": "nerd_facts", "schema": "public", "name": "fact_netrunner_cards", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/fact_netrunner_cards.sql", "original_file_path": "models/marts/netrunner/fact_netrunner_cards.sql", "unique_id": "model.nerd_facts_dbt.fact_netrunner_cards", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "fact_netrunner_cards"], "alias": "fact_netrunner_cards", "checksum": {"name": "sha256", "checksum": "8efaeb53c86df67aca56b3f4445e3a9e85741c881a37c622175f2334771d8ce4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.652396, "relation_name": "\"nerd_facts\".\"public\".\"fact_netrunner_cards\"", "raw_code": "/*\n  Model: fact_netrunner_cards\n  Description: Fact table for Android: Netrunner cards with metrics and relationships\n  \n  Notes:\n  - Contains key metrics about card usage, efficiency, and value\n  - Links to dimension tables for cards, factions, packs, and types\n  - Includes derived metrics for cards such as cost efficiency and power indices\n  - Provides temporal context through release dates and rotation status\n  - Combines multiple data sources for comprehensive analysis\n*/\n\nWITH card_metrics AS (\n    -- Calculate and derive card-specific metrics\n    SELECT\n        c.code AS card_code,\n        c.card_id,\n        c.card_name,\n        c.faction_code,\n        c.side_code,\n        c.type_code,\n        c.pack_code,\n        \n        -- Core card attributes - keep as text for now\n        c.cost,\n        c.strength,\n        c.advancement_cost,\n        c.agenda_points,\n        c.memory_cost,\n        c.trash_cost,\n        c.faction_cost,\n        \n        -- Calculate cost efficiency metrics with proper type casting\n        CASE \n            -- For ICE, calculate strength-to-cost ratio\n            WHEN c.type_code = 'ice' AND c.cost::TEXT ~ '^[0-9]+$' AND c.cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            -- For Agendas, calculate points-to-advancement ratio\n            WHEN c.type_code = 'agenda' AND c.advancement_cost::TEXT ~ '^[0-9]+$' \n                 AND c.advancement_cost::NUMERIC > 0 AND c.agenda_points IS NOT NULL \n                 AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.advancement_cost::NUMERIC), 2)\n            \n            -- For Programs/Hardware, basic cost efficiency if applicable\n            WHEN c.type_code IN ('program', 'hardware') AND c.cost::TEXT ~ '^[0-9]+$' \n                 AND c.cost::NUMERIC > 0 AND c.strength IS NOT NULL \n                 AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS cost_efficiency_ratio,\n        \n        -- Calculate text length (proxy for card complexity)\n        LENGTH(c.text) AS text_length,\n        \n        -- Calculate influence efficiency with safe type casting\n        CASE\n            WHEN c.faction_cost::TEXT ~ '^[0-9]+$' AND c.faction_cost::NUMERIC > 0 \n                 AND c.agenda_points IS NOT NULL AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.faction_cost::NUMERIC), 2)\n            \n            WHEN c.faction_cost::TEXT ~ '^[0-9]+$' AND c.faction_cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.faction_cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS influence_efficiency,\n        \n        -- Keywords count\n        CASE WHEN c.keywords IS NOT NULL \n             THEN COALESCE(ARRAY_LENGTH(STRING_TO_ARRAY(c.keywords, ' - '), 1), 0)\n             ELSE 0 \n        END AS keyword_count,\n        \n        -- Reference pack info\n        p.release_at,\n        p.cycle_code,\n        \n        -- Simulated usage data - no type casting needed here\n        CASE\n            WHEN c.card_name IN ('Account Siphon', 'Desperado', 'SanSan City Grid', \n                              'Astroscript Pilot Program', 'Hedge Fund', 'Sure Gamble') THEN 95\n            WHEN c.pack_code = 'core' AND c.faction_code IS NOT NULL THEN 70\n            WHEN c.faction_code IS NULL THEN 30\n            WHEN p.cycle_code IN ('genesis', 'creation-and-control') THEN 60\n            WHEN p.release_at IS NULL THEN 20\n            WHEN DATE_PART('year', p.release_at::timestamp) <= 2014 THEN 65\n            WHEN DATE_PART('year', p.release_at::timestamp) <= 2016 THEN 50\n            ELSE 40\n        END AS popularity_score\n        \n    FROM {{ ref('stg_netrunner_cards') }} c\n    LEFT JOIN {{ ref('stg_netrunner_packs') }} p ON c.pack_code = p.code\n)\n\nSELECT\n    -- Primary keys and relationships\n    {{ dbt_utils.generate_surrogate_key(['cm.card_code']) }} AS card_fact_key,\n    cm.card_code,\n    cm.card_id,\n    \n    -- Foreign keys to dimension tables\n    {{ dbt_utils.generate_surrogate_key(['cm.card_code']) }} AS card_key,\n    {{ dbt_utils.generate_surrogate_key(['cm.faction_code']) }} AS faction_key,\n    {{ dbt_utils.generate_surrogate_key(['cm.pack_code']) }} AS pack_key,\n    {{ dbt_utils.generate_surrogate_key(['cm.side_code', 'cm.type_code']) }} AS card_type_key,\n    \n    -- Essential card attributes \n    cm.card_name,\n    cm.faction_code,\n    cm.side_code,\n    cm.type_code,\n    cm.pack_code,\n    \n    -- Core card metrics with safe type handling\n    CASE WHEN cm.cost::TEXT ~ '^[0-9]+$' THEN cm.cost::INTEGER ELSE 0 END AS cost,\n    CASE WHEN cm.strength::TEXT ~ '^[0-9\\.]+$' THEN cm.strength::NUMERIC ELSE 0 END AS strength,\n    CASE WHEN cm.advancement_cost::TEXT ~ '^[0-9]+$' THEN cm.advancement_cost::INTEGER ELSE 0 END AS advancement_requirement,\n    CASE WHEN cm.agenda_points::TEXT ~ '^[0-9]+$' THEN cm.agenda_points::INTEGER ELSE 0 END AS agenda_points,\n    CASE WHEN cm.memory_cost::TEXT ~ '^[0-9]+$' THEN cm.memory_cost::INTEGER ELSE 0 END AS memory_cost,\n    CASE WHEN cm.trash_cost::TEXT ~ '^[0-9]+$' THEN cm.trash_cost::INTEGER ELSE 0 END AS trash_cost,\n    \n    -- Calculated metrics\n    cm.cost_efficiency_ratio,\n    cm.text_length AS complexity_score,\n    cm.influence_efficiency,\n    cm.keyword_count,\n    \n    -- Usage and popularity metrics\n    cm.popularity_score,\n    CASE\n        WHEN cm.popularity_score >= 80 THEN 'Meta Defining'\n        WHEN cm.popularity_score >= 60 THEN 'Staple'\n        WHEN cm.popularity_score >= 40 THEN 'Playable'\n        ELSE 'Niche'\n    END AS popularity_tier,\n    \n    -- Deck construction significance\n    CASE\n        WHEN cm.card_name IN ('Hedge Fund', 'Sure Gamble', 'IPO', 'Dirty Laundry') THEN 'Auto-include'\n        WHEN cm.popularity_score >= 75 THEN 'High Impact'\n        WHEN cm.popularity_score >= 50 THEN 'Medium Impact'\n        ELSE 'Low Impact'\n    END AS deck_impact,\n    \n    -- Time dimensions\n    cm.release_at,\n    cm.cycle_code,\n    CASE \n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin') THEN 'First Rotation'\n        WHEN cm.cycle_code IN ('lunar', 'order-and-chaos', 'sansan', 'mumbad') THEN 'Second Rotation'\n        ELSE 'Current'\n    END AS rotation_group,\n    \n    -- Card pool status (current as of 2025)\n    CASE\n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin', \n                           'lunar', 'order-and-chaos', 'sansan', 'mumbad',\n                           'flashpoint', 'red-sand') THEN 'Rotated'\n        WHEN cm.cycle_code IN ('terminal-directive', 'core2', 'kitara', 'reign-and-reverie') THEN 'Standard'\n        WHEN cm.cycle_code IS NULL THEN 'Unknown'\n        ELSE 'Standard'\n    END AS card_pool_status,\n    \n    -- Card value index (composite score)\n    ROUND(\n        (COALESCE(cm.popularity_score, 0) * 0.6) + \n        (COALESCE(cm.cost_efficiency_ratio, 0) * 20) +\n        (CASE WHEN cm.type_code = 'identity' THEN 30 ELSE 0 END) +\n        (CASE WHEN cm.card_name IN ('Account Siphon', 'Astroscript Pilot Program', 'Jackson Howard') THEN 40 ELSE 0 END)\n    ) AS card_value_index,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM card_metrics cm", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}, {"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/netrunner/fact_netrunner_cards.sql", "compiled": true, "compiled_code": "/*\n  Model: fact_netrunner_cards\n  Description: Fact table for Android: Netrunner cards with metrics and relationships\n  \n  Notes:\n  - Contains key metrics about card usage, efficiency, and value\n  - Links to dimension tables for cards, factions, packs, and types\n  - Includes derived metrics for cards such as cost efficiency and power indices\n  - Provides temporal context through release dates and rotation status\n  - Combines multiple data sources for comprehensive analysis\n*/\n\nWITH card_metrics AS (\n    -- Calculate and derive card-specific metrics\n    SELECT\n        c.code AS card_code,\n        c.card_id,\n        c.card_name,\n        c.faction_code,\n        c.side_code,\n        c.type_code,\n        c.pack_code,\n        \n        -- Core card attributes - keep as text for now\n        c.cost,\n        c.strength,\n        c.advancement_cost,\n        c.agenda_points,\n        c.memory_cost,\n        c.trash_cost,\n        c.faction_cost,\n        \n        -- Calculate cost efficiency metrics with proper type casting\n        CASE \n            -- For ICE, calculate strength-to-cost ratio\n            WHEN c.type_code = 'ice' AND c.cost::TEXT ~ '^[0-9]+$' AND c.cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            -- For Agendas, calculate points-to-advancement ratio\n            WHEN c.type_code = 'agenda' AND c.advancement_cost::TEXT ~ '^[0-9]+$' \n                 AND c.advancement_cost::NUMERIC > 0 AND c.agenda_points IS NOT NULL \n                 AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.advancement_cost::NUMERIC), 2)\n            \n            -- For Programs/Hardware, basic cost efficiency if applicable\n            WHEN c.type_code IN ('program', 'hardware') AND c.cost::TEXT ~ '^[0-9]+$' \n                 AND c.cost::NUMERIC > 0 AND c.strength IS NOT NULL \n                 AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS cost_efficiency_ratio,\n        \n        -- Calculate text length (proxy for card complexity)\n        LENGTH(c.text) AS text_length,\n        \n        -- Calculate influence efficiency with safe type casting\n        CASE\n            WHEN c.faction_cost::TEXT ~ '^[0-9]+$' AND c.faction_cost::NUMERIC > 0 \n                 AND c.agenda_points IS NOT NULL AND c.agenda_points::TEXT ~ '^[0-9]+$'\n            THEN ROUND((c.agenda_points::NUMERIC / c.faction_cost::NUMERIC), 2)\n            \n            WHEN c.faction_cost::TEXT ~ '^[0-9]+$' AND c.faction_cost::NUMERIC > 0 \n                 AND c.strength IS NOT NULL AND c.strength::TEXT ~ '^[0-9]+(\\.[0-9]+)?$'\n            THEN ROUND((c.strength::NUMERIC / c.faction_cost::NUMERIC), 2)\n            \n            ELSE NULL\n        END AS influence_efficiency,\n        \n        -- Keywords count\n        CASE WHEN c.keywords IS NOT NULL \n             THEN COALESCE(ARRAY_LENGTH(STRING_TO_ARRAY(c.keywords, ' - '), 1), 0)\n             ELSE 0 \n        END AS keyword_count,\n        \n        -- Reference pack info\n        p.release_at,\n        p.cycle_code,\n        \n        -- Simulated usage data - no type casting needed here\n        CASE\n            WHEN c.card_name IN ('Account Siphon', 'Desperado', 'SanSan City Grid', \n                              'Astroscript Pilot Program', 'Hedge Fund', 'Sure Gamble') THEN 95\n            WHEN c.pack_code = 'core' AND c.faction_code IS NOT NULL THEN 70\n            WHEN c.faction_code IS NULL THEN 30\n            WHEN p.cycle_code IN ('genesis', 'creation-and-control') THEN 60\n            WHEN p.release_at IS NULL THEN 20\n            WHEN DATE_PART('year', p.release_at::timestamp) <= 2014 THEN 65\n            WHEN DATE_PART('year', p.release_at::timestamp) <= 2016 THEN 50\n            ELSE 40\n        END AS popularity_score\n        \n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    LEFT JOIN \"nerd_facts\".\"public\".\"stg_netrunner_packs\" p ON c.pack_code = p.code\n)\n\nSELECT\n    -- Primary keys and relationships\n    md5(cast(coalesce(cast(cm.card_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_fact_key,\n    cm.card_code,\n    cm.card_id,\n    \n    -- Foreign keys to dimension tables\n    md5(cast(coalesce(cast(cm.card_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_key,\n    md5(cast(coalesce(cast(cm.faction_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS faction_key,\n    md5(cast(coalesce(cast(cm.pack_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pack_key,\n    md5(cast(coalesce(cast(cm.side_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(cm.type_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_type_key,\n    \n    -- Essential card attributes \n    cm.card_name,\n    cm.faction_code,\n    cm.side_code,\n    cm.type_code,\n    cm.pack_code,\n    \n    -- Core card metrics with safe type handling\n    CASE WHEN cm.cost::TEXT ~ '^[0-9]+$' THEN cm.cost::INTEGER ELSE 0 END AS cost,\n    CASE WHEN cm.strength::TEXT ~ '^[0-9\\.]+$' THEN cm.strength::NUMERIC ELSE 0 END AS strength,\n    CASE WHEN cm.advancement_cost::TEXT ~ '^[0-9]+$' THEN cm.advancement_cost::INTEGER ELSE 0 END AS advancement_requirement,\n    CASE WHEN cm.agenda_points::TEXT ~ '^[0-9]+$' THEN cm.agenda_points::INTEGER ELSE 0 END AS agenda_points,\n    CASE WHEN cm.memory_cost::TEXT ~ '^[0-9]+$' THEN cm.memory_cost::INTEGER ELSE 0 END AS memory_cost,\n    CASE WHEN cm.trash_cost::TEXT ~ '^[0-9]+$' THEN cm.trash_cost::INTEGER ELSE 0 END AS trash_cost,\n    \n    -- Calculated metrics\n    cm.cost_efficiency_ratio,\n    cm.text_length AS complexity_score,\n    cm.influence_efficiency,\n    cm.keyword_count,\n    \n    -- Usage and popularity metrics\n    cm.popularity_score,\n    CASE\n        WHEN cm.popularity_score >= 80 THEN 'Meta Defining'\n        WHEN cm.popularity_score >= 60 THEN 'Staple'\n        WHEN cm.popularity_score >= 40 THEN 'Playable'\n        ELSE 'Niche'\n    END AS popularity_tier,\n    \n    -- Deck construction significance\n    CASE\n        WHEN cm.card_name IN ('Hedge Fund', 'Sure Gamble', 'IPO', 'Dirty Laundry') THEN 'Auto-include'\n        WHEN cm.popularity_score >= 75 THEN 'High Impact'\n        WHEN cm.popularity_score >= 50 THEN 'Medium Impact'\n        ELSE 'Low Impact'\n    END AS deck_impact,\n    \n    -- Time dimensions\n    cm.release_at,\n    cm.cycle_code,\n    CASE \n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin') THEN 'First Rotation'\n        WHEN cm.cycle_code IN ('lunar', 'order-and-chaos', 'sansan', 'mumbad') THEN 'Second Rotation'\n        ELSE 'Current'\n    END AS rotation_group,\n    \n    -- Card pool status (current as of 2025)\n    CASE\n        WHEN cm.cycle_code IN ('core', 'genesis', 'creation-and-control', 'spin', \n                           'lunar', 'order-and-chaos', 'sansan', 'mumbad',\n                           'flashpoint', 'red-sand') THEN 'Rotated'\n        WHEN cm.cycle_code IN ('terminal-directive', 'core2', 'kitara', 'reign-and-reverie') THEN 'Standard'\n        WHEN cm.cycle_code IS NULL THEN 'Unknown'\n        ELSE 'Standard'\n    END AS card_pool_status,\n    \n    -- Card value index (composite score)\n    ROUND(\n        (COALESCE(cm.popularity_score, 0) * 0.6) + \n        (COALESCE(cm.cost_efficiency_ratio, 0) * 20) +\n        (CASE WHEN cm.type_code = 'identity' THEN 30 ELSE 0 END) +\n        (CASE WHEN cm.card_name IN ('Account Siphon', 'Astroscript Pilot Program', 'Jackson Howard') THEN 40 ELSE 0 END)\n    ) AS card_value_index,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM card_metrics cm", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_netrunner_card_power": {"database": "nerd_facts", "schema": "public", "name": "fact_netrunner_card_power", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/fact_netrunner_card_power.sql", "original_file_path": "models/marts/netrunner/fact_netrunner_card_power.sql", "unique_id": "model.nerd_facts_dbt.fact_netrunner_card_power", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "fact_netrunner_card_power"], "alias": "fact_netrunner_card_power", "checksum": {"name": "sha256", "checksum": "62fc6e87d8f9ba100be536bbc1f1d057a8e271f69dfd686cf16c16b81e91b9fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "card_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["card_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["card_id"]}], "unique_key": "card_key"}, "created_at": 1742909949.6606328, "relation_name": "\"nerd_facts\".\"public\".\"fact_netrunner_card_power\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['card_id']}],\n    unique_key = 'card_key'\n  )\n}}\n\n/*\n  Model: fact_netrunner_card_power (Ultra-Simplified)\n  Description: Card power metrics from the Netrunner universe\n*/\n\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['c.code']) }} AS card_key,\n    c.code AS card_id,\n    c.card_name,\n    c.faction_code,\n    c.type_code,\n    c.cost,\n    \n    -- Simplified scoring metrics\n    CASE \n        WHEN c.type_code = 'agenda' THEN COALESCE(c.advancement_cost, 0) * 2\n        WHEN c.type_code IN ('ice', 'program') THEN COALESCE(c.strength, 0) * 3\n        ELSE COALESCE(c.cost, 0) * 2\n    END AS card_power_score,\n    \n    -- Relative power tier\n    CASE \n        WHEN c.type_code = 'agenda' AND COALESCE(c.advancement_cost, 0) >= 5 THEN 'High'\n        WHEN c.type_code IN ('ice', 'program') AND COALESCE(c.strength, 0) >= 4 THEN 'High'\n        WHEN COALESCE(c.cost, 0) >= 4 THEN 'High'\n        WHEN c.type_code = 'agenda' AND COALESCE(c.advancement_cost, 0) >= 3 THEN 'Medium'\n        WHEN c.type_code IN ('ice', 'program') AND COALESCE(c.strength, 0) >= 2 THEN 'Medium'\n        WHEN COALESCE(c.cost, 0) >= 2 THEN 'Medium'\n        ELSE 'Low'\n    END AS power_tier,\n    \n    'netrunner' AS universe,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM {{ ref('stg_netrunner_cards') }} c\nWHERE c.code IS NOT NULL\nORDER BY card_power_score DESC", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/netrunner/fact_netrunner_card_power.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_netrunner_card_power (Ultra-Simplified)\n  Description: Card power metrics from the Netrunner universe\n*/\n\nSELECT\n    md5(cast(coalesce(cast(c.code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS card_key,\n    c.code AS card_id,\n    c.card_name,\n    c.faction_code,\n    c.type_code,\n    c.cost,\n    \n    -- Simplified scoring metrics\n    CASE \n        WHEN c.type_code = 'agenda' THEN COALESCE(c.advancement_cost, 0) * 2\n        WHEN c.type_code IN ('ice', 'program') THEN COALESCE(c.strength, 0) * 3\n        ELSE COALESCE(c.cost, 0) * 2\n    END AS card_power_score,\n    \n    -- Relative power tier\n    CASE \n        WHEN c.type_code = 'agenda' AND COALESCE(c.advancement_cost, 0) >= 5 THEN 'High'\n        WHEN c.type_code IN ('ice', 'program') AND COALESCE(c.strength, 0) >= 4 THEN 'High'\n        WHEN COALESCE(c.cost, 0) >= 4 THEN 'High'\n        WHEN c.type_code = 'agenda' AND COALESCE(c.advancement_cost, 0) >= 3 THEN 'Medium'\n        WHEN c.type_code IN ('ice', 'program') AND COALESCE(c.strength, 0) >= 2 THEN 'Medium'\n        WHEN COALESCE(c.cost, 0) >= 2 THEN 'Medium'\n        ELSE 'Low'\n    END AS power_tier,\n    \n    'netrunner' AS universe,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\nWHERE c.code IS NOT NULL\nORDER BY card_power_score DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_netrunner_factions": {"database": "nerd_facts", "schema": "public", "name": "dim_netrunner_factions", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/dim_netrunner_factions.sql", "original_file_path": "models/marts/netrunner/dim_netrunner_factions.sql", "unique_id": "model.nerd_facts_dbt.dim_netrunner_factions", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "dim_netrunner_factions"], "alias": "dim_netrunner_factions", "checksum": {"name": "sha256", "checksum": "52ddd2150180ea9cb381ea4c6371327605844bf83981fd94aaa9f6c51b1581b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.6674066, "relation_name": "\"nerd_facts\".\"public\".\"dim_netrunner_factions\"", "raw_code": "/*\n  Model: dim_netrunner_factions\n  Description: Dimension table for Android: Netrunner factions\n  \n  Notes:\n  - Provides comprehensive faction information and classifications\n  - Includes card counts and distributions across types\n  - Adds gameplay style classification and meta position\n  - Contains faction metadata and visual styling attributes\n*/\n\nWITH faction_base AS (\n    SELECT DISTINCT\n        f.code AS faction_code,\n        f.faction_name,\n        f.side_code,\n        CASE \n            WHEN f.side_code = 'corp' THEN 'Corp'\n            WHEN f.side_code = 'runner' THEN 'Runner'\n            ELSE 'Unknown'\n        END AS side_name,\n        f.is_mini AS is_mini_faction,\n        f.color\n    FROM {{ ref('stg_netrunner_factions') }} f\n),\n\ncard_counts AS (\n    SELECT\n        faction_code,\n        COUNT(DISTINCT c.card_id) AS num_cards,\n        COUNT(DISTINCT CASE WHEN type_code = 'identity' THEN c.card_id END) AS num_identities,\n        COUNT(DISTINCT CASE WHEN type_code = 'ice' THEN c.card_id END) AS num_ice,\n        COUNT(DISTINCT CASE WHEN type_code = 'program' AND text ILIKE '%Icebreaker%' THEN c.card_id END) AS num_icebreakers,\n        COUNT(DISTINCT CASE WHEN type_code = 'agenda' THEN c.card_id END) AS num_agendas,\n        COUNT(DISTINCT CASE WHEN type_code IN ('event', 'operation') THEN c.card_id END) AS num_events_operations,\n        COUNT(DISTINCT CASE WHEN text ILIKE '%gain%credit%' OR \n                              text ILIKE '%take%credit%' OR\n                              text ILIKE '%credit for each%' THEN c.card_id END) AS num_economy_cards,\n        -- Add first release date\n        MIN(p.release_at) AS first_release_date,\n        -- Add most recent card release date\n        MAX(p.release_at) AS latest_release_date\n    FROM {{ ref('stg_netrunner_cards') }} c\n    LEFT JOIN {{ ref('stg_netrunner_packs') }} p ON c.pack_code = p.code\n    GROUP BY faction_code\n)\n\nSELECT\n    -- Generate surrogate key\n    {{ dbt_utils.generate_surrogate_key(['f.faction_code']) }} AS faction_key,\n    \n    -- Primary identifiers\n    f.faction_code,\n    f.faction_name,\n    f.side_code,\n    f.side_name,\n    f.is_mini_faction,\n    f.color,\n    \n    -- Card statistics\n    COALESCE(c.num_cards, 0) AS num_cards,\n    COALESCE(c.num_identities, 0) AS num_identities,\n    COALESCE(c.num_ice, 0) AS num_ice,\n    COALESCE(c.num_icebreakers, 0) AS num_icebreakers,\n    COALESCE(c.num_agendas, 0) AS num_agendas,\n    COALESCE(c.num_events_operations, 0) AS num_events_operations,\n    COALESCE(c.num_economy_cards, 0) AS num_economy_cards,\n    \n    -- Dates\n    c.first_release_date,\n    c.latest_release_date,\n    \n    -- Faction tier based on card count with improved thresholds\n    CASE\n        WHEN COALESCE(c.num_cards, 0) > 120 THEN 'Major'\n        WHEN COALESCE(c.num_cards, 0) > 70 THEN 'Standard'\n        WHEN COALESCE(c.num_cards, 0) > 20 THEN 'Minor'\n        ELSE 'Mini'\n    END AS faction_tier,\n    \n    -- Faction type based on side and characteristics with improved pattern matching\n    CASE\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%jinteki%' THEN 'Trap Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%haas-bioroid%' THEN 'Economy Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%nbn%' THEN 'Tag Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%weyland%' THEN 'Damage Corp'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%anarch%' THEN 'Disruption Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%criminal%' THEN 'Economy Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%shaper%' THEN 'Rig-Builder Runner'\n        ELSE 'Specialized'\n    END AS play_style,\n    \n    -- Economic strength based on economy card percentage\n    CASE\n        WHEN COALESCE(c.num_cards, 0) = 0 THEN 'Unknown'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 20 THEN 'Strong Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 15 THEN 'Good Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 10 THEN 'Moderate Economy'\n        ELSE 'Weak Economy'\n    END AS economy_strength,\n    \n    -- Iconic identity card for this faction with more comprehensive matching\n    CASE\n        WHEN f.faction_code = 'jinteki' THEN 'Personal Evolution'\n        WHEN f.faction_code = 'haas-bioroid' THEN 'Engineering the Future'\n        WHEN f.faction_code = 'nbn' THEN 'Making News'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'Building a Better World'\n        WHEN f.faction_code = 'anarch' THEN 'Noise'\n        WHEN f.faction_code = 'criminal' THEN 'Gabriel Santiago'\n        WHEN f.faction_code = 'shaper' THEN 'Kate \"Mac\" McCaffrey'\n        WHEN f.faction_code = 'adam' THEN 'Adam: Compulsive Hacker'\n        WHEN f.faction_code = 'apex' THEN 'Apex: Invasive Predator'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny Lebeau: Security Specialist'\n        ELSE 'Various'\n    END AS iconic_identity,\n    \n    -- Release wave with expanded categories\n    CASE\n        WHEN f.faction_code IN ('haas-bioroid', 'jinteki', 'nbn', 'weyland-consortium', 'anarch', 'criminal', 'shaper') THEN 'Core Set'\n        WHEN f.faction_code IN ('adam', 'apex', 'sunny-lebeau') THEN 'Data and Destiny'\n        ELSE 'Expansion'\n    END AS release_category,\n    \n    -- Meta position\n    CASE\n        WHEN f.faction_code IN ('nbn', 'haas-bioroid', 'criminal', 'shaper') THEN 'Tier 1'\n        WHEN f.faction_code IN ('jinteki', 'weyland-consortium', 'anarch') THEN 'Tier 2'\n        ELSE 'Tier 3'\n    END AS meta_position,\n    \n    -- CSS classes for styling\n    'faction-' || f.faction_code AS faction_css_class,\n    \n    -- Add hex color code with # prefix if not already present\n    CASE\n        WHEN f.color IS NULL THEN '#000000'  -- Default black\n        WHEN f.color LIKE '#%' THEN f.color\n        ELSE '#' || f.color\n    END AS color_hex,\n    \n    -- Faction abbreviation\n    CASE\n        WHEN f.faction_code = 'haas-bioroid' THEN 'HB'\n        WHEN f.faction_code = 'jinteki' THEN 'J'\n        WHEN f.faction_code = 'nbn' THEN 'NBN'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'W'\n        WHEN f.faction_code = 'anarch' THEN 'A'\n        WHEN f.faction_code = 'criminal' THEN 'C'\n        WHEN f.faction_code = 'shaper' THEN 'S'\n        WHEN f.faction_code = 'adam' THEN 'Adam'\n        WHEN f.faction_code = 'apex' THEN 'Apex'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny'\n        ELSE SUBSTRING(f.faction_name, 1, 1)\n    END AS faction_abbr,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM faction_base f\nLEFT JOIN card_counts c ON f.faction_code = c.faction_code\nORDER BY f.side_name, COALESCE(c.num_cards, 0) DESC", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}, {"name": "stg_netrunner_cards", "package": null, "version": null}, {"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions", "model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/netrunner/dim_netrunner_factions.sql", "compiled": true, "compiled_code": "/*\n  Model: dim_netrunner_factions\n  Description: Dimension table for Android: Netrunner factions\n  \n  Notes:\n  - Provides comprehensive faction information and classifications\n  - Includes card counts and distributions across types\n  - Adds gameplay style classification and meta position\n  - Contains faction metadata and visual styling attributes\n*/\n\nWITH faction_base AS (\n    SELECT DISTINCT\n        f.code AS faction_code,\n        f.faction_name,\n        f.side_code,\n        CASE \n            WHEN f.side_code = 'corp' THEN 'Corp'\n            WHEN f.side_code = 'runner' THEN 'Runner'\n            ELSE 'Unknown'\n        END AS side_name,\n        f.is_mini AS is_mini_faction,\n        f.color\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_factions\" f\n),\n\ncard_counts AS (\n    SELECT\n        faction_code,\n        COUNT(DISTINCT c.card_id) AS num_cards,\n        COUNT(DISTINCT CASE WHEN type_code = 'identity' THEN c.card_id END) AS num_identities,\n        COUNT(DISTINCT CASE WHEN type_code = 'ice' THEN c.card_id END) AS num_ice,\n        COUNT(DISTINCT CASE WHEN type_code = 'program' AND text ILIKE '%Icebreaker%' THEN c.card_id END) AS num_icebreakers,\n        COUNT(DISTINCT CASE WHEN type_code = 'agenda' THEN c.card_id END) AS num_agendas,\n        COUNT(DISTINCT CASE WHEN type_code IN ('event', 'operation') THEN c.card_id END) AS num_events_operations,\n        COUNT(DISTINCT CASE WHEN text ILIKE '%gain%credit%' OR \n                              text ILIKE '%take%credit%' OR\n                              text ILIKE '%credit for each%' THEN c.card_id END) AS num_economy_cards,\n        -- Add first release date\n        MIN(p.release_at) AS first_release_date,\n        -- Add most recent card release date\n        MAX(p.release_at) AS latest_release_date\n    FROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\" c\n    LEFT JOIN \"nerd_facts\".\"public\".\"stg_netrunner_packs\" p ON c.pack_code = p.code\n    GROUP BY faction_code\n)\n\nSELECT\n    -- Generate surrogate key\n    md5(cast(coalesce(cast(f.faction_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS faction_key,\n    \n    -- Primary identifiers\n    f.faction_code,\n    f.faction_name,\n    f.side_code,\n    f.side_name,\n    f.is_mini_faction,\n    f.color,\n    \n    -- Card statistics\n    COALESCE(c.num_cards, 0) AS num_cards,\n    COALESCE(c.num_identities, 0) AS num_identities,\n    COALESCE(c.num_ice, 0) AS num_ice,\n    COALESCE(c.num_icebreakers, 0) AS num_icebreakers,\n    COALESCE(c.num_agendas, 0) AS num_agendas,\n    COALESCE(c.num_events_operations, 0) AS num_events_operations,\n    COALESCE(c.num_economy_cards, 0) AS num_economy_cards,\n    \n    -- Dates\n    c.first_release_date,\n    c.latest_release_date,\n    \n    -- Faction tier based on card count with improved thresholds\n    CASE\n        WHEN COALESCE(c.num_cards, 0) > 120 THEN 'Major'\n        WHEN COALESCE(c.num_cards, 0) > 70 THEN 'Standard'\n        WHEN COALESCE(c.num_cards, 0) > 20 THEN 'Minor'\n        ELSE 'Mini'\n    END AS faction_tier,\n    \n    -- Faction type based on side and characteristics with improved pattern matching\n    CASE\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%jinteki%' THEN 'Trap Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%haas-bioroid%' THEN 'Economy Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%nbn%' THEN 'Tag Corp'\n        WHEN f.side_name = 'Corp' AND f.faction_name ILIKE '%weyland%' THEN 'Damage Corp'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%anarch%' THEN 'Disruption Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%criminal%' THEN 'Economy Runner'\n        WHEN f.side_name = 'Runner' AND f.faction_name ILIKE '%shaper%' THEN 'Rig-Builder Runner'\n        ELSE 'Specialized'\n    END AS play_style,\n    \n    -- Economic strength based on economy card percentage\n    CASE\n        WHEN COALESCE(c.num_cards, 0) = 0 THEN 'Unknown'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 20 THEN 'Strong Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 15 THEN 'Good Economy'\n        WHEN COALESCE(c.num_economy_cards, 0) * 100.0 / NULLIF(c.num_cards, 0) >= 10 THEN 'Moderate Economy'\n        ELSE 'Weak Economy'\n    END AS economy_strength,\n    \n    -- Iconic identity card for this faction with more comprehensive matching\n    CASE\n        WHEN f.faction_code = 'jinteki' THEN 'Personal Evolution'\n        WHEN f.faction_code = 'haas-bioroid' THEN 'Engineering the Future'\n        WHEN f.faction_code = 'nbn' THEN 'Making News'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'Building a Better World'\n        WHEN f.faction_code = 'anarch' THEN 'Noise'\n        WHEN f.faction_code = 'criminal' THEN 'Gabriel Santiago'\n        WHEN f.faction_code = 'shaper' THEN 'Kate \"Mac\" McCaffrey'\n        WHEN f.faction_code = 'adam' THEN 'Adam: Compulsive Hacker'\n        WHEN f.faction_code = 'apex' THEN 'Apex: Invasive Predator'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny Lebeau: Security Specialist'\n        ELSE 'Various'\n    END AS iconic_identity,\n    \n    -- Release wave with expanded categories\n    CASE\n        WHEN f.faction_code IN ('haas-bioroid', 'jinteki', 'nbn', 'weyland-consortium', 'anarch', 'criminal', 'shaper') THEN 'Core Set'\n        WHEN f.faction_code IN ('adam', 'apex', 'sunny-lebeau') THEN 'Data and Destiny'\n        ELSE 'Expansion'\n    END AS release_category,\n    \n    -- Meta position\n    CASE\n        WHEN f.faction_code IN ('nbn', 'haas-bioroid', 'criminal', 'shaper') THEN 'Tier 1'\n        WHEN f.faction_code IN ('jinteki', 'weyland-consortium', 'anarch') THEN 'Tier 2'\n        ELSE 'Tier 3'\n    END AS meta_position,\n    \n    -- CSS classes for styling\n    'faction-' || f.faction_code AS faction_css_class,\n    \n    -- Add hex color code with # prefix if not already present\n    CASE\n        WHEN f.color IS NULL THEN '#000000'  -- Default black\n        WHEN f.color LIKE '#%' THEN f.color\n        ELSE '#' || f.color\n    END AS color_hex,\n    \n    -- Faction abbreviation\n    CASE\n        WHEN f.faction_code = 'haas-bioroid' THEN 'HB'\n        WHEN f.faction_code = 'jinteki' THEN 'J'\n        WHEN f.faction_code = 'nbn' THEN 'NBN'\n        WHEN f.faction_code = 'weyland-consortium' THEN 'W'\n        WHEN f.faction_code = 'anarch' THEN 'A'\n        WHEN f.faction_code = 'criminal' THEN 'C'\n        WHEN f.faction_code = 'shaper' THEN 'S'\n        WHEN f.faction_code = 'adam' THEN 'Adam'\n        WHEN f.faction_code = 'apex' THEN 'Apex'\n        WHEN f.faction_code = 'sunny-lebeau' THEN 'Sunny'\n        ELSE SUBSTRING(f.faction_name, 1, 1)\n    END AS faction_abbr,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM faction_base f\nLEFT JOIN card_counts c ON f.faction_code = c.faction_code\nORDER BY f.side_name, COALESCE(c.num_cards, 0) DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_netrunner_cards": {"database": "nerd_facts", "schema": "public", "name": "dim_netrunner_cards", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/netrunner/dim_netrunner_cards.sql", "original_file_path": "models/marts/netrunner/dim_netrunner_cards.sql", "unique_id": "model.nerd_facts_dbt.dim_netrunner_cards", "fqn": ["nerd_facts_dbt", "marts", "netrunner", "dim_netrunner_cards"], "alias": "dim_netrunner_cards", "checksum": {"name": "sha256", "checksum": "55f079943bf697e181f3fae40001ceec057ce1a971a2d3aa374e4c2e93cd644e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909949.673457, "relation_name": "\"nerd_facts\".\"public\".\"dim_netrunner_cards\"", "raw_code": "/*\n  Model: dim_netrunner_cards\n  Description: Bare minimum dimension table for Android: Netrunner cards\n  \n  Note: No type casting to avoid numeric conversion issues\n*/\n\nSELECT\n    -- Primary identifiers\n    code AS card_code,\n    card_id,\n    card_name,\n    \n    -- Card classifications  \n    type_code,\n    faction_code,\n    side_code,\n    \n    -- Raw values without any casting\n    faction_cost AS influence_cost,\n    cost,\n    \n    -- Boolean value\n    uniqueness AS is_unique_card,\n    \n    -- Pack information\n    pack_code,\n    \n    -- Add tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM {{ ref('stg_netrunner_cards') }}\nWHERE code IS NOT NULL\nORDER BY side_code, faction_code, type_code", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/netrunner/dim_netrunner_cards.sql", "compiled": true, "compiled_code": "/*\n  Model: dim_netrunner_cards\n  Description: Bare minimum dimension table for Android: Netrunner cards\n  \n  Note: No type casting to avoid numeric conversion issues\n*/\n\nSELECT\n    -- Primary identifiers\n    code AS card_code,\n    card_id,\n    card_name,\n    \n    -- Card classifications  \n    type_code,\n    faction_code,\n    side_code,\n    \n    -- Raw values without any casting\n    faction_cost AS influence_cost,\n    cost,\n    \n    -- Boolean value\n    uniqueness AS is_unique_card,\n    \n    -- Pack information\n    pack_code,\n    \n    -- Add tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nWHERE code IS NOT NULL\nORDER BY side_code, faction_code, type_code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_sw_films": {"database": "nerd_facts", "schema": "public", "name": "fact_sw_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/fact_sw_films.sql", "original_file_path": "models/marts/star_wars/fact_sw_films.sql", "unique_id": "model.nerd_facts_dbt.fact_sw_films", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "fact_sw_films"], "alias": "fact_sw_films", "checksum": {"name": "sha256", "checksum": "03a5bd7df1cf5f89abe206d4fcddb9df09f1842f2aa20ac925b2bb942649807e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "film_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["film_key"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["film_key"]}], "unique_key": "film_key"}, "created_at": 1742909949.6751585, "relation_name": "\"nerd_facts\".\"public\".\"fact_sw_films\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['film_key']}],\n    unique_key = 'film_key'\n  )\n}}\n\n/*\n  Model: fact_sw_films\n  Description: Film fact table with metrics about characters, planets, vehicles, starships and species\n*/\n\n-- Film base information\nWITH film_base AS (\n  SELECT\n    f.film_id,\n    f.title,\n    f.episode_id,\n    f.release_date,\n    EXTRACT(YEAR FROM f.release_date) AS release_year\n  FROM {{ ref('int_swapi_films') }} f\n),\n\n-- Character counts with gender breakdown\ncharacter_metrics AS (\n  SELECT \n    fc.film_id,\n    COUNT(DISTINCT fc.people_id) AS total_characters,\n    SUM(CASE WHEN p.gender = 'male' THEN 1 ELSE 0 END) AS male_characters,\n    SUM(CASE WHEN p.gender = 'female' THEN 1 ELSE 0 END) AS female_characters,\n    SUM(CASE WHEN p.gender NOT IN ('male', 'female') OR p.gender IS NULL THEN 1 ELSE 0 END) AS other_gender_characters,\n    -- Force users\n    SUM(CASE \n      WHEN p.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                    'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                    'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n      THEN 1 ELSE 0 \n    END) AS force_users\n  FROM {{ ref('int_swapi_films_characters') }} fc\n  JOIN {{ ref('int_swapi_people') }} p ON fc.people_id = p.people_id\n  GROUP BY fc.film_id\n),\n\n-- Planet counts\nplanet_metrics AS (\n  SELECT \n    fp.film_id,\n    COUNT(DISTINCT fp.planet_id) AS total_planets\n  FROM {{ ref('int_swapi_films_planets') }} fp\n  GROUP BY fp.film_id\n),\n\n-- Vehicle counts\nvehicle_metrics AS (\n  SELECT \n    fv.film_id,\n    COUNT(DISTINCT fv.vehicle_id) AS total_vehicles\n  FROM {{ ref('int_swapi_films_vehicles') }} fv\n  GROUP BY fv.film_id\n),\n\n-- Starship counts\nstarship_metrics AS (\n  SELECT \n    fs.film_id,\n    COUNT(DISTINCT fs.starship_id) AS total_starships\n  FROM {{ ref('int_swapi_films_starships') }} fs\n  GROUP BY fs.film_id\n),\n\n-- Species counts\nspecies_metrics AS (\n  SELECT \n    fsp.film_id,\n    COUNT(DISTINCT fsp.species_id) AS total_species\n  FROM {{ ref('int_swapi_films_species') }} fsp\n  GROUP BY fsp.film_id\n)\n\nSELECT\n  -- Primary Key (same as dim_films)\n  {{ dbt_utils.generate_surrogate_key(['fb.film_id']) }} AS film_key,\n  \n  -- Natural Key\n  fb.film_id,\n  \n  -- Film Identifiers\n  fb.title AS film_title,\n  fb.episode_id,\n  fb.release_date,\n  fb.release_year,\n  \n  -- Character Metrics\n  COALESCE(cm.total_characters, 0) AS character_count,\n  COALESCE(cm.male_characters, 0) AS male_character_count,\n  COALESCE(cm.female_characters, 0) AS female_character_count,\n  COALESCE(cm.other_gender_characters, 0) AS other_gender_character_count,\n  COALESCE(cm.force_users, 0) AS force_user_count,\n  \n  -- Gender diversity ratio (percentage of non-male characters)\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0 \n    THEN ROUND((COALESCE(cm.female_characters, 0) * 100.0 / COALESCE(cm.total_characters, 1)), 1)\n    ELSE 0\n  END AS female_character_percentage,\n  \n  -- Force user ratio\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0 \n    THEN ROUND((COALESCE(cm.force_users, 0) * 100.0 / COALESCE(cm.total_characters, 1)), 1)\n    ELSE 0\n  END AS force_user_percentage,\n  \n  -- Planet Metrics\n  COALESCE(pm.total_planets, 0) AS planet_count,\n  \n  -- Vehicle Metrics\n  COALESCE(vm.total_vehicles, 0) AS vehicle_count,\n  \n  -- Starship Metrics\n  COALESCE(sm.total_starships, 0) AS starship_count,\n  \n  -- Species Metrics\n  COALESCE(spm.total_species, 0) AS species_count,\n  \n  -- Total Entity Count\n  (COALESCE(cm.total_characters, 0) + COALESCE(pm.total_planets, 0) + \n   COALESCE(vm.total_vehicles, 0) + COALESCE(sm.total_starships, 0) +\n   COALESCE(spm.total_species, 0)) AS total_entity_count,\n  \n  -- Vehicle to Character Ratio\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0\n    THEN ROUND(((COALESCE(vm.total_vehicles, 0) + COALESCE(sm.total_starships, 0)) * 1.0 / \n           NULLIF(COALESCE(cm.total_characters, 0), 0)), 2)\n    ELSE 0\n  END AS vehicle_character_ratio,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM film_base fb\nLEFT JOIN character_metrics cm ON fb.film_id = cm.film_id\nLEFT JOIN planet_metrics pm ON fb.film_id = pm.film_id\nLEFT JOIN vehicle_metrics vm ON fb.film_id = vm.film_id\nLEFT JOIN starship_metrics sm ON fb.film_id = sm.film_id\nLEFT JOIN species_metrics spm ON fb.film_id = spm.film_id\nORDER BY fb.episode_id", "language": "sql", "refs": [{"name": "int_swapi_films", "package": null, "version": null}, {"name": "int_swapi_films_characters", "package": null, "version": null}, {"name": "int_swapi_people", "package": null, "version": null}, {"name": "int_swapi_films_planets", "package": null, "version": null}, {"name": "int_swapi_films_vehicles", "package": null, "version": null}, {"name": "int_swapi_films_starships", "package": null, "version": null}, {"name": "int_swapi_films_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_people", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_films_vehicles", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_films_species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/fact_sw_films.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_sw_films\n  Description: Film fact table with metrics about characters, planets, vehicles, starships and species\n*/\n\n-- Film base information\nWITH film_base AS (\n  SELECT\n    f.film_id,\n    f.title,\n    f.episode_id,\n    f.release_date,\n    EXTRACT(YEAR FROM f.release_date) AS release_year\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films\" f\n),\n\n-- Character counts with gender breakdown\ncharacter_metrics AS (\n  SELECT \n    fc.film_id,\n    COUNT(DISTINCT fc.people_id) AS total_characters,\n    SUM(CASE WHEN p.gender = 'male' THEN 1 ELSE 0 END) AS male_characters,\n    SUM(CASE WHEN p.gender = 'female' THEN 1 ELSE 0 END) AS female_characters,\n    SUM(CASE WHEN p.gender NOT IN ('male', 'female') OR p.gender IS NULL THEN 1 ELSE 0 END) AS other_gender_characters,\n    -- Force users\n    SUM(CASE \n      WHEN p.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                    'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                    'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n      THEN 1 ELSE 0 \n    END) AS force_users\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_people\" p ON fc.people_id = p.people_id\n  GROUP BY fc.film_id\n),\n\n-- Planet counts\nplanet_metrics AS (\n  SELECT \n    fp.film_id,\n    COUNT(DISTINCT fp.planet_id) AS total_planets\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n  GROUP BY fp.film_id\n),\n\n-- Vehicle counts\nvehicle_metrics AS (\n  SELECT \n    fv.film_id,\n    COUNT(DISTINCT fv.vehicle_id) AS total_vehicles\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_vehicles\" fv\n  GROUP BY fv.film_id\n),\n\n-- Starship counts\nstarship_metrics AS (\n  SELECT \n    fs.film_id,\n    COUNT(DISTINCT fs.starship_id) AS total_starships\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n  GROUP BY fs.film_id\n),\n\n-- Species counts\nspecies_metrics AS (\n  SELECT \n    fsp.film_id,\n    COUNT(DISTINCT fsp.species_id) AS total_species\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fsp\n  GROUP BY fsp.film_id\n)\n\nSELECT\n  -- Primary Key (same as dim_films)\n  md5(cast(coalesce(cast(fb.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n  \n  -- Natural Key\n  fb.film_id,\n  \n  -- Film Identifiers\n  fb.title AS film_title,\n  fb.episode_id,\n  fb.release_date,\n  fb.release_year,\n  \n  -- Character Metrics\n  COALESCE(cm.total_characters, 0) AS character_count,\n  COALESCE(cm.male_characters, 0) AS male_character_count,\n  COALESCE(cm.female_characters, 0) AS female_character_count,\n  COALESCE(cm.other_gender_characters, 0) AS other_gender_character_count,\n  COALESCE(cm.force_users, 0) AS force_user_count,\n  \n  -- Gender diversity ratio (percentage of non-male characters)\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0 \n    THEN ROUND((COALESCE(cm.female_characters, 0) * 100.0 / COALESCE(cm.total_characters, 1)), 1)\n    ELSE 0\n  END AS female_character_percentage,\n  \n  -- Force user ratio\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0 \n    THEN ROUND((COALESCE(cm.force_users, 0) * 100.0 / COALESCE(cm.total_characters, 1)), 1)\n    ELSE 0\n  END AS force_user_percentage,\n  \n  -- Planet Metrics\n  COALESCE(pm.total_planets, 0) AS planet_count,\n  \n  -- Vehicle Metrics\n  COALESCE(vm.total_vehicles, 0) AS vehicle_count,\n  \n  -- Starship Metrics\n  COALESCE(sm.total_starships, 0) AS starship_count,\n  \n  -- Species Metrics\n  COALESCE(spm.total_species, 0) AS species_count,\n  \n  -- Total Entity Count\n  (COALESCE(cm.total_characters, 0) + COALESCE(pm.total_planets, 0) + \n   COALESCE(vm.total_vehicles, 0) + COALESCE(sm.total_starships, 0) +\n   COALESCE(spm.total_species, 0)) AS total_entity_count,\n  \n  -- Vehicle to Character Ratio\n  CASE \n    WHEN COALESCE(cm.total_characters, 0) > 0\n    THEN ROUND(((COALESCE(vm.total_vehicles, 0) + COALESCE(sm.total_starships, 0)) * 1.0 / \n           NULLIF(COALESCE(cm.total_characters, 0), 0)), 2)\n    ELSE 0\n  END AS vehicle_character_ratio,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM film_base fb\nLEFT JOIN character_metrics cm ON fb.film_id = cm.film_id\nLEFT JOIN planet_metrics pm ON fb.film_id = pm.film_id\nLEFT JOIN vehicle_metrics vm ON fb.film_id = vm.film_id\nLEFT JOIN starship_metrics sm ON fb.film_id = sm.film_id\nLEFT JOIN species_metrics spm ON fb.film_id = spm.film_id\nORDER BY fb.episode_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_sw_characters": {"database": "nerd_facts", "schema": "public", "name": "fact_sw_characters", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/fact_sw_characters.sql", "original_file_path": "models/marts/star_wars/fact_sw_characters.sql", "unique_id": "model.nerd_facts_dbt.fact_sw_characters", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "fact_sw_characters"], "alias": "fact_sw_characters", "checksum": {"name": "sha256", "checksum": "00f9d603f6760db6b40850afe129d8fd5dc713bd1442b1afb7329bab54579b6d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "character_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["character_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["character_id"]}], "unique_key": "character_key"}, "created_at": 1742909949.6819296, "relation_name": "\"nerd_facts\".\"public\".\"fact_sw_characters\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['character_id']}],\n    unique_key = 'character_key'\n  )\n}}\n\n/*\n  Model: fact_sw_characters\n  Description: Fact table for Star Wars characters with attributes and metrics\n*/\n\n-- Get just the base data first\nWITH characters AS (\n    SELECT\n        people_id AS character_id,\n        name,\n        height AS height_cm,\n        mass AS mass_kg,\n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld AS homeworld_id,\n        -- These fields don't exist in staging, we'll need to handle them differently\n        NULL AS species_id,\n        NULL AS film_appearances,\n        NULL AS film_names,\n        NULL AS vehicle_count,\n        NULL AS vehicle_names,\n        NULL AS starship_count,\n        NULL AS starship_names,\n        FALSE AS force_sensitive,\n        'Unknown' AS character_era,\n        url,\n        created_at AS fetch_timestamp,\n        edited_at AS processed_timestamp\n    FROM {{ ref('stg_swapi_people') }}\n    WHERE people_id IS NOT NULL\n)\n\n-- Simplified final output\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['character_id']) }} AS character_key,\n    character_id,\n    name AS character_name,\n    homeworld_id,\n    species_id,\n    \n    -- Physical attributes\n    height_cm,\n    mass_kg,\n    hair_color,\n    eye_color,\n    skin_color,\n    birth_year,\n    gender,\n    \n    -- Film and vehicle appearances\n    film_appearances,\n    vehicle_count,\n    starship_count,\n    film_names AS film_list,\n    vehicle_names AS vehicle_list,\n    starship_names AS starship_list,\n    \n    -- Force user information\n    force_sensitive,\n    \n    -- Era classification\n    character_era,\n    \n    -- Affiliation (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'leia organa', 'han solo') THEN 'Rebel Alliance'\n        WHEN LOWER(name) IN ('darth vader', 'emperor palpatine') THEN 'Empire'\n        ELSE 'Other'\n    END AS affiliation,\n    \n    -- Character tier (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'leia organa') THEN 'S'\n        WHEN COALESCE(film_appearances::integer, 0) > 2 THEN 'A'\n        WHEN COALESCE(film_appearances::integer, 0) > 1 THEN 'B' \n        ELSE 'C'\n    END AS character_tier,\n    \n    -- Source tracking\n    url,\n    fetch_timestamp,\n    processed_timestamp,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM characters\nORDER BY character_id", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/fact_sw_characters.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_sw_characters\n  Description: Fact table for Star Wars characters with attributes and metrics\n*/\n\n-- Get just the base data first\nWITH characters AS (\n    SELECT\n        people_id AS character_id,\n        name,\n        height AS height_cm,\n        mass AS mass_kg,\n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld AS homeworld_id,\n        -- These fields don't exist in staging, we'll need to handle them differently\n        NULL AS species_id,\n        NULL AS film_appearances,\n        NULL AS film_names,\n        NULL AS vehicle_count,\n        NULL AS vehicle_names,\n        NULL AS starship_count,\n        NULL AS starship_names,\n        FALSE AS force_sensitive,\n        'Unknown' AS character_era,\n        url,\n        created_at AS fetch_timestamp,\n        edited_at AS processed_timestamp\n    FROM \"nerd_facts\".\"public\".\"stg_swapi_people\"\n    WHERE people_id IS NOT NULL\n)\n\n-- Simplified final output\nSELECT\n    md5(cast(coalesce(cast(character_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n    character_id,\n    name AS character_name,\n    homeworld_id,\n    species_id,\n    \n    -- Physical attributes\n    height_cm,\n    mass_kg,\n    hair_color,\n    eye_color,\n    skin_color,\n    birth_year,\n    gender,\n    \n    -- Film and vehicle appearances\n    film_appearances,\n    vehicle_count,\n    starship_count,\n    film_names AS film_list,\n    vehicle_names AS vehicle_list,\n    starship_names AS starship_list,\n    \n    -- Force user information\n    force_sensitive,\n    \n    -- Era classification\n    character_era,\n    \n    -- Affiliation (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'leia organa', 'han solo') THEN 'Rebel Alliance'\n        WHEN LOWER(name) IN ('darth vader', 'emperor palpatine') THEN 'Empire'\n        ELSE 'Other'\n    END AS affiliation,\n    \n    -- Character tier (simplified)\n    CASE\n        WHEN LOWER(name) IN ('luke skywalker', 'darth vader', 'leia organa') THEN 'S'\n        WHEN COALESCE(film_appearances::integer, 0) > 2 THEN 'A'\n        WHEN COALESCE(film_appearances::integer, 0) > 1 THEN 'B' \n        ELSE 'C'\n    END AS character_tier,\n    \n    -- Source tracking\n    url,\n    fetch_timestamp,\n    processed_timestamp,\n    CURRENT_TIMESTAMP AS dbt_loaded_at\nFROM characters\nORDER BY character_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_species": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_species", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_species.sql", "original_file_path": "models/marts/star_wars/dim_sw_species.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_species", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_species"], "alias": "dim_sw_species", "checksum": {"name": "sha256", "checksum": "68c0690b009f7f01344abfbd63c87a43674a1867a272710a06464ebfafe2cd43"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "species_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["species_key"]}, {"columns": ["species_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["species_key"]}, {"columns": ["species_id"]}], "unique_key": "species_key"}, "created_at": 1742909949.688075, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_species\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['species_key']}, {'columns': ['species_id']}],\n    unique_key = 'species_key'\n  )\n}}\n\n/*\n  Model: dim_sw_species\n  Description: Species dimension table with enriched attributes and classifications\n*/\n\nWITH species_base AS (\n    SELECT\n        s.species_id,\n        s.species_name,  -- Using species_name directly instead of s.name\n        s.classification,\n        s.designation,\n        s.average_height,\n        s.skin_colors,\n        s.hair_colors,\n        s.eye_colors,\n        s.average_lifespan,\n        s.language,\n        s.homeworld AS homeworld_id  -- Use homeworld instead of homeworld_id\n    FROM {{ ref('int_swapi_species') }} s\n),\n\n-- Film appearances\nfilm_appearances AS (\n    SELECT\n        fs.species_id,\n        COUNT(DISTINCT fs.film_id) AS film_count\n    FROM {{ ref('int_swapi_films_species') }} fs\n    GROUP BY fs.species_id\n),\n\n-- Character counts - estimate based on species mentions in films\n-- Since we don't have direct access to character-species relationships\ncharacter_counts AS (\n    SELECT\n        fs.species_id,\n        COUNT(DISTINCT fc.people_id) AS character_count\n    FROM {{ ref('int_swapi_films_species') }} fs\n    JOIN {{ ref('int_swapi_films_characters') }} fc ON fs.film_id = fc.film_id\n    GROUP BY fs.species_id\n),\n\n-- Enriched species data\nspecies_enriched AS (\n    SELECT\n        sb.*,\n        COALESCE(fa.film_count, 0) AS film_count,\n        COALESCE(cc.character_count, 0) AS character_count\n    FROM species_base sb\n    LEFT JOIN film_appearances fa ON sb.species_id = fa.species_id\n    LEFT JOIN character_counts cc ON sb.species_id = cc.species_id\n)\n\nSELECT\n    -- Primary Key\n    {{ dbt_utils.generate_surrogate_key(['se.species_id']) }} AS species_key,\n    \n    -- Natural Key\n    se.species_id,\n    \n    -- Species Attributes\n    se.species_name,\n    se.classification,\n    se.designation,\n    se.average_height,\n    se.skin_colors,\n    se.hair_colors,\n    se.eye_colors,\n    se.average_lifespan,\n    se.language,\n    se.homeworld_id,\n    \n    -- Related Dimensions\n    {{ dbt_utils.generate_surrogate_key(['se.homeworld_id']) }} AS homeworld_key,\n    \n    -- Appearance Metrics\n    se.film_count,\n    se.character_count,\n    \n    -- Species Classifications\n    CASE\n        WHEN se.classification ILIKE '%mammal%' THEN 'Mammalian'\n        WHEN se.classification ILIKE '%reptile%' THEN 'Reptilian'\n        WHEN se.classification ILIKE '%amphibian%' THEN 'Amphibian'\n        WHEN se.classification ILIKE '%insect%' THEN 'Insectoid'\n        WHEN se.classification ILIKE '%sentient%' THEN 'Sentient'\n        ELSE se.classification\n    END AS species_type,\n    \n    -- Sentience level\n    CASE\n        WHEN se.designation ILIKE '%sentient%' THEN 'Sentient'\n        ELSE 'Non-sentient'\n    END AS sentience_level,\n    \n    -- Size classification based on average_height\n    CASE\n        WHEN se.average_height::NUMERIC > 200 THEN 'Tall'\n        WHEN se.average_height::NUMERIC BETWEEN 150 AND 200 THEN 'Medium'\n        WHEN se.average_height::NUMERIC > 0 AND se.average_height::NUMERIC < 150 THEN 'Short'\n        ELSE 'Unknown'\n    END AS size_classification,\n    \n    -- Longevity based on average_lifespan\n    CASE\n        WHEN se.average_lifespan::NUMERIC > 500 THEN 'Very Long-Lived'\n        WHEN se.average_lifespan::NUMERIC > 150 THEN 'Long-Lived'\n        WHEN se.average_lifespan::NUMERIC > 70 THEN 'Standard'\n        WHEN se.average_lifespan::NUMERIC > 0 THEN 'Short-Lived'\n        ELSE 'Unknown'\n    END AS longevity_classification,\n    \n    -- Notable Species flag\n    CASE \n        WHEN se.species_name IN ('Human', 'Wookiee', 'Droid', 'Hutt', 'Yoda''s species', \n                              'Zabrak', 'Twi''lek', 'Mon Calamari', 'Ewok', 'Gungan') \n            OR se.film_count >= 3  \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_species,\n    \n    -- Force sensitivity prevalence\n    CASE \n        WHEN se.species_name IN ('Yoda''s species') THEN 'High'\n        WHEN se.species_name IN ('Human', 'Zabrak', 'Togruta') THEN 'Medium'\n        ELSE 'Low/Unknown'\n    END AS force_sensitivity_prevalence,\n    \n    -- Narrative importance\n    CASE\n        WHEN se.film_count >= 3 THEN 'Major'\n        WHEN se.film_count >= 2 THEN 'Significant'\n        WHEN se.film_count = 1 THEN 'Featured'\n        ELSE 'Minor'\n    END AS narrative_importance,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM species_enriched se", "language": "sql", "refs": [{"name": "int_swapi_species", "package": null, "version": null}, {"name": "int_swapi_films_species", "package": null, "version": null}, {"name": "int_swapi_films_species", "package": null, "version": null}, {"name": "int_swapi_films_characters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_species", "model.nerd_facts_dbt.int_swapi_films_species", "model.nerd_facts_dbt.int_swapi_films_characters"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/dim_sw_species.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_species\n  Description: Species dimension table with enriched attributes and classifications\n*/\n\nWITH species_base AS (\n    SELECT\n        s.species_id,\n        s.species_name,  -- Using species_name directly instead of s.name\n        s.classification,\n        s.designation,\n        s.average_height,\n        s.skin_colors,\n        s.hair_colors,\n        s.eye_colors,\n        s.average_lifespan,\n        s.language,\n        s.homeworld AS homeworld_id  -- Use homeworld instead of homeworld_id\n    FROM \"nerd_facts\".\"public\".\"int_swapi_species\" s\n),\n\n-- Film appearances\nfilm_appearances AS (\n    SELECT\n        fs.species_id,\n        COUNT(DISTINCT fs.film_id) AS film_count\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fs\n    GROUP BY fs.species_id\n),\n\n-- Character counts - estimate based on species mentions in films\n-- Since we don't have direct access to character-species relationships\ncharacter_counts AS (\n    SELECT\n        fs.species_id,\n        COUNT(DISTINCT fc.people_id) AS character_count\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fs\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc ON fs.film_id = fc.film_id\n    GROUP BY fs.species_id\n),\n\n-- Enriched species data\nspecies_enriched AS (\n    SELECT\n        sb.*,\n        COALESCE(fa.film_count, 0) AS film_count,\n        COALESCE(cc.character_count, 0) AS character_count\n    FROM species_base sb\n    LEFT JOIN film_appearances fa ON sb.species_id = fa.species_id\n    LEFT JOIN character_counts cc ON sb.species_id = cc.species_id\n)\n\nSELECT\n    -- Primary Key\n    md5(cast(coalesce(cast(se.species_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS species_key,\n    \n    -- Natural Key\n    se.species_id,\n    \n    -- Species Attributes\n    se.species_name,\n    se.classification,\n    se.designation,\n    se.average_height,\n    se.skin_colors,\n    se.hair_colors,\n    se.eye_colors,\n    se.average_lifespan,\n    se.language,\n    se.homeworld_id,\n    \n    -- Related Dimensions\n    md5(cast(coalesce(cast(se.homeworld_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS homeworld_key,\n    \n    -- Appearance Metrics\n    se.film_count,\n    se.character_count,\n    \n    -- Species Classifications\n    CASE\n        WHEN se.classification ILIKE '%mammal%' THEN 'Mammalian'\n        WHEN se.classification ILIKE '%reptile%' THEN 'Reptilian'\n        WHEN se.classification ILIKE '%amphibian%' THEN 'Amphibian'\n        WHEN se.classification ILIKE '%insect%' THEN 'Insectoid'\n        WHEN se.classification ILIKE '%sentient%' THEN 'Sentient'\n        ELSE se.classification\n    END AS species_type,\n    \n    -- Sentience level\n    CASE\n        WHEN se.designation ILIKE '%sentient%' THEN 'Sentient'\n        ELSE 'Non-sentient'\n    END AS sentience_level,\n    \n    -- Size classification based on average_height\n    CASE\n        WHEN se.average_height::NUMERIC > 200 THEN 'Tall'\n        WHEN se.average_height::NUMERIC BETWEEN 150 AND 200 THEN 'Medium'\n        WHEN se.average_height::NUMERIC > 0 AND se.average_height::NUMERIC < 150 THEN 'Short'\n        ELSE 'Unknown'\n    END AS size_classification,\n    \n    -- Longevity based on average_lifespan\n    CASE\n        WHEN se.average_lifespan::NUMERIC > 500 THEN 'Very Long-Lived'\n        WHEN se.average_lifespan::NUMERIC > 150 THEN 'Long-Lived'\n        WHEN se.average_lifespan::NUMERIC > 70 THEN 'Standard'\n        WHEN se.average_lifespan::NUMERIC > 0 THEN 'Short-Lived'\n        ELSE 'Unknown'\n    END AS longevity_classification,\n    \n    -- Notable Species flag\n    CASE \n        WHEN se.species_name IN ('Human', 'Wookiee', 'Droid', 'Hutt', 'Yoda''s species', \n                              'Zabrak', 'Twi''lek', 'Mon Calamari', 'Ewok', 'Gungan') \n            OR se.film_count >= 3  \n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_species,\n    \n    -- Force sensitivity prevalence\n    CASE \n        WHEN se.species_name IN ('Yoda''s species') THEN 'High'\n        WHEN se.species_name IN ('Human', 'Zabrak', 'Togruta') THEN 'Medium'\n        ELSE 'Low/Unknown'\n    END AS force_sensitivity_prevalence,\n    \n    -- Narrative importance\n    CASE\n        WHEN se.film_count >= 3 THEN 'Major'\n        WHEN se.film_count >= 2 THEN 'Significant'\n        WHEN se.film_count = 1 THEN 'Featured'\n        ELSE 'Minor'\n    END AS narrative_importance,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM species_enriched se", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.bridge_sw_characters_films": {"database": "nerd_facts", "schema": "public", "name": "bridge_sw_characters_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/bridge_sw_characters_films.sql", "original_file_path": "models/marts/star_wars/bridge_sw_characters_films.sql", "unique_id": "model.nerd_facts_dbt.bridge_sw_characters_films", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "bridge_sw_characters_films"], "alias": "bridge_sw_characters_films", "checksum": {"name": "sha256", "checksum": "0fb5d3dea724bec07d9d944fad2c24728136b60b04e434944a836b87ffca91f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "character_film_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["character_key"]}, {"columns": ["film_key"]}, {"columns": ["character_film_key"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["character_key"]}, {"columns": ["film_key"]}, {"columns": ["character_film_key"]}], "unique_key": "character_film_key"}, "created_at": 1742909949.696654, "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_characters_films\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['character_key']}, {'columns': ['film_key']}, {'columns': ['character_film_key']}],\n    unique_key = 'character_film_key'\n  )\n}}\n\n/*\n  Model: bridge_sw_characters_films\n  Description: Bridge table connecting characters and films with enriched relationship attributes\n*/\n\nWITH character_film_base AS (\n  SELECT\n    fc.film_id,\n    fc.people_id AS character_id,\n    f.title AS film_title,\n    f.episode_id,\n    p.name AS character_name,\n    f.release_date,\n    p.gender,\n    p.birth_year\n  FROM {{ ref('int_swapi_films_characters') }} fc\n  JOIN {{ ref('int_swapi_films') }} f ON fc.film_id = f.film_id\n  JOIN {{ ref('int_swapi_people') }} p ON fc.people_id = p.people_id\n),\n\n-- Character importance tiers\ncharacter_importance AS (\n  SELECT \n    cfb.*,\n    CASE\n      -- Protagonist/Antagonist tier - central characters\n      WHEN cfb.character_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', \n                              'Rey', 'Kylo Ren', 'Din Djarin', 'Grogu') \n        THEN 'Protagonist/Antagonist'\n      \n      -- Major characters\n      WHEN cfb.character_name IN ('Han Solo', 'Leia Organa', 'Obi-Wan Kenobi', \n                              'Emperor Palpatine', 'Finn', 'Poe Dameron',\n                              'Padm\u00e9 Amidala', 'Count Dooku', 'Qui-Gon Jinn',\n                              'Darth Maul', 'Jyn Erso', 'Cassian Andor', 'Boba Fett') \n        THEN 'Major'\n      \n      -- Supporting characters\n      WHEN cfb.character_name IN ('Chewbacca', 'C-3PO', 'R2-D2', 'Yoda', \n                              'Lando Calrissian', 'Mace Windu', 'General Grievous', \n                              'Admiral Ackbar', 'BB-8', 'General Hux', 'Rose Tico',\n                              'Moff Gideon', 'Saw Gerrera', 'Jabba the Hutt',\n                              'Ahsoka Tano') \n        THEN 'Supporting'\n                              \n      -- Additional major characters by ID\n      WHEN cfb.character_id IN (1, 2, 3, 4, 5, 10, 11, 13) \n        THEN 'Major'\n      \n      -- Characters with more details are likely more important\n      WHEN cfb.gender IS NOT NULL AND cfb.birth_year IS NOT NULL \n        THEN 'Notable'\n      \n      ELSE 'Minor'\n    END AS character_importance_tier\n  FROM character_film_base cfb\n),\n\n-- Add trilogy and film appearance information\ncharacter_film_enriched AS (\n  SELECT \n    ci.*,\n    -- Trilogy classification\n    CASE\n      WHEN ci.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n      WHEN ci.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n      WHEN ci.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n      ELSE 'Anthology Films'\n    END AS trilogy,\n    \n    -- Extract year for easier querying\n    EXTRACT(YEAR FROM ci.release_date) AS release_year,\n    \n    -- Character appearance metrics\n    COUNT(*) OVER (PARTITION BY ci.character_id) AS character_film_count,\n    (SELECT COUNT(DISTINCT film_id) FROM {{ ref('int_swapi_films') }}) AS total_films,\n    \n    -- Order of appearance\n    ROW_NUMBER() OVER (\n      PARTITION BY ci.character_id \n      ORDER BY COALESCE(ci.episode_id, 999)\n    ) AS chronological_appearance_number,\n    \n    ROW_NUMBER() OVER (\n      PARTITION BY ci.character_id \n      ORDER BY ci.release_date\n    ) AS release_order_appearance_number\n  FROM character_importance ci\n)\n\nSELECT\n  -- Primary Key\n  {{ dbt_utils.generate_surrogate_key(['cfe.character_id', 'cfe.film_id']) }} AS character_film_key,\n  \n  -- Foreign Keys\n  {{ dbt_utils.generate_surrogate_key(['cfe.character_id']) }} AS character_key,\n  {{ dbt_utils.generate_surrogate_key(['cfe.film_id']) }} AS film_key,\n  \n  -- Source IDs\n  cfe.character_id,\n  cfe.film_id,\n  \n  -- Basic Attributes\n  cfe.character_name,\n  cfe.film_title,\n  cfe.episode_id,\n  \n  -- Character role in film\n  cfe.character_importance_tier AS character_role,\n  \n  -- Film categorization\n  cfe.trilogy AS film_saga,\n  cfe.release_year,\n  \n  -- Appearance metrics\n  cfe.chronological_appearance_number,\n  cfe.release_order_appearance_number,\n  cfe.character_film_count,\n  \n  -- Character appearance percentage across all films\n  ROUND((cfe.character_film_count * 100.0 / NULLIF(cfe.total_films, 0)), 1) AS saga_appearance_percentage,\n  \n  -- Timeline attributes\n  CASE WHEN cfe.chronological_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_chronological_appearance,\n  CASE WHEN cfe.release_order_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_release_appearance,\n  \n  -- Narrative role in specific films\n  CASE \n    WHEN cfe.character_name IN ('Darth Vader', 'Anakin Skywalker') AND \n         cfe.episode_id BETWEEN 1 AND 3 THEN 'Protagonist'\n    WHEN cfe.character_name IN ('Darth Vader') AND \n         cfe.episode_id BETWEEN 4 AND 6 THEN 'Antagonist'\n    WHEN cfe.character_name = 'Luke Skywalker' AND \n         cfe.episode_id BETWEEN 4 AND 6 THEN 'Protagonist'\n    WHEN cfe.character_name = 'Rey' AND \n         cfe.episode_id BETWEEN 7 AND 9 THEN 'Protagonist'\n    WHEN cfe.character_name = 'Kylo Ren' AND \n         cfe.episode_id BETWEEN 7 AND 8 THEN 'Antagonist'\n    WHEN cfe.character_name = 'Kylo Ren' AND \n         cfe.episode_id = 9 THEN 'Protagonist'\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' THEN 'Key Character'\n    WHEN cfe.character_importance_tier = 'Major' THEN 'Major Character'\n    ELSE 'Supporting Character'\n  END AS narrative_role,\n  \n  -- Character alignment (light side/dark side)\n  CASE \n    WHEN cfe.character_name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul',\n                            'Count Dooku', 'General Grievous', 'Kylo Ren',\n                            'Captain Phasma', 'General Hux', 'Moff Tarkin',\n                            'Jabba the Hutt', 'Boba Fett', 'Jango Fett') \n      THEN 'Villain'\n    WHEN cfe.character_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo',\n                            'Obi-Wan Kenobi', 'Yoda', 'Rey', 'Finn', 'Poe Dameron',\n                            'Padm\u00e9 Amidala', 'Qui-Gon Jinn', 'Mace Windu') \n      THEN 'Hero'\n    WHEN cfe.character_name IN ('Lando Calrissian', 'Anakin Skywalker') \n      THEN 'Ambiguous'\n    ELSE 'Neutral'\n  END AS character_alignment,\n  \n  -- Film significance\n  CASE\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' AND\n         ((cfe.character_name = 'Luke Skywalker' AND cfe.episode_id IN (4, 5, 6)) OR\n          (cfe.character_name = 'Anakin Skywalker' AND cfe.episode_id IN (1, 2, 3)) OR\n          (cfe.character_name = 'Darth Vader' AND cfe.episode_id IN (4, 5, 6)) OR\n          (cfe.character_name = 'Rey' AND cfe.episode_id IN (7, 8, 9)) OR\n          (cfe.character_name = 'Kylo Ren' AND cfe.episode_id IN (7, 8, 9))) \n      THEN 'Pivotal'\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' \n      THEN 'Crucial'\n    WHEN cfe.character_importance_tier = 'Major' \n      THEN 'Significant'\n    WHEN cfe.character_importance_tier = 'Supporting' \n      THEN 'Important'\n    ELSE 'Background'\n  END AS film_significance,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n  \nFROM character_film_enriched cfe\nORDER BY \n  COALESCE(cfe.episode_id, 999),\n  cfe.character_importance_tier,\n  cfe.character_name", "language": "sql", "refs": [{"name": "int_swapi_films_characters", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}, {"name": "int_swapi_people", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/bridge_sw_characters_films.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_sw_characters_films\n  Description: Bridge table connecting characters and films with enriched relationship attributes\n*/\n\nWITH character_film_base AS (\n  SELECT\n    fc.film_id,\n    fc.people_id AS character_id,\n    f.title AS film_title,\n    f.episode_id,\n    p.name AS character_name,\n    f.release_date,\n    p.gender,\n    p.birth_year\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fc.film_id = f.film_id\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_people\" p ON fc.people_id = p.people_id\n),\n\n-- Character importance tiers\ncharacter_importance AS (\n  SELECT \n    cfb.*,\n    CASE\n      -- Protagonist/Antagonist tier - central characters\n      WHEN cfb.character_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', \n                              'Rey', 'Kylo Ren', 'Din Djarin', 'Grogu') \n        THEN 'Protagonist/Antagonist'\n      \n      -- Major characters\n      WHEN cfb.character_name IN ('Han Solo', 'Leia Organa', 'Obi-Wan Kenobi', \n                              'Emperor Palpatine', 'Finn', 'Poe Dameron',\n                              'Padm\u00e9 Amidala', 'Count Dooku', 'Qui-Gon Jinn',\n                              'Darth Maul', 'Jyn Erso', 'Cassian Andor', 'Boba Fett') \n        THEN 'Major'\n      \n      -- Supporting characters\n      WHEN cfb.character_name IN ('Chewbacca', 'C-3PO', 'R2-D2', 'Yoda', \n                              'Lando Calrissian', 'Mace Windu', 'General Grievous', \n                              'Admiral Ackbar', 'BB-8', 'General Hux', 'Rose Tico',\n                              'Moff Gideon', 'Saw Gerrera', 'Jabba the Hutt',\n                              'Ahsoka Tano') \n        THEN 'Supporting'\n                              \n      -- Additional major characters by ID\n      WHEN cfb.character_id IN (1, 2, 3, 4, 5, 10, 11, 13) \n        THEN 'Major'\n      \n      -- Characters with more details are likely more important\n      WHEN cfb.gender IS NOT NULL AND cfb.birth_year IS NOT NULL \n        THEN 'Notable'\n      \n      ELSE 'Minor'\n    END AS character_importance_tier\n  FROM character_film_base cfb\n),\n\n-- Add trilogy and film appearance information\ncharacter_film_enriched AS (\n  SELECT \n    ci.*,\n    -- Trilogy classification\n    CASE\n      WHEN ci.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n      WHEN ci.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n      WHEN ci.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n      ELSE 'Anthology Films'\n    END AS trilogy,\n    \n    -- Extract year for easier querying\n    EXTRACT(YEAR FROM ci.release_date) AS release_year,\n    \n    -- Character appearance metrics\n    COUNT(*) OVER (PARTITION BY ci.character_id) AS character_film_count,\n    (SELECT COUNT(DISTINCT film_id) FROM \"nerd_facts\".\"public\".\"int_swapi_films\") AS total_films,\n    \n    -- Order of appearance\n    ROW_NUMBER() OVER (\n      PARTITION BY ci.character_id \n      ORDER BY COALESCE(ci.episode_id, 999)\n    ) AS chronological_appearance_number,\n    \n    ROW_NUMBER() OVER (\n      PARTITION BY ci.character_id \n      ORDER BY ci.release_date\n    ) AS release_order_appearance_number\n  FROM character_importance ci\n)\n\nSELECT\n  -- Primary Key\n  md5(cast(coalesce(cast(cfe.character_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(cfe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_film_key,\n  \n  -- Foreign Keys\n  md5(cast(coalesce(cast(cfe.character_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n  md5(cast(coalesce(cast(cfe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n  \n  -- Source IDs\n  cfe.character_id,\n  cfe.film_id,\n  \n  -- Basic Attributes\n  cfe.character_name,\n  cfe.film_title,\n  cfe.episode_id,\n  \n  -- Character role in film\n  cfe.character_importance_tier AS character_role,\n  \n  -- Film categorization\n  cfe.trilogy AS film_saga,\n  cfe.release_year,\n  \n  -- Appearance metrics\n  cfe.chronological_appearance_number,\n  cfe.release_order_appearance_number,\n  cfe.character_film_count,\n  \n  -- Character appearance percentage across all films\n  ROUND((cfe.character_film_count * 100.0 / NULLIF(cfe.total_films, 0)), 1) AS saga_appearance_percentage,\n  \n  -- Timeline attributes\n  CASE WHEN cfe.chronological_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_chronological_appearance,\n  CASE WHEN cfe.release_order_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_release_appearance,\n  \n  -- Narrative role in specific films\n  CASE \n    WHEN cfe.character_name IN ('Darth Vader', 'Anakin Skywalker') AND \n         cfe.episode_id BETWEEN 1 AND 3 THEN 'Protagonist'\n    WHEN cfe.character_name IN ('Darth Vader') AND \n         cfe.episode_id BETWEEN 4 AND 6 THEN 'Antagonist'\n    WHEN cfe.character_name = 'Luke Skywalker' AND \n         cfe.episode_id BETWEEN 4 AND 6 THEN 'Protagonist'\n    WHEN cfe.character_name = 'Rey' AND \n         cfe.episode_id BETWEEN 7 AND 9 THEN 'Protagonist'\n    WHEN cfe.character_name = 'Kylo Ren' AND \n         cfe.episode_id BETWEEN 7 AND 8 THEN 'Antagonist'\n    WHEN cfe.character_name = 'Kylo Ren' AND \n         cfe.episode_id = 9 THEN 'Protagonist'\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' THEN 'Key Character'\n    WHEN cfe.character_importance_tier = 'Major' THEN 'Major Character'\n    ELSE 'Supporting Character'\n  END AS narrative_role,\n  \n  -- Character alignment (light side/dark side)\n  CASE \n    WHEN cfe.character_name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul',\n                            'Count Dooku', 'General Grievous', 'Kylo Ren',\n                            'Captain Phasma', 'General Hux', 'Moff Tarkin',\n                            'Jabba the Hutt', 'Boba Fett', 'Jango Fett') \n      THEN 'Villain'\n    WHEN cfe.character_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo',\n                            'Obi-Wan Kenobi', 'Yoda', 'Rey', 'Finn', 'Poe Dameron',\n                            'Padm\u00e9 Amidala', 'Qui-Gon Jinn', 'Mace Windu') \n      THEN 'Hero'\n    WHEN cfe.character_name IN ('Lando Calrissian', 'Anakin Skywalker') \n      THEN 'Ambiguous'\n    ELSE 'Neutral'\n  END AS character_alignment,\n  \n  -- Film significance\n  CASE\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' AND\n         ((cfe.character_name = 'Luke Skywalker' AND cfe.episode_id IN (4, 5, 6)) OR\n          (cfe.character_name = 'Anakin Skywalker' AND cfe.episode_id IN (1, 2, 3)) OR\n          (cfe.character_name = 'Darth Vader' AND cfe.episode_id IN (4, 5, 6)) OR\n          (cfe.character_name = 'Rey' AND cfe.episode_id IN (7, 8, 9)) OR\n          (cfe.character_name = 'Kylo Ren' AND cfe.episode_id IN (7, 8, 9))) \n      THEN 'Pivotal'\n    WHEN cfe.character_importance_tier = 'Protagonist/Antagonist' \n      THEN 'Crucial'\n    WHEN cfe.character_importance_tier = 'Major' \n      THEN 'Significant'\n    WHEN cfe.character_importance_tier = 'Supporting' \n      THEN 'Important'\n    ELSE 'Background'\n  END AS film_significance,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n  \nFROM character_film_enriched cfe\nORDER BY \n  COALESCE(cfe.episode_id, 999),\n  cfe.character_importance_tier,\n  cfe.character_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_films": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_films", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_films.sql", "original_file_path": "models/marts/star_wars/dim_sw_films.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_films", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_films"], "alias": "dim_sw_films", "checksum": {"name": "sha256", "checksum": "4aeb21183604f9610d2d4c1f888f06dcf301d23f6a518430e6a9bc68e765b25d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "film_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["film_key"]}, {"columns": ["film_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["film_key"]}, {"columns": ["film_id"]}], "unique_key": "film_key"}, "created_at": 1742909949.7063403, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_films\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['film_key']}, {'columns': ['film_id']}],\n    unique_key = 'film_key'\n  )\n}}\n\n/*\n  Model: dim_sw_films\n  Description: Film dimension table with enriched attributes\n*/\n\nWITH film_base AS (\n  SELECT\n    f.film_id,\n    f.title,\n    f.episode_id,\n    f.opening_crawl,\n    f.director,\n    f.producer,\n    f.release_date\n  FROM {{ ref('int_swapi_films') }} f\n),\n\n-- Character counts\ncharacter_counts AS (\n  SELECT\n    fc.film_id,\n    COUNT(DISTINCT fc.people_id) AS character_count\n  FROM {{ ref('int_swapi_films_characters') }} fc\n  GROUP BY fc.film_id\n),\n\n-- Planet counts\nplanet_counts AS (\n  SELECT\n    fp.film_id,\n    COUNT(DISTINCT fp.planet_id) AS planet_count\n  FROM {{ ref('int_swapi_films_planets') }} fp\n  GROUP BY fp.film_id\n),\n\n-- Vehicle counts\nvehicle_counts AS (\n  SELECT\n    fv.film_id,\n    COUNT(DISTINCT fv.vehicle_id) AS vehicle_count\n  FROM {{ ref('int_swapi_films_vehicles') }} fv\n  GROUP BY fv.film_id\n),\n\n-- Starship counts\nstarship_counts AS (\n  SELECT\n    fs.film_id,\n    COUNT(DISTINCT fs.starship_id) AS starship_count\n  FROM {{ ref('int_swapi_films_starships') }} fs\n  GROUP BY fs.film_id\n),\n\n-- Species counts\nspecies_counts AS (\n  SELECT\n    fsp.film_id,\n    COUNT(DISTINCT fsp.species_id) AS species_count\n  FROM {{ ref('int_swapi_films_species') }} fsp\n  GROUP BY fsp.film_id\n)\n\nSELECT\n  -- Primary Key\n  {{ dbt_utils.generate_surrogate_key(['fb.film_id']) }} AS film_key,\n  \n  -- Natural Key\n  fb.film_id,\n  \n  -- Film Attributes\n  fb.title AS film_title,\n  fb.episode_id,\n  fb.opening_crawl,\n  fb.director,\n  fb.producer,\n  fb.release_date,\n  \n  -- Film Classification\n  CASE\n    WHEN fb.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n    WHEN fb.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n    WHEN fb.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n    ELSE 'Anthology Films'\n  END AS film_saga,\n  \n  CASE\n    WHEN fb.episode_id BETWEEN 1 AND 3 THEN 'Republic Era'\n    WHEN fb.episode_id BETWEEN 4 AND 6 THEN 'Imperial Era'\n    WHEN fb.episode_id BETWEEN 7 AND 9 THEN 'New Republic Era'\n    ELSE 'Various'\n  END AS era,\n  \n  -- Release information\n  EXTRACT(YEAR FROM fb.release_date) AS release_year,\n  \n  -- Entity counts\n  COALESCE(cc.character_count, 0) AS character_count,\n  COALESCE(pc.planet_count, 0) AS planet_count,\n  COALESCE(vc.vehicle_count, 0) AS vehicle_count,\n  COALESCE(sc.starship_count, 0) AS starship_count,\n  COALESCE(spc.species_count, 0) AS species_count,\n  \n  -- Calculated metrics\n  COALESCE(cc.character_count, 0) + \n  COALESCE(pc.planet_count, 0) + \n  COALESCE(vc.vehicle_count, 0) + \n  COALESCE(sc.starship_count, 0) + \n  COALESCE(spc.species_count, 0) AS total_entity_count,\n  \n  -- Cast size classification\n  CASE\n    WHEN COALESCE(cc.character_count, 0) <= 10 THEN 'Small Cast'\n    WHEN COALESCE(cc.character_count, 0) <= 25 THEN 'Medium Cast'\n    ELSE 'Large Cast'\n  END AS cast_size_category,\n  \n  -- Film importance\n  CASE\n    WHEN fb.episode_id IN (4, 5, 6) THEN 'Foundational'\n    WHEN fb.episode_id IN (1, 2, 3, 7, 8, 9) THEN 'Main Saga'\n    ELSE 'Extended Universe'\n  END AS film_importance,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM film_base fb\nLEFT JOIN character_counts cc ON fb.film_id = cc.film_id\nLEFT JOIN planet_counts pc ON fb.film_id = pc.film_id\nLEFT JOIN vehicle_counts vc ON fb.film_id = vc.film_id\nLEFT JOIN starship_counts sc ON fb.film_id = sc.film_id\nLEFT JOIN species_counts spc ON fb.film_id = spc.film_id\nORDER BY fb.episode_id", "language": "sql", "refs": [{"name": "int_swapi_films", "package": null, "version": null}, {"name": "int_swapi_films_characters", "package": null, "version": null}, {"name": "int_swapi_films_planets", "package": null, "version": null}, {"name": "int_swapi_films_vehicles", "package": null, "version": null}, {"name": "int_swapi_films_starships", "package": null, "version": null}, {"name": "int_swapi_films_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_films_vehicles", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_films_species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/dim_sw_films.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_films\n  Description: Film dimension table with enriched attributes\n*/\n\nWITH film_base AS (\n  SELECT\n    f.film_id,\n    f.title,\n    f.episode_id,\n    f.opening_crawl,\n    f.director,\n    f.producer,\n    f.release_date\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films\" f\n),\n\n-- Character counts\ncharacter_counts AS (\n  SELECT\n    fc.film_id,\n    COUNT(DISTINCT fc.people_id) AS character_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  GROUP BY fc.film_id\n),\n\n-- Planet counts\nplanet_counts AS (\n  SELECT\n    fp.film_id,\n    COUNT(DISTINCT fp.planet_id) AS planet_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n  GROUP BY fp.film_id\n),\n\n-- Vehicle counts\nvehicle_counts AS (\n  SELECT\n    fv.film_id,\n    COUNT(DISTINCT fv.vehicle_id) AS vehicle_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_vehicles\" fv\n  GROUP BY fv.film_id\n),\n\n-- Starship counts\nstarship_counts AS (\n  SELECT\n    fs.film_id,\n    COUNT(DISTINCT fs.starship_id) AS starship_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n  GROUP BY fs.film_id\n),\n\n-- Species counts\nspecies_counts AS (\n  SELECT\n    fsp.film_id,\n    COUNT(DISTINCT fsp.species_id) AS species_count\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_species\" fsp\n  GROUP BY fsp.film_id\n)\n\nSELECT\n  -- Primary Key\n  md5(cast(coalesce(cast(fb.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n  \n  -- Natural Key\n  fb.film_id,\n  \n  -- Film Attributes\n  fb.title AS film_title,\n  fb.episode_id,\n  fb.opening_crawl,\n  fb.director,\n  fb.producer,\n  fb.release_date,\n  \n  -- Film Classification\n  CASE\n    WHEN fb.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n    WHEN fb.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n    WHEN fb.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n    ELSE 'Anthology Films'\n  END AS film_saga,\n  \n  CASE\n    WHEN fb.episode_id BETWEEN 1 AND 3 THEN 'Republic Era'\n    WHEN fb.episode_id BETWEEN 4 AND 6 THEN 'Imperial Era'\n    WHEN fb.episode_id BETWEEN 7 AND 9 THEN 'New Republic Era'\n    ELSE 'Various'\n  END AS era,\n  \n  -- Release information\n  EXTRACT(YEAR FROM fb.release_date) AS release_year,\n  \n  -- Entity counts\n  COALESCE(cc.character_count, 0) AS character_count,\n  COALESCE(pc.planet_count, 0) AS planet_count,\n  COALESCE(vc.vehicle_count, 0) AS vehicle_count,\n  COALESCE(sc.starship_count, 0) AS starship_count,\n  COALESCE(spc.species_count, 0) AS species_count,\n  \n  -- Calculated metrics\n  COALESCE(cc.character_count, 0) + \n  COALESCE(pc.planet_count, 0) + \n  COALESCE(vc.vehicle_count, 0) + \n  COALESCE(sc.starship_count, 0) + \n  COALESCE(spc.species_count, 0) AS total_entity_count,\n  \n  -- Cast size classification\n  CASE\n    WHEN COALESCE(cc.character_count, 0) <= 10 THEN 'Small Cast'\n    WHEN COALESCE(cc.character_count, 0) <= 25 THEN 'Medium Cast'\n    ELSE 'Large Cast'\n  END AS cast_size_category,\n  \n  -- Film importance\n  CASE\n    WHEN fb.episode_id IN (4, 5, 6) THEN 'Foundational'\n    WHEN fb.episode_id IN (1, 2, 3, 7, 8, 9) THEN 'Main Saga'\n    ELSE 'Extended Universe'\n  END AS film_importance,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM film_base fb\nLEFT JOIN character_counts cc ON fb.film_id = cc.film_id\nLEFT JOIN planet_counts pc ON fb.film_id = pc.film_id\nLEFT JOIN vehicle_counts vc ON fb.film_id = vc.film_id\nLEFT JOIN starship_counts sc ON fb.film_id = sc.film_id\nLEFT JOIN species_counts spc ON fb.film_id = spc.film_id\nORDER BY fb.episode_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.fact_starships": {"database": "nerd_facts", "schema": "public", "name": "fact_starships", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/fact_starships.sql", "original_file_path": "models/marts/star_wars/fact_starships.sql", "unique_id": "model.nerd_facts_dbt.fact_starships", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "fact_starships"], "alias": "fact_starships", "checksum": {"name": "sha256", "checksum": "539f5d147b6c209ac86508e5b9390f03d7f207655fa9e19de0e37758ee089fe4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "starship_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["starship_id"]}, {"columns": ["starship_class"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["starship_id"]}, {"columns": ["starship_class"]}], "unique_key": "starship_key"}, "created_at": 1742909949.7144592, "relation_name": "\"nerd_facts\".\"public\".\"fact_starships\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['starship_id']}, {'columns': ['starship_class']}],\n    unique_key = 'starship_key'\n  )\n}}\n\n/*\n  Model: fact_starships (simplified)\n  Description: Fact table for Star Wars starships with basic fields\n*/\n\nWITH starships AS (\n    SELECT\n        s.starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.cost_in_credits,\n        s.length,\n        s.max_atmosphering_speed,\n        s.crew,\n        s.passengers,\n        s.cargo_capacity,\n        s.consumables,\n        s.hyperdrive_rating,\n        s.MGLT,\n        s.starship_class\n    FROM {{ ref('int_swapi_starships') }} s\n    WHERE s.starship_id IS NOT NULL\n),\n\n-- Get film data for starships\nstarship_films AS (\n    SELECT\n        fs.starship_id,\n        COUNT(DISTINCT fs.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM {{ ref('int_swapi_films_starships') }} fs\n    JOIN {{ ref('int_swapi_films') }} f ON fs.film_id = f.film_id\n    GROUP BY fs.starship_id\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['s.starship_id']) }} AS starship_key,\n    \n    -- Core identifiers\n    s.starship_id,\n    s.starship_name,\n    s.model,\n    s.manufacturer,\n    \n    -- Classification\n    s.starship_class,\n    \n    -- Basic metrics with safe type handling\n    CASE WHEN s.cost_in_credits::TEXT ~ '^[0-9]+$' THEN s.cost_in_credits::NUMERIC ELSE NULL END AS cost_credits,\n    CASE WHEN s.length::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.length::NUMERIC ELSE NULL END AS length_m,\n    CASE WHEN s.max_atmosphering_speed::TEXT ~ '^[0-9]+$' THEN s.max_atmosphering_speed::NUMERIC ELSE NULL END AS max_speed,\n    CASE WHEN s.hyperdrive_rating::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.hyperdrive_rating::NUMERIC ELSE NULL END AS hyperdrive,\n    CASE WHEN s.MGLT::TEXT ~ '^[0-9]+$' THEN s.MGLT::NUMERIC ELSE NULL END AS MGLT,\n    \n    -- Film appearances\n    COALESCE(sf.film_count, 0) AS film_count,\n    COALESCE(sf.film_names, 'None') AS film_appearances,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starships s\nLEFT JOIN starship_films sf ON s.starship_id = sf.starship_id\nORDER BY s.starship_id", "language": "sql", "refs": [{"name": "int_swapi_starships", "package": null, "version": null}, {"name": "int_swapi_films_starships", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_starships", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/fact_starships.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: fact_starships (simplified)\n  Description: Fact table for Star Wars starships with basic fields\n*/\n\nWITH starships AS (\n    SELECT\n        s.starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.cost_in_credits,\n        s.length,\n        s.max_atmosphering_speed,\n        s.crew,\n        s.passengers,\n        s.cargo_capacity,\n        s.consumables,\n        s.hyperdrive_rating,\n        s.MGLT,\n        s.starship_class\n    FROM \"nerd_facts\".\"public\".\"int_swapi_starships\" s\n    WHERE s.starship_id IS NOT NULL\n),\n\n-- Get film data for starships\nstarship_films AS (\n    SELECT\n        fs.starship_id,\n        COUNT(DISTINCT fs.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fs.film_id = f.film_id\n    GROUP BY fs.starship_id\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(s.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS starship_key,\n    \n    -- Core identifiers\n    s.starship_id,\n    s.starship_name,\n    s.model,\n    s.manufacturer,\n    \n    -- Classification\n    s.starship_class,\n    \n    -- Basic metrics with safe type handling\n    CASE WHEN s.cost_in_credits::TEXT ~ '^[0-9]+$' THEN s.cost_in_credits::NUMERIC ELSE NULL END AS cost_credits,\n    CASE WHEN s.length::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.length::NUMERIC ELSE NULL END AS length_m,\n    CASE WHEN s.max_atmosphering_speed::TEXT ~ '^[0-9]+$' THEN s.max_atmosphering_speed::NUMERIC ELSE NULL END AS max_speed,\n    CASE WHEN s.hyperdrive_rating::TEXT ~ '^[0-9]+(\\.[0-9]+)?$' THEN s.hyperdrive_rating::NUMERIC ELSE NULL END AS hyperdrive,\n    CASE WHEN s.MGLT::TEXT ~ '^[0-9]+$' THEN s.MGLT::NUMERIC ELSE NULL END AS MGLT,\n    \n    -- Film appearances\n    COALESCE(sf.film_count, 0) AS film_count,\n    COALESCE(sf.film_names, 'None') AS film_appearances,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starships s\nLEFT JOIN starship_films sf ON s.starship_id = sf.starship_id\nORDER BY s.starship_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_characters": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_characters", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_characters.sql", "original_file_path": "models/marts/star_wars/dim_sw_characters.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_characters", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_characters"], "alias": "dim_sw_characters", "checksum": {"name": "sha256", "checksum": "daebe602f3d195598984adc927876b03c4aa5ee55e92e39876a09b7ef779ed0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "character_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["character_key"]}, {"columns": ["people_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["character_key"]}, {"columns": ["people_id"]}], "unique_key": "character_key"}, "created_at": 1742909949.7220614, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_characters\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['character_key']}, {'columns': ['people_id']}],\n    unique_key = 'character_key'\n  )\n}}\n\n/*\n  Model: dim_sw_characters\n  Description: Character dimension table with enriched attributes\n*/\n\nWITH character_base AS (\n  SELECT\n    p.people_id,\n    p.name,\n    p.height,\n    p.mass,\n    p.hair_color,\n    p.skin_color,\n    p.eye_color,\n    p.birth_year,\n    p.gender,\n    p.homeworld_id   -- Fixed: Changed from p.homeworld to p.homeworld_id\n  FROM {{ ref('int_swapi_people') }} p\n),\n\n-- Get homeworld information\nhomeworld_info AS (\n  SELECT \n    p.people_id,\n    pl.name AS homeworld_name\n  FROM {{ ref('int_swapi_people') }} p\n  LEFT JOIN {{ ref('int_swapi_planets') }} pl ON p.homeworld_id::INTEGER = pl.planet_id\n),\n\n-- Calculate film appearances\nfilm_appearances AS (\n  SELECT\n    fc.people_id,\n    COUNT(DISTINCT fc.film_id) AS film_count,\n    STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n  FROM {{ ref('int_swapi_films_characters') }} fc\n  JOIN {{ ref('int_swapi_films') }} f ON fc.film_id = f.film_id\n  GROUP BY fc.people_id\n)\n\nSELECT\n  -- Primary Key\n  {{ dbt_utils.generate_surrogate_key(['cb.people_id']) }} AS character_key,\n  \n  -- Natural Key\n  cb.people_id,\n  \n  -- Character Attributes\n  cb.name AS character_name,\n  cb.height::NUMERIC AS height_cm,\n  cb.mass::NUMERIC AS mass_kg,\n  cb.hair_color,\n  cb.skin_color,\n  cb.eye_color,\n  cb.birth_year,\n  cb.gender,\n  \n  -- Homeworld information\n  hi.homeworld_name,\n  \n  -- Film appearances\n  COALESCE(fa.film_count, 0) AS film_count,\n  COALESCE(fa.film_appearances, 'None') AS film_appearances,\n  \n  -- Character Classification\n  CASE\n    -- Protagonist/Antagonist tier - central characters\n    WHEN cb.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', \n                     'Rey', 'Kylo Ren', 'Din Djarin', 'Grogu') \n        THEN 'Protagonist/Antagonist'\n    \n    -- Major characters\n    WHEN cb.name IN ('Han Solo', 'Leia Organa', 'Obi-Wan Kenobi', \n                    'Emperor Palpatine', 'Finn', 'Poe Dameron',\n                    'Padm\u00e9 Amidala', 'Count Dooku', 'Qui-Gon Jinn',\n                    'Darth Maul', 'Jyn Erso', 'Cassian Andor', 'Boba Fett') \n        THEN 'Major'\n    \n    -- Supporting characters\n    WHEN cb.name IN ('Chewbacca', 'C-3PO', 'R2-D2', 'Yoda', \n                    'Lando Calrissian', 'Mace Windu', 'General Grievous', \n                    'Admiral Ackbar', 'BB-8', 'General Hux', 'Rose Tico',\n                    'Moff Gideon', 'Saw Gerrera', 'Jabba the Hutt',\n                    'Ahsoka Tano') \n        THEN 'Supporting'\n                                \n    -- Characters with many appearances are likely more important\n    WHEN COALESCE(fa.film_count, 0) >= 3\n        THEN 'Notable'\n    \n    -- Characters with more details are likely more important\n    WHEN cb.gender IS NOT NULL AND cb.birth_year IS NOT NULL \n        THEN 'Notable'\n    \n    ELSE 'Minor'\n  END AS character_importance_tier,\n  \n  -- Character alignment\n  CASE \n    WHEN cb.name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul',\n                        'Count Dooku', 'General Grievous', 'Kylo Ren',\n                        'Captain Phasma', 'General Hux', 'Moff Tarkin',\n                        'Jabba the Hutt', 'Boba Fett', 'Jango Fett')\n        THEN 'Villain'\n        \n    WHEN cb.name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo',\n                        'Obi-Wan Kenobi', 'Yoda', 'Rey', 'Finn', 'Poe Dameron',\n                        'Padm\u00e9 Amidala', 'Qui-Gon Jinn', 'Mace Windu')\n        THEN 'Hero'\n        \n    WHEN cb.name IN ('Lando Calrissian', 'Anakin Skywalker')\n        THEN 'Ambiguous'\n        \n    ELSE 'Neutral'\n  END AS character_alignment,\n  \n  -- Character Type\n  CASE \n    WHEN cb.name LIKE '%Droid%' OR cb.name IN ('C-3PO', 'R2-D2', 'BB-8') THEN 'Droid'\n    WHEN cb.name IN ('Jabba the Hutt') THEN 'Hutt'\n    WHEN cb.name IN ('Yoda', 'Grogu') THEN 'Unknown Species'\n    WHEN cb.name IN ('Chewbacca') THEN 'Wookiee'\n    ELSE 'Humanoid'\n  END AS character_type,\n  \n  -- Force user\n  CASE \n    WHEN cb.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                   'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                   'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n    THEN TRUE\n    ELSE FALSE\n  END AS is_force_user,\n  \n  -- Force alignment\n  CASE \n    WHEN cb.name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul', \n                   'Count Dooku', 'Kylo Ren')\n    THEN 'Dark Side'\n    \n    WHEN cb.name IN ('Luke Skywalker', 'Obi-Wan Kenobi', 'Yoda', 'Rey',\n                   'Mace Windu', 'Qui-Gon Jinn', 'Ahsoka Tano') \n    THEN 'Light Side'\n    \n    WHEN cb.name IN ('Anakin Skywalker')\n    THEN 'Both (Changed)'\n    \n    ELSE NULL\n  END AS force_alignment,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM character_base cb\nLEFT JOIN homeworld_info hi ON cb.people_id = hi.people_id\nLEFT JOIN film_appearances fa ON cb.people_id = fa.people_id\nWHERE cb.people_id IS NOT NULL\nORDER BY \n  CASE \n    WHEN COALESCE(fa.film_count, 0) >= 3 THEN 0\n    ELSE 1\n  END,\n  COALESCE(fa.film_count, 0) DESC,\n  cb.name", "language": "sql", "refs": [{"name": "int_swapi_people", "package": null, "version": null}, {"name": "int_swapi_people", "package": null, "version": null}, {"name": "int_swapi_planets", "package": null, "version": null}, {"name": "int_swapi_films_characters", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_people", "model.nerd_facts_dbt.int_swapi_planets", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/dim_sw_characters.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_characters\n  Description: Character dimension table with enriched attributes\n*/\n\nWITH character_base AS (\n  SELECT\n    p.people_id,\n    p.name,\n    p.height,\n    p.mass,\n    p.hair_color,\n    p.skin_color,\n    p.eye_color,\n    p.birth_year,\n    p.gender,\n    p.homeworld_id   -- Fixed: Changed from p.homeworld to p.homeworld_id\n  FROM \"nerd_facts\".\"public\".\"int_swapi_people\" p\n),\n\n-- Get homeworld information\nhomeworld_info AS (\n  SELECT \n    p.people_id,\n    pl.name AS homeworld_name\n  FROM \"nerd_facts\".\"public\".\"int_swapi_people\" p\n  LEFT JOIN \"nerd_facts\".\"public\".\"int_swapi_planets\" pl ON p.homeworld_id::INTEGER = pl.planet_id\n),\n\n-- Calculate film appearances\nfilm_appearances AS (\n  SELECT\n    fc.people_id,\n    COUNT(DISTINCT fc.film_id) AS film_count,\n    STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fc.film_id = f.film_id\n  GROUP BY fc.people_id\n)\n\nSELECT\n  -- Primary Key\n  md5(cast(coalesce(cast(cb.people_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS character_key,\n  \n  -- Natural Key\n  cb.people_id,\n  \n  -- Character Attributes\n  cb.name AS character_name,\n  cb.height::NUMERIC AS height_cm,\n  cb.mass::NUMERIC AS mass_kg,\n  cb.hair_color,\n  cb.skin_color,\n  cb.eye_color,\n  cb.birth_year,\n  cb.gender,\n  \n  -- Homeworld information\n  hi.homeworld_name,\n  \n  -- Film appearances\n  COALESCE(fa.film_count, 0) AS film_count,\n  COALESCE(fa.film_appearances, 'None') AS film_appearances,\n  \n  -- Character Classification\n  CASE\n    -- Protagonist/Antagonist tier - central characters\n    WHEN cb.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', \n                     'Rey', 'Kylo Ren', 'Din Djarin', 'Grogu') \n        THEN 'Protagonist/Antagonist'\n    \n    -- Major characters\n    WHEN cb.name IN ('Han Solo', 'Leia Organa', 'Obi-Wan Kenobi', \n                    'Emperor Palpatine', 'Finn', 'Poe Dameron',\n                    'Padm\u00e9 Amidala', 'Count Dooku', 'Qui-Gon Jinn',\n                    'Darth Maul', 'Jyn Erso', 'Cassian Andor', 'Boba Fett') \n        THEN 'Major'\n    \n    -- Supporting characters\n    WHEN cb.name IN ('Chewbacca', 'C-3PO', 'R2-D2', 'Yoda', \n                    'Lando Calrissian', 'Mace Windu', 'General Grievous', \n                    'Admiral Ackbar', 'BB-8', 'General Hux', 'Rose Tico',\n                    'Moff Gideon', 'Saw Gerrera', 'Jabba the Hutt',\n                    'Ahsoka Tano') \n        THEN 'Supporting'\n                                \n    -- Characters with many appearances are likely more important\n    WHEN COALESCE(fa.film_count, 0) >= 3\n        THEN 'Notable'\n    \n    -- Characters with more details are likely more important\n    WHEN cb.gender IS NOT NULL AND cb.birth_year IS NOT NULL \n        THEN 'Notable'\n    \n    ELSE 'Minor'\n  END AS character_importance_tier,\n  \n  -- Character alignment\n  CASE \n    WHEN cb.name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul',\n                        'Count Dooku', 'General Grievous', 'Kylo Ren',\n                        'Captain Phasma', 'General Hux', 'Moff Tarkin',\n                        'Jabba the Hutt', 'Boba Fett', 'Jango Fett')\n        THEN 'Villain'\n        \n    WHEN cb.name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo',\n                        'Obi-Wan Kenobi', 'Yoda', 'Rey', 'Finn', 'Poe Dameron',\n                        'Padm\u00e9 Amidala', 'Qui-Gon Jinn', 'Mace Windu')\n        THEN 'Hero'\n        \n    WHEN cb.name IN ('Lando Calrissian', 'Anakin Skywalker')\n        THEN 'Ambiguous'\n        \n    ELSE 'Neutral'\n  END AS character_alignment,\n  \n  -- Character Type\n  CASE \n    WHEN cb.name LIKE '%Droid%' OR cb.name IN ('C-3PO', 'R2-D2', 'BB-8') THEN 'Droid'\n    WHEN cb.name IN ('Jabba the Hutt') THEN 'Hutt'\n    WHEN cb.name IN ('Yoda', 'Grogu') THEN 'Unknown Species'\n    WHEN cb.name IN ('Chewbacca') THEN 'Wookiee'\n    ELSE 'Humanoid'\n  END AS character_type,\n  \n  -- Force user\n  CASE \n    WHEN cb.name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                   'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                   'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n    THEN TRUE\n    ELSE FALSE\n  END AS is_force_user,\n  \n  -- Force alignment\n  CASE \n    WHEN cb.name IN ('Darth Vader', 'Emperor Palpatine', 'Darth Maul', \n                   'Count Dooku', 'Kylo Ren')\n    THEN 'Dark Side'\n    \n    WHEN cb.name IN ('Luke Skywalker', 'Obi-Wan Kenobi', 'Yoda', 'Rey',\n                   'Mace Windu', 'Qui-Gon Jinn', 'Ahsoka Tano') \n    THEN 'Light Side'\n    \n    WHEN cb.name IN ('Anakin Skywalker')\n    THEN 'Both (Changed)'\n    \n    ELSE NULL\n  END AS force_alignment,\n  \n  -- Time Dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM character_base cb\nLEFT JOIN homeworld_info hi ON cb.people_id = hi.people_id\nLEFT JOIN film_appearances fa ON cb.people_id = fa.people_id\nWHERE cb.people_id IS NOT NULL\nORDER BY \n  CASE \n    WHEN COALESCE(fa.film_count, 0) >= 3 THEN 0\n    ELSE 1\n  END,\n  COALESCE(fa.film_count, 0) DESC,\n  cb.name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.bridge_sw_films_planets": {"database": "nerd_facts", "schema": "public", "name": "bridge_sw_films_planets", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/bridge_sw_films_planets.sql", "original_file_path": "models/marts/star_wars/bridge_sw_films_planets.sql", "unique_id": "model.nerd_facts_dbt.bridge_sw_films_planets", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "bridge_sw_films_planets"], "alias": "bridge_sw_films_planets", "checksum": {"name": "sha256", "checksum": "3ecce7e018f9edbd22e37f677b6ade5b426cb3291dcb62fb132bdeb9d4f304b5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "film_planet_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["planet_key"]}, {"columns": ["film_key"]}, {"columns": ["film_planet_key"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["planet_key"]}, {"columns": ["film_key"]}, {"columns": ["film_planet_key"]}], "unique_key": "film_planet_key"}, "created_at": 1742909949.7299142, "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_films_planets\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['planet_key']}, {'columns': ['film_key']}, {'columns': ['film_planet_key']}],\n    unique_key = 'film_planet_key'\n  )\n}}\n\n/*\n  Model: bridge_sw_films_planets\n  Description: Bridge table connecting films to planets with enriched relationship attributes\n*/\n\nWITH film_planets AS (\n    SELECT\n        fp.film_id,\n        fp.planet_id,\n        f.title AS film_title,\n        p.name AS planet_name,\n        f.release_date,\n        f.episode_id,\n        p.climate,\n        p.terrain\n    FROM {{ ref('int_swapi_films_planets') }} fp\n    JOIN {{ ref('stg_swapi_films') }} f ON fp.film_id = f.film_id\n    JOIN {{ ref('stg_swapi_planets') }} p ON fp.planet_id = p.planet_id\n),\n\n-- Add trilogy and appearance information\nfilm_planets_enriched AS (\n    SELECT \n        fp.*,\n        -- Trilogy classification\n        CASE\n            WHEN fp.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n            WHEN fp.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n            WHEN fp.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n            ELSE 'Anthology Films'\n        END AS trilogy,\n        \n        -- Extract year for easier querying\n        EXTRACT(YEAR FROM fp.release_date) AS release_year,\n        \n        -- Planet appearance metrics\n        COUNT(*) OVER (PARTITION BY fp.planet_id) AS planet_film_count,\n        (SELECT COUNT(DISTINCT film_id) FROM {{ ref('stg_swapi_films') }}) AS total_films,\n        \n        -- Order of appearance\n        ROW_NUMBER() OVER (\n            PARTITION BY fp.planet_id \n            ORDER BY COALESCE(fp.episode_id, 999)\n        ) AS chronological_appearance_number,\n        \n        ROW_NUMBER() OVER (\n            PARTITION BY fp.planet_id \n            ORDER BY fp.release_date\n        ) AS release_order_appearance_number\n    FROM film_planets fp\n)\n\nSELECT\n    -- Primary Key\n    {{ dbt_utils.generate_surrogate_key(['fpe.film_id', 'fpe.planet_id']) }} AS film_planet_key,\n    \n    -- Foreign Keys\n    {{ dbt_utils.generate_surrogate_key(['fpe.film_id']) }} AS film_key,\n    {{ dbt_utils.generate_surrogate_key(['fpe.planet_id']) }} AS planet_key,\n    \n    -- Source IDs\n    fpe.film_id,\n    fpe.planet_id,\n    \n    -- Basic Attributes\n    fpe.film_title,\n    fpe.planet_name,\n    fpe.episode_id,\n    \n    -- Film categorization\n    fpe.trilogy AS film_saga,\n    fpe.release_year,\n    \n    -- Planet characteristics\n    fpe.climate,\n    fpe.terrain,\n    \n    -- Appearance metrics\n    fpe.chronological_appearance_number,\n    fpe.release_order_appearance_number,\n    \n    -- Planet appearance percentage across all films\n    (fpe.planet_film_count::FLOAT / NULLIF(fpe.total_films, 0)::FLOAT) * 100 AS saga_appearance_percentage,\n    \n    -- Timeline attributes\n    CASE WHEN fpe.chronological_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_chronological_appearance,\n    CASE WHEN fpe.release_order_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_release_appearance,\n    \n    -- Planet significance in the film\n    CASE\n        WHEN fpe.planet_name IN ('Tatooine', 'Coruscant', 'Naboo', 'Death Star', 'Hoth', \n                                'Dagobah', 'Endor', 'Bespin', 'Jakku', 'Starkiller Base', \n                                'Exegol', 'Scarif', 'Mustafar') \n            THEN 'Major Setting'\n        ELSE 'Minor Setting'\n    END AS planet_significance,\n    \n    -- Scene type (based on climate and terrain)\n    CASE\n        WHEN fpe.climate ILIKE '%arid%' OR fpe.climate ILIKE '%desert%' OR fpe.terrain ILIKE '%desert%'\n            THEN 'Desert Scene'\n        WHEN fpe.climate ILIKE '%frozen%' OR fpe.climate ILIKE '%ice%' OR fpe.climate ILIKE '%frigid%'\n            THEN 'Ice Scene'\n        WHEN fpe.terrain ILIKE '%forest%' OR fpe.terrain ILIKE '%jungle%' OR fpe.terrain ILIKE '%rain%'\n            THEN 'Forest Scene'\n        WHEN fpe.terrain ILIKE '%city%' OR fpe.terrain ILIKE '%urban%'\n            THEN 'Urban Scene'\n        WHEN fpe.climate ILIKE '%swamp%' OR fpe.terrain ILIKE '%swamp%'\n            THEN 'Swamp Scene'\n        WHEN fpe.climate ILIKE '%toxic%' OR fpe.terrain ILIKE '%lava%' OR fpe.terrain ILIKE '%volcanic%'\n            THEN 'Hostile Environment Scene'\n        ELSE 'Mixed Scene'\n    END AS scene_type,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM film_planets_enriched fpe\nORDER BY \n    COALESCE(fpe.episode_id, 999),\n    fpe.planet_name", "language": "sql", "refs": [{"name": "int_swapi_films_planets", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}, {"name": "stg_swapi_planets", "package": null, "version": null}, {"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/bridge_sw_films_planets.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_sw_films_planets\n  Description: Bridge table connecting films to planets with enriched relationship attributes\n*/\n\nWITH film_planets AS (\n    SELECT\n        fp.film_id,\n        fp.planet_id,\n        f.title AS film_title,\n        p.name AS planet_name,\n        f.release_date,\n        f.episode_id,\n        p.climate,\n        p.terrain\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n    JOIN \"nerd_facts\".\"public\".\"stg_swapi_films\" f ON fp.film_id = f.film_id\n    JOIN \"nerd_facts\".\"public\".\"stg_swapi_planets\" p ON fp.planet_id = p.planet_id\n),\n\n-- Add trilogy and appearance information\nfilm_planets_enriched AS (\n    SELECT \n        fp.*,\n        -- Trilogy classification\n        CASE\n            WHEN fp.episode_id BETWEEN 1 AND 3 THEN 'Prequel Trilogy'\n            WHEN fp.episode_id BETWEEN 4 AND 6 THEN 'Original Trilogy'\n            WHEN fp.episode_id BETWEEN 7 AND 9 THEN 'Sequel Trilogy'\n            ELSE 'Anthology Films'\n        END AS trilogy,\n        \n        -- Extract year for easier querying\n        EXTRACT(YEAR FROM fp.release_date) AS release_year,\n        \n        -- Planet appearance metrics\n        COUNT(*) OVER (PARTITION BY fp.planet_id) AS planet_film_count,\n        (SELECT COUNT(DISTINCT film_id) FROM \"nerd_facts\".\"public\".\"stg_swapi_films\") AS total_films,\n        \n        -- Order of appearance\n        ROW_NUMBER() OVER (\n            PARTITION BY fp.planet_id \n            ORDER BY COALESCE(fp.episode_id, 999)\n        ) AS chronological_appearance_number,\n        \n        ROW_NUMBER() OVER (\n            PARTITION BY fp.planet_id \n            ORDER BY fp.release_date\n        ) AS release_order_appearance_number\n    FROM film_planets fp\n)\n\nSELECT\n    -- Primary Key\n    md5(cast(coalesce(cast(fpe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fpe.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_planet_key,\n    \n    -- Foreign Keys\n    md5(cast(coalesce(cast(fpe.film_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS film_key,\n    md5(cast(coalesce(cast(fpe.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS planet_key,\n    \n    -- Source IDs\n    fpe.film_id,\n    fpe.planet_id,\n    \n    -- Basic Attributes\n    fpe.film_title,\n    fpe.planet_name,\n    fpe.episode_id,\n    \n    -- Film categorization\n    fpe.trilogy AS film_saga,\n    fpe.release_year,\n    \n    -- Planet characteristics\n    fpe.climate,\n    fpe.terrain,\n    \n    -- Appearance metrics\n    fpe.chronological_appearance_number,\n    fpe.release_order_appearance_number,\n    \n    -- Planet appearance percentage across all films\n    (fpe.planet_film_count::FLOAT / NULLIF(fpe.total_films, 0)::FLOAT) * 100 AS saga_appearance_percentage,\n    \n    -- Timeline attributes\n    CASE WHEN fpe.chronological_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_chronological_appearance,\n    CASE WHEN fpe.release_order_appearance_number = 1 THEN TRUE ELSE FALSE END AS is_first_release_appearance,\n    \n    -- Planet significance in the film\n    CASE\n        WHEN fpe.planet_name IN ('Tatooine', 'Coruscant', 'Naboo', 'Death Star', 'Hoth', \n                                'Dagobah', 'Endor', 'Bespin', 'Jakku', 'Starkiller Base', \n                                'Exegol', 'Scarif', 'Mustafar') \n            THEN 'Major Setting'\n        ELSE 'Minor Setting'\n    END AS planet_significance,\n    \n    -- Scene type (based on climate and terrain)\n    CASE\n        WHEN fpe.climate ILIKE '%arid%' OR fpe.climate ILIKE '%desert%' OR fpe.terrain ILIKE '%desert%'\n            THEN 'Desert Scene'\n        WHEN fpe.climate ILIKE '%frozen%' OR fpe.climate ILIKE '%ice%' OR fpe.climate ILIKE '%frigid%'\n            THEN 'Ice Scene'\n        WHEN fpe.terrain ILIKE '%forest%' OR fpe.terrain ILIKE '%jungle%' OR fpe.terrain ILIKE '%rain%'\n            THEN 'Forest Scene'\n        WHEN fpe.terrain ILIKE '%city%' OR fpe.terrain ILIKE '%urban%'\n            THEN 'Urban Scene'\n        WHEN fpe.climate ILIKE '%swamp%' OR fpe.terrain ILIKE '%swamp%'\n            THEN 'Swamp Scene'\n        WHEN fpe.climate ILIKE '%toxic%' OR fpe.terrain ILIKE '%lava%' OR fpe.terrain ILIKE '%volcanic%'\n            THEN 'Hostile Environment Scene'\n        ELSE 'Mixed Scene'\n    END AS scene_type,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM film_planets_enriched fpe\nORDER BY \n    COALESCE(fpe.episode_id, 999),\n    fpe.planet_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_planets": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_planets", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_planets.sql", "original_file_path": "models/marts/star_wars/dim_sw_planets.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_planets", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_planets"], "alias": "dim_sw_planets", "checksum": {"name": "sha256", "checksum": "024e635abcdb170e20bda66726d127bbd17fc7281126ceb13226e5dd1be3d571"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "planet_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["planet_key"]}, {"columns": ["planet_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["planet_key"]}, {"columns": ["planet_id"]}], "unique_key": "planet_key"}, "created_at": 1742909949.7389455, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_planets\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['planet_key']}, {'columns': ['planet_id']}],\n    unique_key = 'planet_key'\n  )\n}}\n\n/*\n  Model: dim_sw_planets\n  Description: Planet dimension table with enriched attributes and classifications\n*/\n\nWITH planet_base AS (\n    SELECT\n        p.planet_id,\n        p.name,\n        p.rotation_period,\n        p.orbital_period,\n        p.diameter,\n        p.climate,\n        p.gravity,\n        p.terrain,\n        p.surface_water,\n        p.population\n    FROM {{ ref('int_swapi_planets') }} p\n),\n\n-- Film appearances\nfilm_appearances AS (\n    SELECT\n        fp.planet_id,\n        COUNT(DISTINCT fp.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n    FROM {{ ref('int_swapi_films_planets') }} fp\n    JOIN {{ ref('int_swapi_films') }} f ON fp.film_id = f.film_id\n    GROUP BY fp.planet_id\n),\n\n-- Character counts (residents)\ncharacter_counts AS (\n    SELECT\n        pc.planet_id,\n        COUNT(DISTINCT pc.people_id) AS character_count\n    FROM {{ ref('int_swapi_planets_characters') }} pc\n    GROUP BY pc.planet_id\n),\n\n-- Calculate additional metrics and classifications\nplanet_enriched AS (\n    SELECT\n        pb.*,\n        COALESCE(fa.film_count, 0) AS film_count,\n        COALESCE(cc.character_count, 0) AS character_count,\n        COALESCE(fa.film_appearances, 'None') AS film_appearances,\n        \n        -- Planet size classification\n        CASE\n            WHEN pb.diameter::NUMERIC > 15000 THEN 'Very Large'\n            WHEN pb.diameter::NUMERIC > 10000 THEN 'Large'\n            WHEN pb.diameter::NUMERIC > 5000 THEN 'Medium'\n            WHEN pb.diameter::NUMERIC > 0 THEN 'Small'\n            ELSE 'Unknown'\n        END AS size_classification,\n        \n        -- Population density (people per square km)\n        -- Surface area = 4 * pi * r^2, r = diameter/2\n        CASE \n            WHEN pb.diameter::NUMERIC > 0 AND pb.population::NUMERIC > 0 \n            THEN pb.population::NUMERIC / (4 * 3.14159 * POWER(pb.diameter::NUMERIC/2, 2))\n            ELSE NULL\n        END AS population_density,\n        \n        -- Climate type classification\n        CASE\n            WHEN pb.climate ILIKE '%temperate%' THEN 'Temperate'\n            WHEN pb.climate ILIKE '%tropical%' THEN 'Tropical'\n            WHEN pb.climate ILIKE '%arid%' OR pb.climate ILIKE '%desert%' THEN 'Arid'\n            WHEN pb.climate ILIKE '%frozen%' OR pb.climate ILIKE '%ice%' OR pb.climate ILIKE '%frigid%' THEN 'Frozen'\n            WHEN pb.climate ILIKE '%humid%' OR pb.climate ILIKE '%moist%' THEN 'Humid'\n            WHEN pb.climate ILIKE '%murky%' OR pb.climate ILIKE '%swamp%' THEN 'Swampy'\n            ELSE 'Other'\n        END AS climate_classification,\n        \n        -- Primary terrain classification\n        CASE\n            WHEN pb.terrain ILIKE '%mountain%' THEN 'Mountainous'\n            WHEN pb.terrain ILIKE '%jungle%' THEN 'Jungle'\n            WHEN pb.terrain ILIKE '%desert%' THEN 'Desert'\n            WHEN pb.terrain ILIKE '%forest%' THEN 'Forested'\n            WHEN pb.terrain ILIKE '%ocean%' OR pb.terrain ILIKE '%sea%' THEN 'Oceanic'\n            WHEN pb.terrain ILIKE '%swamp%' THEN 'Swamp'\n            WHEN pb.terrain ILIKE '%city%' OR pb.terrain ILIKE '%urban%' THEN 'Urban'\n            ELSE 'Mixed'\n        END AS primary_terrain_classification\n    FROM planet_base pb\n    LEFT JOIN film_appearances fa ON pb.planet_id = fa.planet_id\n    LEFT JOIN character_counts cc ON pb.planet_id = cc.planet_id\n)\n\nSELECT\n    -- Primary Key\n    {{ dbt_utils.generate_surrogate_key(['pe.planet_id']) }} AS planet_key,\n    \n    -- Natural Key\n    pe.planet_id,\n    \n    -- Planet Attributes\n    pe.name AS planet_name,\n    pe.rotation_period,\n    pe.orbital_period,\n    pe.diameter,\n    pe.climate,\n    pe.gravity,\n    pe.terrain,\n    pe.surface_water,\n    pe.population,\n    \n    -- Planet Classifications\n    pe.size_classification,\n    pe.climate_classification,\n    pe.primary_terrain_classification,\n    \n    -- Derived Metrics\n    pe.population_density,\n    pe.film_count,\n    pe.character_count,\n    pe.film_appearances,\n    \n    -- Habitability metrics\n    CASE \n        WHEN pe.climate ILIKE '%temperate%' AND pe.surface_water::NUMERIC > 0 THEN 'High'\n        WHEN pe.climate NOT ILIKE '%frozen%' AND pe.climate NOT ILIKE '%arid%' THEN 'Medium'\n        ELSE 'Low'\n    END AS habitability,\n    \n    -- Is Core World\n    CASE \n        WHEN pe.name IN ('Coruscant', 'Alderaan', 'Corellia', 'Chandrila', 'Hosnian Prime') THEN TRUE\n        ELSE FALSE\n    END AS is_core_world,\n    \n    -- Notable planets\n    CASE \n        WHEN pe.name IN ('Coruscant', 'Tatooine', 'Naboo', 'Hoth', 'Endor', 'Dagobah', \n                        'Bespin', 'Mustafar', 'Death Star', 'Jakku', 'Ahch-To', 'Exegol') \n            OR pe.film_count >= 3\n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_planet,\n    \n    -- Narrative importance\n    CASE\n        WHEN pe.film_count >= 3 THEN 'Major'\n        WHEN pe.film_count >= 2 THEN 'Significant'\n        WHEN pe.film_count = 1 THEN 'Featured'\n        ELSE 'Minor'\n    END AS narrative_importance,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM planet_enriched pe", "language": "sql", "refs": [{"name": "int_swapi_planets", "package": null, "version": null}, {"name": "int_swapi_films_planets", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}, {"name": "int_swapi_planets_characters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_planets", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_planets_characters"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/dim_sw_planets.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: dim_sw_planets\n  Description: Planet dimension table with enriched attributes and classifications\n*/\n\nWITH planet_base AS (\n    SELECT\n        p.planet_id,\n        p.name,\n        p.rotation_period,\n        p.orbital_period,\n        p.diameter,\n        p.climate,\n        p.gravity,\n        p.terrain,\n        p.surface_water,\n        p.population\n    FROM \"nerd_facts\".\"public\".\"int_swapi_planets\" p\n),\n\n-- Film appearances\nfilm_appearances AS (\n    SELECT\n        fp.planet_id,\n        COUNT(DISTINCT fp.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_planets\" fp\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fp.film_id = f.film_id\n    GROUP BY fp.planet_id\n),\n\n-- Character counts (residents)\ncharacter_counts AS (\n    SELECT\n        pc.planet_id,\n        COUNT(DISTINCT pc.people_id) AS character_count\n    FROM \"nerd_facts\".\"public\".\"int_swapi_planets_characters\" pc\n    GROUP BY pc.planet_id\n),\n\n-- Calculate additional metrics and classifications\nplanet_enriched AS (\n    SELECT\n        pb.*,\n        COALESCE(fa.film_count, 0) AS film_count,\n        COALESCE(cc.character_count, 0) AS character_count,\n        COALESCE(fa.film_appearances, 'None') AS film_appearances,\n        \n        -- Planet size classification\n        CASE\n            WHEN pb.diameter::NUMERIC > 15000 THEN 'Very Large'\n            WHEN pb.diameter::NUMERIC > 10000 THEN 'Large'\n            WHEN pb.diameter::NUMERIC > 5000 THEN 'Medium'\n            WHEN pb.diameter::NUMERIC > 0 THEN 'Small'\n            ELSE 'Unknown'\n        END AS size_classification,\n        \n        -- Population density (people per square km)\n        -- Surface area = 4 * pi * r^2, r = diameter/2\n        CASE \n            WHEN pb.diameter::NUMERIC > 0 AND pb.population::NUMERIC > 0 \n            THEN pb.population::NUMERIC / (4 * 3.14159 * POWER(pb.diameter::NUMERIC/2, 2))\n            ELSE NULL\n        END AS population_density,\n        \n        -- Climate type classification\n        CASE\n            WHEN pb.climate ILIKE '%temperate%' THEN 'Temperate'\n            WHEN pb.climate ILIKE '%tropical%' THEN 'Tropical'\n            WHEN pb.climate ILIKE '%arid%' OR pb.climate ILIKE '%desert%' THEN 'Arid'\n            WHEN pb.climate ILIKE '%frozen%' OR pb.climate ILIKE '%ice%' OR pb.climate ILIKE '%frigid%' THEN 'Frozen'\n            WHEN pb.climate ILIKE '%humid%' OR pb.climate ILIKE '%moist%' THEN 'Humid'\n            WHEN pb.climate ILIKE '%murky%' OR pb.climate ILIKE '%swamp%' THEN 'Swampy'\n            ELSE 'Other'\n        END AS climate_classification,\n        \n        -- Primary terrain classification\n        CASE\n            WHEN pb.terrain ILIKE '%mountain%' THEN 'Mountainous'\n            WHEN pb.terrain ILIKE '%jungle%' THEN 'Jungle'\n            WHEN pb.terrain ILIKE '%desert%' THEN 'Desert'\n            WHEN pb.terrain ILIKE '%forest%' THEN 'Forested'\n            WHEN pb.terrain ILIKE '%ocean%' OR pb.terrain ILIKE '%sea%' THEN 'Oceanic'\n            WHEN pb.terrain ILIKE '%swamp%' THEN 'Swamp'\n            WHEN pb.terrain ILIKE '%city%' OR pb.terrain ILIKE '%urban%' THEN 'Urban'\n            ELSE 'Mixed'\n        END AS primary_terrain_classification\n    FROM planet_base pb\n    LEFT JOIN film_appearances fa ON pb.planet_id = fa.planet_id\n    LEFT JOIN character_counts cc ON pb.planet_id = cc.planet_id\n)\n\nSELECT\n    -- Primary Key\n    md5(cast(coalesce(cast(pe.planet_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS planet_key,\n    \n    -- Natural Key\n    pe.planet_id,\n    \n    -- Planet Attributes\n    pe.name AS planet_name,\n    pe.rotation_period,\n    pe.orbital_period,\n    pe.diameter,\n    pe.climate,\n    pe.gravity,\n    pe.terrain,\n    pe.surface_water,\n    pe.population,\n    \n    -- Planet Classifications\n    pe.size_classification,\n    pe.climate_classification,\n    pe.primary_terrain_classification,\n    \n    -- Derived Metrics\n    pe.population_density,\n    pe.film_count,\n    pe.character_count,\n    pe.film_appearances,\n    \n    -- Habitability metrics\n    CASE \n        WHEN pe.climate ILIKE '%temperate%' AND pe.surface_water::NUMERIC > 0 THEN 'High'\n        WHEN pe.climate NOT ILIKE '%frozen%' AND pe.climate NOT ILIKE '%arid%' THEN 'Medium'\n        ELSE 'Low'\n    END AS habitability,\n    \n    -- Is Core World\n    CASE \n        WHEN pe.name IN ('Coruscant', 'Alderaan', 'Corellia', 'Chandrila', 'Hosnian Prime') THEN TRUE\n        ELSE FALSE\n    END AS is_core_world,\n    \n    -- Notable planets\n    CASE \n        WHEN pe.name IN ('Coruscant', 'Tatooine', 'Naboo', 'Hoth', 'Endor', 'Dagobah', \n                        'Bespin', 'Mustafar', 'Death Star', 'Jakku', 'Ahch-To', 'Exegol') \n            OR pe.film_count >= 3\n        THEN TRUE\n        ELSE FALSE\n    END AS is_notable_planet,\n    \n    -- Narrative importance\n    CASE\n        WHEN pe.film_count >= 3 THEN 'Major'\n        WHEN pe.film_count >= 2 THEN 'Significant'\n        WHEN pe.film_count = 1 THEN 'Featured'\n        ELSE 'Minor'\n    END AS narrative_importance,\n    \n    -- Data Tracking\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n\nFROM planet_enriched pe", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.bridge_sw_starships_pilots": {"database": "nerd_facts", "schema": "public", "name": "bridge_sw_starships_pilots", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/bridge_sw_starships_pilots.sql", "original_file_path": "models/marts/star_wars/bridge_sw_starships_pilots.sql", "unique_id": "model.nerd_facts_dbt.bridge_sw_starships_pilots", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "bridge_sw_starships_pilots"], "alias": "bridge_sw_starships_pilots", "checksum": {"name": "sha256", "checksum": "78ed54a6457b1d425c750f1c5660347bcc2c38c020750bef1776f328a2afd683"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "starship_pilot_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["starship_id"]}, {"columns": ["pilot_id"]}, {"columns": ["starship_pilot_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["starship_id"]}, {"columns": ["pilot_id"]}, {"columns": ["starship_pilot_id"]}], "unique_key": "starship_pilot_id"}, "created_at": 1742909949.746436, "relation_name": "\"nerd_facts\".\"public\".\"bridge_sw_starships_pilots\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['starship_id']}, {'columns': ['pilot_id']}, {'columns': ['starship_pilot_id']}],\n    unique_key = 'starship_pilot_id'\n  )\n}}\n\n/*\n  Model: bridge_sw_starships_pilots\n  Description: Bridge table connecting Star Wars starships to their pilots\n  \n  This version reconstructs the relationship using available intermediate models.\n*/\n\n-- Create a join between films, characters, and starships\nWITH film_characters_starships AS (\n    SELECT DISTINCT\n        fc.film_id,\n        fc.people_id AS pilot_id,\n        fs.starship_id\n    FROM {{ ref('int_swapi_films_characters') }} fc\n    JOIN {{ ref('int_swapi_films_starships') }} fs ON fc.film_id = fs.film_id\n),\n\n-- Create the pilot-starship relationships based on film appearances\nstarship_pilots AS (\n    SELECT DISTINCT\n        fcs.starship_id,\n        fcs.pilot_id\n    FROM film_characters_starships fcs\n    -- Only include notable pilot-starship combinations\n    WHERE (\n        -- Known pilot-starship pairs from Star Wars universe\n        (fcs.pilot_id = 1 AND fcs.starship_id = 12) OR -- Luke Skywalker + X-wing\n        (fcs.pilot_id = 4 AND fcs.starship_id = 10) OR -- Darth Vader + TIE Advanced x1\n        (fcs.pilot_id = 13 AND fcs.starship_id = 10) OR -- Chewbacca + Millennium Falcon\n        (fcs.pilot_id = 14 AND fcs.starship_id = 10) OR -- Han Solo + Millennium Falcon\n        (fcs.pilot_id = 22 AND fcs.starship_id = 21) OR -- Boba Fett + Slave I\n        (fcs.pilot_id = 11 AND fcs.starship_id = 32) OR -- Anakin Skywalker + Naboo fighter\n        (fcs.pilot_id = 35 AND fcs.starship_id = 48) OR -- Padm\u00e9 Amidala + Naboo ship\n        (fcs.pilot_id = 10 AND fcs.starship_id = 48) OR -- Obi-Wan Kenobi + Jedi Starfighter\n        (fcs.pilot_id = 3 AND fcs.starship_id = 10) OR -- R2-D2 + X-wing\n        (fcs.pilot_id = 25 AND fcs.starship_id = 28)    -- Lando + Millennium Falcon\n    )\n),\n\n-- Get starship information\nstarships AS (\n    SELECT \n        s.starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.starship_class,\n        s.cost_in_credits\n    FROM {{ ref('int_swapi_starships') }} s\n),\n\n-- Get character information\npilots AS (\n    SELECT \n        p.people_id,\n        p.name AS pilot_name,\n        p.gender,\n        p.birth_year,\n        p.height,\n        p.mass,\n        p.homeworld_id  -- Fix the column name based on the error\n    FROM {{ ref('int_swapi_people') }} p\n),\n\n-- Build the base relationship with enriched data\nstarship_pilot_base AS (\n    SELECT\n        sp.starship_id,\n        sp.pilot_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.starship_class,\n        s.cost_in_credits AS cost,\n        p.pilot_name,\n        p.gender,\n        p.birth_year,\n        p.height,\n        p.mass,\n        p.homeworld_id  -- Use the correct column name\n    FROM starship_pilots sp\n    JOIN starships s ON sp.starship_id = s.starship_id\n    JOIN pilots p ON sp.pilot_id = p.people_id\n),\n\n-- Get film appearances for both pilots and starships\npilot_films AS (\n    SELECT\n        fc.people_id AS pilot_id,\n        COUNT(DISTINCT fc.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM {{ ref('int_swapi_films_characters') }} fc\n    JOIN {{ ref('int_swapi_films') }} f ON fc.film_id = f.film_id\n    GROUP BY fc.people_id\n),\n\nstarship_films AS (\n    SELECT\n        fs.starship_id,\n        COUNT(DISTINCT fs.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM {{ ref('int_swapi_films_starships') }} fs\n    JOIN {{ ref('int_swapi_films') }} f ON fs.film_id = f.film_id\n    GROUP BY fs.starship_id\n),\n\n-- Get homeworld information for additional context\nhomeworlds AS (\n    SELECT\n        p.planet_id,\n        p.name AS planet_name\n    FROM {{ ref('int_swapi_planets') }} p\n),\n\n-- Calculate pilot statistics\npilot_stats AS (\n    SELECT \n        pilot_id,\n        COUNT(DISTINCT starship_id) AS ships_piloted_count,\n        COUNT(DISTINCT starship_class) AS ship_class_versatility\n    FROM starship_pilot_base\n    GROUP BY pilot_id\n)\n\nSELECT\n    -- Primary key\n    {{ dbt_utils.generate_surrogate_key(['spb.starship_id', 'spb.pilot_id']) }} AS starship_pilot_id,\n    \n    -- Foreign keys to related dimensions\n    {{ dbt_utils.generate_surrogate_key(['spb.starship_id']) }} AS starship_key,\n    {{ dbt_utils.generate_surrogate_key(['spb.pilot_id']) }} AS pilot_key,\n    \n    -- Core identifiers\n    spb.starship_id,\n    spb.starship_name,\n    spb.pilot_id,\n    spb.pilot_name,\n    \n    -- Starship attributes\n    spb.model,\n    spb.manufacturer,\n    spb.starship_class,\n    spb.cost,\n    \n    -- Pilot attributes\n    spb.gender,\n    spb.birth_year,\n    hw.planet_name AS homeworld_name,\n    \n    -- Force sensitivity (derived)\n    CASE \n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                           'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                           'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n        THEN TRUE\n        ELSE FALSE\n    END AS force_sensitive,\n    \n    -- Pilot age estimation\n    CASE \n        WHEN spb.birth_year ~ '^[0-9]+(\\.[0-9]+)?$' THEN \n            CASE\n                WHEN spb.pilot_name = 'Yoda' THEN 900  -- Special case for Yoda\n                ELSE COALESCE(spb.birth_year::NUMERIC, 0)\n            END\n        ELSE 0\n    END AS pilot_age,\n    \n    -- Film appearances\n    COALESCE(pf.film_count, 0) AS pilot_film_count,\n    COALESCE(sf.film_count, 0) AS starship_film_count,\n    COALESCE(pf.film_names, 'None') AS pilot_film_appearances,\n    COALESCE(sf.film_names, 'None') AS starship_film_appearances,\n    \n    -- Calculate film overlap (approximate)\n    -- This isn't precise without parsing the film names but gives an indication\n    CASE \n        WHEN pf.film_names IS NOT NULL AND sf.film_names IS NOT NULL THEN\n            -- Estimate overlap by the smaller of the two counts\n            LEAST(\n                COALESCE(pf.film_count, 0),\n                COALESCE(sf.film_count, 0)\n            )\n        ELSE 0\n    END AS film_appearance_overlap,\n    \n    -- Enhanced pilot skill classification with more nuance\n    CASE\n        -- Legendary pilots explicitly mentioned in lore\n        WHEN spb.pilot_name IN ('Han Solo', 'Luke Skywalker', 'Anakin Skywalker', \n                             'Poe Dameron', 'Wedge Antilles', 'Lando Calrissian') THEN 'Legendary'\n        \n        -- Known excellent pilots from expanded lore\n        WHEN spb.pilot_name IN ('Darth Vader', 'Jango Fett', 'Boba Fett', 'Hera Syndulla', \n                             'Rey', 'Chewbacca', 'Din Djarin', 'Cassian Andor') THEN 'Expert'\n        \n        -- Force users generally have enhanced piloting abilities\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                           'Obi-Wan Kenobi', 'Yoda', 'Mace Windu') THEN 'Force Enhanced'\n        \n        -- Pilots of military craft likely have formal training\n        WHEN spb.starship_class IN ('Starfighter', 'Assault Starfighter', 'Bomber', \n                                 'Interceptor', 'Light Cruiser') THEN 'Military Trained'\n        \n        -- Default for other cases\n        ELSE 'Standard'\n    END AS pilot_skill,\n    \n    -- Pilot experience level based on lore\n    CASE\n        WHEN spb.pilot_name IN ('Han Solo', 'Chewbacca', 'Lando Calrissian', 'Wedge Antilles') THEN 'Veteran'\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Poe Dameron', 'Darth Vader', 'Anakin Skywalker') THEN 'Advanced'\n        WHEN spb.pilot_name IN ('Rey', 'Finn', 'Din Djarin') THEN 'Intermediate'\n        ELSE 'Basic'\n    END AS pilot_experience,\n    \n    -- Get calculated pilot stats\n    COALESCE(ps.ships_piloted_count, 0) AS ships_piloted_count,\n    COALESCE(ps.ship_class_versatility, 0) AS ship_class_versatility,\n    \n    -- Flag notable starship-pilot combinations\n    CASE\n        WHEN (spb.pilot_name = 'Han Solo' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Luke Skywalker' AND spb.starship_name LIKE '%X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Darth Vader' AND spb.starship_name LIKE '%TIE Advanced%') THEN TRUE\n        WHEN (spb.pilot_name = 'Boba Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        WHEN (spb.pilot_name = 'Anakin Skywalker' AND spb.starship_name LIKE '%Jedi Starfighter%') THEN TRUE\n        WHEN (spb.pilot_name = 'Poe Dameron' AND spb.starship_name LIKE '%T-70 X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Rey' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Din Djarin' AND spb.starship_name LIKE '%Razor Crest%') THEN TRUE\n        WHEN (spb.pilot_name = 'Lando Calrissian' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Jango Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        ELSE FALSE\n    END AS is_iconic_pairing,\n    \n    -- Calculate if this is the pilot's \"signature ship\" based on film appearances\n    CASE \n        WHEN ps.ships_piloted_count = 1 THEN TRUE\n        WHEN (spb.pilot_name = 'Han Solo' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Luke Skywalker' AND spb.starship_name LIKE '%X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Boba Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        ELSE FALSE\n    END AS is_signature_ship,\n    \n    -- Affiliation based on pilot\n    CASE\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo', 'Chewbacca', \n                             'Lando Calrissian', 'Wedge Antilles', 'Poe Dameron', \n                             'Finn', 'Rey') THEN 'Rebellion/Resistance'\n        WHEN spb.pilot_name IN ('Darth Vader', 'Emperor Palpatine', 'General Grievous',\n                             'Darth Maul', 'Count Dooku', 'Kylo Ren') THEN 'Empire/First Order/Sith'\n        WHEN spb.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Mace Windu', \n                             'Yoda', 'Qui-Gon Jinn', 'Padm\u00e9 Amidala') THEN 'Republic/Jedi'\n        WHEN spb.pilot_name IN ('Jango Fett', 'Boba Fett', 'Din Djarin') THEN 'Bounty Hunter/Independent'\n        ELSE 'Unknown'\n    END AS pilot_affiliation,\n    \n    -- Starship role classification\n    CASE\n        WHEN spb.starship_class IN ('Starfighter', 'Interceptor', 'Bomber', 'Assault Starfighter') THEN 'Combat'\n        WHEN spb.starship_class IN ('Light freighter', 'Medium freighter', 'Heavy freighter') THEN 'Transport'\n        WHEN spb.starship_class IN ('Yacht', 'Patrol craft', 'Sail barge', 'Speeder') THEN 'Personal'\n        WHEN spb.starship_class IN ('Star Destroyer', 'Battlecruiser', 'Cruiser', 'Star Dreadnought') THEN 'Capital Ship'\n        ELSE 'Utility'\n    END AS starship_role,\n    \n    -- Era classification (simplified)\n    CASE\n        WHEN spb.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Padm\u00e9 Amidala', \n                             'Qui-Gon Jinn', 'Mace Windu', 'Count Dooku', 'General Grievous') THEN 'Prequel Era'\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Han Solo', 'Leia Organa', 'Darth Vader', \n                             'Chewbacca', 'Lando Calrissian') THEN 'Original Trilogy Era'\n        WHEN spb.pilot_name IN ('Rey', 'Finn', 'Poe Dameron', 'Kylo Ren') THEN 'Sequel Era'\n        WHEN spb.pilot_name IN ('Din Djarin') THEN 'Mandalorian Era'\n        ELSE 'Unknown Era'\n    END AS story_era,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starship_pilot_base spb\nLEFT JOIN pilot_films pf ON spb.pilot_id = pf.pilot_id\nLEFT JOIN starship_films sf ON spb.starship_id = sf.starship_id\nLEFT JOIN homeworlds hw ON spb.homeworld_id::INTEGER = hw.planet_id  -- Add explicit type cast to INTEGER\nLEFT JOIN pilot_stats ps ON spb.pilot_id = ps.pilot_id\nWHERE spb.pilot_id IS NOT NULL AND spb.starship_id IS NOT NULL\nORDER BY spb.starship_name, pilot_skill DESC, spb.pilot_name", "language": "sql", "refs": [{"name": "int_swapi_films_characters", "package": null, "version": null}, {"name": "int_swapi_films_starships", "package": null, "version": null}, {"name": "int_swapi_starships", "package": null, "version": null}, {"name": "int_swapi_people", "package": null, "version": null}, {"name": "int_swapi_films_characters", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}, {"name": "int_swapi_films_starships", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}, {"name": "int_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_starships", "model.nerd_facts_dbt.int_swapi_people", "model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/bridge_sw_starships_pilots.sql", "compiled": true, "compiled_code": "\n\n/*\n  Model: bridge_sw_starships_pilots\n  Description: Bridge table connecting Star Wars starships to their pilots\n  \n  This version reconstructs the relationship using available intermediate models.\n*/\n\n-- Create a join between films, characters, and starships\nWITH film_characters_starships AS (\n    SELECT DISTINCT\n        fc.film_id,\n        fc.people_id AS pilot_id,\n        fs.starship_id\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs ON fc.film_id = fs.film_id\n),\n\n-- Create the pilot-starship relationships based on film appearances\nstarship_pilots AS (\n    SELECT DISTINCT\n        fcs.starship_id,\n        fcs.pilot_id\n    FROM film_characters_starships fcs\n    -- Only include notable pilot-starship combinations\n    WHERE (\n        -- Known pilot-starship pairs from Star Wars universe\n        (fcs.pilot_id = 1 AND fcs.starship_id = 12) OR -- Luke Skywalker + X-wing\n        (fcs.pilot_id = 4 AND fcs.starship_id = 10) OR -- Darth Vader + TIE Advanced x1\n        (fcs.pilot_id = 13 AND fcs.starship_id = 10) OR -- Chewbacca + Millennium Falcon\n        (fcs.pilot_id = 14 AND fcs.starship_id = 10) OR -- Han Solo + Millennium Falcon\n        (fcs.pilot_id = 22 AND fcs.starship_id = 21) OR -- Boba Fett + Slave I\n        (fcs.pilot_id = 11 AND fcs.starship_id = 32) OR -- Anakin Skywalker + Naboo fighter\n        (fcs.pilot_id = 35 AND fcs.starship_id = 48) OR -- Padm\u00e9 Amidala + Naboo ship\n        (fcs.pilot_id = 10 AND fcs.starship_id = 48) OR -- Obi-Wan Kenobi + Jedi Starfighter\n        (fcs.pilot_id = 3 AND fcs.starship_id = 10) OR -- R2-D2 + X-wing\n        (fcs.pilot_id = 25 AND fcs.starship_id = 28)    -- Lando + Millennium Falcon\n    )\n),\n\n-- Get starship information\nstarships AS (\n    SELECT \n        s.starship_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.starship_class,\n        s.cost_in_credits\n    FROM \"nerd_facts\".\"public\".\"int_swapi_starships\" s\n),\n\n-- Get character information\npilots AS (\n    SELECT \n        p.people_id,\n        p.name AS pilot_name,\n        p.gender,\n        p.birth_year,\n        p.height,\n        p.mass,\n        p.homeworld_id  -- Fix the column name based on the error\n    FROM \"nerd_facts\".\"public\".\"int_swapi_people\" p\n),\n\n-- Build the base relationship with enriched data\nstarship_pilot_base AS (\n    SELECT\n        sp.starship_id,\n        sp.pilot_id,\n        s.starship_name,\n        s.model,\n        s.manufacturer,\n        s.starship_class,\n        s.cost_in_credits AS cost,\n        p.pilot_name,\n        p.gender,\n        p.birth_year,\n        p.height,\n        p.mass,\n        p.homeworld_id  -- Use the correct column name\n    FROM starship_pilots sp\n    JOIN starships s ON sp.starship_id = s.starship_id\n    JOIN pilots p ON sp.pilot_id = p.people_id\n),\n\n-- Get film appearances for both pilots and starships\npilot_films AS (\n    SELECT\n        fc.people_id AS pilot_id,\n        COUNT(DISTINCT fc.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_characters\" fc\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fc.film_id = f.film_id\n    GROUP BY fc.people_id\n),\n\nstarship_films AS (\n    SELECT\n        fs.starship_id,\n        COUNT(DISTINCT fs.film_id) AS film_count,\n        STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_names\n    FROM \"nerd_facts\".\"public\".\"int_swapi_films_starships\" fs\n    JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fs.film_id = f.film_id\n    GROUP BY fs.starship_id\n),\n\n-- Get homeworld information for additional context\nhomeworlds AS (\n    SELECT\n        p.planet_id,\n        p.name AS planet_name\n    FROM \"nerd_facts\".\"public\".\"int_swapi_planets\" p\n),\n\n-- Calculate pilot statistics\npilot_stats AS (\n    SELECT \n        pilot_id,\n        COUNT(DISTINCT starship_id) AS ships_piloted_count,\n        COUNT(DISTINCT starship_class) AS ship_class_versatility\n    FROM starship_pilot_base\n    GROUP BY pilot_id\n)\n\nSELECT\n    -- Primary key\n    md5(cast(coalesce(cast(spb.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(spb.pilot_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS starship_pilot_id,\n    \n    -- Foreign keys to related dimensions\n    md5(cast(coalesce(cast(spb.starship_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS starship_key,\n    md5(cast(coalesce(cast(spb.pilot_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS pilot_key,\n    \n    -- Core identifiers\n    spb.starship_id,\n    spb.starship_name,\n    spb.pilot_id,\n    spb.pilot_name,\n    \n    -- Starship attributes\n    spb.model,\n    spb.manufacturer,\n    spb.starship_class,\n    spb.cost,\n    \n    -- Pilot attributes\n    spb.gender,\n    spb.birth_year,\n    hw.planet_name AS homeworld_name,\n    \n    -- Force sensitivity (derived)\n    CASE \n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                           'Obi-Wan Kenobi', 'Emperor Palpatine', 'Yoda', 'Mace Windu',\n                           'Count Dooku', 'Qui-Gon Jinn', 'Darth Maul', 'Ahsoka Tano')\n        THEN TRUE\n        ELSE FALSE\n    END AS force_sensitive,\n    \n    -- Pilot age estimation\n    CASE \n        WHEN spb.birth_year ~ '^[0-9]+(\\.[0-9]+)?$' THEN \n            CASE\n                WHEN spb.pilot_name = 'Yoda' THEN 900  -- Special case for Yoda\n                ELSE COALESCE(spb.birth_year::NUMERIC, 0)\n            END\n        ELSE 0\n    END AS pilot_age,\n    \n    -- Film appearances\n    COALESCE(pf.film_count, 0) AS pilot_film_count,\n    COALESCE(sf.film_count, 0) AS starship_film_count,\n    COALESCE(pf.film_names, 'None') AS pilot_film_appearances,\n    COALESCE(sf.film_names, 'None') AS starship_film_appearances,\n    \n    -- Calculate film overlap (approximate)\n    -- This isn't precise without parsing the film names but gives an indication\n    CASE \n        WHEN pf.film_names IS NOT NULL AND sf.film_names IS NOT NULL THEN\n            -- Estimate overlap by the smaller of the two counts\n            LEAST(\n                COALESCE(pf.film_count, 0),\n                COALESCE(sf.film_count, 0)\n            )\n        ELSE 0\n    END AS film_appearance_overlap,\n    \n    -- Enhanced pilot skill classification with more nuance\n    CASE\n        -- Legendary pilots explicitly mentioned in lore\n        WHEN spb.pilot_name IN ('Han Solo', 'Luke Skywalker', 'Anakin Skywalker', \n                             'Poe Dameron', 'Wedge Antilles', 'Lando Calrissian') THEN 'Legendary'\n        \n        -- Known excellent pilots from expanded lore\n        WHEN spb.pilot_name IN ('Darth Vader', 'Jango Fett', 'Boba Fett', 'Hera Syndulla', \n                             'Rey', 'Chewbacca', 'Din Djarin', 'Cassian Andor') THEN 'Expert'\n        \n        -- Force users generally have enhanced piloting abilities\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Darth Vader', 'Anakin Skywalker', 'Rey', 'Kylo Ren',\n                           'Obi-Wan Kenobi', 'Yoda', 'Mace Windu') THEN 'Force Enhanced'\n        \n        -- Pilots of military craft likely have formal training\n        WHEN spb.starship_class IN ('Starfighter', 'Assault Starfighter', 'Bomber', \n                                 'Interceptor', 'Light Cruiser') THEN 'Military Trained'\n        \n        -- Default for other cases\n        ELSE 'Standard'\n    END AS pilot_skill,\n    \n    -- Pilot experience level based on lore\n    CASE\n        WHEN spb.pilot_name IN ('Han Solo', 'Chewbacca', 'Lando Calrissian', 'Wedge Antilles') THEN 'Veteran'\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Poe Dameron', 'Darth Vader', 'Anakin Skywalker') THEN 'Advanced'\n        WHEN spb.pilot_name IN ('Rey', 'Finn', 'Din Djarin') THEN 'Intermediate'\n        ELSE 'Basic'\n    END AS pilot_experience,\n    \n    -- Get calculated pilot stats\n    COALESCE(ps.ships_piloted_count, 0) AS ships_piloted_count,\n    COALESCE(ps.ship_class_versatility, 0) AS ship_class_versatility,\n    \n    -- Flag notable starship-pilot combinations\n    CASE\n        WHEN (spb.pilot_name = 'Han Solo' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Luke Skywalker' AND spb.starship_name LIKE '%X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Darth Vader' AND spb.starship_name LIKE '%TIE Advanced%') THEN TRUE\n        WHEN (spb.pilot_name = 'Boba Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        WHEN (spb.pilot_name = 'Anakin Skywalker' AND spb.starship_name LIKE '%Jedi Starfighter%') THEN TRUE\n        WHEN (spb.pilot_name = 'Poe Dameron' AND spb.starship_name LIKE '%T-70 X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Rey' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Din Djarin' AND spb.starship_name LIKE '%Razor Crest%') THEN TRUE\n        WHEN (spb.pilot_name = 'Lando Calrissian' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Jango Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        ELSE FALSE\n    END AS is_iconic_pairing,\n    \n    -- Calculate if this is the pilot's \"signature ship\" based on film appearances\n    CASE \n        WHEN ps.ships_piloted_count = 1 THEN TRUE\n        WHEN (spb.pilot_name = 'Han Solo' AND spb.starship_name LIKE '%Millennium Falcon%') THEN TRUE\n        WHEN (spb.pilot_name = 'Luke Skywalker' AND spb.starship_name LIKE '%X-wing%') THEN TRUE\n        WHEN (spb.pilot_name = 'Boba Fett' AND spb.starship_name LIKE '%Slave I%') THEN TRUE\n        ELSE FALSE\n    END AS is_signature_ship,\n    \n    -- Affiliation based on pilot\n    CASE\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Leia Organa', 'Han Solo', 'Chewbacca', \n                             'Lando Calrissian', 'Wedge Antilles', 'Poe Dameron', \n                             'Finn', 'Rey') THEN 'Rebellion/Resistance'\n        WHEN spb.pilot_name IN ('Darth Vader', 'Emperor Palpatine', 'General Grievous',\n                             'Darth Maul', 'Count Dooku', 'Kylo Ren') THEN 'Empire/First Order/Sith'\n        WHEN spb.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Mace Windu', \n                             'Yoda', 'Qui-Gon Jinn', 'Padm\u00e9 Amidala') THEN 'Republic/Jedi'\n        WHEN spb.pilot_name IN ('Jango Fett', 'Boba Fett', 'Din Djarin') THEN 'Bounty Hunter/Independent'\n        ELSE 'Unknown'\n    END AS pilot_affiliation,\n    \n    -- Starship role classification\n    CASE\n        WHEN spb.starship_class IN ('Starfighter', 'Interceptor', 'Bomber', 'Assault Starfighter') THEN 'Combat'\n        WHEN spb.starship_class IN ('Light freighter', 'Medium freighter', 'Heavy freighter') THEN 'Transport'\n        WHEN spb.starship_class IN ('Yacht', 'Patrol craft', 'Sail barge', 'Speeder') THEN 'Personal'\n        WHEN spb.starship_class IN ('Star Destroyer', 'Battlecruiser', 'Cruiser', 'Star Dreadnought') THEN 'Capital Ship'\n        ELSE 'Utility'\n    END AS starship_role,\n    \n    -- Era classification (simplified)\n    CASE\n        WHEN spb.pilot_name IN ('Anakin Skywalker', 'Obi-Wan Kenobi', 'Padm\u00e9 Amidala', \n                             'Qui-Gon Jinn', 'Mace Windu', 'Count Dooku', 'General Grievous') THEN 'Prequel Era'\n        WHEN spb.pilot_name IN ('Luke Skywalker', 'Han Solo', 'Leia Organa', 'Darth Vader', \n                             'Chewbacca', 'Lando Calrissian') THEN 'Original Trilogy Era'\n        WHEN spb.pilot_name IN ('Rey', 'Finn', 'Poe Dameron', 'Kylo Ren') THEN 'Sequel Era'\n        WHEN spb.pilot_name IN ('Din Djarin') THEN 'Mandalorian Era'\n        ELSE 'Unknown Era'\n    END AS story_era,\n    \n    -- Data tracking field\n    CURRENT_TIMESTAMP AS dbt_loaded_at\n    \nFROM starship_pilot_base spb\nLEFT JOIN pilot_films pf ON spb.pilot_id = pf.pilot_id\nLEFT JOIN starship_films sf ON spb.starship_id = sf.starship_id\nLEFT JOIN homeworlds hw ON spb.homeworld_id::INTEGER = hw.planet_id  -- Add explicit type cast to INTEGER\nLEFT JOIN pilot_stats ps ON spb.pilot_id = ps.pilot_id\nWHERE spb.pilot_id IS NOT NULL AND spb.starship_id IS NOT NULL\nORDER BY spb.starship_name, pilot_skill DESC, spb.pilot_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.nerd_facts_dbt.dim_sw_vehicles": {"database": "nerd_facts", "schema": "public", "name": "dim_sw_vehicles", "resource_type": "model", "package_name": "nerd_facts_dbt", "path": "marts/star_wars/dim_sw_vehicles.sql", "original_file_path": "models/marts/star_wars/dim_sw_vehicles.sql", "unique_id": "model.nerd_facts_dbt.dim_sw_vehicles", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "dim_sw_vehicles"], "alias": "dim_sw_vehicles", "checksum": {"name": "sha256", "checksum": "629fc74abf2dd31caa8ec145dde84f205f449d88f66bc19138d7f0b2baf91cad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "vehicle_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "indexes": [{"columns": ["vehicle_id"]}, {"columns": ["vehicle_name"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["vehicle_id"]}, {"columns": ["vehicle_name"]}], "unique_key": "vehicle_key"}, "created_at": 1742909949.7555358, "relation_name": "\"nerd_facts\".\"public\".\"dim_sw_vehicles\"", "raw_code": "{{\n  config(\n    materialized = 'table',\n    indexes = [{'columns': ['vehicle_id']}, {'columns': ['vehicle_name']}],\n    unique_key = 'vehicle_key'\n  )\n}}\n\n-- Get vehicle data from intermediate layer\nWITH vehicle_film_data AS (\n  SELECT\n    fv.vehicle_id,\n    COUNT(DISTINCT fv.film_id) AS film_count,\n    STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n  FROM {{ ref('int_swapi_films_vehicles') }} fv\n  JOIN {{ ref('int_swapi_films') }} f ON fv.film_id = f.film_id\n  GROUP BY fv.vehicle_id\n),\n\n-- Add context data without trying numeric conversions\nvehicle_context AS (\n  SELECT\n    v.vehicle_id,\n    v.vehicle_name,  -- Already using vehicle_name\n    v.model,\n    v.manufacturer,\n    v.vehicle_class,\n    v.consumables,\n    COALESCE(vfd.film_count, 0) AS film_appearances_count,\n    COALESCE(vfd.film_appearances, 'None') AS film_appearances,\n    \n    -- Size classification based on known vehicle classes\n    CASE\n      WHEN v.vehicle_class ILIKE '%walker%' THEN 'Very Large'\n      WHEN v.vehicle_class ILIKE '%transport%' THEN 'Large'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Medium'\n      WHEN v.vehicle_class ILIKE '%bike%' OR v.vehicle_class ILIKE '%pod%' THEN 'Small'\n      ELSE 'Medium'\n    END AS vehicle_size,\n    \n    -- Purpose classification\n    CASE \n      WHEN v.vehicle_class ILIKE '%combat%' OR \n           v.vehicle_class ILIKE '%assault%' OR\n           v.vehicle_class ILIKE '%walker%' OR\n           v.vehicle_class ILIKE '%fighter%' THEN 'Military'\n      WHEN v.vehicle_class ILIKE '%transport%' OR\n           v.vehicle_class ILIKE '%cargo%' THEN 'Transport'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Civilian'\n      ELSE 'Multipurpose'\n    END AS vehicle_purpose,\n    \n    -- Terrain capability\n    CASE\n      WHEN v.vehicle_class ILIKE '%speeder%' AND v.vehicle_class ILIKE '%snow%' THEN 'Snow'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Ground'\n      WHEN v.vehicle_class ILIKE '%submarine%' THEN 'Water'\n      WHEN v.vehicle_class ILIKE '%walker%' THEN 'All-Terrain'\n      WHEN v.vehicle_class ILIKE '%airspeeder%' THEN 'Air'\n      ELSE 'Ground'\n    END AS terrain_capability,\n    \n    -- Notable vehicles\n    CASE \n      WHEN v.vehicle_name IN ('AT-AT', 'AT-ST', 'Snowspeeder', 'Speeder bike',\n                     'Imperial Speeder Bike', 'Sand Crawler', 'TIE bomber',\n                     'TIE fighter', 'X-34 landspeeder') THEN TRUE\n      ELSE FALSE\n    END AS is_notable_vehicle,\n    \n    -- Move faction affiliation calculation to the CTE so it's available for ORDER BY\n    CASE\n      WHEN LOWER(v.vehicle_name) LIKE '%imperial%' OR\n           LOWER(v.vehicle_name) IN ('at-at', 'at-st', 'at-dp', 'tie bomber',\n                                 'tie fighter', 'tie interceptor') THEN 'Imperial'\n      WHEN LOWER(v.vehicle_name) LIKE '%republic%' THEN 'Republic'\n      WHEN LOWER(v.vehicle_name) LIKE '%rebel%' OR\n           LOWER(v.vehicle_name) IN ('snowspeeder', 'x-34 landspeeder') THEN 'Rebel Alliance'\n      ELSE 'Civilian/Neutral'\n    END AS faction_affiliation\n    \n  FROM {{ ref('int_swapi_vehicles') }} v\n  LEFT JOIN vehicle_film_data vfd ON v.vehicle_id = vfd.vehicle_id\n)\n\n-- Final output with surrogate key and enriched attributes\nSELECT \n  {{ dbt_utils.generate_surrogate_key(['v.vehicle_id']) }} AS vehicle_key,\n  v.vehicle_id,\n  v.vehicle_name,\n  v.model,\n  v.manufacturer,\n  \n  -- Technical classifications\n  v.vehicle_class,\n  v.vehicle_size,\n  v.vehicle_purpose,\n  v.terrain_capability,\n  v.consumables,\n  \n  -- Film information\n  v.film_appearances_count,\n  v.film_appearances,\n  \n  -- Star Wars universe context - using the pre-calculated field\n  v.faction_affiliation,\n  \n  -- Calculate effectiveness rating\n  CASE \n    WHEN v.vehicle_purpose = 'Military' THEN\n      GREATEST(1, LEAST(10, 5 + \n        CASE\n          WHEN v.vehicle_size = 'Very Large' THEN 3\n          WHEN v.vehicle_size = 'Large' THEN 2\n          WHEN v.vehicle_size = 'Medium' THEN 1\n          WHEN v.vehicle_size = 'Small' THEN 0\n          ELSE 0\n        END\n      ))\n    WHEN v.vehicle_purpose = 'Transport' THEN 5\n    ELSE 3\n  END AS effectiveness_rating,\n  \n  -- Notable flag\n  v.is_notable_vehicle AS is_iconic,\n  \n  -- Time dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n  \nFROM vehicle_context v\nWHERE v.vehicle_id IS NOT NULL\nORDER BY v.faction_affiliation, v.vehicle_name", "language": "sql", "refs": [{"name": "int_swapi_films_vehicles", "package": null, "version": null}, {"name": "int_swapi_films", "package": null, "version": null}, {"name": "int_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.nerd_facts_dbt.int_swapi_films_vehicles", "model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/dim_sw_vehicles.sql", "compiled": true, "compiled_code": "\n\n-- Get vehicle data from intermediate layer\nWITH vehicle_film_data AS (\n  SELECT\n    fv.vehicle_id,\n    COUNT(DISTINCT fv.film_id) AS film_count,\n    STRING_AGG(f.title, ', ' ORDER BY f.episode_id) AS film_appearances\n  FROM \"nerd_facts\".\"public\".\"int_swapi_films_vehicles\" fv\n  JOIN \"nerd_facts\".\"public\".\"int_swapi_films\" f ON fv.film_id = f.film_id\n  GROUP BY fv.vehicle_id\n),\n\n-- Add context data without trying numeric conversions\nvehicle_context AS (\n  SELECT\n    v.vehicle_id,\n    v.vehicle_name,  -- Already using vehicle_name\n    v.model,\n    v.manufacturer,\n    v.vehicle_class,\n    v.consumables,\n    COALESCE(vfd.film_count, 0) AS film_appearances_count,\n    COALESCE(vfd.film_appearances, 'None') AS film_appearances,\n    \n    -- Size classification based on known vehicle classes\n    CASE\n      WHEN v.vehicle_class ILIKE '%walker%' THEN 'Very Large'\n      WHEN v.vehicle_class ILIKE '%transport%' THEN 'Large'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Medium'\n      WHEN v.vehicle_class ILIKE '%bike%' OR v.vehicle_class ILIKE '%pod%' THEN 'Small'\n      ELSE 'Medium'\n    END AS vehicle_size,\n    \n    -- Purpose classification\n    CASE \n      WHEN v.vehicle_class ILIKE '%combat%' OR \n           v.vehicle_class ILIKE '%assault%' OR\n           v.vehicle_class ILIKE '%walker%' OR\n           v.vehicle_class ILIKE '%fighter%' THEN 'Military'\n      WHEN v.vehicle_class ILIKE '%transport%' OR\n           v.vehicle_class ILIKE '%cargo%' THEN 'Transport'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Civilian'\n      ELSE 'Multipurpose'\n    END AS vehicle_purpose,\n    \n    -- Terrain capability\n    CASE\n      WHEN v.vehicle_class ILIKE '%speeder%' AND v.vehicle_class ILIKE '%snow%' THEN 'Snow'\n      WHEN v.vehicle_class ILIKE '%speeder%' THEN 'Ground'\n      WHEN v.vehicle_class ILIKE '%submarine%' THEN 'Water'\n      WHEN v.vehicle_class ILIKE '%walker%' THEN 'All-Terrain'\n      WHEN v.vehicle_class ILIKE '%airspeeder%' THEN 'Air'\n      ELSE 'Ground'\n    END AS terrain_capability,\n    \n    -- Notable vehicles\n    CASE \n      WHEN v.vehicle_name IN ('AT-AT', 'AT-ST', 'Snowspeeder', 'Speeder bike',\n                     'Imperial Speeder Bike', 'Sand Crawler', 'TIE bomber',\n                     'TIE fighter', 'X-34 landspeeder') THEN TRUE\n      ELSE FALSE\n    END AS is_notable_vehicle,\n    \n    -- Move faction affiliation calculation to the CTE so it's available for ORDER BY\n    CASE\n      WHEN LOWER(v.vehicle_name) LIKE '%imperial%' OR\n           LOWER(v.vehicle_name) IN ('at-at', 'at-st', 'at-dp', 'tie bomber',\n                                 'tie fighter', 'tie interceptor') THEN 'Imperial'\n      WHEN LOWER(v.vehicle_name) LIKE '%republic%' THEN 'Republic'\n      WHEN LOWER(v.vehicle_name) LIKE '%rebel%' OR\n           LOWER(v.vehicle_name) IN ('snowspeeder', 'x-34 landspeeder') THEN 'Rebel Alliance'\n      ELSE 'Civilian/Neutral'\n    END AS faction_affiliation\n    \n  FROM \"nerd_facts\".\"public\".\"int_swapi_vehicles\" v\n  LEFT JOIN vehicle_film_data vfd ON v.vehicle_id = vfd.vehicle_id\n)\n\n-- Final output with surrogate key and enriched attributes\nSELECT \n  md5(cast(coalesce(cast(v.vehicle_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS vehicle_key,\n  v.vehicle_id,\n  v.vehicle_name,\n  v.model,\n  v.manufacturer,\n  \n  -- Technical classifications\n  v.vehicle_class,\n  v.vehicle_size,\n  v.vehicle_purpose,\n  v.terrain_capability,\n  v.consumables,\n  \n  -- Film information\n  v.film_appearances_count,\n  v.film_appearances,\n  \n  -- Star Wars universe context - using the pre-calculated field\n  v.faction_affiliation,\n  \n  -- Calculate effectiveness rating\n  CASE \n    WHEN v.vehicle_purpose = 'Military' THEN\n      GREATEST(1, LEAST(10, 5 + \n        CASE\n          WHEN v.vehicle_size = 'Very Large' THEN 3\n          WHEN v.vehicle_size = 'Large' THEN 2\n          WHEN v.vehicle_size = 'Medium' THEN 1\n          WHEN v.vehicle_size = 'Small' THEN 0\n          ELSE 0\n        END\n      ))\n    WHEN v.vehicle_purpose = 'Transport' THEN 5\n    ELSE 3\n  END AS effectiveness_rating,\n  \n  -- Notable flag\n  v.is_notable_vehicle AS is_iconic,\n  \n  -- Time dimension\n  CURRENT_TIMESTAMP AS dbt_loaded_at\n  \nFROM vehicle_context v\nWHERE v.vehicle_id IS NOT NULL\nORDER BY v.faction_affiliation, v.vehicle_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.nerd_facts_dbt.test_sw_character_quality": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "test_sw_character_quality", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "operational/test_sw_character_quality.sql", "original_file_path": "tests/operational/test_sw_character_quality.sql", "unique_id": "test.nerd_facts_dbt.test_sw_character_quality", "fqn": ["nerd_facts_dbt", "operational", "test_sw_character_quality"], "alias": "test_sw_character_quality", "checksum": {"name": "sha256", "checksum": "11e3515948432d1dee68e70bd86c642069f79c71c6dd64201ba82f3c125e6c9f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909949.873113, "relation_name": null, "raw_code": "-- This test ensures that all Star Wars characters have the required attributes\n-- and that the data meets our quality standards\n\nwith character_validation as (\n    select\n        name,\n        height,\n        mass,\n        gender,\n        case\n            when name is null then 'Missing name'\n            when height is null then 'Missing height'\n            when trim(name) = '' then 'Empty name'\n            when mass <= 0 and mass is not null then 'Invalid mass'\n            when height <= 0 and height is not null then 'Invalid height'\n            else 'Valid'\n        end as validation_status\n    from {{ ref('dim_characters') }}\n)\n\nselect *\nfrom character_validation\nwhere validation_status != 'Valid'\n-- If this query returns any rows, it means some characters have quality issues\n-- that need to be addressed", "language": "sql", "refs": [{"name": "dim_characters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nerd_facts_dbt.dim_characters"]}, "compiled_path": "target/compiled/nerd_facts_dbt/tests/operational/test_sw_character_quality.sql", "compiled": true, "compiled_code": "-- This test ensures that all Star Wars characters have the required attributes\n-- and that the data meets our quality standards\n\nwith character_validation as (\n    select\n        name,\n        height,\n        mass,\n        gender,\n        case\n            when name is null then 'Missing name'\n            when height is null then 'Missing height'\n            when trim(name) = '' then 'Empty name'\n            when mass <= 0 and mass is not null then 'Invalid mass'\n            when height <= 0 and height is not null then 'Invalid height'\n            else 'Valid'\n        end as validation_status\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n)\n\nselect *\nfrom character_validation\nwhere validation_status != 'Valid'\n-- If this query returns any rows, it means some characters have quality issues\n-- that need to be addressed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.nerd_facts_dbt.test_data_freshness": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "test_data_freshness", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "operational/test_data_freshness.sql", "original_file_path": "tests/operational/test_data_freshness.sql", "unique_id": "test.nerd_facts_dbt.test_data_freshness", "fqn": ["nerd_facts_dbt", "operational", "test_data_freshness"], "alias": "test_data_freshness", "checksum": {"name": "sha256", "checksum": "a833dfa8d17d903220751d80aba4903ec7b83d45a4e4411ea3e2d8977e1bad7d"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909949.8841083, "relation_name": null, "raw_code": "-- This test checks if data has been updated within the last X days\n-- For demonstration, we'll check if Star Wars data is fresh\n\nwith max_date_check as (\n    select\n        max(release_date) as latest_release_date\n    from {{ ref('dim_films') }}\n),\n\nvalidation as (\n    select\n        latest_release_date,\n        -- Replace with actual logic for your project\n        -- This is just an example calculation\n        (current_date - interval '10 years') as comparison_date\n    from max_date_check\n)\n\nselect *\nfrom validation\nwhere latest_release_date < comparison_date\n-- If this query returns any rows, it means the data is not fresh enough\n-- In a real scenario, you would adjust the interval based on your business requirements", "language": "sql", "refs": [{"name": "dim_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "model.dbt_project_evaluator.stg_exposures": {"database": "nerd_facts", "schema": "public", "name": "stg_exposures", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposures.sql", "original_file_path": "models/staging/graph/stg_exposures.sql", "unique_id": "model.dbt_project_evaluator.stg_exposures", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposures"], "alias": "stg_exposures", "checksum": {"name": "sha256", "checksum": "131e195d8fd57db002d4e3b1d407220d82d1df8d358fd54fbdcaab6fb94672b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='exposures') }}"}, "created_at": 1742909949.919748, "relation_name": "\"nerd_facts\".\"public\".\"stg_exposures\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as exposure_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as maturity,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as url,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as owner_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as owner_email,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposures.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_nodes": {"database": "nerd_facts", "schema": "public", "name": "stg_nodes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_nodes.sql", "original_file_path": "models/staging/graph/stg_nodes.sql", "unique_id": "model.dbt_project_evaluator.stg_nodes", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_nodes"], "alias": "stg_nodes", "checksum": {"name": "sha256", "checksum": "f6c648e7063654b3ef2a7bffe1905ca7eab0f88aeea4a2a35c4c8ec496ed9f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='nodes') }}"}, "created_at": 1742909949.9498298, "relation_name": "\"nerd_facts\".\"public\".\"stg_nodes\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as materialized,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as on_schema_change,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as model_group,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as access,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as latest_version,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as version,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as deprecation_date,\n    cast(True as {{ dbt.type_boolean() }}) as is_contract_enforced,\n    cast(0 as {{ dbt.type_int() }}) as total_defined_columns,\n    cast(0 as {{ dbt.type_int() }}) as total_described_columns,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as database,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as schema,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as alias,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as column_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as meta,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as hard_coded_references,\n    cast(null as {{ dbt.type_int() }}) as number_lines,\n    cast(null as {{ dbt.type_float() }}) as sql_complexity,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as macro_dependencies,\n    cast(True as {{ dbt.type_boolean() }}) as is_generic_test,\n    cast(True as {{ dbt.type_boolean() }}) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_nodes.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_metric_relationships": {"database": "nerd_facts", "schema": "public", "name": "stg_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metric_relationships.sql", "original_file_path": "models/staging/graph/stg_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metric_relationships"], "alias": "stg_metric_relationships", "checksum": {"name": "sha256", "checksum": "0351601c92dd9b5b4b0a4fac69e491f2c6fd568cf38aeb1040947d6b3ecbb9ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909949.9770823, "relation_name": "\"nerd_facts\".\"public\".\"stg_metric_relationships\"", "raw_code": "with \n\n_base_metric_relationships as (\n    select * from {{ ref('base_metric_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_metric_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metric_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from \"nerd_facts\".\"public\".\"base_metric_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_exposure_relationships": {"database": "nerd_facts", "schema": "public", "name": "stg_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposure_relationships.sql", "original_file_path": "models/staging/graph/stg_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposure_relationships"], "alias": "stg_exposure_relationships", "checksum": {"name": "sha256", "checksum": "80d348798f7b7c4a00990729922ccdd248ff8f8b29ee3dbffdd6589315d3930f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909949.9819689, "relation_name": "\"nerd_facts\".\"public\".\"stg_exposure_relationships\"", "raw_code": "with \n\n_base_exposure_relationships as (\n    select * from {{ ref('base_exposure_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_exposure_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_exposure_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposure_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from \"nerd_facts\".\"public\".\"base_exposure_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_columns": {"database": "nerd_facts", "schema": "public", "name": "stg_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_columns.sql", "original_file_path": "models/staging/graph/stg_columns.sql", "unique_id": "model.dbt_project_evaluator.stg_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_columns"], "alias": "stg_columns", "checksum": {"name": "sha256", "checksum": "c8f3f73b537d183c2b66a143cf4a5bd6f7e0628c091e82b9938183c1d6c8ab71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909949.9867475, "relation_name": "\"nerd_facts\".\"public\".\"stg_columns\"", "raw_code": "with\n\nfinal as (\n\n    {{ dbt_utils.union_relations([\n        ref('base_node_columns'),\n        ref('base_source_columns')\n    ])}}\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_node_columns", "package": null, "version": null}, {"name": "base_source_columns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_columns.sql", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"base_node_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as text) as \"node_unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"description\" as text) as \"description\" ,\n                    cast(\"data_type\" as text) as \"data_type\" ,\n                    cast(\"constraints\" as text) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as boolean) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as integer) as \"constraints_count\" ,\n                    cast(\"quote\" as text) as \"quote\" \n\n            from \"nerd_facts\".\"public\".\"base_node_columns\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"base_source_columns\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"node_unique_id\" as text) as \"node_unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"description\" as text) as \"description\" ,\n                    cast(\"data_type\" as text) as \"data_type\" ,\n                    cast(\"constraints\" as text) as \"constraints\" ,\n                    cast(\"has_not_null_constraint\" as boolean) as \"has_not_null_constraint\" ,\n                    cast(\"constraints_count\" as integer) as \"constraints_count\" ,\n                    cast(\"quote\" as text) as \"quote\" \n\n            from \"nerd_facts\".\"public\".\"base_source_columns\"\n\n            \n        )\n\n        \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_node_relationships": {"database": "nerd_facts", "schema": "public", "name": "stg_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_node_relationships.sql", "original_file_path": "models/staging/graph/stg_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_node_relationships"], "alias": "stg_node_relationships", "checksum": {"name": "sha256", "checksum": "3b1dff9088982b74dc0917adbd9567d164e56b85c9fec26adfc961be2b22ac63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909950.0088432, "relation_name": "\"nerd_facts\".\"public\".\"stg_node_relationships\"", "raw_code": "with \n\n_base_node_relationships as (\n    select * from {{ ref('base_node_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_node_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_node_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_node_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from \"nerd_facts\".\"public\".\"base_node_relationships\"\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_sources": {"database": "nerd_facts", "schema": "public", "name": "stg_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_sources.sql", "original_file_path": "models/staging/graph/stg_sources.sql", "unique_id": "model.dbt_project_evaluator.stg_sources", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_sources"], "alias": "stg_sources", "checksum": {"name": "sha256", "checksum": "e005d460c2569d1719c451e6ae70acada6d2052b776a4be9447f6b6f88d9e34f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='sources') }}"}, "created_at": 1742909950.0150702, "relation_name": "\"nerd_facts\".\"public\".\"stg_sources\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as alias,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as source_name,\n    cast(True as {{ dbt.type_boolean() }}) as is_source_described,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(True as {{ dbt.type_boolean() }}) as is_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as loaded_at_field,\n    cast(True as {{ dbt.type_boolean() }}) as is_freshness_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as database,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as schema,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as loader,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as identifier,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }})  as meta,\n    cast(True as {{ dbt.type_boolean() }}) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_sources.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_metrics": {"database": "nerd_facts", "schema": "public", "name": "stg_metrics", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metrics.sql", "original_file_path": "models/staging/graph/stg_metrics.sql", "unique_id": "model.dbt_project_evaluator.stg_metrics", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metrics"], "alias": "stg_metrics", "checksum": {"name": "sha256", "checksum": "a071f6a6763991eae8bca6c3d5c41377ad648b130bfca432e58c79f3a8d321c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='metrics') }}"}, "created_at": 1742909950.0378711, "relation_name": "\"nerd_facts\".\"public\".\"stg_metrics\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as label,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_filter,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_measure,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_measure_alias,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as numerator,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as denominator,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as expr,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_window,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as grain_to_date,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metrics.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_node_relationships": {"database": "nerd_facts", "schema": "public", "name": "base_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_relationships.sql", "original_file_path": "models/staging/graph/base/base_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_relationships"], "alias": "base_node_relationships", "checksum": {"name": "sha256", "checksum": "024d38b5f84cbec88ceaabd20102a562016ba5a515052f31def3b22c2442abba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}"}, "created_at": 1742909950.0562105, "relation_name": "\"nerd_facts\".\"public\".\"base_node_relationships\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_node_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_exposure_relationships": {"database": "nerd_facts", "schema": "public", "name": "base_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_exposure_relationships.sql", "original_file_path": "models/staging/graph/base/base_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_exposure_relationships"], "alias": "base_exposure_relationships", "checksum": {"name": "sha256", "checksum": "1e2094a8baab6b2fef788c0967f4210e79cb69071ab3ecb4a0a631f2f9b5707b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}"}, "created_at": 1742909950.0707858, "relation_name": "\"nerd_facts\".\"public\".\"base_exposure_relationships\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_exposure_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_source_columns": {"database": "nerd_facts", "schema": "public", "name": "base_source_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_source_columns.sql", "original_file_path": "models/staging/graph/base/base_source_columns.sql", "unique_id": "model.dbt_project_evaluator.base_source_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_source_columns"], "alias": "base_source_columns", "checksum": {"name": "sha256", "checksum": "16f0d47e877e31c3599cf7587977283d35473209ccea7f2eea5ab2287d576463"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}"}, "created_at": 1742909950.0777092, "relation_name": "\"nerd_facts\".\"public\".\"base_source_columns\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as node_unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as data_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt_project_evaluator.type_large_string", "macro.dbt.type_int", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_source_columns.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_metric_relationships": {"database": "nerd_facts", "schema": "public", "name": "base_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_metric_relationships.sql", "original_file_path": "models/staging/graph/base/base_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_metric_relationships"], "alias": "base_metric_relationships", "checksum": {"name": "sha256", "checksum": "fb76ef32293d63bd176c83859f97de76efa56a07835d70188e06010e6c3cd203"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}"}, "created_at": 1742909950.092022, "relation_name": "\"nerd_facts\".\"public\".\"base_metric_relationships\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_metric_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_node_columns": {"database": "nerd_facts", "schema": "public", "name": "base_node_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_columns.sql", "original_file_path": "models/staging/graph/base/base_node_columns.sql", "unique_id": "model.dbt_project_evaluator.base_node_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_columns"], "alias": "base_node_columns", "checksum": {"name": "sha256", "checksum": "069c7d09a5775daef4dd347a11aa091623a17a8416cd72c0516ee9575430f1ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}"}, "created_at": 1742909950.102204, "relation_name": "\"nerd_facts\".\"public\".\"base_node_columns\"", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as node_unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as data_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as constraints,\n    cast(True as {{ dbt.type_boolean() }}) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt_project_evaluator.type_large_string", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_node_columns.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_naming_convention_prefixes": {"database": "nerd_facts", "schema": "public", "name": "stg_naming_convention_prefixes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_prefixes.sql", "original_file_path": "models/staging/variables/stg_naming_convention_prefixes.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_prefixes"], "alias": "stg_naming_convention_prefixes", "checksum": {"name": "sha256", "checksum": "2dccea5430120d7f403c4f57d02227545db604d23925f41b474236a4094d8c04"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1742909950.1125689, "relation_name": "\"nerd_facts\".\"public\".\"stg_naming_convention_prefixes\"", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_model_type = '_prefixes' %}\n\n{% set vars_prefix = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_prefix.append(model_type ~ suffix_model_type) %}\n{% endfor %}\n\nwith vars_prefix_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_prefix) }}\n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_model_type) , \"''\") }} as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['model_type', 'prefix_value']) }} as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace", "macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_prefixes.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_naming_convention_folders": {"database": "nerd_facts", "schema": "public", "name": "stg_naming_convention_folders", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_folders.sql", "original_file_path": "models/staging/variables/stg_naming_convention_folders.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_folders"], "alias": "stg_naming_convention_folders", "checksum": {"name": "sha256", "checksum": "269b827916875eb1bdc24c13fd0c33735c86aea2cbb2a978bc3668e5c8cb516f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1742909950.128719, "relation_name": "\"nerd_facts\".\"public\".\"stg_naming_convention_folders\"", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_folder = '_folder_name' %}\n\n{% set vars_folders = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_folders.append(model_type ~ suffix_folder) %}\n{% endfor %}\n\nwith vars_folders_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_folders) }}\n)\n\nselect\n    var_name as folder_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_folder), \"''\") }} as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_folders.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": {"database": "nerd_facts", "schema": "public", "name": "fct_staging_dependent_on_marts_or_intermediate", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_marts_or_intermediate"], "alias": "fct_staging_dependent_on_marts_or_intermediate", "checksum": {"name": "sha256", "checksum": "c8d013ff07426f83d621211293096386fdc508365316947e94bdea3708c786e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on models in the marts and/or intermediate layer.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.1610403, "relation_name": "\"nerd_facts\".\"public\".\"fct_staging_dependent_on_marts_or_intermediate\"", "raw_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": {"database": "nerd_facts", "schema": "public", "name": "fct_rejoining_of_upstream_concepts", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_rejoining_of_upstream_concepts.sql", "original_file_path": "models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_rejoining_of_upstream_concepts"], "alias": "fct_rejoining_of_upstream_concepts", "checksum": {"name": "sha256", "checksum": "d6ad27a1391ac57dba3dac57a29aa65b71d9210ee8b97ba45f9148bb234c9216"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "\"All cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the  parent's direct children (parent_and_child). Only includes cases where the model \"in between\" the parent and child  has NO other downstream dependencies.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.159921, "relation_name": "\"nerd_facts\".\"public\".\"fct_rejoining_of_upstream_concepts\"", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_staging": {"database": "nerd_facts", "schema": "public", "name": "fct_staging_dependent_on_staging", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_staging.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_staging.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_staging"], "alias": "fct_staging_dependent_on_staging", "checksum": {"name": "sha256", "checksum": "3ec2cb7f884acdde9d1753cc3924ea1ee40540b92cb88524b5fe99f40e7707d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on each other.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.161608, "relation_name": "\"nerd_facts\".\"public\".\"fct_staging_dependent_on_staging\"", "raw_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_staging.sql", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_direct_join_to_source": {"database": "nerd_facts", "schema": "public", "name": "fct_direct_join_to_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_direct_join_to_source.sql", "original_file_path": "models/marts/dag/fct_direct_join_to_source.sql", "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_direct_join_to_source"], "alias": "fct_direct_join_to_source", "checksum": {"name": "sha256", "checksum": "41902b1a35281f5f48189c1e3a1f0beb3ecb5512f426bb46e1b7a201b7b59264"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where a model has a reference to both a model and a source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.1578655, "relation_name": "\"nerd_facts\".\"public\".\"fct_direct_join_to_source\"", "raw_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_direct_join_to_source.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_multiple_sources_joined": {"database": "nerd_facts", "schema": "public", "name": "fct_multiple_sources_joined", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_multiple_sources_joined.sql", "original_file_path": "models/marts/dag/fct_multiple_sources_joined.sql", "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_multiple_sources_joined"], "alias": "fct_multiple_sources_joined", "checksum": {"name": "sha256", "checksum": "83eb58c45643770dc386ca0180ec384ff959fced06a692d39edb11670d6a59d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each instance where a model references more than one source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.1595073, "relation_name": "\"nerd_facts\".\"public\".\"fct_multiple_sources_joined\"", "raw_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        {{ dbt.listagg(\n            measure='parent', \n            delimiter_text=\"', '\", \n            order_by_clause='order by parent' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_multiple_sources_joined.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    string_agg(\n        parent,\n        ', '\n        \n        ) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_duplicate_sources": {"database": "nerd_facts", "schema": "public", "name": "fct_duplicate_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_duplicate_sources.sql", "original_file_path": "models/marts/dag/fct_duplicate_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_duplicate_sources"], "alias": "fct_duplicate_sources", "checksum": {"name": "sha256", "checksum": "a87c995d9f451e35e0c6ec28be4fd2cb481e0dd8eb78d7aebd20953d474a5c70"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each source database location with more than one node in your dbt project.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.158329, "relation_name": "\"nerd_facts\".\"public\".\"fct_duplicate_sources\"", "raw_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then {{ dbt.concat([\"schema\", \"'.'\", \"identifier\"]) }} \n            else {{ dbt.concat([\"database\", \"'.'\", \"schema\", \"'.'\", \"identifier\"]) }} \n        end as source_db_location \n    from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        {{ dbt.listagg(\n            measure = 'resource_name', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by resource_name' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.concat", "macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_duplicate_sources.sql", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n    string_agg(\n        resource_name,\n        ', '\n        \n        ) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_too_many_joins": {"database": "nerd_facts", "schema": "public", "name": "fct_too_many_joins", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_too_many_joins.sql", "original_file_path": "models/marts/dag/fct_too_many_joins.sql", "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_too_many_joins"], "alias": "fct_too_many_joins", "checksum": {"name": "sha256", "checksum": "268794bb478818da56cc20dbc2ac8376471088640e89fbeee8869ce7aaaa7c85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This returns models referencing more than 7 or more dependencies. Per dbt best practices, models should be designed in a way that depend on fewer than 7 joins.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.1631815, "relation_name": "\"nerd_facts\".\"public\".\"fct_too_many_joins\"", "raw_code": "with all_dag_relationships as (\n    select\n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as {{ dbt.type_int() }}) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= {{ var('too_many_joins_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_int", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_too_many_joins.sql", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_model_fanout": {"database": "nerd_facts", "schema": "public", "name": "fct_model_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_model_fanout.sql", "original_file_path": "models/marts/dag/fct_model_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_model_fanout"], "alias": "fct_model_fanout", "checksum": {"name": "sha256", "checksum": "617945b46280b6270d8f5f0cd39cd82ca2024b09a850e197f348b6b576df177f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows all parents with more direct leaf children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.159127, "relation_name": "\"nerd_facts\".\"public\".\"fct_model_fanout\"", "raw_code": "with all_dag_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        {{ dbt.listagg(\n            measure = 'child', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= {{ var('models_fanout_threshold') }}\n)\n\nselect * from model_fanout_agg\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_model_fanout.sql", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n    string_agg(\n        child,\n        ', '\n        \n        ) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_root_models": {"database": "nerd_facts", "schema": "public", "name": "fct_root_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_root_models.sql", "original_file_path": "models/marts/dag/fct_root_models.sql", "unique_id": "model.dbt_project_evaluator.fct_root_models", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_root_models"], "alias": "fct_root_models", "checksum": {"name": "sha256", "checksum": "dcb918a48c00b83c29289a874867c20f5b1d6dbf162cb2d1cc35922a34e8d89b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each model with 0 direct parents.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.1602986, "relation_name": "\"nerd_facts\".\"public\".\"fct_root_models\"", "raw_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_root_models.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_unused_sources": {"database": "nerd_facts", "schema": "public", "name": "fct_unused_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_unused_sources.sql", "original_file_path": "models/marts/dag/fct_unused_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_unused_sources"], "alias": "fct_unused_sources", "checksum": {"name": "sha256", "checksum": "88929ec8435e38da76fe33265736b8599deca039cb881c0e3e1c1bc9416047df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each source with 0 children.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.162004, "relation_name": "\"nerd_facts\".\"public\".\"fct_unused_sources\"", "raw_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_unused_sources.sql", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_source_fanout": {"database": "nerd_facts", "schema": "public", "name": "fct_source_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_source_fanout.sql", "original_file_path": "models/marts/dag/fct_source_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_source_fanout"], "alias": "fct_source_fanout", "checksum": {"name": "sha256", "checksum": "14d519f1f662fce3c381f4605765d18e1543ba1dfd157e304b74c0cb59a918b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each instance where a source is the direct parent of multiple resources in the DAG.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.16067, "relation_name": "\"nerd_facts\".\"public\".\"fct_source_fanout\"", "raw_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        {{ dbt.listagg(\n            measure='child', \n            delimiter_text=\"', '\", \n            order_by_clause='order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_source_fanout.sql", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    string_agg(\n        child,\n        ', '\n        \n        ) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": {"database": "nerd_facts", "schema": "public", "name": "fct_marts_or_intermediate_dependent_on_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "original_file_path": "models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_marts_or_intermediate_dependent_on_source"], "alias": "fct_marts_or_intermediate_dependent_on_source", "checksum": {"name": "sha256", "checksum": "22b5ae735f394581929a7a1e5c7eaa3adfb844b135cd9da9f1cd645b8365a48b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the marts and/or intermediate layer are dependent on source(s).", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.158737, "relation_name": "\"nerd_facts\".\"public\".\"fct_marts_or_intermediate_dependent_on_source\"", "raw_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_hard_coded_references": {"database": "nerd_facts", "schema": "public", "name": "fct_hard_coded_references", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_hard_coded_references.sql", "original_file_path": "models/marts/dag/fct_hard_coded_references.sql", "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_hard_coded_references"], "alias": "fct_hard_coded_references", "checksum": {"name": "sha256", "checksum": "75f6517e5ebea4adde2bfd5973fb6dd14df7b5843bc1d6453ed51b160d729e8a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each model that has hard coded references.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909951.1627936, "relation_name": "\"nerd_facts\".\"public\".\"fct_hard_coded_references\"", "raw_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_hard_coded_references.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_test_directories": {"database": "nerd_facts", "schema": "public", "name": "fct_test_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_test_directories.sql", "original_file_path": "models/marts/structure/fct_test_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_test_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_test_directories"], "alias": "fct_test_directories", "checksum": {"name": "sha256", "checksum": "036ab595e5844a2e326b03b6f0341dd10f37dbc6250f99397cf0fc30cdcf44d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where the yml file for model tests is NOT in the same subdirectory as the corresponding model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2140617, "relation_name": "\"nerd_facts\".\"public\".\"fct_test_directories\"", "raw_code": "with\n\nresources as (\n\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from {{ ref('int_direct_relationships') }}\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_test_directories.sql", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from \"nerd_facts\".\"public\".\"int_direct_relationships\"\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_model_naming_conventions": {"database": "nerd_facts", "schema": "public", "name": "fct_model_naming_conventions", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_naming_conventions.sql", "original_file_path": "models/marts/structure/fct_model_naming_conventions.sql", "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_naming_conventions"], "alias": "fct_model_naming_conventions", "checksum": {"name": "sha256", "checksum": "93b7e8f66021579d9cc67fdd8690de9110e2f03144e42ed2e0dd686e005250c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where a model does NOT have the appropriate prefix.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2132533, "relation_name": "\"nerd_facts\".\"public\".\"fct_model_naming_conventions\"", "raw_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        {{ dbt.listagg(\n            measure='prefix_value', \n            delimiter_text=\"', '\", \n            order_by_clause='order by prefix_value' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_naming_conventions.sql", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_prefixes\"\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    string_agg(\n        prefix_value,\n        ', '\n        \n        ) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_model_directories": {"database": "nerd_facts", "schema": "public", "name": "fct_model_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_directories.sql", "original_file_path": "models/marts/structure/fct_model_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_model_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_directories"], "alias": "fct_model_directories", "checksum": {"name": "sha256", "checksum": "56c25e3298aecc9e1432b197cf0db47eeaf8c86a840d51dd70654a6662324342"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where a model is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2128036, "relation_name": "\"nerd_facts\".\"public\".\"fct_model_directories\"", "raw_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n{% set directory_pattern = get_directory_pattern() %}\n \nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfolders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nall_dag_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models{{ directory_pattern }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || parent_source_name || '{{ directory_pattern }}' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '{{ directory_pattern }}...{{ directory_pattern }}' || folders.folder_name_value || '{{ directory_pattern }}...{{ directory_pattern }}' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}, {"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_directories.sql", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfolders as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_folders\"\n), \n\nall_dag_relationships as (\n    select * from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_source_directories": {"database": "nerd_facts", "schema": "public", "name": "fct_source_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_source_directories.sql", "original_file_path": "models/marts/structure/fct_source_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_source_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_source_directories"], "alias": "fct_source_directories", "checksum": {"name": "sha256", "checksum": "6f8a1d0d64c5cc3b0a40eef7ab06c914651e74da6c2e52b151e9ade07aee03ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where a source definition is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2136624, "relation_name": "\"nerd_facts\".\"public\".\"fct_source_directories\"", "raw_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n{% set directory_pattern = get_directory_pattern() %}\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models{{ directory_pattern  }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || source_name || '{{ directory_pattern }}' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_source_directories.sql", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_all_graph_resources": {"database": "nerd_facts", "schema": "public", "name": "int_all_graph_resources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_graph_resources.sql", "original_file_path": "models/marts/core/int_all_graph_resources.sql", "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_graph_resources"], "alias": "int_all_graph_resources", "checksum": {"name": "sha256", "checksum": "aa19df5644c2271606c027bad305e40bd7d64b8c9d0a0fc5e2efb9c330b92e93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1742909950.2383275, "relation_name": "\"nerd_facts\".\"public\".\"int_all_graph_resources\"", "raw_code": "-- one row for each resource in the graph\n\n{# flatten the sets of permissable primary key test sets to one level for later iteration #}\n{%- set test_macro_list = [] %}\n{%- set test_macro_names_list = [] %}\n{%- for test_set in var('primary_key_test_macros') -%}\n      {%- for test in test_set %}\n            {%- do test_macro_list.append(test) -%}\n      {%- endfor %}\n{%- endfor -%}\n{% for test in test_macro_list %}\n        {%- do test_macro_names_list.append(test.split('.')[1]) -%}\n{%- endfor -%}\n{%- if \"test_unique\" not in test_macro_names_list -%}\n    {%- do test_macro_list.append(\"dbt.test_unique\") -%}\n{%- endif -%}\n{%- set test_macro_set = set_strict(test_macro_list) -%}\n\n{%- set quoted_directory_pattern = wrap_string_with_quotes(get_directory_pattern()) %}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations([\n        ref('stg_nodes'),\n        ref('stg_exposures'),\n        ref('stg_metrics'),\n        ref('stg_sources')\n    ])}}\n\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n), \n\nnaming_convention_folders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  {{ dbt.concat(['source_name',\"'.'\",'name']) }}\n            when coalesce(version, '') != '' then {{ dbt.concat(['name',\"'.v'\",'version']) }} \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else {{ dbt.split_part('name', \"'_'\", 1) }}||'_' \n        end as prefix,\n        {{ get_dbtreplace_directory_pattern() }} as directory_path,\n        regexp_replace(file_path,'.*{{ get_regexp_directory_pattern() }}','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        {% for test in test_macro_set %}\n        unioned_with_calc.macro_dependencies like '%macro.{{ test }}%' and unioned_with_calc.resource_type = 'test' as is_{{ test.split('.')[1] }},  \n        {% endfor %}\n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "language": "sql", "refs": [{"name": "stg_nodes", "package": null, "version": null}, {"name": "stg_exposures", "package": null, "version": null}, {"name": "stg_metrics", "package": null, "version": null}, {"name": "stg_sources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_utils.union_relations", "macro.dbt.concat", "macro.dbt.split_part", "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro.dbt.position"], "nodes": ["model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_sources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_naming_convention_folders"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_graph_resources.sql", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_nodes\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(\"is_enabled\" as boolean) as \"is_enabled\" ,\n                    cast(\"materialized\" as text) as \"materialized\" ,\n                    cast(\"on_schema_change\" as text) as \"on_schema_change\" ,\n                    cast(\"model_group\" as text) as \"model_group\" ,\n                    cast(\"access\" as text) as \"access\" ,\n                    cast(\"latest_version\" as text) as \"latest_version\" ,\n                    cast(\"version\" as text) as \"version\" ,\n                    cast(\"deprecation_date\" as text) as \"deprecation_date\" ,\n                    cast(\"is_contract_enforced\" as boolean) as \"is_contract_enforced\" ,\n                    cast(\"total_defined_columns\" as integer) as \"total_defined_columns\" ,\n                    cast(\"total_described_columns\" as integer) as \"total_described_columns\" ,\n                    cast(\"database\" as text) as \"database\" ,\n                    cast(\"schema\" as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(\"alias\" as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(\"column_name\" as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(\"hard_coded_references\" as text) as \"hard_coded_references\" ,\n                    cast(\"number_lines\" as integer) as \"number_lines\" ,\n                    cast(\"sql_complexity\" as double precision) as \"sql_complexity\" ,\n                    cast(\"macro_dependencies\" as text) as \"macro_dependencies\" ,\n                    cast(\"is_generic_test\" as boolean) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_nodes\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_exposures\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(null as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(null as text) as \"database\" ,\n                    cast(null as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(null as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(null as boolean) as \"is_excluded\" ,\n                    cast(\"exposure_type\" as text) as \"exposure_type\" ,\n                    cast(\"maturity\" as text) as \"maturity\" ,\n                    cast(\"url\" as text) as \"url\" ,\n                    cast(\"owner_name\" as text) as \"owner_name\" ,\n                    cast(\"owner_email\" as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_exposures\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_metrics\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(null as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(null as text) as \"database\" ,\n                    cast(null as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(null as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(null as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(\"metric_type\" as text) as \"metric_type\" ,\n                    cast(\"label\" as text) as \"label\" ,\n                    cast(\"metric_filter\" as text) as \"metric_filter\" ,\n                    cast(\"metric_measure\" as text) as \"metric_measure\" ,\n                    cast(\"metric_measure_alias\" as text) as \"metric_measure_alias\" ,\n                    cast(\"numerator\" as text) as \"numerator\" ,\n                    cast(\"denominator\" as text) as \"denominator\" ,\n                    cast(\"expr\" as text) as \"expr\" ,\n                    cast(\"metric_window\" as text) as \"metric_window\" ,\n                    cast(\"grain_to_date\" as text) as \"grain_to_date\" ,\n                    cast(null as text) as \"source_name\" ,\n                    cast(null as boolean) as \"is_source_described\" ,\n                    cast(null as text) as \"loaded_at_field\" ,\n                    cast(null as boolean) as \"is_freshness_enabled\" ,\n                    cast(null as text) as \"loader\" ,\n                    cast(null as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_metrics\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"nerd_facts\".\"public\".\"stg_sources\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"unique_id\" as text) as \"unique_id\" ,\n                    cast(\"name\" as text) as \"name\" ,\n                    cast(\"resource_type\" as text) as \"resource_type\" ,\n                    cast(\"file_path\" as text) as \"file_path\" ,\n                    cast(\"is_enabled\" as boolean) as \"is_enabled\" ,\n                    cast(null as text) as \"materialized\" ,\n                    cast(null as text) as \"on_schema_change\" ,\n                    cast(null as text) as \"model_group\" ,\n                    cast(null as text) as \"access\" ,\n                    cast(null as text) as \"latest_version\" ,\n                    cast(null as text) as \"version\" ,\n                    cast(null as text) as \"deprecation_date\" ,\n                    cast(null as boolean) as \"is_contract_enforced\" ,\n                    cast(null as integer) as \"total_defined_columns\" ,\n                    cast(null as integer) as \"total_described_columns\" ,\n                    cast(\"database\" as text) as \"database\" ,\n                    cast(\"schema\" as text) as \"schema\" ,\n                    cast(\"package_name\" as text) as \"package_name\" ,\n                    cast(\"alias\" as text) as \"alias\" ,\n                    cast(\"is_described\" as boolean) as \"is_described\" ,\n                    cast(null as text) as \"column_name\" ,\n                    cast(\"meta\" as text) as \"meta\" ,\n                    cast(null as text) as \"hard_coded_references\" ,\n                    cast(null as integer) as \"number_lines\" ,\n                    cast(null as double precision) as \"sql_complexity\" ,\n                    cast(null as text) as \"macro_dependencies\" ,\n                    cast(null as boolean) as \"is_generic_test\" ,\n                    cast(\"is_excluded\" as boolean) as \"is_excluded\" ,\n                    cast(null as text) as \"exposure_type\" ,\n                    cast(null as text) as \"maturity\" ,\n                    cast(null as text) as \"url\" ,\n                    cast(null as text) as \"owner_name\" ,\n                    cast(null as text) as \"owner_email\" ,\n                    cast(null as text) as \"metric_type\" ,\n                    cast(null as text) as \"label\" ,\n                    cast(null as text) as \"metric_filter\" ,\n                    cast(null as text) as \"metric_measure\" ,\n                    cast(null as text) as \"metric_measure_alias\" ,\n                    cast(null as text) as \"numerator\" ,\n                    cast(null as text) as \"denominator\" ,\n                    cast(null as text) as \"expr\" ,\n                    cast(null as text) as \"metric_window\" ,\n                    cast(null as text) as \"grain_to_date\" ,\n                    cast(\"source_name\" as text) as \"source_name\" ,\n                    cast(\"is_source_described\" as boolean) as \"is_source_described\" ,\n                    cast(\"loaded_at_field\" as text) as \"loaded_at_field\" ,\n                    cast(\"is_freshness_enabled\" as boolean) as \"is_freshness_enabled\" ,\n                    cast(\"loader\" as text) as \"loader\" ,\n                    cast(\"identifier\" as text) as \"identifier\" \n\n            from \"nerd_facts\".\"public\".\"stg_sources\"\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_prefixes\"\n), \n\nnaming_convention_folders as (\n    select * from \"nerd_facts\".\"public\".\"stg_naming_convention_folders\"\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n  \n    \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n\n  \n\n||'_' \n        end as prefix,\n        \n  \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_direct_relationships": {"database": "nerd_facts", "schema": "public", "name": "int_direct_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_direct_relationships.sql", "original_file_path": "models/marts/core/int_direct_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_direct_relationships"], "alias": "int_direct_relationships", "checksum": {"name": "sha256", "checksum": "0c693c72ac6c64259cf842524c04c639becfd5937353f5d5aaa7dd6031bc6f79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}"}, "created_at": 1742909950.2570765, "relation_name": "\"nerd_facts\".\"public\".\"int_direct_relationships\"", "raw_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from {{ ref('int_all_graph_resources') }}\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_node_relationships')}}\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_exposure_relationships')}}\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_metric_relationships')}}\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_node_relationships", "package": null, "version": null}, {"name": "stg_exposure_relationships", "package": null, "version": null}, {"name": "stg_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_node_relationships", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_direct_relationships.sql", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"nerd_facts\".\"public\".\"stg_node_relationships\"\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"nerd_facts\".\"public\".\"stg_exposure_relationships\"\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from \"nerd_facts\".\"public\".\"stg_metric_relationships\"\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_all_dag_relationships": {"database": "nerd_facts", "schema": "public", "name": "int_all_dag_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_dag_relationships.sql", "original_file_path": "models/marts/core/int_all_dag_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_dag_relationships"], "alias": "int_all_dag_relationships", "checksum": {"name": "sha256", "checksum": "b4c408aa270f14f715b34649af63bf54609d14d2995c38005e858574b531b731"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks', 'clickhouse'] else 'view' }}"}, "created_at": 1742909950.262652, "relation_name": "\"nerd_facts\".\"public\".\"int_all_dag_relationships\"", "raw_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n{{ dbt_project_evaluator.recursive_dag() }}\n\nselect * from all_relationships\norder by parent, distance", "language": "sql", "refs": [{"name": "int_direct_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.recursive_dag"], "nodes": ["model.dbt_project_evaluator.int_direct_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_dag_relationships.sql", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from \"nerd_facts\".\"public\".\"int_direct_relationships\"\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        \n    array[ resource_name ]\n     as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_public_models": {"database": "nerd_facts", "schema": "public", "name": "fct_undocumented_public_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_undocumented_public_models.sql", "original_file_path": "models/marts/governance/fct_undocumented_public_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_undocumented_public_models"], "alias": "fct_undocumented_public_models", "checksum": {"name": "sha256", "checksum": "ee476e5f468028cb08f6d0f29adc42829534800da3b524adc2f87c04bd76cef5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have both a model level description, and a description for each of the columns in the model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.227455, "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_public_models\"", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_undocumented_public_models.sql", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": {"database": "nerd_facts", "schema": "public", "name": "fct_exposures_dependent_on_private_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_exposures_dependent_on_private_models.sql", "original_file_path": "models/marts/governance/fct_exposures_dependent_on_private_models.sql", "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_exposures_dependent_on_private_models"], "alias": "fct_exposures_dependent_on_private_models", "checksum": {"name": "sha256", "checksum": "b08d3667b3752cd9b0dd8981ec7e55af29c109e2d590c65ab84b77cb213d5a38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each direct relationship between a parent resource and a downstream exposure where the parent resource is not a public model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2279322, "relation_name": "\"nerd_facts\".\"public\".\"fct_exposures_dependent_on_private_models\"", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_exposures_dependent_on_private_models.sql", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_public_models_without_contract": {"database": "nerd_facts", "schema": "public", "name": "fct_public_models_without_contract", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_public_models_without_contract.sql", "original_file_path": "models/marts/governance/fct_public_models_without_contract.sql", "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_public_models_without_contract"], "alias": "fct_public_models_without_contract", "checksum": {"name": "sha256", "checksum": "76f602dad9bd99ea230d3ecfe7de6503d1d5b0e20ddd1b9f0609d2bfe34244c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have an enforced contract", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2270133, "relation_name": "\"nerd_facts\".\"public\".\"fct_public_models_without_contract\"", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_public_models_without_contract.sql", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_missing_primary_key_tests": {"database": "nerd_facts", "schema": "public", "name": "fct_missing_primary_key_tests", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_missing_primary_key_tests.sql", "original_file_path": "models/marts/tests/fct_missing_primary_key_tests.sql", "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_missing_primary_key_tests"], "alias": "fct_missing_primary_key_tests", "checksum": {"name": "sha256", "checksum": "cdee51203c863278be6de20d74ca22fab3afd2c888402a5f06b167fd47670459"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "this model has one record for every model without unique and not null tests configured on a single column", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2389038, "relation_name": "\"nerd_facts\".\"public\".\"fct_missing_primary_key_tests\"", "raw_code": "with\n\ntests as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type in\n    (\n        {% for resource_type in var('enforced_primary_key_node_types') %}'{{ resource_type }}'{% if not loop.last %},{% endif %}\n        {% endfor %}\n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_missing_primary_key_tests.sql", "compiled": true, "compiled_code": "with\n\ntests as (\n    select * from \"nerd_facts\".\"public\".\"int_model_test_summary\"\n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_sources_without_freshness": {"database": "nerd_facts", "schema": "public", "name": "fct_sources_without_freshness", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_sources_without_freshness.sql", "original_file_path": "models/marts/tests/fct_sources_without_freshness.sql", "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_sources_without_freshness"], "alias": "fct_sources_without_freshness", "checksum": {"name": "sha256", "checksum": "124b06dbe86fbaa01ffa291a31950af254badef381a6df23832653fd5ca396d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each source that does not have a source freshness defined, either as a warn or an error", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2393136, "relation_name": "\"nerd_facts\".\"public\".\"fct_sources_without_freshness\"", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_sources_without_freshness.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_test_coverage": {"database": "nerd_facts", "schema": "public", "name": "fct_test_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_test_coverage.sql", "original_file_path": "models/marts/tests/fct_test_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_test_coverage"], "alias": "fct_test_coverage", "checksum": {"name": "sha256", "checksum": "544e9cd5833992cdf8f17e2f2e9b951ea1304bef25e5bddfbb74a5c96ba063c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "this model shows a few key metrics related to how well tested your dbt project is.", "columns": {"test_to_model_ratio": {"name": "test_to_model_ratio", "description": "the total number of tests in the project divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "test_coverage_pct": {"name": "test_coverage_pct", "description": "the number of models in the project with at least one test configured divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2384539, "relation_name": "\"nerd_facts\".\"public\".\"fct_test_coverage\"", "raw_code": "with\n\ntest_counts as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as {{ dbt.type_boolean() }}) as is_tested_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when number_of_tests_on_model > 0 and model_type = '{{ model_type }}' then 1.0 else 0 end as is_tested_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from test_counts\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        cast(count(*) as {{ dbt.type_int() }}) as total_models,\n        cast(sum(number_of_tests_on_model) as {{ dbt.type_int() }}) as total_tests,\n        sum(cast(is_tested_model as {{ dbt.type_int() }})) as tested_models,\n        round(sum(cast(is_tested_model as {{ dbt.type_int() }})) * 100.0 / count(*), 2) as test_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_tested_\" ~ model_type ~ \"_model) * 100.0\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_test_coverage_pct,\n        {% endfor %}\n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.current_timestamp", "macro.dbt.type_int", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_test_coverage.sql", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from \"nerd_facts\".\"public\".\"int_model_test_summary\"\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_model_test_summary": {"database": "nerd_facts", "schema": "public", "name": "int_model_test_summary", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/intermediate/int_model_test_summary.sql", "original_file_path": "models/marts/tests/intermediate/int_model_test_summary.sql", "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "fqn": ["dbt_project_evaluator", "marts", "tests", "intermediate", "int_model_test_summary"], "alias": "int_model_test_summary", "checksum": {"name": "sha256", "checksum": "8991efb264e8aa37512a3d1509ab8b54bfe6dadf6191a954b6e9ac75af574103"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909950.3125234, "relation_name": "\"nerd_facts\".\"public\".\"int_model_test_summary\"", "raw_code": "with \n\nall_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nrelationships as (\n    select * from {{ ref('int_direct_relationships') }}\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,\n        {%- for test_set in var('primary_key_test_macros') %}\n            {%- set outer_loop = loop -%}\n        count(distinct case when \n                {%- for test in test_set %} \n                all_graph_resources.is_{{ test.split('.')[1] }} {%- if not loop.last %} or {% endif %} \n                {%- endfor %}\n            then relationships.resource_id else null end\n        ) as primary_key_method_{{ outer_loop.index }}_count,\n        {%- endfor %}\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from {{ ref('base_node_columns') }}\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    {%- for test_set in var('primary_key_test_macros') %}\n                        {%- set compare_value = test_set | length %}\n                    primary_key_method_{{ loop.index }}_count >= {{ compare_value}}\n                        or\n                    {%- endfor %}\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as {{ dbt.type_boolean() }}) as is_primary_key_tested,\n        cast(sum(tests_count) as {{ dbt.type_int()}}) as number_of_tests_on_model,\n        cast(sum(constraints_count) as {{ dbt.type_int()}}) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as {{ dbt.type_boolean()}}) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as {{ dbt.type_int()}}) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as {{ dbt.type_int()}}) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}, {"name": "base_node_columns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_int"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.base_node_columns"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/intermediate/int_model_test_summary.sql", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n),\n\nrelationships as (\n    select * from \"nerd_facts\".\"public\".\"int_direct_relationships\"\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from \"nerd_facts\".\"public\".\"base_node_columns\"\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_models": {"database": "nerd_facts", "schema": "public", "name": "fct_undocumented_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_models.sql", "original_file_path": "models/marts/documentation/fct_undocumented_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_models"], "alias": "fct_undocumented_models", "checksum": {"name": "sha256", "checksum": "c8667f2c44681081d01b644a1cec9f8a0d5d62c1f89d132b5e9fa3e8cace2554"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model contains all models that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2514725, "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_models\"", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_models.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_documentation_coverage": {"database": "nerd_facts", "schema": "public", "name": "fct_documentation_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_documentation_coverage.sql", "original_file_path": "models/marts/documentation/fct_documentation_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_documentation_coverage"], "alias": "fct_documentation_coverage", "checksum": {"name": "sha256", "checksum": "2cc61de2fb401924a201b80837ae9a008f8e0b4b337b8774b9cdc04221f3b734"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model calculates the percent of enabled models in the project that have a configured description.  We recommend you describe at least 75 percent of your models. \n", "columns": {"documentation_coverage_pct": {"name": "documentation_coverage_pct", "description": "the number of models in the project with a description divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2507854, "relation_name": "\"nerd_facts\".\"public\".\"fct_documentation_coverage\"", "raw_code": "with\n\nmodels as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when is_described and model_type = '{{ model_type }}' then 1.0 else 0 end as is_described_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        cast(count(*) as {{ dbt.type_int() }}) as total_models,\n        cast(sum(is_described_model) as {{ dbt.type_int() }}) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_described_\" ~ model_type ~ \"_model) * 100\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_documentation_coverage_pct{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.type_int", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_documentation_coverage.sql", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        now() as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_source_tables": {"database": "nerd_facts", "schema": "public", "name": "fct_undocumented_source_tables", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_source_tables.sql", "original_file_path": "models/marts/documentation/fct_undocumented_source_tables.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_source_tables"], "alias": "fct_undocumented_source_tables", "checksum": {"name": "sha256", "checksum": "ccbde566a67506d88bd664fe2bab505f2736ab003510e6280772b02cc7e20394"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model contains all source tables that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2519498, "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_source_tables\"", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_source_tables.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_sources": {"database": "nerd_facts", "schema": "public", "name": "fct_undocumented_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_sources.sql", "original_file_path": "models/marts/documentation/fct_undocumented_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_sources"], "alias": "fct_undocumented_sources", "checksum": {"name": "sha256", "checksum": "ca85ce862cbe9416515290c5f7e0b4732394c94caad12a0e6d7e0262ca6410be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model contains all sources that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2523594, "relation_name": "\"nerd_facts\".\"public\".\"fct_undocumented_sources\"", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_sources.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from \"nerd_facts\".\"public\".\"int_all_graph_resources\"\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_chained_views_dependencies": {"database": "nerd_facts", "schema": "public", "name": "fct_chained_views_dependencies", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_chained_views_dependencies.sql", "original_file_path": "models/marts/performance/fct_chained_views_dependencies.sql", "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_chained_views_dependencies"], "alias": "fct_chained_views_dependencies", "checksum": {"name": "sha256", "checksum": "aef70a6fecdec6f947f788d52b889e9a7e5e2067e87769c94c30c56d956f2af9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This returns models dependent on chains of \"non-physically-materialized\" models (views and ephemerals), highlighting potential cases for improving performance by switching the materialization of model(s) within  the chain to table or incremental. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/performance/performance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.2668564, "relation_name": "\"nerd_facts\".\"public\".\"fct_chained_views_dependencies\"", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > {{ var('chained_views_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}\n\norder by distance desc", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_chained_views_dependencies.sql", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_exposure_parents_materializations": {"database": "nerd_facts", "schema": "public", "name": "fct_exposure_parents_materializations", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_exposure_parents_materializations.sql", "original_file_path": "models/marts/performance/fct_exposure_parents_materializations.sql", "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_exposure_parents_materializations"], "alias": "fct_exposure_parents_materializations", "checksum": {"name": "sha256", "checksum": "5e3c973f43ea703994fa8cfc427ec015dd5f23441d4592ef023e2174c241c658"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each direct parent of an exposure that is not materialized as a table or incremental.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1742909951.1623907, "relation_name": "\"nerd_facts\".\"public\".\"fct_exposure_parents_materializations\"", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_exposure_parents_materializations.sql", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from \"nerd_facts\".\"public\".\"int_all_dag_relationships\"\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": {"database": "nerd_facts", "schema": "public", "name": "dbt_project_evaluator_exceptions", "resource_type": "seed", "package_name": "dbt_project_evaluator", "path": "dbt_project_evaluator_exceptions.csv", "original_file_path": "seeds/dbt_project_evaluator_exceptions.csv", "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "fqn": ["dbt_project_evaluator", "dbt_project_evaluator_exceptions"], "alias": "dbt_project_evaluator_exceptions", "checksum": {"name": "sha256", "checksum": "55374346a29c2ef9f7ac7b8d3f249e818f60dbd9586ab2645c294d3438f094d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"fct_name": "varchar", "column_name": "varchar", "id_to_exclude": "varchar", "comment": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "List of exceptions not to be reported.", "columns": {"fct_name": {"name": "fct_name", "description": "Name of the fact table to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "column_name": {"name": "column_name", "description": "Column name from fct_name to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id_to_exclude": {"name": "id_to_exclude", "description": "Values (or like pattern) to exclude for column_name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "Field to document why a given exception is legitimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://seeds/seeds.yml", "build_path": null, "unrendered_config": {"column_types": {"fct_name": "varchar", "column_name": "varchar", "id_to_exclude": "varchar", "comment": "varchar"}}, "created_at": 1742909951.14483, "relation_name": "\"nerd_facts\".\"public\".\"dbt_project_evaluator_exceptions\"", "raw_code": "", "root_path": "/home/janne/nerd-facts-dbt/dbt_project/dbt_packages/dbt_project_evaluator", "depends_on": {"macros": []}}, "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_ability_id.73002b7b78": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_abilities_ability_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_abilities_ability_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_ability_id.73002b7b78", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_abilities_ability_id"], "alias": "unique_stg_pokeapi_abilities_ability_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6415644, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/unique_stg_pokeapi_abilities_ability_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ability_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere ability_id is not null\ngroup by ability_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ability_id", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ability_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_id.454a997776": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_abilities_ability_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_abilities_ability_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_id.454a997776", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_abilities_ability_id"], "alias": "not_null_stg_pokeapi_abilities_ability_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.643101, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_abilities_ability_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ability_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere ability_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ability_id", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ability_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_abilities_ability_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_abilities_ability_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_abilities_ability_name"], "alias": "not_null_stg_pokeapi_abilities_ability_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6443863, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_abilities_ability_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ability_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere ability_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ability_name", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ability_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_abilities_effect_description", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_abilities_effect_description.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_abilities_effect_description"], "alias": "not_null_stg_pokeapi_abilities_effect_description", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1742909950.6463592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_abilities_effect_description.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect effect_description\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\nwhere effect_description is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effect_description", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "effect_description", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0"], "alias": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde"}, "created_at": 1742909950.6482234, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_abilities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_abilities"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_expression_is_true_s_583ce9bbc6c3b73d1d5d742f1a280cde.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_abilities\"\n\nwhere not(pokemon_count >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pokemon_count", "file_key_name": "models.stg_pokeapi_abilities", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_abilities", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "pokemon_count", "model": "{{ get_where_subquery(ref('stg_pokeapi_abilities')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_pokemon_id.0aae465ab6": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_pokemon_pokemon_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_pokemon_pokemon_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_pokemon_id.0aae465ab6", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_pokemon_pokemon_id"], "alias": "unique_stg_pokeapi_pokemon_pokemon_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6666367, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/unique_stg_pokeapi_pokemon_pokemon_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pokemon_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\nwhere pokemon_id is not null\ngroup by pokemon_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pokemon_id", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pokemon_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_id.54d6f632e9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_pokemon_pokemon_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_pokemon_pokemon_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_id.54d6f632e9", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_pokemon_pokemon_id"], "alias": "not_null_stg_pokeapi_pokemon_pokemon_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6679034, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_pokemon_pokemon_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pokemon_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\nwhere pokemon_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pokemon_id", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pokemon_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_pokemon_pokemon_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_pokemon_pokemon_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_pokemon_pokemon_name"], "alias": "not_null_stg_pokeapi_pokemon_pokemon_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6691928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_pokemon_pokemon_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pokemon_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\nwhere pokemon_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pokemon_name", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pokemon_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7"}, "created_at": 1742909950.670763, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_expression_is_true_s_4d7b7e06e1131b0d178540c5201448f7.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n\nwhere not(height > 0 OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "height", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0 OR IS NULL", "column_name": "height", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d"}, "created_at": 1742909950.6746838, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_pokemon", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_expression_is_true_s_fa5d1ab841e6300927b235b956ef146d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_pokemon\"\n\nwhere not(weight > 0 OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weight", "file_key_name": "models.stg_pokeapi_pokemon", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_pokemon", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0 OR IS NULL", "column_name": "weight", "model": "{{ get_where_subquery(ref('stg_pokeapi_pokemon')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_pokeapi_moves_move_id.627c191b0b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_moves_move_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_moves_move_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_moves_move_id.627c191b0b", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_moves_move_id"], "alias": "unique_stg_pokeapi_moves_move_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6779435, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/unique_stg_pokeapi_moves_move_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    move_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\nwhere move_id is not null\ngroup by move_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "move_id", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "unique", "kwargs": {"column_name": "move_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_id.ed207f55ba": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_moves_move_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_moves_move_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_id.ed207f55ba", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_moves_move_id"], "alias": "not_null_stg_pokeapi_moves_move_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6792376, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_moves_move_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect move_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\nwhere move_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "move_id", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "move_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_name.e3d107b599": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_moves_move_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_moves_move_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_name.e3d107b599", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_moves_move_name"], "alias": "not_null_stg_pokeapi_moves_move_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.6803799, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_moves_move_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect move_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\nwhere move_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "move_name", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "move_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.bf1d97b6f1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.bf1d97b6f1", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0"], "alias": "dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909950.6815221, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not accuracy >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not accuracy <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "accuracy", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "accuracy", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0.c16002ba56": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_p_40deb00cacfa1f1c21fad70c78c3b767.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0.c16002ba56", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0"], "alias": "dbt_utils_accepted_range_stg_p_40deb00cacfa1f1c21fad70c78c3b767", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_p_40deb00cacfa1f1c21fad70c78c3b767", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_p_40deb00cacfa1f1c21fad70c78c3b767"}, "created_at": 1742909950.6878166, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_p_40deb00cacfa1f1c21fad70c78c3b767\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_accepted_range_stg_p_40deb00cacfa1f1c21fad70c78c3b767.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not effect_chance >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not effect_chance <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effect_chance", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "effect_chance", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.89fb9bec20": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.89fb9bec20", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1"], "alias": "dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909950.6911607, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pp >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pp <= 40\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pp", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 40, "column_name": "pp", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.aa330941c4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.aa330941c4", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7"], "alias": "dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909950.6942139, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not priority >= -7\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not priority <= 5\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "priority", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": -7, "max_value": 5, "column_name": "priority", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.ae824db77d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.ae824db77d", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0"], "alias": "dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909950.6974142, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_moves", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_pokeapi_moves\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not power >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not power <= 250\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "power", "file_key_name": "models.stg_pokeapi_moves", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_moves", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 250, "column_name": "power", "model": "{{ get_where_subquery(ref('stg_pokeapi_moves')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_pokeapi_items_item_id.9edce17dc9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_items_item_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_items_item_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_items_item_id.9edce17dc9", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_items_item_id"], "alias": "unique_stg_pokeapi_items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.700725, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_items"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/unique_stg_pokeapi_items_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.stg_pokeapi_items", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_items", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_items')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_id.e1f99416f9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_items_item_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_items_item_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_id.e1f99416f9", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_items_item_id"], "alias": "not_null_stg_pokeapi_items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.701898, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_items"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_items_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.stg_pokeapi_items", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_items')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_name.835b172802": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_items_item_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_items_item_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_name.835b172802", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_items_item_name"], "alias": "not_null_stg_pokeapi_items_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.7030087, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_items"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_items_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.stg_pokeapi_items", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_items')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL.c332b5938b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_4c7f2f2c1a3ef781d0a9818b482f0158.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL.c332b5938b", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_4c7f2f2c1a3ef781d0a9818b482f0158", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4c7f2f2c1a3ef781d0a9818b482f0158", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_4c7f2f2c1a3ef781d0a9818b482f0158"}, "created_at": 1742909950.7041645, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_4c7f2f2c1a3ef781d0a9818b482f0158\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_items"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/dbt_utils_expression_is_true_s_4c7f2f2c1a3ef781d0a9818b482f0158.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_items\"\n\nwhere not(cost >= 0 OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost", "file_key_name": "models.stg_pokeapi_items", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_items", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "cost", "model": "{{ get_where_subquery(ref('stg_pokeapi_items')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_pokeapi_types_type_id.5c90e57894": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_pokeapi_types_type_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_pokeapi_types_type_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_pokeapi_types_type_id.5c90e57894", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "unique_stg_pokeapi_types_type_id"], "alias": "unique_stg_pokeapi_types_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.7079372, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_types"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/unique_stg_pokeapi_types_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    type_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\nwhere type_id is not null\ngroup by type_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_id", "file_key_name": "models.stg_pokeapi_types", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_types", "test_metadata": {"name": "unique", "kwargs": {"column_name": "type_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_id.7eab806dd3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_types_type_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_types_type_id.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_id.7eab806dd3", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_types_type_id"], "alias": "not_null_stg_pokeapi_types_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.7090812, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_types"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_types_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type_id\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\nwhere type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_id", "file_key_name": "models.stg_pokeapi_types", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_types", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_id", "model": "{{ get_where_subquery(ref('stg_pokeapi_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_name.34ca71a5c0": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_pokeapi_types_type_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_pokeapi_types_type_name.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_name.34ca71a5c0", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "not_null_stg_pokeapi_types_type_name"], "alias": "not_null_stg_pokeapi_types_type_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.710222, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_pokeapi_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_types"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/not_null_stg_pokeapi_types_type_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type_name\nfrom \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\nwhere type_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_name", "file_key_name": "models.stg_pokeapi_types", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_types", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.a64f89e9e1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_pokeapi_ty_3efb87c47a09ff70914bb3b41644df42.sql", "original_file_path": "models/staging/pokeapi/stg_pokeapi.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.a64f89e9e1", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy"], "alias": "accepted_values_stg_pokeapi_ty_3efb87c47a09ff70914bb3b41644df42", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_pokeapi_ty_3efb87c47a09ff70914bb3b41644df42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_stg_pokeapi_ty_3efb87c47a09ff70914bb3b41644df42"}, "created_at": 1742909950.7114744, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_pokeapi_ty_3efb87c47a09ff70914bb3b41644df42\") }}", "language": "sql", "refs": [{"name": "stg_pokeapi_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_pokeapi_types"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/stg_pokeapi.yml/accepted_values_stg_pokeapi_ty_3efb87c47a09ff70914bb3b41644df42.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type_name as value_field,\n        count(*) as n_records\n\n    from \"nerd_facts\".\"public\".\"stg_pokeapi_types\"\n    group by type_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'normal','fire','water','electric','grass','ice','fighting','poison','ground','flying','psychic','bug','rock','ghost','dragon','dark','steel','fairy'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_name", "file_key_name": "models.stg_pokeapi_types", "attached_node": "model.nerd_facts_dbt.stg_pokeapi_types", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["normal", "fire", "water", "electric", "grass", "ice", "fighting", "poison", "ground", "flying", "psychic", "bug", "rock", "ghost", "dragon", "dark", "steel", "fairy"], "column_name": "type_name", "model": "{{ get_where_subquery(ref('stg_pokeapi_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cards_card_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cards_card_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cards_card_id"], "alias": "unique_stg_netrunner_cards_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.809102, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/unique_stg_netrunner_cards_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    card_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere card_id is not null\ngroup by card_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_id", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "unique", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_card_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_card_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_card_id"], "alias": "not_null_stg_netrunner_cards_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8106132, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_cards_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere card_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_id", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_title.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_title"], "alias": "not_null_stg_netrunner_cards_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8118174, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_cards_title.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect title\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "title", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_type_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_type_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_type_code"], "alias": "not_null_stg_netrunner_cards_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8129504, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_cards_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere type_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_code", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cards_faction_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cards_faction_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cards_faction_code"], "alias": "not_null_stg_netrunner_cards_faction_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8140662, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_cards_faction_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\nwhere faction_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_code", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_netrunner_cards_side_code__corp__runner", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_netrunner_cards_side_code__corp__runner.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "accepted_values_stg_netrunner_cards_side_code__corp__runner"], "alias": "accepted_values_stg_netrunner_cards_side_code__corp__runner", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742909950.8152153, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/accepted_values_stg_netrunner_cards_side_code__corp__runner.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        side_code as value_field,\n        count(*) as n_records\n\n    from \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n    group by side_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'corp','runner'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["corp", "runner"], "column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69"}, "created_at": 1742909950.8192816, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_7a9394fb3481886e754ee3d2d2399c69.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(cost >= 0 OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cost", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "cost", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6"}, "created_at": 1742909950.8227346, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_976ae440f939cbe6e7e4840aba0c50f6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(strength >= 0 OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "strength", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "strength", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44"}, "created_at": 1742909950.8271499, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_a54d76e62a807a2892fa931655d30c44.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(advancement_cost >= 0 OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "advancement_cost", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "advancement_cost", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0"], "alias": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07"}, "created_at": 1742909950.8306205, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_accepted_range_stg_n_62529c217f3f0db6410f4ed979820e07.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not agenda_points >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not agenda_points <= 3\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agenda_points", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 3, "column_name": "agenda_points", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL"], "alias": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2"}, "created_at": 1742909950.834059, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_ca91354da15ad71af3edd06b8fb8dfc2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(is_agenda is_agenda = false OR agenda_points IS NOT NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_agenda", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "is_agenda = false OR agenda_points IS NOT NULL", "column_name": "is_agenda", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL"], "alias": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89"}, "created_at": 1742909950.838088, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_771ec9df59fe0ef7f0f5f17f4bf2be89.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(is_ice is_ice = false OR strength IS NOT NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_ice", "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "is_ice = false OR strength IS NOT NULL", "column_name": "is_ice", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_"], "alias": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118"}, "created_at": 1742909950.841846, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_4929e7affc1030043ea70da214e37118.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not(NOT (is_agenda = true AND side_code = 'runner'))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "NOT (is_agenda = true AND side_code = 'runner')", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_"], "alias": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060"}, "created_at": 1742909950.8460786, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_a9c72d875981767c20ec0d6bf72cb060.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_cards\"\n\nwhere not((advancement_cost IS NULL AND agenda_points IS NULL) OR (advancement_cost IS NOT NULL AND agenda_points IS NOT NULL))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_netrunner_cards", "attached_node": "model.nerd_facts_dbt.stg_netrunner_cards", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "(advancement_cost IS NULL AND agenda_points IS NULL) OR (advancement_cost IS NOT NULL AND agenda_points IS NOT NULL)", "model": "{{ get_where_subquery(ref('stg_netrunner_cards')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_factions_faction_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_factions_faction_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_factions_faction_id"], "alias": "unique_stg_netrunner_factions_faction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8499982, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/unique_stg_netrunner_factions_faction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    faction_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_id is not null\ngroup by faction_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_id", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "faction_id", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_faction_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_faction_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_faction_id"], "alias": "not_null_stg_netrunner_factions_faction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8514106, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_factions_faction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_id\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_id", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_id", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_factions_faction_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_factions_faction_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_factions_faction_code"], "alias": "unique_stg_netrunner_factions_faction_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8525608, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/unique_stg_netrunner_factions_faction_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    faction_code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_code is not null\ngroup by faction_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "faction_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_faction_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_faction_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_faction_code"], "alias": "not_null_stg_netrunner_factions_faction_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8536887, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_factions_faction_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_faction_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_faction_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_faction_name"], "alias": "not_null_stg_netrunner_factions_faction_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8547776, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_factions_faction_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect faction_name\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere faction_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "faction_name", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "faction_name", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_factions_side_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_factions_side_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_factions_side_code"], "alias": "not_null_stg_netrunner_factions_side_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8560002, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_factions_side_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect side_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\nwhere side_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_netrunner_factions_side_code__corp__runner", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_netrunner_factions_side_code__corp__runner.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "accepted_values_stg_netrunner_factions_side_code__corp__runner"], "alias": "accepted_values_stg_netrunner_factions_side_code__corp__runner", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742909950.8571002, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/accepted_values_stg_netrunner_factions_side_code__corp__runner.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        side_code as value_field,\n        count(*) as n_records\n\n    from \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\n    group by side_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'corp','runner'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["corp", "runner"], "column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0"], "alias": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb"}, "created_at": 1742909950.8610816, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_factions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_841cfea6f6e0c9ca46730dc6d5c90efb.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_factions\"\n\nwhere not(card_count >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_factions", "attached_node": "model.nerd_facts_dbt.stg_netrunner_factions", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_factions')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_netrunner_types_type_id.6c0873a4b5": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_types_type_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_types_type_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_types_type_id.6c0873a4b5", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_types_type_id"], "alias": "unique_stg_netrunner_types_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.864769, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_id", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "type_id", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_id.d7e0c6692f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_types_type_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_types_type_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_id.d7e0c6692f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_types_type_id"], "alias": "not_null_stg_netrunner_types_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8661141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_id", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_id", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_types_type_code.f043eaac08": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_types_type_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_types_type_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_types_type_code.f043eaac08", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_types_type_code"], "alias": "unique_stg_netrunner_types_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.867234, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_code", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "type_code", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_code.dd9e128956": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_types_type_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_types_type_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_code.dd9e128956", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_types_type_code"], "alias": "not_null_stg_netrunner_types_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8683686, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_code", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_code", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_name.3d8e59b009": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_types_type_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_types_type_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_name.3d8e59b009", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_types_type_name"], "alias": "not_null_stg_netrunner_types_type_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.869568, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type_name", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "type_name", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.accepted_values_stg_netrunner_types_side_code__corp__runner__None.ea3a9022cf": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_netrunner_types_side_code__corp__runner__None", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.accepted_values_stg_netrunner_types_side_code__corp__runner__None.ea3a9022cf", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "accepted_values_stg_netrunner_types_side_code__corp__runner__None"], "alias": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd"}, "created_at": 1742909950.8709848, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_stg_netrunner__6e12467fcd638f4bbc24686efa259afd\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "side_code", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["corp", "runner", null], "column_name": "side_code", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.fabff6255a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.fabff6255a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0"], "alias": "dbt_utils_expression_is_true_stg_netrunner_types_card_count___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742909950.874667, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_types", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_types')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_packs_pack_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_packs_pack_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_packs_pack_id"], "alias": "unique_stg_netrunner_packs_pack_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8785515, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/unique_stg_netrunner_packs_pack_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pack_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_id is not null\ngroup by pack_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_id", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pack_id", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_pack_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_pack_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_pack_id"], "alias": "not_null_stg_netrunner_packs_pack_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8797772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_packs_pack_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pack_id\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_id", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pack_id", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_packs_pack_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_packs_pack_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_packs_pack_code"], "alias": "unique_stg_netrunner_packs_pack_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8809397, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/unique_stg_netrunner_packs_pack_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pack_code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_code is not null\ngroup by pack_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_code", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pack_code", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_pack_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_pack_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_pack_code"], "alias": "not_null_stg_netrunner_packs_pack_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.882078, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_packs_pack_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pack_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_code", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pack_code", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_pack_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_pack_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_pack_name"], "alias": "not_null_stg_netrunner_packs_pack_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8832593, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_packs_pack_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pack_name\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere pack_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_name", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pack_name", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_packs_cycle_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_packs_cycle_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_packs_cycle_code"], "alias": "not_null_stg_netrunner_packs_cycle_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8843875, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/not_null_stg_netrunner_packs_cycle_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cycle_code\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\nwhere cycle_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_code", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_code", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8"}, "created_at": 1742909950.885511, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_s_9b5f1f1ec821ce70ecabe3e654b674f8.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\n\nwhere not(release_date <= current_date OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "release_date", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= current_date OR IS NULL", "column_name": "release_date", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0"], "alias": "dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909950.8898828, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_packs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_netrunner_packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner.yml/dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_netrunner_packs\"\n\nwhere not(card_count > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_packs", "attached_node": "model.nerd_facts_dbt.stg_netrunner_packs", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_packs')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_id.eadb505df5": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cycles_cycle_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cycles_cycle_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_id.eadb505df5", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cycles_cycle_id"], "alias": "unique_stg_netrunner_cycles_cycle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8939056, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_id", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "cycle_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_id.62ac352d3f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_cycle_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_cycle_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_id.62ac352d3f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_cycle_id"], "alias": "not_null_stg_netrunner_cycles_cycle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8950393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_id", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_id", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_code.4f84a84350": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cycles_cycle_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cycles_cycle_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_code.4f84a84350", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cycles_cycle_code"], "alias": "unique_stg_netrunner_cycles_cycle_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8961797, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_code", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "cycle_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_code.4c9240e6c1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_cycle_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_cycle_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_code.4c9240e6c1", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_cycle_code"], "alias": "not_null_stg_netrunner_cycles_cycle_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8972876, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_code", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_code", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_name.865301e9dd": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_cycle_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_cycle_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_name.865301e9dd", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_cycle_name"], "alias": "not_null_stg_netrunner_cycles_cycle_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.8985023, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cycle_name", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cycle_name", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_cycles_position.b1a7d27022": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_cycles_position", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_cycles_position.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_cycles_position.b1a7d27022", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_cycles_position"], "alias": "unique_stg_netrunner_cycles_position", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1742909950.899631, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "position", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "position", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_position.4a0a7c8342": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_cycles_position", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_cycles_position.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_position.4a0a7c8342", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_cycles_position"], "alias": "not_null_stg_netrunner_cycles_position", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9007587, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "position", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "position", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0.50541a18a6": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0.50541a18a6", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0"], "alias": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55"}, "created_at": 1742909950.901873, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_00a57487df1d46ebe0a9006048018f55\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pack_count", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "pack_count", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0.e1ddce52f3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0.e1ddce52f3", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0"], "alias": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca"}, "created_at": 1742909950.905456, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_b8c00376627ba63670e5dc7cb45ed8ca\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL.8b14b6468a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL.8b14b6468a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d"}, "created_at": 1742909950.9088345, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_66d7a095e1cb637216442f207c486e6d\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_cycles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "first_release_date", "file_key_name": "models.stg_netrunner_cycles", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= current_date OR IS NULL", "column_name": "first_release_date", "model": "{{ get_where_subquery(ref('stg_netrunner_cycles')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_id.3449a40165": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_subtypes_subtype_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_subtypes_subtype_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_id.3449a40165", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_subtypes_subtype_id"], "alias": "unique_stg_netrunner_subtypes_subtype_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9122608, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_id", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "subtype_id", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_id.fca108b90f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_subtypes_subtype_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_subtypes_subtype_id.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_id.fca108b90f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_subtypes_subtype_id"], "alias": "not_null_stg_netrunner_subtypes_subtype_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9134197, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_id", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtype_id", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_code.bed6436dd0": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_netrunner_subtypes_subtype_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_netrunner_subtypes_subtype_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_code.bed6436dd0", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "unique_stg_netrunner_subtypes_subtype_code"], "alias": "unique_stg_netrunner_subtypes_subtype_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9145358, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_code", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "subtype_code", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_code.7e85af9991": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_subtypes_subtype_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_subtypes_subtype_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_code.7e85af9991", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_subtypes_subtype_code"], "alias": "not_null_stg_netrunner_subtypes_subtype_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.915691, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_code", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtype_code", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_name.2c8839b12c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_netrunner_subtypes_subtype_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_netrunner_subtypes_subtype_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_name.2c8839b12c", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "not_null_stg_netrunner_subtypes_subtype_name"], "alias": "not_null_stg_netrunner_subtypes_subtype_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9168851, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subtype_name", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtype_name", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0.d00a712176": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0.d00a712176", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0"], "alias": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223"}, "created_at": 1742909950.9180148, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_91f2353a8b507e02797234f2d8274223\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_count", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "card_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0.6f39ee868e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0.6f39ee868e", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0"], "alias": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0"}, "created_at": 1742909950.9216523, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_ee2211dcaa81605e04debae45316e9a0\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "corp_count", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "corp_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0.0ea2524870": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0.0ea2524870", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0"], "alias": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4"}, "created_at": 1742909950.9253876, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_918c48249a15307cc9c0a537642414f4\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "runner_count", "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "runner_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count.5edd92ae57": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca.sql", "original_file_path": "models/staging/netrunner/stg_netrunner.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count.5edd92ae57", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count"], "alias": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca"}, "created_at": 1742909950.9287727, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_expression_is_true_s_03d4f5d29bb7e61e6c7213e7fed486ca\") }}", "language": "sql", "refs": [{"name": "stg_netrunner_subtypes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_netrunner_subtypes", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "card_count = corp_count + runner_count", "model": "{{ get_where_subquery(ref('stg_netrunner_subtypes')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_starships_starship_id.8d2f1e1387": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_starships_starship_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_starships_starship_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_starships_starship_id.8d2f1e1387", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_starships_starship_id"], "alias": "unique_stg_swapi_starships_starship_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9624553, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/unique_stg_swapi_starships_starship_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    starship_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_starships\"\nwhere starship_id is not null\ngroup by starship_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "starship_id", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "unique", "kwargs": {"column_name": "starship_id", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_id.33d24c92bc": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_starships_starship_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_starships_starship_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_id.33d24c92bc", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_starships_starship_id"], "alias": "not_null_stg_swapi_starships_starship_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9638739, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_starships_starship_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect starship_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_starships\"\nwhere starship_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "starship_id", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "starship_id", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_starships_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_starships_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_starships_name"], "alias": "not_null_stg_swapi_starships_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9650621, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_starships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_starships_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_starships\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_starships", "attached_node": "model.nerd_facts_dbt.stg_swapi_starships", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_swapi_films_film_id.ea5ba181e6": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_films_film_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_films_film_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_films_film_id.ea5ba181e6", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_films_film_id"], "alias": "unique_stg_swapi_films_film_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9661736, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/unique_stg_swapi_films_film_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    film_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere film_id is not null\ngroup by film_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "film_id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "unique", "kwargs": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_film_id.a339ca4379": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_film_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_film_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_film_id.a339ca4379", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_film_id"], "alias": "not_null_stg_swapi_films_film_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9672904, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_films_film_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect film_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere film_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "film_id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_film_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_film_title.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_film_title"], "alias": "not_null_stg_swapi_films_film_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9684062, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_films_film_title.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect film_title\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere film_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "film_title", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "film_title", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_episode_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_episode_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_episode_id"], "alias": "not_null_stg_swapi_films_episode_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9695914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_films_episode_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect episode_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere episode_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "episode_id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "episode_id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1"], "alias": "dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9706817, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_swapi_films\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not episode_id >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not episode_id <= 9\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "episode_id", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 9, "column_name": "episode_id", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_films_release_date", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_films_release_date.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_films_release_date"], "alias": "not_null_stg_swapi_films_release_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9739664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_films_release_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect release_date\nfrom \"nerd_facts\".\"public\".\"stg_swapi_films\"\nwhere release_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "release_date", "file_key_name": "models.stg_swapi_films", "attached_node": "model.nerd_facts_dbt.stg_swapi_films", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "release_date", "model": "{{ get_where_subquery(ref('stg_swapi_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_swapi_people_people_id.49907a6ad0": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_people_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_people_people_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_people_people_id.49907a6ad0", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_people_people_id"], "alias": "unique_stg_swapi_people_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.975111, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/unique_stg_swapi_people_people_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    people_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\nwhere people_id is not null\ngroup by people_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "people_id", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "unique", "kwargs": {"column_name": "people_id", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_people_people_id.9097a6c93c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_people_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_people_people_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_people_people_id.9097a6c93c", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_people_people_id"], "alias": "not_null_stg_swapi_people_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9762454, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_people_people_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect people_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\nwhere people_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "people_id", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "people_id", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_people_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_people_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_people_name"], "alias": "not_null_stg_swapi_people_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9773793, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_people_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL"], "alias": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "alias": "dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d"}, "created_at": 1742909950.9785194, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d\") }}", "language": "sql", "refs": [{"name": "stg_swapi_people", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/dbt_utils_expression_is_true_s_5ca9781fd82f7e68fcedbdd6a70d4c3d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"nerd_facts\".\"public\".\"stg_swapi_people\"\n\nwhere not(height >= 0 OR IS NULL)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "height", "file_key_name": "models.stg_swapi_people", "attached_node": "model.nerd_facts_dbt.stg_swapi_people", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0 OR IS NULL", "column_name": "height", "model": "{{ get_where_subquery(ref('stg_swapi_people')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_planets_planet_id.615d4daee0": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_planets_planet_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_planets_planet_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_planets_planet_id.615d4daee0", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_planets_planet_id"], "alias": "unique_stg_swapi_planets_planet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9819767, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/unique_stg_swapi_planets_planet_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    planet_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_planets\"\nwhere planet_id is not null\ngroup by planet_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "planet_id", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "unique", "kwargs": {"column_name": "planet_id", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_planets_planet_id.0392ef05b9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_planets_planet_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_planets_planet_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_planets_planet_id.0392ef05b9", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_planets_planet_id"], "alias": "not_null_stg_swapi_planets_planet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9831722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_planets_planet_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect planet_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_planets\"\nwhere planet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "planet_id", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "planet_id", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_planets_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_planets_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_planets_name"], "alias": "not_null_stg_swapi_planets_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9844503, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_planets_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_planets\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03", "fqn": ["nerd_facts_dbt", "staging", "swapi", "dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0"], "alias": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748"}, "created_at": 1742909950.9855728, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748\") }}", "language": "sql", "refs": [{"name": "stg_swapi_planets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/dbt_utils_accepted_range_stg_s_dc3789df0cd4354ea093aa3d5ed78748.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"stg_swapi_planets\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not surface_water >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not surface_water <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "surface_water", "file_key_name": "models.stg_swapi_planets", "attached_node": "model.nerd_facts_dbt.stg_swapi_planets", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "surface_water", "model": "{{ get_where_subquery(ref('stg_swapi_planets')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.unique_stg_swapi_species_species_id.eef5924130": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_species_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_species_species_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_species_species_id.eef5924130", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_species_species_id"], "alias": "unique_stg_swapi_species_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9889495, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/unique_stg_swapi_species_species_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    species_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_species\"\nwhere species_id is not null\ngroup by species_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "species_id", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "unique", "kwargs": {"column_name": "species_id", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_species_species_id.037c430261": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_species_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_species_species_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_species_species_id.037c430261", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_species_species_id"], "alias": "not_null_stg_swapi_species_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9901066, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_species_species_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect species_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_species\"\nwhere species_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "species_id", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "species_id", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_species_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_species_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_species_name"], "alias": "not_null_stg_swapi_species_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.991228, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_species", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_species_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_species\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_species", "attached_node": "model.nerd_facts_dbt.stg_swapi_species", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_stg_swapi_vehicles_vehicle_id.f42372d3a8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_stg_swapi_vehicles_vehicle_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_stg_swapi_vehicles_vehicle_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.unique_stg_swapi_vehicles_vehicle_id.f42372d3a8", "fqn": ["nerd_facts_dbt", "staging", "swapi", "unique_stg_swapi_vehicles_vehicle_id"], "alias": "unique_stg_swapi_vehicles_vehicle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.992382, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/unique_stg_swapi_vehicles_vehicle_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    vehicle_id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\nwhere vehicle_id is not null\ngroup by vehicle_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vehicle_id", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vehicle_id", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_id.44275887db": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_vehicles_vehicle_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_vehicles_vehicle_id.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_id.44275887db", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_vehicles_vehicle_id"], "alias": "not_null_stg_swapi_vehicles_vehicle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9935043, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_vehicles_vehicle_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vehicle_id\nfrom \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\nwhere vehicle_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "vehicle_id", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vehicle_id", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_stg_swapi_vehicles_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_stg_swapi_vehicles_name.sql", "original_file_path": "models/staging/swapi/stg_swapi.yml", "unique_id": "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7", "fqn": ["nerd_facts_dbt", "staging", "swapi", "not_null_stg_swapi_vehicles_name"], "alias": "not_null_stg_swapi_vehicles_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909950.9946494, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_swapi_vehicles", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.stg_swapi_vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/stg_swapi.yml/not_null_stg_swapi_vehicles_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"public\".\"stg_swapi_vehicles\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_swapi_vehicles", "attached_node": "model.nerd_facts_dbt.stg_swapi_vehicles", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_swapi_vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_star_wars_obt_character_id.aa2d5ca904": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_star_wars_obt_character_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_star_wars_obt_character_id.sql", "original_file_path": "models/marts/obt/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_star_wars_obt_character_id.aa2d5ca904", "fqn": ["nerd_facts_dbt", "marts", "obt", "not_null_star_wars_obt_character_id"], "alias": "not_null_star_wars_obt_character_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0133252, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "star_wars_obt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.star_wars_obt"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/schema.yml/not_null_star_wars_obt_character_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect character_id\nfrom \"nerd_facts\".\"public\".\"star_wars_obt\"\nwhere character_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "character_id", "file_key_name": "models.star_wars_obt", "attached_node": "model.nerd_facts_dbt.star_wars_obt", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "character_id", "model": "{{ get_where_subquery(ref('star_wars_obt')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_pokemon_obt_pokemon_id.17bc952d9e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_pokemon_obt_pokemon_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_pokemon_obt_pokemon_id.sql", "original_file_path": "models/marts/obt/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_pokemon_obt_pokemon_id.17bc952d9e", "fqn": ["nerd_facts_dbt", "marts", "obt", "not_null_pokemon_obt_pokemon_id"], "alias": "not_null_pokemon_obt_pokemon_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0147653, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "pokemon_obt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.pokemon_obt"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/schema.yml/not_null_pokemon_obt_pokemon_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pokemon_id\nfrom \"nerd_facts\".\"public\".\"pokemon_obt\"\nwhere pokemon_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pokemon_id", "file_key_name": "models.pokemon_obt", "attached_node": "model.nerd_facts_dbt.pokemon_obt", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pokemon_id", "model": "{{ get_where_subquery(ref('pokemon_obt')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_nerd_universe_obt_universe.51c9e975b4": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_nerd_universe_obt_universe", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_nerd_universe_obt_universe.sql", "original_file_path": "models/marts/obt/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_universe.51c9e975b4", "fqn": ["nerd_facts_dbt", "marts", "obt", "not_null_nerd_universe_obt_universe"], "alias": "not_null_nerd_universe_obt_universe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0159268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nerd_universe_obt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.nerd_universe_obt"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/schema.yml/not_null_nerd_universe_obt_universe.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect universe\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere universe is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "universe", "file_key_name": "models.nerd_universe_obt", "attached_node": "model.nerd_facts_dbt.nerd_universe_obt", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "universe", "model": "{{ get_where_subquery(ref('nerd_universe_obt')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_id.f6a71ebb11": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_nerd_universe_obt_entity_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_nerd_universe_obt_entity_id.sql", "original_file_path": "models/marts/obt/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_id.f6a71ebb11", "fqn": ["nerd_facts_dbt", "marts", "obt", "not_null_nerd_universe_obt_entity_id"], "alias": "not_null_nerd_universe_obt_entity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0170498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nerd_universe_obt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.nerd_universe_obt"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/schema.yml/not_null_nerd_universe_obt_entity_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_id\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere entity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "entity_id", "file_key_name": "models.nerd_universe_obt", "attached_node": "model.nerd_facts_dbt.nerd_universe_obt", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "entity_id", "model": "{{ get_where_subquery(ref('nerd_universe_obt')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_name.3b5e13295e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_nerd_universe_obt_entity_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_nerd_universe_obt_entity_name.sql", "original_file_path": "models/marts/obt/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_name.3b5e13295e", "fqn": ["nerd_facts_dbt", "marts", "obt", "not_null_nerd_universe_obt_entity_name"], "alias": "not_null_nerd_universe_obt_entity_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0181577, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nerd_universe_obt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.nerd_universe_obt"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/schema.yml/not_null_nerd_universe_obt_entity_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect entity_name\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere entity_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "entity_name", "file_key_name": "models.nerd_universe_obt", "attached_node": "model.nerd_facts_dbt.nerd_universe_obt", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "entity_name", "model": "{{ get_where_subquery(ref('nerd_universe_obt')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_nerd_universe_obt_obt_created_at.46390d7480": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_nerd_universe_obt_obt_created_at", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_nerd_universe_obt_obt_created_at.sql", "original_file_path": "models/marts/obt/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_nerd_universe_obt_obt_created_at.46390d7480", "fqn": ["nerd_facts_dbt", "marts", "obt", "not_null_nerd_universe_obt_obt_created_at"], "alias": "not_null_nerd_universe_obt_obt_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.019264, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nerd_universe_obt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.nerd_universe_obt"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/obt/schema.yml/not_null_nerd_universe_obt_obt_created_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect obt_created_at\nfrom \"nerd_facts\".\"public\".\"nerd_universe_obt\"\nwhere obt_created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "obt_created_at", "file_key_name": "models.nerd_universe_obt", "attached_node": "model.nerd_facts_dbt.nerd_universe_obt", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "obt_created_at", "model": "{{ get_where_subquery(ref('nerd_universe_obt')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_column_dim_characters_character_id.84b36a6ff7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_column_dim_characters_character_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_column_dim_characters_character_id.sql", "original_file_path": "models/marts/star_wars/schema.yml", "unique_id": "test.nerd_facts_dbt.unique_column_dim_characters_character_id.84b36a6ff7", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "unique_column_dim_characters_character_id"], "alias": "unique_column_dim_characters_character_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0226614, "relation_name": null, "raw_code": "{{ test_unique_column(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_characters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nerd_facts_dbt.test_unique_column", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.dim_characters"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/schema.yml/unique_column_dim_characters_character_id.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select\n        character_id as column_value,\n        count(*) as occurrences\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n    where character_id is not null\n    group by character_id\n    having count(*) > 1\n)\n\nselect *\nfrom validation\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "character_id", "file_key_name": "models.dim_characters", "attached_node": "model.nerd_facts_dbt.dim_characters", "test_metadata": {"name": "unique_column", "kwargs": {"column_name": "character_id", "model": "{{ get_where_subquery(ref('dim_characters')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_column_dim_characters_character_id.c97cad84e1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_column_dim_characters_character_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_column_dim_characters_character_id.sql", "original_file_path": "models/marts/star_wars/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_column_dim_characters_character_id.c97cad84e1", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "not_null_column_dim_characters_character_id"], "alias": "not_null_column_dim_characters_character_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0267599, "relation_name": null, "raw_code": "{{ test_not_null_column(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_characters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nerd_facts_dbt.test_not_null_column", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.dim_characters"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/schema.yml/not_null_column_dim_characters_character_id.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select\n        character_id as column_value\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n    where character_id is null\n)\n\nselect *\nfrom validation\nwhere column_value is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "character_id", "file_key_name": "models.dim_characters", "attached_node": "model.nerd_facts_dbt.dim_characters", "test_metadata": {"name": "not_null_column", "kwargs": {"column_name": "character_id", "model": "{{ get_where_subquery(ref('dim_characters')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_column_dim_characters_name.9bb85b23a6": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_column_dim_characters_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_column_dim_characters_name.sql", "original_file_path": "models/marts/star_wars/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_column_dim_characters_name.9bb85b23a6", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "not_null_column_dim_characters_name"], "alias": "not_null_column_dim_characters_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0303574, "relation_name": null, "raw_code": "{{ test_not_null_column(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_characters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nerd_facts_dbt.test_not_null_column", "macro.dbt.get_where_subquery"], "nodes": ["model.nerd_facts_dbt.dim_characters"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/marts/star_wars/schema.yml/not_null_column_dim_characters_name.sql", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select\n        name as column_value\n    from \"nerd_facts\".\"public\".\"dim_characters\"\n    where name is null\n)\n\nselect *\nfrom validation\nwhere column_value is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_characters", "attached_node": "model.nerd_facts_dbt.dim_characters", "test_metadata": {"name": "not_null_column", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_characters')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.unique_column_dim_films_film_id.d927909715": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "unique_column_dim_films_film_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "unique_column_dim_films_film_id.sql", "original_file_path": "models/marts/star_wars/schema.yml", "unique_id": "test.nerd_facts_dbt.unique_column_dim_films_film_id.d927909715", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "unique_column_dim_films_film_id"], "alias": "unique_column_dim_films_film_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0333471, "relation_name": null, "raw_code": "{{ test_unique_column(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nerd_facts_dbt.test_unique_column", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "film_id", "file_key_name": "models.dim_films", "attached_node": null, "test_metadata": {"name": "unique_column", "kwargs": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('dim_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_column_dim_films_film_id.4e6599f0f8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_column_dim_films_film_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_column_dim_films_film_id.sql", "original_file_path": "models/marts/star_wars/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_column_dim_films_film_id.4e6599f0f8", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "not_null_column_dim_films_film_id"], "alias": "not_null_column_dim_films_film_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0362506, "relation_name": null, "raw_code": "{{ test_not_null_column(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nerd_facts_dbt.test_not_null_column", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "film_id", "file_key_name": "models.dim_films", "attached_node": null, "test_metadata": {"name": "not_null_column", "kwargs": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('dim_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_column_dim_films_title.db94e0209e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_column_dim_films_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_column_dim_films_title.sql", "original_file_path": "models/marts/star_wars/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_column_dim_films_title.db94e0209e", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "not_null_column_dim_films_title"], "alias": "not_null_column_dim_films_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0390954, "relation_name": null, "raw_code": "{{ test_not_null_column(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nerd_facts_dbt.test_not_null_column", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "title", "file_key_name": "models.dim_films", "attached_node": null, "test_metadata": {"name": "not_null_column", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(ref('dim_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.not_null_column_dim_films_release_date.05bcd8d750": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "not_null_column_dim_films_release_date", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "not_null_column_dim_films_release_date.sql", "original_file_path": "models/marts/star_wars/schema.yml", "unique_id": "test.nerd_facts_dbt.not_null_column_dim_films_release_date.05bcd8d750", "fqn": ["nerd_facts_dbt", "marts", "star_wars", "not_null_column_dim_films_release_date"], "alias": "not_null_column_dim_films_release_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.0427165, "relation_name": null, "raw_code": "{{ test_not_null_column(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_films", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nerd_facts_dbt.test_not_null_column", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "release_date", "file_key_name": "models.dim_films", "attached_node": null, "test_metadata": {"name": "not_null_column", "kwargs": {"column_name": "release_date", "model": "{{ get_where_subquery(ref('dim_films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.test_sw_character_data_quality.9079a0b52c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "test_sw_character_data_quality", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "test_sw_character_data_quality.sql", "original_file_path": "tests/operational_batch.yml", "unique_id": "test.nerd_facts_dbt.test_sw_character_data_quality.9079a0b52c", "fqn": ["nerd_facts_dbt", "test_sw_character_data_quality"], "alias": "test_sw_character_data_quality", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1742909951.0470948, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\") }}", "language": "sql", "refs": [{"name": "operational_batch_sw", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.operational_batch_sw", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "validation_status = 'Valid'", "model": "{{ get_where_subquery(ref('operational_batch_sw')) }}"}, "namespace": "dbt_utils"}}, "test.nerd_facts_dbt.test_sw_films_freshness.37a43a604d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "test_sw_films_freshness", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "test_sw_films_freshness.sql", "original_file_path": "tests/operational_batch.yml", "unique_id": "test.nerd_facts_dbt.test_sw_films_freshness.37a43a604d", "fqn": ["nerd_facts_dbt", "test_sw_films_freshness"], "alias": "test_sw_films_freshness", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909951.0511131, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "operational_batch_sw", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.operational_batch_sw", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "latest_release_date >= comparison_date", "model": "{{ get_where_subquery(ref('operational_batch_sw')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_direct_join_to_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_direct_join_to_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_direct_join_to_source_"], "alias": "is_empty_fct_direct_join_to_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.164028, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_direct_join_to_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_direct_join_to_source"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_direct_join_to_source_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_direct_join_to_source\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_direct_join_to_source", "attached_node": "model.dbt_project_evaluator.fct_direct_join_to_source", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_direct_join_to_source')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_duplicate_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_duplicate_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_duplicate_sources_"], "alias": "is_empty_fct_duplicate_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1682215, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_duplicate_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_duplicate_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_duplicate_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_duplicate_sources\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_duplicate_sources", "attached_node": "model.dbt_project_evaluator.fct_duplicate_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_duplicate_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_marts_or_intermediate_dependent_on_source_"], "alias": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1727781, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_marts_or_intermediate_dependent_on_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_marts_or_intermediate_dependent_on_source\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_marts_or_intermediate_dependent_on_source", "attached_node": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_marts_or_intermediate_dependent_on_source')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_model_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_model_fanout_"], "alias": "is_empty_fct_model_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.176746, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_fanout"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_model_fanout_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_model_fanout\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_fanout", "attached_node": "model.dbt_project_evaluator.fct_model_fanout", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_fanout')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_multiple_sources_joined_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_multiple_sources_joined_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_multiple_sources_joined_"], "alias": "is_empty_fct_multiple_sources_joined_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.180333, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_multiple_sources_joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_multiple_sources_joined"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_multiple_sources_joined_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_multiple_sources_joined\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_multiple_sources_joined", "attached_node": "model.dbt_project_evaluator.fct_multiple_sources_joined", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_multiple_sources_joined')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_rejoining_of_upstream_concepts_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_rejoining_of_upstream_concepts_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_rejoining_of_upstream_concepts_"], "alias": "is_empty_fct_rejoining_of_upstream_concepts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1834185, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_rejoining_of_upstream_concepts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_rejoining_of_upstream_concepts_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_rejoining_of_upstream_concepts\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_rejoining_of_upstream_concepts", "attached_node": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_rejoining_of_upstream_concepts')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_root_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_root_models_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_root_models_"], "alias": "is_empty_fct_root_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1867416, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_root_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_root_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_root_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_root_models\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_root_models", "attached_node": "model.dbt_project_evaluator.fct_root_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_root_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_source_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_source_fanout_"], "alias": "is_empty_fct_source_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1900148, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_fanout"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_source_fanout_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_source_fanout\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_fanout", "attached_node": "model.dbt_project_evaluator.fct_source_fanout", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_fanout')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_marts_or_intermediate_"], "alias": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1931753, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_marts_or_intermediate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_staging_dependent_on_marts_or_intermediate\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_marts_or_intermediate", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_marts_or_intermediate')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_staging_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_staging_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_staging_"], "alias": "is_empty_fct_staging_dependent_on_staging_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1964736, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_staging", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_staging_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_staging_dependent_on_staging\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_staging", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_staging')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_unused_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_unused_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_unused_sources_"], "alias": "is_empty_fct_unused_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.1996093, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_unused_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_unused_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_unused_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_unused_sources\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_unused_sources", "attached_node": "model.dbt_project_evaluator.fct_unused_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_unused_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_exposure_parents_materializations_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposure_parents_materializations_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_exposure_parents_materializations_"], "alias": "is_empty_fct_exposure_parents_materializations_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2027533, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposure_parents_materializations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_exposure_parents_materializations_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_exposure_parents_materializations\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposure_parents_materializations", "attached_node": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposure_parents_materializations')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_hard_coded_references_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_hard_coded_references_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_hard_coded_references_"], "alias": "is_empty_fct_hard_coded_references_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2057273, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_hard_coded_references", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_hard_coded_references"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_hard_coded_references_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_hard_coded_references\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_hard_coded_references", "attached_node": "model.dbt_project_evaluator.fct_hard_coded_references", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_hard_coded_references')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_too_many_joins_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_too_many_joins_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_too_many_joins_"], "alias": "is_empty_fct_too_many_joins_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2097602, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_too_many_joins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_too_many_joins"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_too_many_joins_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_too_many_joins\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_too_many_joins", "attached_node": "model.dbt_project_evaluator.fct_too_many_joins", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_too_many_joins')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_model_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_directories_"], "alias": "is_empty_fct_model_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.214802, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_model_directories\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_directories", "attached_node": "model.dbt_project_evaluator.fct_model_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_model_naming_conventions_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_naming_conventions_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_naming_conventions_"], "alias": "is_empty_fct_model_naming_conventions_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.217896, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_naming_conventions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_naming_conventions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_naming_conventions_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_model_naming_conventions\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_naming_conventions", "attached_node": "model.dbt_project_evaluator.fct_model_naming_conventions", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_naming_conventions')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_source_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_source_directories_"], "alias": "is_empty_fct_source_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.220817, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_source_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_source_directories\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_directories", "attached_node": "model.dbt_project_evaluator.fct_source_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_test_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_test_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_test_directories_"], "alias": "is_empty_fct_test_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2238917, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_test_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_test_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_test_directories\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_test_directories", "attached_node": "model.dbt_project_evaluator.fct_test_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_test_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_public_models_without_contract_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_public_models_without_contract_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_public_models_without_contract_"], "alias": "is_empty_fct_public_models_without_contract_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.228711, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_public_models_without_contract", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_public_models_without_contract"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_public_models_without_contract_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_public_models_without_contract\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_public_models_without_contract", "attached_node": "model.dbt_project_evaluator.fct_public_models_without_contract", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_public_models_without_contract')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_undocumented_public_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_public_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_undocumented_public_models_"], "alias": "is_empty_fct_undocumented_public_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2320263, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_public_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_public_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_undocumented_public_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_public_models\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_public_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_public_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_public_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_exposures_dependent_on_private_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposures_dependent_on_private_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_exposures_dependent_on_private_models_"], "alias": "is_empty_fct_exposures_dependent_on_private_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2349522, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposures_dependent_on_private_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_exposures_dependent_on_private_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_exposures_dependent_on_private_models\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposures_dependent_on_private_models", "attached_node": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposures_dependent_on_private_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "valid_test_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_test_coverage.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "fqn": ["dbt_project_evaluator", "marts", "tests", "valid_test_coverage"], "alias": "valid_test_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909951.240109, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_coverage"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/valid_test_coverage.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"fct_test_coverage\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_coverage_pct", "file_key_name": "models.fct_test_coverage", "attached_node": "model.dbt_project_evaluator.fct_test_coverage", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('test_coverage_target') }}", "column_name": "test_coverage_pct", "model": "{{ get_where_subquery(ref('fct_test_coverage')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_missing_primary_key_tests_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_missing_primary_key_tests_.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_missing_primary_key_tests_"], "alias": "is_empty_fct_missing_primary_key_tests_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2440617, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_missing_primary_key_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/is_empty_fct_missing_primary_key_tests_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_missing_primary_key_tests\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_missing_primary_key_tests", "attached_node": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_missing_primary_key_tests')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_sources_without_freshness_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_sources_without_freshness_.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_sources_without_freshness_"], "alias": "is_empty_fct_sources_without_freshness_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2473042, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sources_without_freshness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_sources_without_freshness"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/is_empty_fct_sources_without_freshness_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_sources_without_freshness\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_sources_without_freshness", "attached_node": "model.dbt_project_evaluator.fct_sources_without_freshness", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_sources_without_freshness')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "valid_documentation_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_documentation_coverage.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "fqn": ["dbt_project_evaluator", "marts", "documentation", "valid_documentation_coverage"], "alias": "valid_documentation_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1742909951.2531, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_documentation_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_documentation_coverage"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/valid_documentation_coverage.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"nerd_facts\".\"public\".\"fct_documentation_coverage\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "documentation_coverage_pct", "file_key_name": "models.fct_documentation_coverage", "attached_node": "model.dbt_project_evaluator.fct_documentation_coverage", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('documentation_coverage_target') }}", "column_name": "documentation_coverage_pct", "model": "{{ get_where_subquery(ref('fct_documentation_coverage')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_undocumented_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_models_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_models_"], "alias": "is_empty_fct_undocumented_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2567735, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_models\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_undocumented_source_tables_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_source_tables_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_source_tables_"], "alias": "is_empty_fct_undocumented_source_tables_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2599168, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_source_tables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_source_tables"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_source_tables_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_source_tables\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_source_tables", "attached_node": "model.dbt_project_evaluator.fct_undocumented_source_tables", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_source_tables')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_undocumented_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_sources_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_sources_"], "alias": "is_empty_fct_undocumented_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2629356, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_undocumented_sources\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_sources", "attached_node": "model.dbt_project_evaluator.fct_undocumented_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "is_empty_fct_chained_views_dependencies_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_chained_views_dependencies_.sql", "original_file_path": "models/marts/performance/performance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "fqn": ["dbt_project_evaluator", "marts", "performance", "is_empty_fct_chained_views_dependencies_"], "alias": "is_empty_fct_chained_views_dependencies_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1742909951.2678702, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_chained_views_dependencies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_chained_views_dependencies"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/performance.yml/is_empty_fct_chained_views_dependencies_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from \"nerd_facts\".\"public\".\"fct_chained_views_dependencies\"\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_chained_views_dependencies", "attached_node": "model.dbt_project_evaluator.fct_chained_views_dependencies", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_chained_views_dependencies')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_pokeapi_moves_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_pokeapi_moves_id.sql", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "source_unique_pokeapi_moves_id"], "alias": "source_unique_pokeapi_moves_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2765632, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/pokeapi_sources.yml/source_unique_pokeapi_moves_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"pokeapi_moves\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.pokeapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('pokeapi', 'moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_pokeapi_moves_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_pokeapi_moves_id.sql", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "source_not_null_pokeapi_moves_id"], "alias": "source_not_null_pokeapi_moves_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.277989, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/pokeapi_sources.yml/source_not_null_pokeapi_moves_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"pokeapi_moves\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.pokeapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('pokeapi', 'moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_pokeapi_moves_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_pokeapi_moves_name.sql", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "source_not_null_pokeapi_moves_name"], "alias": "source_not_null_pokeapi_moves_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2791414, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["pokeapi", "moves"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.pokeapi.moves"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/pokeapi/pokeapi_sources.yml/source_not_null_pokeapi_moves_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"pokeapi_moves\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.pokeapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('pokeapi', 'moves')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_cards_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_cards_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_cards_code"], "alias": "source_unique_netrunner_cards_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2866282, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_unique_netrunner_cards_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_cards\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_cards_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_cards_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_cards_code"], "alias": "source_not_null_netrunner_cards_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.28804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_cards_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_cards\"\nwhere code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_cards_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_cards_title.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_cards_title"], "alias": "source_not_null_netrunner_cards_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2891839, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cards"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.cards"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_cards_title.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect title\nfrom \"nerd_facts\".\"raw\".\"netrunner_cards\"\nwhere title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "title", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(source('netrunner', 'cards')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_factions_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_factions_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_factions_code"], "alias": "source_unique_netrunner_factions_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2905352, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_unique_netrunner_factions_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_factions\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_factions_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_factions_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_factions_code"], "alias": "source_not_null_netrunner_factions_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2916567, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_factions_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_factions\"\nwhere code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_factions_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_factions_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_factions_name"], "alias": "source_not_null_netrunner_factions_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2928483, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "factions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.factions"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_factions_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"netrunner_factions\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('netrunner', 'factions')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_types_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_types_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_types_code"], "alias": "source_unique_netrunner_types_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.294164, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "types"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.types"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_unique_netrunner_types_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_types\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_types_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_types_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_types_code"], "alias": "source_not_null_netrunner_types_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.295253, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "types"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.types"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_types_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_types\"\nwhere code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_types_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_types_name.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_types_name"], "alias": "source_not_null_netrunner_types_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2964048, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "types"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.types"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_types_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"netrunner_types\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('netrunner', 'types')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_packs_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_packs_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_packs_code"], "alias": "source_unique_netrunner_packs_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2977808, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "packs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_unique_netrunner_packs_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_packs\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_packs_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_packs_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_packs_code"], "alias": "source_not_null_netrunner_packs_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.2988932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "packs"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.packs"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_packs_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_packs\"\nwhere code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'packs')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_cycles_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_cycles_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_cycles_code"], "alias": "source_unique_netrunner_cycles_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.300214, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cycles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.cycles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_unique_netrunner_cycles_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_cycles\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_netrunner_cycles_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_netrunner_cycles_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_not_null_netrunner_cycles_code"], "alias": "source_not_null_netrunner_cycles_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3013196, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "cycles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.cycles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_not_null_netrunner_cycles_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"nerd_facts\".\"raw\".\"netrunner_cycles\"\nwhere code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'cycles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_netrunner_subtypes_code", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_netrunner_subtypes_code.sql", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "source_unique_netrunner_subtypes_code"], "alias": "source_unique_netrunner_subtypes_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3026805, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["netrunner", "subtypes"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.netrunner.subtypes"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/netrunner/stg_netrunner_sources.yml/source_unique_netrunner_subtypes_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"netrunner_subtypes\"\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "sources.netrunner", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(source('netrunner', 'subtypes')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_starships_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_starships_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_starships_id"], "alias": "source_unique_swapi_starships_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3040254, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_unique_swapi_starships_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_starships\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_starships_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_starships_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_starships_id"], "alias": "source_not_null_swapi_starships_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3051476, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_starships_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_starships\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_starships_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_starships_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_starships_name"], "alias": "source_not_null_swapi_starships_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3062305, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "starships"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.starships"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_starships_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_starships\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'starships')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_films_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_films_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_films_id"], "alias": "source_unique_swapi_films_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3084204, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_unique_swapi_films_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_films_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_films_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_films_id"], "alias": "source_not_null_swapi_films_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.309627, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_films_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_films_title", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_films_title.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_films_title"], "alias": "source_not_null_swapi_films_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.310732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_films_title.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect title\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "title", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_films_episode_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_films_episode_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_films_episode_id"], "alias": "source_not_null_swapi_films_episode_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3119304, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_films_episode_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect episode_id\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere episode_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "episode_id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "episode_id", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_films_release_date.cff58563b1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_films_release_date", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_films_release_date.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_films_release_date.cff58563b1", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_films_release_date"], "alias": "source_not_null_swapi_films_release_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3132787, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "films"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.films"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_films_release_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect release_date\nfrom \"nerd_facts\".\"raw\".\"swapi_films\"\nwhere release_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "release_date", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "release_date", "model": "{{ get_where_subquery(source('swapi', 'films')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_people_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_people_id"], "alias": "source_unique_swapi_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3152711, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_unique_swapi_people_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_people\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_people_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_people_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_people_id"], "alias": "source_not_null_swapi_people_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3165753, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_people_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_people\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_people_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_people_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_people_name"], "alias": "source_not_null_swapi_people_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3179383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "people"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.people"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_people_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_people\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'people')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_planets_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_planets_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_planets_id"], "alias": "source_unique_swapi_planets_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3198235, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_unique_swapi_planets_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_planets\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_planets_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_planets_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_planets_id"], "alias": "source_not_null_swapi_planets_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3211029, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_planets_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_planets\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_planets_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_planets_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_planets_name"], "alias": "source_not_null_swapi_planets_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3226109, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "planets"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.planets"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_planets_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_planets\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'planets')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_species_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_species_id"], "alias": "source_unique_swapi_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3241951, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_unique_swapi_species_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_species\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_species_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_species_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_species_id"], "alias": "source_not_null_swapi_species_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3253412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_species_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_species\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_species_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_species_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_species_name"], "alias": "source_not_null_swapi_species_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3269255, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "species"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.species"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_species_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_species\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'species')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_unique_swapi_vehicles_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_unique_swapi_vehicles_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_unique_swapi_vehicles_id"], "alias": "source_unique_swapi_vehicles_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3284552, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_unique_swapi_vehicles_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"nerd_facts\".\"raw\".\"swapi_vehicles\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_vehicles_id", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_vehicles_id.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_vehicles_id"], "alias": "source_not_null_swapi_vehicles_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.3297393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_vehicles_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"nerd_facts\".\"raw\".\"swapi_vehicles\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('swapi', 'vehicles')) }}"}, "namespace": null}}, "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c": {"database": "nerd_facts", "schema": "public_dbt_test__audit", "name": "source_not_null_swapi_vehicles_name", "resource_type": "test", "package_name": "nerd_facts_dbt", "path": "source_not_null_swapi_vehicles_name.sql", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c", "fqn": ["nerd_facts_dbt", "staging", "swapi", "source_not_null_swapi_vehicles_name"], "alias": "source_not_null_swapi_vehicles_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1742909951.331185, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["swapi", "vehicles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.nerd_facts_dbt.swapi.vehicles"]}, "compiled_path": "target/compiled/nerd_facts_dbt/models/staging/swapi/swapi_sources.yml/source_not_null_swapi_vehicles_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"nerd_facts\".\"raw\".\"swapi_vehicles\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "sources.swapi", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('swapi', 'vehicles')) }}"}, "namespace": null}}}, "sources": {"source.nerd_facts_dbt.pokeapi.moves": {"database": "nerd_facts", "schema": "raw", "name": "moves", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.moves", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "moves"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_moves", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon moves including power, accuracy, and effect text", "columns": {"id": {"name": "id", "description": "Primary key for the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the move", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_moves\"", "created_at": 1742909951.2840626, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.pokemon": {"database": "nerd_facts", "schema": "raw", "name": "pokemon", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.pokemon", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "pokemon"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_pokemon", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon species, types, and stats", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_pokemon\"", "created_at": 1742909951.2851756, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.types": {"database": "nerd_facts", "schema": "raw", "name": "types", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.types", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "types"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon elemental types and effectiveness", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_types\"", "created_at": 1742909951.2853281, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.abilities": {"database": "nerd_facts", "schema": "raw", "name": "abilities", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.abilities", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "abilities"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_abilities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Pokemon abilities and effects", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_abilities\"", "created_at": 1742909951.285459, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.items": {"database": "nerd_facts", "schema": "raw", "name": "items", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.items", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "items"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_items", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about items in the Pokemon games", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_items\"", "created_at": 1742909951.2855916, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.generations": {"database": "nerd_facts", "schema": "raw", "name": "generations", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.generations", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "generations"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_generations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about different generations of Pokemon games", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_generations\"", "created_at": 1742909951.285717, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.pokeapi.locations": {"database": "nerd_facts", "schema": "raw", "name": "locations", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/pokeapi/pokeapi_sources.yml", "original_file_path": "models/staging/pokeapi/pokeapi_sources.yml", "unique_id": "source.nerd_facts_dbt.pokeapi.locations", "fqn": ["nerd_facts_dbt", "staging", "pokeapi", "pokeapi", "locations"], "source_name": "pokeapi", "source_description": "Pokemon data from the PokeAPI", "loader": "", "identifier": "pokeapi_locations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about locations in the Pokemon world", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_locations\"", "created_at": 1742909951.2858343, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.cards": {"database": "nerd_facts", "schema": "raw", "name": "cards", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/stg_netrunner_sources.yml", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.cards", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "cards"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "python_script", "identifier": "netrunner_cards", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Android: Netrunner cards", "columns": {"code": {"name": "code", "description": "Unique card code identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Card name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type_code": {"name": "type_code", "description": "Code reference to card type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "faction_code": {"name": "faction_code", "description": "Code reference to card faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Reference to card side (corp/runner)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pack_code": {"name": "pack_code", "description": "Code reference to the data pack containing the card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "text": {"name": "text", "description": "Card ability text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost": {"name": "cost", "description": "Card play/rez cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "strength": {"name": "strength", "description": "ICE/breaker strength value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "advancement_cost": {"name": "advancement_cost", "description": "Advancement requirement for agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "agenda_points": {"name": "agenda_points", "description": "Points given for scoring agendas", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "memory_cost": {"name": "memory_cost", "description": "Memory units required for programs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "trash_cost": {"name": "trash_cost", "description": "Cost to trash card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_link": {"name": "base_link", "description": "Base link for runner identities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "influence_limit": {"name": "influence_limit", "description": "Influence limit for identities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "minimum_deck_size": {"name": "minimum_deck_size", "description": "Minimum deck size for identities", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "flavor": {"name": "flavor", "description": "Flavor text on card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "illustrator": {"name": "illustrator", "description": "Card illustrator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "keywords": {"name": "keywords", "description": "Card subtypes/keywords", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_url": {"name": "image_url", "description": "URL to card image", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "Number of copies in the data pack", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "deck_limit": {"name": "deck_limit", "description": "Maximum copies allowed in a deck", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "uniqueness": {"name": "uniqueness", "description": "Whether card is unique (can only have one copy in play)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "source_meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_cards\"", "created_at": 1742909951.2898393, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.factions": {"database": "nerd_facts", "schema": "raw", "name": "factions", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/stg_netrunner_sources.yml", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.factions", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "factions"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "python_script", "identifier": "netrunner_factions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Faction definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique faction code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Faction name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Corp/Runner side indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "color": {"name": "color", "description": "Faction color code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_mini": {"name": "is_mini", "description": "Whether faction is a mini-faction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "source_meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_factions\"", "created_at": 1742909951.2934558, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.types": {"database": "nerd_facts", "schema": "raw", "name": "types", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/stg_netrunner_sources.yml", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.types", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "types"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "python_script", "identifier": "netrunner_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Card type definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Type name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "side_code": {"name": "side_code", "description": "Corp/Runner side the type belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "position": {"name": "position", "description": "Display order position", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_subtype": {"name": "is_subtype", "description": "Whether this is a subtype", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "source_meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_types\"", "created_at": 1742909951.2970088, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.packs": {"database": "nerd_facts", "schema": "raw", "name": "packs", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/stg_netrunner_sources.yml", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.packs", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "packs"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "python_script", "identifier": "netrunner_packs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Data pack definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique pack code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Pack name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cycle_code": {"name": "cycle_code", "description": "Code for the cycle this pack belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "date_release": {"name": "date_release", "description": "Release date of the pack", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Number of cards in the pack", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "position": {"name": "position", "description": "Position within the cycle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ffg_id": {"name": "ffg_id", "description": "Fantasy Flight Games product ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "source_meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_packs\"", "created_at": 1742909951.299488, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.cycles": {"database": "nerd_facts", "schema": "raw", "name": "cycles", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/stg_netrunner_sources.yml", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.cycles", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "cycles"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "python_script", "identifier": "netrunner_cycles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Cycle definitions for Android: Netrunner", "columns": {"code": {"name": "code", "description": "Unique cycle code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Cycle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "position": {"name": "position", "description": "Cycle release order position", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "size": {"name": "size", "description": "Number of data packs in cycle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rotated": {"name": "rotated", "description": "Whether cycle has rotated out of standard format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "source_meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_cycles\"", "created_at": 1742909951.3018997, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.netrunner.subtypes": {"database": "nerd_facts", "schema": "raw", "name": "subtypes", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/netrunner/stg_netrunner_sources.yml", "original_file_path": "models/staging/netrunner/stg_netrunner_sources.yml", "unique_id": "source.nerd_facts_dbt.netrunner.subtypes", "fqn": ["nerd_facts_dbt", "staging", "netrunner", "netrunner", "subtypes"], "source_name": "netrunner", "source_description": "Android: Netrunner card game data", "loader": "python_script", "identifier": "netrunner_subtypes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Subtype definitions for Android: Netrunner (derived from keywords)", "columns": {"code": {"name": "code", "description": "Unique subtype code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Subtype name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited_at": {"name": "edited_at", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "source_meta": {"owner": "Data Team", "refresh_frequency": "Monthly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"netrunner_subtypes\"", "created_at": 1742909951.303287, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.starships": {"database": "nerd_facts", "schema": "raw", "name": "starships", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.starships", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "starships"], "source_name": "swapi", "source_description": "Star Wars API data source. This data is extracted from swapi.dev and enhanced with additional derived fields during the ETL process. All JSON arrays use JSONB format in PostgreSQL.\n", "loader": "python_script", "identifier": "swapi_starships", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars starships", "columns": {"id": {"name": "id", "description": "Primary key for starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Starship model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Company that manufactured the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_credits": {"name": "cost_in_credits", "description": "Purchase cost in galactic credits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Starship length in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum atmospheric speed in km/h", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Maximum passenger capacity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Length of time the starship can sustain crew without resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hyperdrive_rating": {"name": "hyperdrive_rating", "description": "Hyperdrive class rating (lower is better)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "MGLT": {"name": "MGLT", "description": "Maximum speed in megalights per hour", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_class": {"name": "starship_class", "description": "Class of the starship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSON array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_names": {"name": "pilot_names", "description": "Names of pilots for this vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Film titles this entity appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the starship data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "source_meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_starships\"", "created_at": 1742909951.306841, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.films": {"database": "nerd_facts", "schema": "raw", "name": "films", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.films", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "films"], "source_name": "swapi", "source_description": "Star Wars API data source. This data is extracted from swapi.dev and enhanced with additional derived fields during the ETL process. All JSON arrays use JSONB format in PostgreSQL.\n", "loader": "python_script", "identifier": "swapi_films", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars films", "columns": {"id": {"name": "id", "description": "Primary key for film", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Film title", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "episode_id": {"name": "episode_id", "description": "Episode number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "opening_crawl": {"name": "opening_crawl", "description": "Opening crawl text", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "director": {"name": "director", "description": "Film director", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "producer": {"name": "producer", "description": "Film producer(s)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_date": {"name": "release_date", "description": "Film release date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "characters": {"name": "characters", "description": "JSON array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planets": {"name": "planets", "description": "JSON array of planet references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starships": {"name": "starships", "description": "JSON array of starship references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles": {"name": "vehicles", "description": "JSON array of vehicle references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "JSON array of species references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "character_names": {"name": "character_names", "description": "Array of character names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "planet_names": {"name": "planet_names", "description": "Array of planet names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_names": {"name": "species_names", "description": "Array of species names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_names": {"name": "starship_names", "description": "Array of starship names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_names": {"name": "vehicle_names", "description": "Array of vehicle names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the film data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "source_meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_films\"", "created_at": 1742909951.314274, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.people": {"database": "nerd_facts", "schema": "raw", "name": "people", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.people", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "people"], "source_name": "swapi", "source_description": "Star Wars API data source. This data is extracted from swapi.dev and enhanced with additional derived fields during the ETL process. All JSON arrays use JSONB format in PostgreSQL.\n", "loader": "python_script", "identifier": "swapi_people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars characters", "columns": {"id": {"name": "id", "description": "Primary key for character", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Character name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "height": {"name": "height", "description": "Height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "mass": {"name": "mass", "description": "Mass in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_color": {"name": "hair_color", "description": "Character hair color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_color": {"name": "skin_color", "description": "Character skin color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_color": {"name": "eye_color", "description": "Character eye color", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "birth_year": {"name": "birth_year", "description": "Birth year (BBY/ABY notation)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gender": {"name": "gender", "description": "Character gender", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld": {"name": "homeworld", "description": "Reference to character homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film appearances", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species": {"name": "species", "description": "JSON array of species references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicles": {"name": "vehicles", "description": "JSON array of vehicle references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starships": {"name": "starships", "description": "JSON array of starship references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Film titles this entity appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "species_names": {"name": "species_names", "description": "Array of species names this character belongs to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_names": {"name": "vehicle_names", "description": "Array of vehicle names this character pilots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starship_names": {"name": "starship_names", "description": "Array of starship names this character pilots", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld_name": {"name": "homeworld_name", "description": "Name of the character's homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the character data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "source_meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_people\"", "created_at": 1742909951.318847, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.planets": {"database": "nerd_facts", "schema": "raw", "name": "planets", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.planets", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "planets"], "source_name": "swapi", "source_description": "Star Wars API data source. This data is extracted from swapi.dev and enhanced with additional derived fields during the ETL process. All JSON arrays use JSONB format in PostgreSQL.\n", "loader": "python_script", "identifier": "swapi_planets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars planets", "columns": {"id": {"name": "id", "description": "Primary key for planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Planet name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rotation_period": {"name": "rotation_period", "description": "Time in hours for planet to complete one rotation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "orbital_period": {"name": "orbital_period", "description": "Time in days for planet to complete one orbit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "diameter": {"name": "diameter", "description": "Planet diameter in kilometers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "climate": {"name": "climate", "description": "Climate types on the planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gravity": {"name": "gravity", "description": "Gravitational force relative to standard", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "terrain": {"name": "terrain", "description": "Terrain types on the planet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "surface_water": {"name": "surface_water", "description": "Percentage of planet covered by water", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "population": {"name": "population", "description": "Planet population count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "residents": {"name": "residents", "description": "JSON array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "resident_names": {"name": "resident_names", "description": "Array of resident names for easier reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Film titles this entity appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the planet data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "source_meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_planets\"", "created_at": 1742909951.3234224, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.species": {"database": "nerd_facts", "schema": "raw", "name": "species", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.species", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "species"], "source_name": "swapi", "source_description": "Star Wars API data source. This data is extracted from swapi.dev and enhanced with additional derived fields during the ETL process. All JSON arrays use JSONB format in PostgreSQL.\n", "loader": "python_script", "identifier": "swapi_species", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars species", "columns": {"id": {"name": "id", "description": "Primary key for species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Species name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "classification": {"name": "classification", "description": "Species biological classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "designation": {"name": "designation", "description": "Species cognitive designation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_height": {"name": "average_height", "description": "Average height in centimeters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_lifespan": {"name": "average_lifespan", "description": "Average lifespan in years", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eye_colors": {"name": "eye_colors", "description": "Comma-separated list of common eye colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hair_colors": {"name": "hair_colors", "description": "Comma-separated list of common hair colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "skin_colors": {"name": "skin_colors", "description": "Comma-separated list of common skin colors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld": {"name": "homeworld", "description": "Reference to species homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "language": {"name": "language", "description": "Primary language spoken", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people": {"name": "people", "description": "JSON array of character references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "people_names": {"name": "people_names", "description": "Array of character names of this species", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Film titles this entity appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "homeworld_name": {"name": "homeworld_name", "description": "Name of the species' homeworld", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the species data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "source_meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_species\"", "created_at": 1742909951.327731, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.swapi.vehicles": {"database": "nerd_facts", "schema": "raw", "name": "vehicles", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/staging/swapi/swapi_sources.yml", "original_file_path": "models/staging/swapi/swapi_sources.yml", "unique_id": "source.nerd_facts_dbt.swapi.vehicles", "fqn": ["nerd_facts_dbt", "staging", "swapi", "swapi", "vehicles"], "source_name": "swapi", "source_description": "Star Wars API data source. This data is extracted from swapi.dev and enhanced with additional derived fields during the ETL process. All JSON arrays use JSONB format in PostgreSQL.\n", "loader": "python_script", "identifier": "swapi_vehicles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data about Star Wars vehicles", "columns": {"id": {"name": "id", "description": "Primary key for vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Vehicle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "model": {"name": "model", "description": "Vehicle model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "manufacturer": {"name": "manufacturer", "description": "Company that manufactured the vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_credits": {"name": "cost_in_credits", "description": "Purchase cost in galactic credits", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "length": {"name": "length", "description": "Vehicle length in meters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "max_atmosphering_speed": {"name": "max_atmosphering_speed", "description": "Maximum atmospheric speed in km/h", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "crew": {"name": "crew", "description": "Number of crew required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "passengers": {"name": "passengers", "description": "Maximum passenger capacity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cargo_capacity": {"name": "cargo_capacity", "description": "Cargo capacity in kilograms", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumables": {"name": "consumables", "description": "Length of time the vehicle can sustain crew without resupply", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vehicle_class": {"name": "vehicle_class", "description": "Class of the vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilots": {"name": "pilots", "description": "JSON array of pilot references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "films": {"name": "films", "description": "JSON array of film references", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pilot_names": {"name": "pilot_names", "description": "Names of pilots for this vehicle", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "film_names": {"name": "film_names", "description": "Film titles this entity appears in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Timestamp when record was created in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "edited": {"name": "edited", "description": "Timestamp when record was last updated in source system", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "url": {"name": "url", "description": "Source URL for the vehicle data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fetch_timestamp": {"name": "fetch_timestamp", "description": "Timestamp when data was fetched from the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "Timestamp when data was processed by the ETL pipeline", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "source_meta": {"owner": "Data Team", "extracted_by": "fetch_swapi.py", "refresh_frequency": "Weekly"}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_vehicles\"", "created_at": 1742909951.3320155, "unrendered_database": "nerd_facts", "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_people": {"database": "nerd_facts", "schema": "raw", "name": "swapi_people", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_people", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_people"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_people", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_people\"", "created_at": 1742909951.3321776, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_planets": {"database": "nerd_facts", "schema": "raw", "name": "swapi_planets", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_planets", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_planets"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_planets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_planets\"", "created_at": 1742909951.3323033, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_starships": {"database": "nerd_facts", "schema": "raw", "name": "swapi_starships", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_starships", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_starships"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_starships", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_starships\"", "created_at": 1742909951.3324263, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_vehicles": {"database": "nerd_facts", "schema": "raw", "name": "swapi_vehicles", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_vehicles", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_vehicles"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_vehicles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_vehicles\"", "created_at": 1742909951.3325465, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_species": {"database": "nerd_facts", "schema": "raw", "name": "swapi_species", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_species", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_species"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_species", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_species\"", "created_at": 1742909951.3326604, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.swapi_films": {"database": "nerd_facts", "schema": "raw", "name": "swapi_films", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.swapi_films", "fqn": ["nerd_facts_dbt", "raw", "raw", "swapi_films"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "swapi_films", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"swapi_films\"", "created_at": 1742909951.3327718, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_pokemon": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_pokemon", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_pokemon", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_pokemon"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_pokemon", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_pokemon\"", "created_at": 1742909951.3328824, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_types": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_types", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_types", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_types"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_types\"", "created_at": 1742909951.3329902, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_abilities": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_abilities", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_abilities", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_abilities"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_abilities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_abilities\"", "created_at": 1742909951.3331, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_moves": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_moves", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_moves", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_moves"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_moves", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_moves\"", "created_at": 1742909951.3332362, "unrendered_database": null, "unrendered_schema": "raw"}, "source.nerd_facts_dbt.raw.pokeapi_items": {"database": "nerd_facts", "schema": "raw", "name": "pokeapi_items", "resource_type": "source", "package_name": "nerd_facts_dbt", "path": "models/raw/sources.yml", "original_file_path": "models/raw/sources.yml", "unique_id": "source.nerd_facts_dbt.raw.pokeapi_items", "fqn": ["nerd_facts_dbt", "raw", "raw", "pokeapi_items"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pokeapi_items", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"nerd_facts\".\"raw\".\"pokeapi_items\"", "created_at": 1742909951.333379, "unrendered_database": null, "unrendered_schema": "raw"}}, "macros": {"macro.nerd_facts_dbt.test_not_null_column": {"name": "test_not_null_column", "resource_type": "macro", "package_name": "nerd_facts_dbt", "path": "tests/generic/test_not_null_values.sql", "original_file_path": "tests/generic/test_not_null_values.sql", "unique_id": "macro.nerd_facts_dbt.test_not_null_column", "macro_sql": "{% test not_null_column(model, column_name) %}\n\nwith validation as (\n    select\n        {{ column_name }} as column_value\n    from {{ model }}\n    where {{ column_name }} is null\n)\n\nselect *\nfrom validation\nwhere column_value is null\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.462971, "supported_languages": null}, "macro.nerd_facts_dbt.test_unique_column": {"name": "test_unique_column", "resource_type": "macro", "package_name": "nerd_facts_dbt", "path": "tests/generic/test_unique_values.sql", "original_file_path": "tests/generic/test_unique_values.sql", "unique_id": "macro.nerd_facts_dbt.test_unique_column", "macro_sql": "{% test unique_column(model, column_name) %}\n\nwith validation as (\n    select\n        {{ column_name }} as column_value,\n        count(*) as occurrences\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n)\n\nselect *\nfrom validation\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4633305, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.466268, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.466982, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.467385, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4678533, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4684553, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4689946, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4692273, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4696724, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4701617, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4712126, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4714603, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4718864, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4722378, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4727855, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4732797, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.474042, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4743, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.47445, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.474672, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4748542, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.476212, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.476987, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4772794, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.477519, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4776595, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4777997, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4779377, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4785953, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4787602, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4793148, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {"name": "postgres__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql", "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) %}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"dbt-postgres 'microbatch' requires a `unique_key` config\") }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql", "macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4797568, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }}\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = {{ target }}.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and ({{ target }}.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ target }}.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and {{ target }}.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4812298, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4822738, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4825132, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4827979, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4836702, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4843543, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4848125, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4852078, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4853952, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4855742, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4857912, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4863222, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4869876, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4871764, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4873955, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.487915, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4881148, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4907336, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4910343, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4917123, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4923177, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4926157, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4932506, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4937456, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4941506, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4945185, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.494908, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4952884, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4963784, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4966376, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4968271, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4970071, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4971924, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.4999416, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5019274, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5024195, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5027385, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5043952, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5047045, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5055223, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.508174, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.508991, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5093076, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5095482, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5099127, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.510146, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5105083, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5107408, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5110676, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.511304, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.511501, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5118449, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5120604, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5124168, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5135992, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.514545, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.515424, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.515748, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5166667, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5219808, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5233765, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5256546, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5260057, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5269382, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5272753, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.528105, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.529607, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.531164, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.532817, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.533915, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5346708, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5350401, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.535261, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5383444, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5386827, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5388412, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5408077, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5415232, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5419235, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.542197, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5430791, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5459, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5463474, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5468383, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5494814, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5497148, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.550021, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5512815, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.551501, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5517445, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5535495, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.555488, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.556075, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5571482, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5595617, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5599837, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5602014, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5603228, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5605114, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5606637, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5609221, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5612528, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5657992, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5660858, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.566746, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5672948, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5681314, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.568696, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5690796, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5697646, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5707374, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5711007, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.571452, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5766876, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5799944, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5812, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5823584, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5826654, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5833054, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5835536, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5837553, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5839458, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5840983, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5842998, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.584453, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5850582, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5853033, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5869308, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5886104, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.589359, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5897338, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5906644, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5924919, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.593745, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5940545, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5971055, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.5983076, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6000347, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6003187, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6004536, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6013536, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6016295, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6022618, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6027386, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6031399, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6037035, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6040173, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6043174, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6047194, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6055083, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.605792, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.605974, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.606391, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6066365, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6068509, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6070905, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6075723, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6078348, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6081822, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6085563, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6088512, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6094177, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6096106, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6097975, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6099389, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.610465, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6106815, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.610785, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6109936, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6112041, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6118035, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6123393, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6126096, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.613011, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6143842, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6145978, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6150749, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.615351, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6156666, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6159725, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6177235, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6181648, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6184022, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.618843, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6191359, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6201503, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6205761, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6219294, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6226356, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6229105, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6232414, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6235185, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6238887, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6245706, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.62589, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6263351, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.62667, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6271, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6274083, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6276786, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6279206, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.628235, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6284878, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6288657, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6290936, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6292994, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.629548, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.629754, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6299593, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6301498, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6304035, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6306973, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6313026, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6314855, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.631711, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6322315, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6324687, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.632651, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6328537, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6330156, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6343746, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6345322, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.634742, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6348884, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6353295, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6355705, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6358054, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6361861, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6366217, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6370082, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6373098, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6375978, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6384637, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.638705, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.639027, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6393237, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6408901, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.641397, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6417449, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6422958, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6426387, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6430063, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6434698, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6439846, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6448147, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.645016, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6461265, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6466522, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6473823, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6480045, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.648114, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.64856, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6488857, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6492262, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6495006, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6498795, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6501439, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.650525, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6508665, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6515405, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6531916, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6536133, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6538882, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.654434, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.654928, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.655155, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.655408, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6557148, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.656454, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6572497, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6576037, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.658001, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6584935, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6590781, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.659426, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6596737, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.660081, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6602886, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6607044, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6610458, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6618507, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6620946, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6626444, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6635168, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6641402, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.664386, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6646144, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.665288, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.665531, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.665894, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.666081, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6664639, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6666384, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6669674, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6671557, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6674573, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6676664, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6681163, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.668458, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6688893, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6691253, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6700392, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.670201, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6708896, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6711, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.671273, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6729279, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column", "macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6734393, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.673866, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6745412, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6747406, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6762455, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6765146, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.676816, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6771357, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6772997, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6776268, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6778104, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6782522, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6784632, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6786902, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.679247, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.679563, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6797938, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6803443, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6808875, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.681132, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6821487, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6826322, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.682856, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6832628, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6834252, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6838634, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6840196, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6843753, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6845603, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6850164, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6852422, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6855326, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6860018, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.686313, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6866648, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6868408, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6871443, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.687279, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6875923, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6877742, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6881711, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.688533, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6888816, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6890545, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6894426, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6899292, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6903114, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6904962, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.691348, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6915393, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6918259, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6920848, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6923678, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6926372, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6929026, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6931934, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6934626, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.693707, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6939707, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6942053, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6944625, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.694699, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6954842, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6966763, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6971426, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6978476, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6982706, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6984477, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.698964, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.6992478, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.699998, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7006977, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7012038, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.701482, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7018518, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7019854, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.702393, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7026608, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7031507, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7036107, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7038703, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7043154, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7045374, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.704901, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.70513, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7056544, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7061512, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7065964, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7068233, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7072656, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.707496, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7082305, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7086425, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7091472, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7096322, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = False) %}\n    {{ return(adapter.dispatch('generate_model_import_ctes', 'codegen')(model_name, leading_commas)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_import_ctes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7117972, "supported_languages": null}, "macro.codegen.default__generate_model_import_ctes": {"name": "default__generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.default__generate_model_import_ctes", "macro_sql": "{% macro default__generate_model_import_ctes(model_name, leading_commas) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ print(model_import_ctes) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7207284, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n\n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7225986, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False, case_sensitive_databases=False, case_sensitive_schemas=False, case_sensitive_tables=False, case_sensitive_cols=False) %}\n    {{ return(adapter.dispatch('generate_source', 'codegen')(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema, case_sensitive_databases, case_sensitive_schemas, case_sensitive_tables, case_sensitive_cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7240572, "supported_languages": null}, "macro.codegen.default__generate_source": {"name": "default__generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.default__generate_source", "macro_sql": "{% macro default__generate_source(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema, case_sensitive_databases, case_sensitive_schemas, case_sensitive_tables, case_sensitive_cols) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ (database_name if case_sensitive_databases else database_name | lower)) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ (schema_name if case_sensitive_schemas else schema_name | lower)) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ (table if case_sensitive_tables else table | lower) ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ (column.name if case_sensitive_cols else column.name | lower)) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.727801, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n    {{ return(adapter.dispatch('create_base_models', 'codegen')(source_name, tables)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__create_base_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7284257, "supported_languages": null}, "macro.codegen.default__create_base_models": {"name": "default__create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.default__create_base_models", "macro_sql": "{% macro default__create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7291102, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n  {{ return(adapter.dispatch('generate_column_yaml', 'codegen')(column, model_yaml, column_desc_dict, include_data_types, parent_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7302964, "supported_languages": null}, "macro.codegen.default__generate_column_yaml": {"name": "default__generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_column_yaml", "macro_sql": "{% macro default__generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name) %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: ' ~ (column_desc_dict.get(column.name | lower,'') | tojson)) %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7320642, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) -%}\n  {{ return(adapter.dispatch('generate_model_yaml', 'codegen')(model_names, upstream_descriptions, include_data_types)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7325258, "supported_languages": null}, "macro.codegen.default__generate_model_yaml": {"name": "default__generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_model_yaml", "macro_sql": "{% macro default__generate_model_yaml(model_names, upstream_descriptions, include_data_types) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7346284, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n  {{ return(adapter.dispatch('generate_base_model', 'codegen')(source_name, table_name, leading_commas, case_sensitive_cols, materialized)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_base_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7356567, "supported_languages": null}, "macro.codegen.default__generate_base_model": {"name": "default__generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.default__generate_base_model", "macro_sql": "{% macro default__generate_base_model(source_name, table_name, leading_commas, case_sensitive_cols, materialized) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% else %}{{ adapter.quote(column) }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% else %}{{ adapter.quote(column) }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ print(base_model_sql) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7372322, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.738853, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(resource_type, model_name, dict_with_descriptions={}) %}\n    {% if resource_type == 'source' %}\n        {# sources aren't part of graph.nodes #}\n        {% set nodes = graph.sources %}\n    {% else %}\n        {% set nodes = graph.nodes %}\n    {% endif %}\n    {% for node in nodes.values()\n        | selectattr('resource_type', 'equalto', resource_type)\n        | selectattr('name', 'equalto', model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7399573, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(\n                full_model.split('.')[0], full_model.split('.')[-1], glob_dict\n            ) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7405944, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7432175, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.743506, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.743837, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7440758, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7443619, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7449, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7453144, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.745633, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7467895, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7472062, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7474723, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7478294, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7480528, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.748616, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7496934, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7501776, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7507024, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7512403, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.752163, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.752542, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7532542, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7538726, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7543924, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.754981, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.755604, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.756304, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7574768, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7580361, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7590997, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.759719, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7603316, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7610614, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7624478, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7631512, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7648761, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7655015, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7663317, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.766819, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.767268, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.768699, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7737913, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.774351, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7749546, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7755513, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7766724, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7772162, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7777169, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.778304, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7787373, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.779752, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.781777, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.782461, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7835057, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.784226, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.784905, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7852097, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7858622, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7862935, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.787035, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7883494, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7930584, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7937386, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.794211, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7954156, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7973764, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7980046, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.7988892, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8002083, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8008223, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.801761, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8026886, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8033412, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8037262, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8040605, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.804669, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.805429, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.805977, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8064516, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.806843, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8072736, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.807741, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8086345, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8093414, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.810419, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8108308, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.811007, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.811185, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8113625, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8119333, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8125198, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8127666, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8132317, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8140466, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8147573, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8151248, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.815361, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8157253, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8159544, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8161721, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.816391, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8174622, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8203194, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8209434, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8220184, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8223913, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8228228, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8238332, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.824908, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8254313, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8263624, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8268132, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8271272, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8276777, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8287535, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8293397, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8296957, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8304136, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.831442, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.831842, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8320248, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8329556, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.835407, "supported_languages": null}, "macro.dbt_project_evaluator.is_os_mac_or_linux": {"name": "is_os_mac_or_linux", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.is_os_mac_or_linux", "macro_sql": "{% macro is_os_mac_or_linux() %}\n  {% for val in graph.nodes.values() %}\n    {{ return(\"\\\\\" not in val.get(\"original_file_path\",\"\")) }}\n  {% endfor %}\n  {{ return(true) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.836428, "supported_languages": null}, "macro.dbt_project_evaluator.get_directory_pattern": {"name": "get_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_directory_pattern", "macro_sql": "{% macro get_directory_pattern() %}\n  {% if execute %}\n    {%- set on_mac_or_linux = dbt_project_evaluator.is_os_mac_or_linux() -%}\n    {%- if on_mac_or_linux -%}\n      {{ return(\"/\") }}\n    {% else %}\n      {{ return(\"\\\\\\\\\") }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.is_os_mac_or_linux"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8369648, "supported_languages": null}, "macro.dbt_project_evaluator.get_regexp_directory_pattern": {"name": "get_regexp_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro_sql": "{% macro get_regexp_directory_pattern() %}\n  {% set regexp_escaped = get_directory_pattern() | replace(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") %}\n  {% do return(regexp_escaped) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8373368, "supported_languages": null}, "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern": {"name": "get_dbtreplace_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro_sql": "{% macro get_dbtreplace_directory_pattern() %}\n  {% if execute %}\n    {%- set on_mac_or_linux = dbt_project_evaluator.is_os_mac_or_linux() -%}\n    {%- if on_mac_or_linux -%}\n      {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*/','')\", \"''\") }}\n    {% else %}\n      {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*\\\\\\\\\\\\\\\\','')\", \"''\") }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.is_os_mac_or_linux", "macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.837975, "supported_languages": null}, "macro.dbt_project_evaluator.is_not_empty_string": {"name": "is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.is_not_empty_string", "macro_sql": "{% macro is_not_empty_string(str) %}\n    {{ return(adapter.dispatch('is_not_empty_string', 'dbt_project_evaluator')(str)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__is_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8384433, "supported_languages": null}, "macro.dbt_project_evaluator.default__is_not_empty_string": {"name": "default__is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.default__is_not_empty_string", "macro_sql": "{% macro default__is_not_empty_string(str) %}\n\n    {% if str %}\n    {{ true }}\n    {% else %}\n    {{ false }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8387604, "supported_languages": null}, "macro.dbt_project_evaluator.check_model_is_table": {"name": "check_model_is_table", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/check_model_is_table.sql", "original_file_path": "macros/check_model_is_table.sql", "unique_id": "macro.dbt_project_evaluator.check_model_is_table", "macro_sql": "{%- macro check_model_is_table(model) -%}\n    {%- if model.config.materialized != 'table' -%}\n        {%- do exceptions.raise_compiler_error(\n            \"Model must use the table materialization. Please check any model overrides.\"\n        ) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8391943, "supported_languages": null}, "macro.dbt_project_evaluator.set_is_excluded": {"name": "set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.set_is_excluded", "macro_sql": "{% macro set_is_excluded(resource, resource_type) %}\n    {{ return(adapter.dispatch('set_is_excluded', 'dbt_project_evaluator')(resource, resource_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__set_is_excluded"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.83995, "supported_languages": null}, "macro.dbt_project_evaluator.default__set_is_excluded": {"name": "default__set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.default__set_is_excluded", "macro_sql": "{% macro default__set_is_excluded(resource, resource_type) %}\n\n    {% set re = modules.re %}\n    {%- set ns = namespace(exclude=false) -%}\n\n    {% if resource_type == 'node' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") -%}\n    {% elif resource_type == 'source' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") ~ \":\" ~ resource.fqn[-2] ~ \".\" ~ resource.fqn[-1] -%}\n    {% else %}\n        {{ exceptions.raise_compiler_error(\n            \"`set_is_excluded()` macro does not support resource type: \" ~ resource_type\n        ) }}\n    {% endif %}\n    \n\n    {#- we duplicate the exclusion list to account for windows directory patterns -#}\n    {%- set exclude_all_os_paths_from_project = [] -%}\n\n    {%- for exclude_paths_pattern in var('exclude_paths_from_project',[]) -%}\n        {%- set windows_path_pattern = exclude_paths_pattern | replace(\"/\", \"\\\\\\\\\\\\\\\\\") -%}\n        {%- do exclude_all_os_paths_from_project.extend([exclude_paths_pattern, windows_path_pattern]) -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if it is from the current project and matches the pattern -#}\n    {%- for exclude_paths_pattern in exclude_all_os_paths_from_project -%}\n        {%- set matched_path = re.search(exclude_paths_pattern, resource_path, re.IGNORECASE) -%}\n        {%- if matched_path and resource.package_name == project_name %}\n            {% set ns.exclude = true %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if the package if it is listed in `exclude_packages` or if it is \"all\" -#}\n    {%- if (\n        resource.package_name != project_name) \n        and (resource.package_name in  var('exclude_packages',[]) or 'all' in var('exclude_packages',[])) \n    -%}\n        {% set ns.exclude = true %}\n    {%- endif -%}\n\n    {{ return(ns.exclude) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8421752, "supported_languages": null}, "macro.dbt_project_evaluator.filter_exceptions": {"name": "filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.filter_exceptions", "macro_sql": "{% macro filter_exceptions() -%}\n    {{ return(adapter.dispatch('filter_exceptions', 'dbt_project_evaluator')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__filter_exceptions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8426883, "supported_languages": null}, "macro.dbt_project_evaluator.default__filter_exceptions": {"name": "default__filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.default__filter_exceptions", "macro_sql": "{% macro default__filter_exceptions() %}\n\n    {% set query_filters %}\n    select\n        column_name,\n        id_to_exclude\n    from {{ ref('dbt_project_evaluator_exceptions') }}\n    where fct_name = '{{ model.name }}'\n    {% endset %}\n\n    {% if execute %}\n    {% set is_default_seed = 'dbt_project_evaluator' in graph.nodes.values() | \n        selectattr('resource_type', 'equalto', 'seed') | \n        selectattr('name', 'equalto', 'dbt_project_evaluator_exceptions') | \n        map(attribute = 'package_name') | list %}\n\n    {% if not is_default_seed %}\n    \n        {% if flags.WHICH not in ['compile'] %}\n            where 1 = 1\n            {% for row_filter in run_query(query_filters) %}\n                and {{ row_filter[0] }} not like '{{ row_filter[1] }}'\n            {% endfor %}\n        {% endif %}\n    \n    {% endif %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.843716, "supported_languages": null}, "macro.dbt_project_evaluator.insert_resources_from_graph": {"name": "insert_resources_from_graph", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/insert_resources_from_graph.sql", "original_file_path": "macros/insert_resources_from_graph.sql", "unique_id": "macro.dbt_project_evaluator.insert_resources_from_graph", "macro_sql": "{% macro insert_resources_from_graph(relation, resource_type='nodes', relationships=False, columns=False, batch_size=var('insert_batch_size') | int) %}\n  {%- set values = get_resource_values(resource_type, relationships, columns) -%}\n  {%- set values_length = values | length -%}\n  {%- set loop_count = (values_length / batch_size) | round(0, 'ceil') | int -%}\n  \n    {%- for loop_number in range(loop_count) -%}\n        {%- set lower_bound = loop.index0 * batch_size -%}\n        {%- set upper_bound = loop.index * batch_size -%}\n        {%- set values_subset = values[lower_bound : upper_bound] %}\n        {%- set values_list_of_strings = [] -%}\n        {%- for indiv_values in values_subset %}\n            {%- do values_list_of_strings.append( indiv_values | join(\", \\n\")) -%}\n        {%- endfor -%}\n        {%- set values_string = '(' ~ values_list_of_strings | join(\"), \\n\\n(\") ~ ')' %}\n        {%- set insert_statement = \"insert into \" ~ relation ~ \" values \\n\" ~  values_string ~ \";\"%}\n        {% call statement('insert') -%}\n            {{ insert_statement }}\n        {%- endcall %}\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_resource_values", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8454895, "supported_languages": null}, "macro.dbt_project_evaluator.wrap_string_with_quotes": {"name": "wrap_string_with_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/wrap_string_with_quotes.sql", "original_file_path": "macros/wrap_string_with_quotes.sql", "unique_id": "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro_sql": "{% macro wrap_string_with_quotes(str) %}\n  {% if str is none %}\n    {{ return('cast(NULL as ' ~ dbt_project_evaluator.type_string_dpe() ~ ')') }}\n  {% else %}\n    {{ dbt.string_literal(str) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.84611, "supported_languages": null}, "macro.dbt_project_evaluator.recursive_dag": {"name": "recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.recursive_dag", "macro_sql": "{% macro recursive_dag() %}\n    {{ return(adapter.dispatch('recursive_dag', 'dbt_project_evaluator')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.847487, "supported_languages": null}, "macro.dbt_project_evaluator.default__recursive_dag": {"name": "default__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.default__recursive_dag", "macro_sql": "{% macro default__recursive_dag() %}\n\nwith recursive direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as {{ dbt.type_boolean() }}) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null {# optional lever to change filtering of anchor clause to only include root resources #}\n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        {{ dbt.array_append('all_relationships.path', 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    {% if var('max_depth_dag') | int > 0 %}\n        {% if var('max_depth_dag') | int < 2 or var('max_depth_dag') | int < var('chained_views_threshold') | int %}\n            {% do exceptions.raise_compiler_error(\n                'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n                ) %}\n        {% else %}\n        where distance <= {{ var('max_depth_dag')}}\n        {% endif %}\n    {% endif %}\n\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.type_boolean", "macro.dbt.array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.848626, "supported_languages": null}, "macro.dbt_project_evaluator.bigquery__recursive_dag": {"name": "bigquery__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.bigquery__recursive_dag", "macro_sql": "{% macro bigquery__recursive_dag() %}\n\n-- as of Feb 2022 BigQuery doesn't support with recursive in the same way as other DWs\n{% set max_depth = var('max_depth_dag') | int %}\n{% if max_depth < 2 or max_depth < var('chained_views_threshold') | int %}\n    {% do exceptions.raise_compiler_error(\n        'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n        ) %}\n{% endif %}\n\nwith direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n)\n\n-- must do distinct prior to creating array because BigQuery doesn't support distinct on array type\n, get_distinct as (\n    select distinct\n        resource_id as parent_id,\n        resource_id as child_id,\n        resource_name,\n        materialized as child_materialized,\n        is_public as child_is_public,\n        access as child_access,\n        is_excluded as child_is_excluded\n\n    from direct_relationships\n)\n\n, cte_0 as (\n    select\n        parent_id,\n        child_id,\n        child_materialized,\n        child_is_public,\n        child_access,\n        child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as {{ dbt.type_boolean() }}) as is_dependent_on_chain_of_views\n    from get_distinct\n)\n\n{% for i in range(1,max_depth) %}\n{% set prev_cte_path %}cte_{{ i - 1 }}.path{% endset %}\n, cte_{{i}} as (\n    select\n        cte_{{i - 1}}.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_{{i - 1}}.distance+1 as distance,\n        {{ dbt.array_append(prev_cte_path, 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                cte_{{i - 1}}.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_{{i - 1}}.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_{{i - 1}}\n            on cte_{{i - 1}}.child_id = direct_relationships.direct_parent_id\n)\n{% endfor %}\n\n, all_relationships_unioned as (\n    {% for i in range(max_depth) %}\n    select * from cte_{{i}}\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\n, resource_info as (\n    select * from {{ ref('int_all_graph_resources') }}\n)\n\n\n, all_relationships as (\n    select\n        parent.resource_id as parent_id,\n        parent.resource_name as parent,\n        parent.resource_type as parent_resource_type,\n        parent.model_type as parent_model_type,\n        parent.materialized as parent_materialized,\n        parent.is_public as parent_is_public,\n        parent.access as parent_access,\n        parent.source_name as parent_source_name,\n        parent.file_path as parent_file_path,\n        parent.directory_path as parent_directory_path,\n        parent.file_name as parent_file_name,\n        parent.is_excluded as parent_is_excluded,\n        child.resource_id as child_id,\n        child.resource_name as child,\n        child.resource_type as child_resource_type,\n        child.model_type as child_model_type,\n        child.materialized as child_materialized,\n        child.is_public as child_is_public,\n        child.access as child_access,\n        child.source_name as child_source_name,\n        child.file_path as child_file_path,\n        child.directory_path as child_directory_path,\n        child.file_name as child_file_name,\n        child.is_excluded as child_is_excluded,\n        cast(all_relationships_unioned.distance as {{ dbt.type_int() }}) as distance,\n        all_relationships_unioned.path,\n        all_relationships_unioned.is_dependent_on_chain_of_views\n\n    from all_relationships_unioned\n    left join resource_info as parent\n        on all_relationships_unioned.parent_id = parent.resource_id\n    left join resource_info as child\n        on all_relationships_unioned.child_id = child.resource_id\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.type_boolean", "macro.dbt.array_append", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.850332, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__recursive_dag": {"name": "clickhouse__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__recursive_dag", "macro_sql": "{% macro clickhouse__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8505177, "supported_languages": null}, "macro.dbt_project_evaluator.spark__recursive_dag": {"name": "spark__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.spark__recursive_dag", "macro_sql": "{% macro spark__recursive_dag() %}\n-- as of June 2022 databricks SQL doesn't support \"with recursive\" in the same way as other DWs\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.850687, "supported_languages": null}, "macro.dbt_project_evaluator.trino__recursive_dag": {"name": "trino__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.trino__recursive_dag", "macro_sql": "{% macro trino__recursive_dag() %}\n{#-- Although Trino supports a recursive WITH-queries,\n-- it is less performant than creating CTEs with loops and union them --#}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8508565, "supported_languages": null}, "macro.dbt_project_evaluator.athena__recursive_dag": {"name": "athena__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.athena__recursive_dag", "macro_sql": "{% macro athena__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.851018, "supported_languages": null}, "macro.dbt_project_evaluator.find_all_hard_coded_references": {"name": "find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.find_all_hard_coded_references", "macro_sql": "{% macro find_all_hard_coded_references(node) %}\n    {{ return(adapter.dispatch('find_all_hard_coded_references', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__find_all_hard_coded_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8519933, "supported_languages": null}, "macro.dbt_project_evaluator.default__find_all_hard_coded_references": {"name": "default__find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.default__find_all_hard_coded_references", "macro_sql": "{% macro default__find_all_hard_coded_references(node) %}\n\n    {%- set all_hard_coded_references_list = [] -%}\n\n    {% if node.resource_type == 'model' and node.language == \"sql\" %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set re = modules.re -%}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {#-\n            REGEX Explanations\n            \n            # from_var_1\n            - matches (from or join) followed by some spaces and then {{var(<something>)}}\n            \n            # from_var_2\n            - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n            \n            # from_table_1\n            - matches (from or join) followed by some spaces and then <something>.<something_else>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_2\n            - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_3\n            - matches (from or join) followed by some spaces and then <something>\n              where <something> is enclosed by (` or [ or \" or ')\n\n            # notes\n            - all regex matches exclude text that immediately follows \"distinct \"\n\n        -#}\n\n        {%- set re = modules.re -%}\n\n        {%- set from_hard_coded_references = {\n            'from_var_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark\n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}\n                (\\)\\s*}})\n\n                ',\n            'from_var_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a comma\n                (,)\n\n                # sixth matching group\n                # 0 or more whitespace character(s), 1 or 0 quotation mark            \n                (\\s*[\\'\\\"]?)\n\n                # seventh matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # eighth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n                ([\\'\\\"]?\\s*)\n\n                # ninth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n                (\\)\\s*}})\n\n                ',\n            'from_table_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character            \n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # ninth matching group\n                # a period\n                (\\.)\n\n                # tenth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # eleventh matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # twelfth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) followed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_3':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\'])\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n                \n                # fourth matching group\n                # 1 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\'])(?=\\s|$)\n\n                '\n        } -%}\n\n        {%- for regex_name, regex_pattern in from_hard_coded_references.items() -%}\n\n            {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql_no_comments) -%}\n                \n                {%- for match in all_regex_matches -%}\n\n                    {%- set raw_reference = match[1:]|join()|trim -%}\n\n                    {%- do all_hard_coded_references_list.append(raw_reference) -%}\n\n                {%- endfor -%}\n        \n        {%- endfor -%}\n\n    {% endif %}\n    \n    {% set all_hard_coded_references = set(all_hard_coded_references_list)|sort|join(', ')|trim %}\n\n    {{ return(all_hard_coded_references) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8543024, "supported_languages": null}, "macro.dbt_project_evaluator.loop_vars": {"name": "loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.loop_vars", "macro_sql": "{% macro loop_vars(vars) %}\n    {{ return(adapter.dispatch('loop_vars', 'dbt_project_evaluator')(vars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__loop_vars"]}, "description": "A macro that loops through variables and returns them as a SQL query to be used in a model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/staging/variables/variables.yml", "arguments": [{"name": "vars", "type": "list|string", "description": "A list of variables from dbt_project.yml"}], "created_at": 1742909951.1570413, "supported_languages": null}, "macro.dbt_project_evaluator.default__loop_vars": {"name": "default__loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.default__loop_vars", "macro_sql": "{% macro default__loop_vars(vars) %}\n{%- set sql_query = [] -%}\n{%- for var_name in vars -%}\n    {%- if var(var_name,[]) is not string -%}\n        {%- for var_value in var(var_name,[]) -%}\n            {% set sql_command %}\n            select '{{ var_name }}' as var_name, '{{ var_value }}' as var_value\n            {% endset %}\n            {%- do sql_query.append(sql_command) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {% set sql_command %}\n        select '{{ var_name }}' as var_name, '{{ var(var_name,[]) }}' as var_value\n        {% endset %}\n        {%- do sql_query.append(sql_command) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- if sql_query -%}\n{{ sql_query | join('union all') }}\n{%- else -%}\nselect '' as var_name, '' as var_value\nlimit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8560984, "supported_languages": null}, "macro.dbt_project_evaluator.calculate_number_lines": {"name": "calculate_number_lines", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_number_lines.sql", "original_file_path": "macros/calculate_number_lines.sql", "unique_id": "macro.dbt_project_evaluator.calculate_number_lines", "macro_sql": "{% macro calculate_number_lines(node) %}\n    {{ return(adapter.dispatch('calculate_number_lines', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__calculate_number_lines"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.856536, "supported_languages": null}, "macro.dbt_project_evaluator.default__calculate_number_lines": {"name": "default__calculate_number_lines", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_number_lines.sql", "original_file_path": "macros/calculate_number_lines.sql", "unique_id": "macro.dbt_project_evaluator.default__calculate_number_lines", "macro_sql": "{% macro default__calculate_number_lines(node) %}\n\n    {% if node.resource_type == 'model' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {{ return(model_raw_sql.count(\"\\n\")) + 1 }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8570895, "supported_languages": null}, "macro.dbt_project_evaluator.calculate_sql_complexity": {"name": "calculate_sql_complexity", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_sql_complexity.sql", "original_file_path": "macros/calculate_sql_complexity.sql", "unique_id": "macro.dbt_project_evaluator.calculate_sql_complexity", "macro_sql": "{% macro calculate_sql_complexity(node) %}\n    {{ return(adapter.dispatch('calculate_sql_complexity', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__calculate_sql_complexity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8577745, "supported_languages": null}, "macro.dbt_project_evaluator.default__calculate_sql_complexity": {"name": "default__calculate_sql_complexity", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_sql_complexity.sql", "original_file_path": "macros/calculate_sql_complexity.sql", "unique_id": "macro.dbt_project_evaluator.default__calculate_sql_complexity", "macro_sql": "{% macro default__calculate_sql_complexity(node) %}\n\n    {% if node.resource_type == 'model' and node.language == 'sql' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {%- set re = modules.re -%}\n        {%- set ns = namespace(complexity = 0) -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {%- for token, token_cost in var('token_costs').items() -%}\n\n            {# this is not 100% perfect but it checks more or less if the token exists as a word by itself or followed by \"(\"\" like for least()/greatest() #}\n            {%- set token_with_boundaries = \"\\\\b\" ~ token ~ \"[\\\\t\\\\r\\\\n (]\" -%}\n            {%- set all_regex_matches = re.findall(token_with_boundaries, model_raw_sql_no_comments, re.IGNORECASE) -%}\n            {%- set ns.complexity = ns.complexity + token_cost * (all_regex_matches | length) -%}\n\n        {%- endfor -%}\n\n        {{ return(ns.complexity) }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8596025, "supported_languages": null}, "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues": {"name": "print_dbt_project_evaluator_issues", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "original_file_path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "unique_id": "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues", "macro_sql": "{% macro print_dbt_project_evaluator_issues(format='table', quote=\"\") %}\n\n  {%- if flags.WHICH in [\"build\",\"test\"] -%}\n    {{ print(\"\\n### List of issues raised by dbt_project_evaluator ###\") }}\n\n    {#-\n      if you create custom dbt_project_evaluator rules on your package using the test `dbt_project_evaluator.is_empty`,\n      the test name should start with the same name as the default.\n    -#}\n    {% set test_name_prefix_of_custom_rules = var(\n      \"test_name_prefix_of_custom_rules\",\n      default=\"dbt_project_evaluator_is_empty_\",\n    ) %}\n\n    {% for result in results | selectattr('failures') | selectattr('failures', '>', 0) %}\n      \n      {% set is_test = result.node.config.materialized == \"test\" %}\n      {% set package_name = result.node.package_name %}\n      {% set resource_name = result.node.name %}\n      {% if is_test and (\n        package_name == \"dbt_project_evaluator\"\n        or resource_name.startswith(test_name_prefix_of_custom_rules)\n      ) %}\n        \n        {{ print(\"\\n-- \" ~ result.node.fqn | join(\".\") ~ \" --\") }}\n\n        {% set unique_id_model_checked = result.node.depends_on.nodes[0] %}\n        {% set model_details = graph[\"nodes\"][unique_id_model_checked] %}\n\n        {% set sql_statement %}\n        select * from {{ model_details.relation_name }}\n        {% endset %}\n\n        {% set query_results = run_query(sql_statement) %}\n        {% if format == 'table' %}\n          {{ print(query_results.print_table(max_column_width=80, max_rows=1000) or \"\") }}\n        {% elif format == 'csv' %}  \n          {{ print(query_results.print_csv() or \"\") }}\n        {% else %}\n            {%- do exceptions.raise_compiler_error(\"format can only be 'table' or 'csv'\") -%}\n        {% endif %}\n\n\n      {% endif %}\n\n    {% endfor %}\n\n    {{ print(\"\\n\") }}\n  {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.862879, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_string": {"name": "clickhouse__type_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_string", "macro_sql": "{%- macro clickhouse__type_string() -%}\n  {{ 'Nullable(String)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.863639, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_int": {"name": "clickhouse__type_int", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_int", "macro_sql": "\n\n{%- macro clickhouse__type_int() -%}\n  {{ 'Nullable(Int32)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8637779, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_float": {"name": "clickhouse__type_float", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_float", "macro_sql": "\n\n{%- macro clickhouse__type_float() -%}\n  {{ 'Nullable(Float32)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8639054, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_boolean": {"name": "clickhouse__type_boolean", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_boolean", "macro_sql": "\n\n{%- macro clickhouse__type_boolean() -%}\n  {{ 'Nullable(Bool)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8640287, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__replace": {"name": "clickhouse__replace", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__replace", "macro_sql": "{% macro clickhouse__replace(string_text, pattern, replacement) -%}\n    replaceAll(assumeNotNull({{string_text}}), {{pattern}}, {{replacement}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8642352, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__split_part": {"name": "clickhouse__split_part", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__split_part", "macro_sql": "{% macro clickhouse__split_part(string_text, delimiter_text, part_number) -%}\n    splitByChar({{delimiter_text}}, assumeNotNull({{string_text}}))[{{part_number}}]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8644388, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__listagg": {"name": "clickhouse__listagg", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__listagg", "macro_sql": "{% macro clickhouse__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if order_by_clause and ' by ' in order_by_clause -%}\n      {% set order_by_field = order_by_clause.split(' by ')[1] %}\n      {% set arr = \"arrayMap(x -> x.1, arrayReverseSort(x -> x.2, arrayZip(array_agg({}), array_agg({}))))\".format(arr, order_by_field) %}\n    {% else -%}\n      {% set arr = \"array_agg({})\".format(measure) %}\n    {%- endif %}\n\n    {% if limit_num -%}\n      arrayStringConcat(arraySlice({{ arr }}, 1, {{ limit_num }}), {{delimiter_text}})\n    {% else -%}\n      arrayStringConcat({{ arr }}, {{delimiter_text}})\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8651924, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__load_csv_rows": {"name": "clickhouse__load_csv_rows", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__load_csv_rows", "macro_sql": "{% macro clickhouse__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set data_sql = adapter.get_csv_data(agate_table) %}\n\n  {% if data_sql %}\n    {% set sql -%}\n      insert into {{ this.render() }} ({{ cols_sql }})\n      {{ adapter.get_model_query_settings(model) }}\n      format CSV\n      {{ data_sql }}\n    {%- endset %}\n\n    {% do adapter.add_query(sql, bindings=agate_table, abridge_sql_log=True) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.865985, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) -%}\n    str_split({{string_text}}, {{delimiter_text}})[{{part_number}}]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.86637, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {# \n        This is not the full support for listagg on DuckDB but it allows tests to pass/fail for this package\n        - order_by_clause does not work, so we need to sort the CTE before calling listagg\n        - support for limit_num was not added\n    #}\n\n    {% if limit_num -%}\n        {%- do exceptions.raise_compiler_error(\"listagg on DuckDB doesn't support limit_num\") -%}\n    {%- endif %}\n\n    string_agg(\n        {{ measure }}\n        , {{ delimiter_text }}\n        {{ order_by_clause }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8667388, "supported_languages": null}, "macro.dbt_project_evaluator.type_large_string": {"name": "type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.type_large_string", "macro_sql": "{%- macro type_large_string() -%}\n    {{ return(adapter.dispatch('type_large_string', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__type_large_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8670542, "supported_languages": null}, "macro.dbt_project_evaluator.default__type_large_string": {"name": "default__type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.default__type_large_string", "macro_sql": "{%- macro default__type_large_string() -%}\n    {{ return(dbt.type_string()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8672225, "supported_languages": null}, "macro.dbt_project_evaluator.redshift__type_large_string": {"name": "redshift__type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.redshift__type_large_string", "macro_sql": "{%- macro redshift__type_large_string() -%}\n    varchar(5000)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8673244, "supported_languages": null}, "macro.dbt_project_evaluator.spark__escape_single_quotes": {"name": "spark__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/spark_shims.sql", "original_file_path": "macros/cross_db_shim/spark_shims.sql", "unique_id": "macro.dbt_project_evaluator.spark__escape_single_quotes", "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n    {{ expression | replace(\"'\",\"\\\\'\") }}  \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8675945, "supported_languages": null}, "macro.dbt_project_evaluator.type_string_dpe": {"name": "type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.type_string_dpe", "macro_sql": "{%- macro type_string_dpe() -%}\n    {{ return(adapter.dispatch('type_string_dpe', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__type_string_dpe"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8679266, "supported_languages": null}, "macro.dbt_project_evaluator.default__type_string_dpe": {"name": "default__type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.default__type_string_dpe", "macro_sql": "{%- macro default__type_string_dpe() -%}\n    {{ return(dbt.type_string()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8680894, "supported_languages": null}, "macro.dbt_project_evaluator.redshift__type_string_dpe": {"name": "redshift__type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.redshift__type_string_dpe", "macro_sql": "{%- macro redshift__type_string_dpe() -%}\n    {{ return(api.Column.string_type(600)) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.86827, "supported_languages": null}, "macro.dbt_project_evaluator.get_metric_values": {"name": "get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.get_metric_values", "macro_sql": "{%- macro get_metric_values() -%}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_metric_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8686728, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_metric_values": {"name": "default__get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_metric_values", "macro_sql": "{%- macro default__get_metric_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.metrics.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n   \n          {%- set values_line = \n            [\n            wrap_string_with_quotes(node.unique_id),\n            wrap_string_with_quotes(node.name),\n            wrap_string_with_quotes(node.resource_type),\n            wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n            \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            wrap_string_with_quotes(node.type),\n            wrap_string_with_quotes(dbt.escape_single_quotes(node.label)),\n            wrap_string_with_quotes(node.package_name),\n            wrap_string_with_quotes(dbt.escape_single_quotes(tojson(node.filter))),\n            wrap_string_with_quotes(node.type_params.measure.name),\n            wrap_string_with_quotes(node.type_params.measure.alias),\n            wrap_string_with_quotes(node.type_params.numerator | tojson),\n            wrap_string_with_quotes(node.type_params.denominator | tojson),\n            wrap_string_with_quotes(node.type_params.expr),\n            wrap_string_with_quotes(node.type_params.window | tojson),\n            wrap_string_with_quotes(node.type_params.grain_to_date),\n            wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8702807, "supported_languages": null}, "macro.dbt_project_evaluator.get_relationship_values": {"name": "get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.get_relationship_values", "macro_sql": "{%- macro get_relationship_values(node_type) -%}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_relationship_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.870952, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_relationship_values": {"name": "default__get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_relationship_values", "macro_sql": "{%- macro default__get_relationship_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'exposures' -%}\n            {% set nodes_list = graph.exposures.values() %}\n        {%- elif node_type == 'metrics' -%}\n            {% set nodes_list = graph.metrics.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes, exposures or metrics, got \" ~ node_type) }}\n        {% endif -%}\n        \n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n            {%- if node.get('depends_on',{}).get('nodes',[]) |length == 0 -%}\n\n                {%- set values_line = \n                  [\n                    \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                    \"cast(NULL as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                    \"FALSE\",\n                  ] \n                %}\n                  \n                {%- do values.append(values_line) -%}\n\n            {%- else -%}       \n\n                {%- for parent in node.get('depends_on',{}).get('nodes',[]) -%}\n\n                    {%- set values_line = \n                        [\n                            \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                            \"cast('\" ~ parent ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                            \"\" ~ loop.last ~ \"\" if node.unique_id.split('.')[0] == 'test' else \"FALSE\"\n                        ]\n                    %}\n                      \n                    {%- do values.append(values_line) -%}\n\n                {%- endfor -%}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n    \n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.873347, "supported_languages": null}, "macro.dbt_project_evaluator.get_resource_values": {"name": "get_resource_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_resource_values.sql", "original_file_path": "macros/unpack/get_resource_values.sql", "unique_id": "macro.dbt_project_evaluator.get_resource_values", "macro_sql": "{% macro get_resource_values(resource=None, relationships=None, columns=None) %}\n  {% if relationships %}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif columns %}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif resource == 'exposures' %}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'sources' %}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'metrics' %}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'nodes' %}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_relationship_values", "macro.dbt_project_evaluator.default__get_relationship_values", "macro.dbt_project_evaluator.get_column_values", "macro.dbt_project_evaluator.default__get_column_values", "macro.dbt_project_evaluator.get_exposure_values", "macro.dbt_project_evaluator.default__get_exposure_values", "macro.dbt_project_evaluator.get_source_values", "macro.dbt_project_evaluator.default__get_source_values", "macro.dbt_project_evaluator.get_metric_values", "macro.dbt_project_evaluator.default__get_metric_values", "macro.dbt_project_evaluator.get_node_values", "macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.874798, "supported_languages": null}, "macro.dbt_project_evaluator.get_source_values": {"name": "get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.get_source_values", "macro_sql": "{%- macro get_source_values() -%}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_source_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8752997, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_source_values": {"name": "default__get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_source_values", "macro_sql": "{%- macro default__get_source_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.sources.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set exclude_source = dbt_project_evaluator.set_is_excluded(node, resource_type=\"source\") -%}\n\n         {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              wrap_string_with_quotes(node.alias),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.source_name),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.source_description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              \"cast(\" ~ node.config.enabled ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              wrap_string_with_quotes(node.loaded_at_field | replace(\"'\", \"_\")),\n              \"cast(\" ~ ((node.freshness != None) and (dbt_project_evaluator.is_not_empty_string(node.freshness.warn_after.count) \n                or dbt_project_evaluator.is_not_empty_string(node.freshness.error_after.count))) | trim ~ \" as boolean)\",\n              wrap_string_with_quotes(node.database),\n              wrap_string_with_quotes(node.schema),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.loader),\n              wrap_string_with_quotes(node.identifier),\n              wrap_string_with_quotes(node.meta | tojson),\n              \"cast(\" ~ exclude_source ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            ]\n        %}\n            \n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n\n    {{ return(values) }}\n \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8773537, "supported_languages": null}, "macro.dbt_project_evaluator.get_node_values": {"name": "get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.get_node_values", "macro_sql": "{%- macro get_node_values() -%}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8779428, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_node_values": {"name": "default__get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_node_values", "macro_sql": "{%- macro default__get_node_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.nodes.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set hard_coded_references = dbt_project_evaluator.find_all_hard_coded_references(node) -%}\n        {%- set number_lines = dbt_project_evaluator.calculate_number_lines(node) -%}\n        {%- set sql_complexity = dbt_project_evaluator.calculate_sql_complexity(node) -%}\n        {%- set contract = node.contract.enforced if node.contract else false -%}\n        {%- set exclude_node = dbt_project_evaluator.set_is_excluded(node, resource_type=\"node\") -%}\n\n\n        {%- set values_line  = \n            [\n                wrap_string_with_quotes(node.unique_id),\n                wrap_string_with_quotes(node.name),\n                wrap_string_with_quotes(node.resource_type),\n                wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n                \"cast(\" ~ node.config.enabled | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                wrap_string_with_quotes(node.config.materialized),\n                wrap_string_with_quotes(node.config.on_schema_change),\n                wrap_string_with_quotes(node.group),\n                wrap_string_with_quotes(node.access),\n                wrap_string_with_quotes(node.latest_version),\n                wrap_string_with_quotes(node.version),\n                wrap_string_with_quotes(node.deprecation_date),\n                \"cast(\" ~ contract | trim  ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                node.columns.values() | list | length,\n                node.columns.values() | list | selectattr('description') | list | length,\n                wrap_string_with_quotes(node.database),\n                wrap_string_with_quotes(node.schema),\n                wrap_string_with_quotes(node.package_name),\n                wrap_string_with_quotes(node.alias),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                \"''\" if not node.column_name else wrap_string_with_quotes(dbt.escape_single_quotes(node.column_name)),\n                wrap_string_with_quotes(node.meta | tojson),\n                wrap_string_with_quotes(dbt.escape_single_quotes(hard_coded_references)),\n                number_lines,\n                sql_complexity,\n                wrap_string_with_quotes(node.get('depends_on',{}).get('macros',[]) | tojson),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.test_metadata) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                \"cast(\" ~ exclude_node ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            ]\n        %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.find_all_hard_coded_references", "macro.dbt_project_evaluator.calculate_number_lines", "macro.dbt_project_evaluator.calculate_sql_complexity", "macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8808386, "supported_languages": null}, "macro.dbt_project_evaluator.get_exposure_values": {"name": "get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.get_exposure_values", "macro_sql": "{%- macro get_exposure_values() -%}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_exposure_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8812935, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_exposure_values": {"name": "default__get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_exposure_values", "macro_sql": "{%- macro default__get_exposure_values() -%}\n\n    {%- if execute -%}\n\n        {%- set nodes_list = graph.exposures.values() -%}\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n          {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              wrap_string_with_quotes(node.type),\n              wrap_string_with_quotes(node.maturity),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.url),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.name)),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.email)),\n              wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n          {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8825557, "supported_languages": null}, "macro.dbt_project_evaluator.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.get_column_values", "macro_sql": "{%- macro get_column_values(node_type) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8830662, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_column_values", "macro_sql": "{%- macro default__get_column_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'sources' -%}\n            {% set nodes_list = graph.sources.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes or sources, got \" ~ node_type) }}\n        {% endif -%}\n\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n            {%- for column in node.columns.values() -%}\n\n                {%- set values_line  = \n                    [\n                        wrap_string_with_quotes(node.unique_id),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.name)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.description)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.data_type)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(tojson(column.constraints))),\n                        column.constraints | selectattr('type', 'equalto', 'not_null') | list | length > 0,\n                        column.constraints | length,\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.quote))\n                    ]\n                %}\n\n                {%- do values.append(values_line) -%}\n\n            {%- endfor -%}\n        {%- endfor -%}\n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.884581, "supported_languages": null}, "macro.dbt_project_evaluator.test_is_empty": {"name": "test_is_empty", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "tests/generic/test_is_empty.sql", "original_file_path": "tests/generic/test_is_empty.sql", "unique_id": "macro.dbt_project_evaluator.test_is_empty", "macro_sql": "{% test is_empty(model) %}\n\n    {{ config (\n        severity = 'warn',\n        fail_calc = \"n_records\"\n    ) }}\n\n    select count(*) as n_records\n    from {{ model }}\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742909948.8849454, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.nerd_facts_dbt.int_swapi_films_vehicles": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_vehicles"], "model.nerd_facts_dbt.int_swapi_films_species": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_species"], "model.nerd_facts_dbt.int_swapi_species": ["model.nerd_facts_dbt.stg_swapi_species"], "model.nerd_facts_dbt.int_swapi_planets": ["model.nerd_facts_dbt.stg_swapi_planets"], "model.nerd_facts_dbt.int_swapi_planets_characters": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_swapi_planets"], "model.nerd_facts_dbt.int_swapi_characters_species": ["model.nerd_facts_dbt.stg_swapi_people", "model.nerd_facts_dbt.stg_swapi_species"], "model.nerd_facts_dbt.int_swapi_starships_people": ["model.nerd_facts_dbt.stg_swapi_starships"], "model.nerd_facts_dbt.int_swapi_vehicles": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "model.nerd_facts_dbt.int_swapi_starships": ["model.nerd_facts_dbt.stg_swapi_starships"], "model.nerd_facts_dbt.int_swapi_films_characters": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.int_swapi_films_starships": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_starships"], "model.nerd_facts_dbt.int_swapi_films": ["model.nerd_facts_dbt.stg_swapi_films"], "model.nerd_facts_dbt.int_swapi_films_planets": ["model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_planets"], "model.nerd_facts_dbt.int_swapi_people": ["model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.int_swapi_vehicles_people": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "model.nerd_facts_dbt.stg_pokeapi_types": [], "model.nerd_facts_dbt.stg_pokeapi_abilities": [], "model.nerd_facts_dbt.stg_pokeapi_pokemon": [], "model.nerd_facts_dbt.stg_pokeapi_moves": ["source.nerd_facts_dbt.pokeapi.moves"], "model.nerd_facts_dbt.stg_pokeapi_items": [], "model.nerd_facts_dbt.stg_netrunner_packs": ["source.nerd_facts_dbt.netrunner.packs"], "model.nerd_facts_dbt.stg_netrunner_cards": ["source.nerd_facts_dbt.netrunner.cards"], "model.nerd_facts_dbt.stg_netrunner_factions": ["source.nerd_facts_dbt.netrunner.factions"], "model.nerd_facts_dbt.stg_swapi_vehicles": ["source.nerd_facts_dbt.swapi.vehicles"], "model.nerd_facts_dbt.stg_swapi_starships": ["source.nerd_facts_dbt.swapi.starships"], "model.nerd_facts_dbt.stg_swapi_films": ["source.nerd_facts_dbt.swapi.films"], "model.nerd_facts_dbt.stg_swapi_planets": ["source.nerd_facts_dbt.swapi.planets"], "model.nerd_facts_dbt.stg_swapi_people": ["source.nerd_facts_dbt.swapi.people"], "model.nerd_facts_dbt.stg_swapi_species": ["source.nerd_facts_dbt.swapi.species"], "model.nerd_facts_dbt.nerd_universe_obt": ["model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.fact_pokemon"], "model.nerd_facts_dbt.star_wars_obt": ["model.nerd_facts_dbt.bridge_sw_characters_films", "model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.dim_sw_planets", "model.nerd_facts_dbt.dim_sw_species"], "model.nerd_facts_dbt.pokemon_obt": ["model.nerd_facts_dbt.bridge_pokemon_abilities", "model.nerd_facts_dbt.dim_pokemon_types", "model.nerd_facts_dbt.fact_pokemon"], "model.nerd_facts_dbt.dim_pokemon_abilities": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.bridge_pokemon_abilities": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.bridge_pokemon_moves": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.dim_pokemon_types": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.dim_pokemon_moves": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "model.nerd_facts_dbt.fact_pokemon_stats": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.fact_pokemon_matchups": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.fact_pokemon": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "model.nerd_facts_dbt.dim_locations": ["model.nerd_facts_dbt.stg_swapi_planets"], "model.nerd_facts_dbt.fact_power_ratings": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.dim_characters": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_pokeapi_pokemon", "model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.fact_netrunner_cards": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_packs"], "model.nerd_facts_dbt.fact_netrunner_card_power": ["model.nerd_facts_dbt.stg_netrunner_cards"], "model.nerd_facts_dbt.dim_netrunner_factions": ["model.nerd_facts_dbt.stg_netrunner_cards", "model.nerd_facts_dbt.stg_netrunner_factions", "model.nerd_facts_dbt.stg_netrunner_packs"], "model.nerd_facts_dbt.dim_netrunner_cards": ["model.nerd_facts_dbt.stg_netrunner_cards"], "model.nerd_facts_dbt.fact_sw_films": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_films_species", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_films_vehicles", "model.nerd_facts_dbt.int_swapi_people"], "model.nerd_facts_dbt.fact_sw_characters": ["model.nerd_facts_dbt.stg_swapi_people"], "model.nerd_facts_dbt.dim_sw_species": ["model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films_species", "model.nerd_facts_dbt.int_swapi_species"], "model.nerd_facts_dbt.bridge_sw_characters_films": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_people"], "model.nerd_facts_dbt.dim_sw_films": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_films_species", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_films_vehicles"], "model.nerd_facts_dbt.fact_starships": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_starships"], "model.nerd_facts_dbt.dim_sw_characters": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_people", "model.nerd_facts_dbt.int_swapi_planets"], "model.nerd_facts_dbt.bridge_sw_films_planets": ["model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.stg_swapi_films", "model.nerd_facts_dbt.stg_swapi_planets"], "model.nerd_facts_dbt.dim_sw_planets": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_planets", "model.nerd_facts_dbt.int_swapi_planets_characters"], "model.nerd_facts_dbt.bridge_sw_starships_pilots": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_people", "model.nerd_facts_dbt.int_swapi_planets", "model.nerd_facts_dbt.int_swapi_starships"], "model.nerd_facts_dbt.dim_sw_vehicles": ["model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_vehicles", "model.nerd_facts_dbt.int_swapi_vehicles"], "test.nerd_facts_dbt.test_sw_character_quality": ["model.nerd_facts_dbt.dim_characters"], "test.nerd_facts_dbt.test_data_freshness": [], "model.dbt_project_evaluator.stg_exposures": [], "model.dbt_project_evaluator.stg_nodes": [], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.base_metric_relationships"], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.base_exposure_relationships"], "model.dbt_project_evaluator.stg_columns": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.base_node_relationships"], "model.dbt_project_evaluator.stg_sources": [], "model.dbt_project_evaluator.stg_metrics": [], "model.dbt_project_evaluator.base_node_relationships": [], "model.dbt_project_evaluator.base_exposure_relationships": [], "model.dbt_project_evaluator.base_source_columns": [], "model.dbt_project_evaluator.base_metric_relationships": [], "model.dbt_project_evaluator.base_node_columns": [], "model.dbt_project_evaluator.stg_naming_convention_prefixes": [], "model.dbt_project_evaluator.stg_naming_convention_folders": [], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_duplicate_sources": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_too_many_joins": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_root_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_unused_sources": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_hard_coded_references": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_directories": ["model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_sources"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships", "model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_sources_without_freshness": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_coverage": ["model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.fct_undocumented_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_documentation_coverage": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_undocumented_sources": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": [], "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_ability_id.73002b7b78": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_id.454a997776": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d": ["model.nerd_facts_dbt.stg_pokeapi_abilities"], "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_pokemon_id.0aae465ab6": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_id.54d6f632e9": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb": ["model.nerd_facts_dbt.stg_pokeapi_pokemon"], "test.nerd_facts_dbt.unique_stg_pokeapi_moves_move_id.627c191b0b": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_id.ed207f55ba": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_name.e3d107b599": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.bf1d97b6f1": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0.c16002ba56": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.89fb9bec20": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.aa330941c4": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.ae824db77d": ["model.nerd_facts_dbt.stg_pokeapi_moves"], "test.nerd_facts_dbt.unique_stg_pokeapi_items_item_id.9edce17dc9": ["model.nerd_facts_dbt.stg_pokeapi_items"], "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_id.e1f99416f9": ["model.nerd_facts_dbt.stg_pokeapi_items"], "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_name.835b172802": ["model.nerd_facts_dbt.stg_pokeapi_items"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL.c332b5938b": ["model.nerd_facts_dbt.stg_pokeapi_items"], "test.nerd_facts_dbt.unique_stg_pokeapi_types_type_id.5c90e57894": ["model.nerd_facts_dbt.stg_pokeapi_types"], "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_id.7eab806dd3": ["model.nerd_facts_dbt.stg_pokeapi_types"], "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_name.34ca71a5c0": ["model.nerd_facts_dbt.stg_pokeapi_types"], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.a64f89e9e1": ["model.nerd_facts_dbt.stg_pokeapi_types"], "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051": ["model.nerd_facts_dbt.stg_netrunner_cards"], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b": ["model.nerd_facts_dbt.stg_netrunner_factions"], "test.nerd_facts_dbt.unique_stg_netrunner_types_type_id.6c0873a4b5": [], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_id.d7e0c6692f": [], "test.nerd_facts_dbt.unique_stg_netrunner_types_type_code.f043eaac08": [], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_code.dd9e128956": [], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_name.3d8e59b009": [], "test.nerd_facts_dbt.accepted_values_stg_netrunner_types_side_code__corp__runner__None.ea3a9022cf": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.fabff6255a": [], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2": ["model.nerd_facts_dbt.stg_netrunner_packs"], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_id.eadb505df5": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_id.62ac352d3f": [], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_code.4f84a84350": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_code.4c9240e6c1": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_name.865301e9dd": [], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_position.b1a7d27022": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_position.4a0a7c8342": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0.50541a18a6": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0.e1ddce52f3": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL.8b14b6468a": [], "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_id.3449a40165": [], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_id.fca108b90f": [], "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_code.bed6436dd0": [], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_code.7e85af9991": [], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_name.2c8839b12c": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0.d00a712176": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0.6f39ee868e": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0.0ea2524870": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count.5edd92ae57": [], "test.nerd_facts_dbt.unique_stg_swapi_starships_starship_id.8d2f1e1387": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_id.33d24c92bc": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5": ["model.nerd_facts_dbt.stg_swapi_starships"], "test.nerd_facts_dbt.unique_stg_swapi_films_film_id.ea5ba181e6": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_film_id.a339ca4379": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74": ["model.nerd_facts_dbt.stg_swapi_films"], "test.nerd_facts_dbt.unique_stg_swapi_people_people_id.49907a6ad0": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.not_null_stg_swapi_people_people_id.9097a6c93c": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e": ["model.nerd_facts_dbt.stg_swapi_people"], "test.nerd_facts_dbt.unique_stg_swapi_planets_planet_id.615d4daee0": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.not_null_stg_swapi_planets_planet_id.0392ef05b9": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03": ["model.nerd_facts_dbt.stg_swapi_planets"], "test.nerd_facts_dbt.unique_stg_swapi_species_species_id.eef5924130": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.not_null_stg_swapi_species_species_id.037c430261": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221": ["model.nerd_facts_dbt.stg_swapi_species"], "test.nerd_facts_dbt.unique_stg_swapi_vehicles_vehicle_id.f42372d3a8": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_id.44275887db": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7": ["model.nerd_facts_dbt.stg_swapi_vehicles"], "test.nerd_facts_dbt.not_null_star_wars_obt_character_id.aa2d5ca904": ["model.nerd_facts_dbt.star_wars_obt"], "test.nerd_facts_dbt.not_null_pokemon_obt_pokemon_id.17bc952d9e": ["model.nerd_facts_dbt.pokemon_obt"], "test.nerd_facts_dbt.not_null_nerd_universe_obt_universe.51c9e975b4": ["model.nerd_facts_dbt.nerd_universe_obt"], "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_id.f6a71ebb11": ["model.nerd_facts_dbt.nerd_universe_obt"], "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_name.3b5e13295e": ["model.nerd_facts_dbt.nerd_universe_obt"], "test.nerd_facts_dbt.not_null_nerd_universe_obt_obt_created_at.46390d7480": ["model.nerd_facts_dbt.nerd_universe_obt"], "test.nerd_facts_dbt.unique_column_dim_characters_character_id.84b36a6ff7": ["model.nerd_facts_dbt.dim_characters"], "test.nerd_facts_dbt.not_null_column_dim_characters_character_id.c97cad84e1": ["model.nerd_facts_dbt.dim_characters"], "test.nerd_facts_dbt.not_null_column_dim_characters_name.9bb85b23a6": ["model.nerd_facts_dbt.dim_characters"], "test.nerd_facts_dbt.unique_column_dim_films_film_id.d927909715": [], "test.nerd_facts_dbt.not_null_column_dim_films_film_id.4e6599f0f8": [], "test.nerd_facts_dbt.not_null_column_dim_films_title.db94e0209e": [], "test.nerd_facts_dbt.not_null_column_dim_films_release_date.05bcd8d750": [], "test.nerd_facts_dbt.test_sw_character_data_quality.9079a0b52c": [], "test.nerd_facts_dbt.test_sw_films_freshness.37a43a604d": [], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": ["model.dbt_project_evaluator.fct_direct_join_to_source"], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": ["model.dbt_project_evaluator.fct_duplicate_sources"], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": ["model.dbt_project_evaluator.fct_model_fanout"], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": ["model.dbt_project_evaluator.fct_multiple_sources_joined"], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": ["model.dbt_project_evaluator.fct_root_models"], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": ["model.dbt_project_evaluator.fct_source_fanout"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": ["model.dbt_project_evaluator.fct_unused_sources"], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": ["model.dbt_project_evaluator.fct_hard_coded_references"], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": ["model.dbt_project_evaluator.fct_too_many_joins"], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": ["model.dbt_project_evaluator.fct_model_directories"], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": ["model.dbt_project_evaluator.fct_model_naming_conventions"], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": ["model.dbt_project_evaluator.fct_source_directories"], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": ["model.dbt_project_evaluator.fct_test_directories"], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": ["model.dbt_project_evaluator.fct_public_models_without_contract"], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": ["model.dbt_project_evaluator.fct_undocumented_public_models"], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": ["model.dbt_project_evaluator.fct_test_coverage"], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"], "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": ["model.dbt_project_evaluator.fct_sources_without_freshness"], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": ["model.dbt_project_evaluator.fct_documentation_coverage"], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": ["model.dbt_project_evaluator.fct_undocumented_models"], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": ["model.dbt_project_evaluator.fct_undocumented_source_tables"], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": ["model.dbt_project_evaluator.fct_undocumented_sources"], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": ["model.dbt_project_evaluator.fct_chained_views_dependencies"], "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11": ["source.nerd_facts_dbt.pokeapi.moves"], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9": ["source.nerd_facts_dbt.pokeapi.moves"], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3": ["source.nerd_facts_dbt.pokeapi.moves"], "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a": ["source.nerd_facts_dbt.netrunner.cards"], "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82": ["source.nerd_facts_dbt.netrunner.cards"], "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c": ["source.nerd_facts_dbt.netrunner.cards"], "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833": ["source.nerd_facts_dbt.netrunner.factions"], "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79": ["source.nerd_facts_dbt.netrunner.factions"], "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8": ["source.nerd_facts_dbt.netrunner.factions"], "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384": ["source.nerd_facts_dbt.netrunner.types"], "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5": ["source.nerd_facts_dbt.netrunner.types"], "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a": ["source.nerd_facts_dbt.netrunner.types"], "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799": ["source.nerd_facts_dbt.netrunner.packs"], "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b": ["source.nerd_facts_dbt.netrunner.packs"], "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f": ["source.nerd_facts_dbt.netrunner.cycles"], "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387": ["source.nerd_facts_dbt.netrunner.cycles"], "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f": ["source.nerd_facts_dbt.netrunner.subtypes"], "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda": ["source.nerd_facts_dbt.swapi.starships"], "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef": ["source.nerd_facts_dbt.swapi.starships"], "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803": ["source.nerd_facts_dbt.swapi.starships"], "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_not_null_swapi_films_release_date.cff58563b1": ["source.nerd_facts_dbt.swapi.films"], "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3": ["source.nerd_facts_dbt.swapi.people"], "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536": ["source.nerd_facts_dbt.swapi.people"], "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f": ["source.nerd_facts_dbt.swapi.people"], "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10": ["source.nerd_facts_dbt.swapi.planets"], "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70": ["source.nerd_facts_dbt.swapi.planets"], "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef": ["source.nerd_facts_dbt.swapi.planets"], "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172": ["source.nerd_facts_dbt.swapi.species"], "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9": ["source.nerd_facts_dbt.swapi.species"], "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1": ["source.nerd_facts_dbt.swapi.species"], "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3": ["source.nerd_facts_dbt.swapi.vehicles"], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039": ["source.nerd_facts_dbt.swapi.vehicles"], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c": ["source.nerd_facts_dbt.swapi.vehicles"], "source.nerd_facts_dbt.pokeapi.moves": [], "source.nerd_facts_dbt.pokeapi.pokemon": [], "source.nerd_facts_dbt.pokeapi.types": [], "source.nerd_facts_dbt.pokeapi.abilities": [], "source.nerd_facts_dbt.pokeapi.items": [], "source.nerd_facts_dbt.pokeapi.generations": [], "source.nerd_facts_dbt.pokeapi.locations": [], "source.nerd_facts_dbt.netrunner.cards": [], "source.nerd_facts_dbt.netrunner.factions": [], "source.nerd_facts_dbt.netrunner.types": [], "source.nerd_facts_dbt.netrunner.packs": [], "source.nerd_facts_dbt.netrunner.cycles": [], "source.nerd_facts_dbt.netrunner.subtypes": [], "source.nerd_facts_dbt.swapi.starships": [], "source.nerd_facts_dbt.swapi.films": [], "source.nerd_facts_dbt.swapi.people": [], "source.nerd_facts_dbt.swapi.planets": [], "source.nerd_facts_dbt.swapi.species": [], "source.nerd_facts_dbt.swapi.vehicles": [], "source.nerd_facts_dbt.raw.swapi_people": [], "source.nerd_facts_dbt.raw.swapi_planets": [], "source.nerd_facts_dbt.raw.swapi_starships": [], "source.nerd_facts_dbt.raw.swapi_vehicles": [], "source.nerd_facts_dbt.raw.swapi_species": [], "source.nerd_facts_dbt.raw.swapi_films": [], "source.nerd_facts_dbt.raw.pokeapi_pokemon": [], "source.nerd_facts_dbt.raw.pokeapi_types": [], "source.nerd_facts_dbt.raw.pokeapi_abilities": [], "source.nerd_facts_dbt.raw.pokeapi_moves": [], "source.nerd_facts_dbt.raw.pokeapi_items": []}, "child_map": {"model.nerd_facts_dbt.int_swapi_films_vehicles": ["model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.dim_sw_vehicles", "model.nerd_facts_dbt.fact_sw_films"], "model.nerd_facts_dbt.int_swapi_films_species": ["model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.dim_sw_species", "model.nerd_facts_dbt.fact_sw_films"], "model.nerd_facts_dbt.int_swapi_species": ["model.nerd_facts_dbt.dim_sw_species"], "model.nerd_facts_dbt.int_swapi_planets": ["model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.dim_sw_planets"], "model.nerd_facts_dbt.int_swapi_planets_characters": ["model.nerd_facts_dbt.dim_sw_planets"], "model.nerd_facts_dbt.int_swapi_characters_species": [], "model.nerd_facts_dbt.int_swapi_starships_people": [], "model.nerd_facts_dbt.int_swapi_vehicles": ["model.nerd_facts_dbt.dim_sw_vehicles"], "model.nerd_facts_dbt.int_swapi_starships": ["model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.fact_starships"], "model.nerd_facts_dbt.int_swapi_films_characters": ["model.nerd_facts_dbt.bridge_sw_characters_films", "model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.dim_sw_species", "model.nerd_facts_dbt.fact_sw_films"], "model.nerd_facts_dbt.int_swapi_films_starships": ["model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.fact_starships", "model.nerd_facts_dbt.fact_sw_films"], "model.nerd_facts_dbt.int_swapi_films": ["model.nerd_facts_dbt.bridge_sw_characters_films", "model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.dim_sw_planets", "model.nerd_facts_dbt.dim_sw_vehicles", "model.nerd_facts_dbt.fact_starships", "model.nerd_facts_dbt.fact_sw_films"], "model.nerd_facts_dbt.int_swapi_films_planets": ["model.nerd_facts_dbt.bridge_sw_films_planets", "model.nerd_facts_dbt.dim_sw_films", "model.nerd_facts_dbt.dim_sw_planets", "model.nerd_facts_dbt.fact_sw_films"], "model.nerd_facts_dbt.int_swapi_people": ["model.nerd_facts_dbt.bridge_sw_characters_films", "model.nerd_facts_dbt.bridge_sw_starships_pilots", "model.nerd_facts_dbt.dim_sw_characters", "model.nerd_facts_dbt.fact_sw_films"], "model.nerd_facts_dbt.int_swapi_vehicles_people": [], "model.nerd_facts_dbt.stg_pokeapi_types": ["test.nerd_facts_dbt.accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.a64f89e9e1", "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_id.7eab806dd3", "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_name.34ca71a5c0", "test.nerd_facts_dbt.unique_stg_pokeapi_types_type_id.5c90e57894"], "model.nerd_facts_dbt.stg_pokeapi_abilities": ["test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d", "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_id.454a997776", "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e", "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a", "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_ability_id.73002b7b78"], "model.nerd_facts_dbt.stg_pokeapi_pokemon": ["model.nerd_facts_dbt.bridge_pokemon_abilities", "model.nerd_facts_dbt.bridge_pokemon_moves", "model.nerd_facts_dbt.dim_characters", "model.nerd_facts_dbt.dim_pokemon_abilities", "model.nerd_facts_dbt.dim_pokemon_types", "model.nerd_facts_dbt.fact_pokemon", "model.nerd_facts_dbt.fact_pokemon_matchups", "model.nerd_facts_dbt.fact_pokemon_stats", "model.nerd_facts_dbt.fact_power_ratings", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb", "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_id.54d6f632e9", "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b", "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_pokemon_id.0aae465ab6"], "model.nerd_facts_dbt.stg_pokeapi_moves": ["model.nerd_facts_dbt.dim_pokemon_moves", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.bf1d97b6f1", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0.c16002ba56", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.ae824db77d", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.89fb9bec20", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.aa330941c4", "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_id.ed207f55ba", "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_name.e3d107b599", "test.nerd_facts_dbt.unique_stg_pokeapi_moves_move_id.627c191b0b"], "model.nerd_facts_dbt.stg_pokeapi_items": ["test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL.c332b5938b", "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_id.e1f99416f9", "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_name.835b172802", "test.nerd_facts_dbt.unique_stg_pokeapi_items_item_id.9edce17dc9"], "model.nerd_facts_dbt.stg_netrunner_packs": ["model.nerd_facts_dbt.dim_netrunner_factions", "model.nerd_facts_dbt.fact_netrunner_cards", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b", "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3", "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4", "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e"], "model.nerd_facts_dbt.stg_netrunner_cards": ["model.nerd_facts_dbt.dim_characters", "model.nerd_facts_dbt.dim_netrunner_cards", "model.nerd_facts_dbt.dim_netrunner_factions", "model.nerd_facts_dbt.fact_netrunner_card_power", "model.nerd_facts_dbt.fact_netrunner_cards", "model.nerd_facts_dbt.fact_power_ratings", "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c", "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1", "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802"], "model.nerd_facts_dbt.stg_netrunner_factions": ["model.nerd_facts_dbt.dim_netrunner_factions", "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e", "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef", "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674", "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533"], "model.nerd_facts_dbt.stg_swapi_vehicles": ["model.nerd_facts_dbt.int_swapi_films_vehicles", "model.nerd_facts_dbt.int_swapi_vehicles", "model.nerd_facts_dbt.int_swapi_vehicles_people", "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7", "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_id.44275887db", "test.nerd_facts_dbt.unique_stg_swapi_vehicles_vehicle_id.f42372d3a8"], "model.nerd_facts_dbt.stg_swapi_starships": ["model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_starships", "model.nerd_facts_dbt.int_swapi_starships_people", "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5", "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_id.33d24c92bc", "test.nerd_facts_dbt.unique_stg_swapi_starships_starship_id.8d2f1e1387"], "model.nerd_facts_dbt.stg_swapi_films": ["model.nerd_facts_dbt.bridge_sw_films_planets", "model.nerd_facts_dbt.int_swapi_films", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_films_species", "model.nerd_facts_dbt.int_swapi_films_starships", "model.nerd_facts_dbt.int_swapi_films_vehicles", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05", "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696", "test.nerd_facts_dbt.not_null_stg_swapi_films_film_id.a339ca4379", "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4", "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74", "test.nerd_facts_dbt.unique_stg_swapi_films_film_id.ea5ba181e6"], "model.nerd_facts_dbt.stg_swapi_planets": ["model.nerd_facts_dbt.bridge_sw_films_planets", "model.nerd_facts_dbt.dim_locations", "model.nerd_facts_dbt.int_swapi_films_planets", "model.nerd_facts_dbt.int_swapi_planets", "model.nerd_facts_dbt.int_swapi_planets_characters", "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03", "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78", "test.nerd_facts_dbt.not_null_stg_swapi_planets_planet_id.0392ef05b9", "test.nerd_facts_dbt.unique_stg_swapi_planets_planet_id.615d4daee0"], "model.nerd_facts_dbt.stg_swapi_people": ["model.nerd_facts_dbt.dim_characters", "model.nerd_facts_dbt.fact_power_ratings", "model.nerd_facts_dbt.fact_sw_characters", "model.nerd_facts_dbt.int_swapi_characters_species", "model.nerd_facts_dbt.int_swapi_films_characters", "model.nerd_facts_dbt.int_swapi_people", "model.nerd_facts_dbt.int_swapi_planets_characters", "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e", "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f", "test.nerd_facts_dbt.not_null_stg_swapi_people_people_id.9097a6c93c", "test.nerd_facts_dbt.unique_stg_swapi_people_people_id.49907a6ad0"], "model.nerd_facts_dbt.stg_swapi_species": ["model.nerd_facts_dbt.int_swapi_characters_species", "model.nerd_facts_dbt.int_swapi_films_species", "model.nerd_facts_dbt.int_swapi_species", "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221", "test.nerd_facts_dbt.not_null_stg_swapi_species_species_id.037c430261", "test.nerd_facts_dbt.unique_stg_swapi_species_species_id.eef5924130"], "model.nerd_facts_dbt.nerd_universe_obt": ["test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_id.f6a71ebb11", "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_name.3b5e13295e", "test.nerd_facts_dbt.not_null_nerd_universe_obt_obt_created_at.46390d7480", "test.nerd_facts_dbt.not_null_nerd_universe_obt_universe.51c9e975b4"], "model.nerd_facts_dbt.star_wars_obt": ["test.nerd_facts_dbt.not_null_star_wars_obt_character_id.aa2d5ca904"], "model.nerd_facts_dbt.pokemon_obt": ["test.nerd_facts_dbt.not_null_pokemon_obt_pokemon_id.17bc952d9e"], "model.nerd_facts_dbt.dim_pokemon_abilities": [], "model.nerd_facts_dbt.bridge_pokemon_abilities": ["model.nerd_facts_dbt.pokemon_obt"], "model.nerd_facts_dbt.bridge_pokemon_moves": [], "model.nerd_facts_dbt.dim_pokemon_types": ["model.nerd_facts_dbt.pokemon_obt"], "model.nerd_facts_dbt.dim_pokemon_moves": [], "model.nerd_facts_dbt.fact_pokemon_stats": [], "model.nerd_facts_dbt.fact_pokemon_matchups": [], "model.nerd_facts_dbt.fact_pokemon": ["model.nerd_facts_dbt.nerd_universe_obt", "model.nerd_facts_dbt.pokemon_obt"], "model.nerd_facts_dbt.dim_locations": [], "model.nerd_facts_dbt.fact_power_ratings": [], "model.nerd_facts_dbt.dim_characters": ["test.nerd_facts_dbt.not_null_column_dim_characters_character_id.c97cad84e1", "test.nerd_facts_dbt.not_null_column_dim_characters_name.9bb85b23a6", "test.nerd_facts_dbt.test_sw_character_quality", "test.nerd_facts_dbt.unique_column_dim_characters_character_id.84b36a6ff7"], "model.nerd_facts_dbt.fact_netrunner_cards": [], "model.nerd_facts_dbt.fact_netrunner_card_power": [], "model.nerd_facts_dbt.dim_netrunner_factions": [], "model.nerd_facts_dbt.dim_netrunner_cards": [], "model.nerd_facts_dbt.fact_sw_films": [], "model.nerd_facts_dbt.fact_sw_characters": [], "model.nerd_facts_dbt.dim_sw_species": ["model.nerd_facts_dbt.star_wars_obt"], "model.nerd_facts_dbt.bridge_sw_characters_films": ["model.nerd_facts_dbt.star_wars_obt"], "model.nerd_facts_dbt.dim_sw_films": ["model.nerd_facts_dbt.star_wars_obt"], "model.nerd_facts_dbt.fact_starships": [], "model.nerd_facts_dbt.dim_sw_characters": ["model.nerd_facts_dbt.nerd_universe_obt", "model.nerd_facts_dbt.star_wars_obt"], "model.nerd_facts_dbt.bridge_sw_films_planets": [], "model.nerd_facts_dbt.dim_sw_planets": ["model.nerd_facts_dbt.star_wars_obt"], "model.nerd_facts_dbt.bridge_sw_starships_pilots": [], "model.nerd_facts_dbt.dim_sw_vehicles": [], "test.nerd_facts_dbt.test_sw_character_quality": [], "test.nerd_facts_dbt.test_data_freshness": [], "model.dbt_project_evaluator.stg_exposures": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_nodes": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_columns": [], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_sources": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_metrics": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.base_node_relationships": ["model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.base_exposure_relationships": ["model.dbt_project_evaluator.stg_exposure_relationships"], "model.dbt_project_evaluator.base_source_columns": ["model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.base_metric_relationships": ["model.dbt_project_evaluator.stg_metric_relationships"], "model.dbt_project_evaluator.base_node_columns": ["model.dbt_project_evaluator.int_model_test_summary", "model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.stg_naming_convention_prefixes": ["model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_naming_convention_folders": ["model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817"], "model.dbt_project_evaluator.fct_duplicate_sources": ["test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31"], "model.dbt_project_evaluator.fct_too_many_joins": ["test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535"], "model.dbt_project_evaluator.fct_model_fanout": ["test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95"], "model.dbt_project_evaluator.fct_root_models": ["test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1"], "model.dbt_project_evaluator.fct_unused_sources": ["test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8"], "model.dbt_project_evaluator.fct_source_fanout": ["test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f"], "model.dbt_project_evaluator.fct_hard_coded_references": ["test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113"], "model.dbt_project_evaluator.fct_test_directories": ["test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2"], "model.dbt_project_evaluator.fct_model_directories": ["test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db"], "model.dbt_project_evaluator.fct_source_directories": ["test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.fct_documentation_coverage", "model.dbt_project_evaluator.fct_duplicate_sources", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_sources_without_freshness", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_unused_sources"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938"], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0"], "model.dbt_project_evaluator.fct_sources_without_freshness": ["test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283"], "model.dbt_project_evaluator.fct_test_coverage": ["test.dbt_project_evaluator.valid_test_coverage.df03f31e09"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_test_coverage"], "model.dbt_project_evaluator.fct_undocumented_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c"], "model.dbt_project_evaluator.fct_documentation_coverage": ["test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166"], "model.dbt_project_evaluator.fct_undocumented_sources": ["test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_duplicate_sources", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_sources_without_freshness", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.fct_unused_sources"], "test.nerd_facts_dbt.unique_stg_pokeapi_abilities_ability_id.73002b7b78": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_id.454a997776": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_ability_name.6b290c6d3e": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_abilities_effect_description.03e18e135a": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_abilities_pokemon_count___0.b568ce117d": [], "test.nerd_facts_dbt.unique_stg_pokeapi_pokemon_pokemon_id.0aae465ab6": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_id.54d6f632e9": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_pokemon_pokemon_name.4c7ee26e1b": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_height___0_OR_IS_NULL.05fe91c18a": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_pokemon_weight___0_OR_IS_NULL.e7f07e55cb": [], "test.nerd_facts_dbt.unique_stg_pokeapi_moves_move_id.627c191b0b": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_id.ed207f55ba": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_moves_move_name.e3d107b599": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_accuracy__100__0.bf1d97b6f1": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_effect_chance__100__0.c16002ba56": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_pp__40__1.89fb9bec20": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_priority__5___7.aa330941c4": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_pokeapi_moves_power__250__0.ae824db77d": [], "test.nerd_facts_dbt.unique_stg_pokeapi_items_item_id.9edce17dc9": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_id.e1f99416f9": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_items_item_name.835b172802": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_pokeapi_items_cost___0_OR_IS_NULL.c332b5938b": [], "test.nerd_facts_dbt.unique_stg_pokeapi_types_type_id.5c90e57894": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_id.7eab806dd3": [], "test.nerd_facts_dbt.not_null_stg_pokeapi_types_type_name.34ca71a5c0": [], "test.nerd_facts_dbt.accepted_values_stg_pokeapi_types_type_name__normal__fire__water__electric__grass__ice__fighting__poison__ground__flying__psychic__bug__rock__ghost__dragon__dark__steel__fairy.a64f89e9e1": [], "test.nerd_facts_dbt.unique_stg_netrunner_cards_card_id.8a41c61802": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_card_id.3b4f6a03b2": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_title.166cc8902c": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_type_code.6a190ba3f1": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cards_faction_code.0f8dc0958f": [], "test.nerd_facts_dbt.accepted_values_stg_netrunner_cards_side_code__corp__runner.e1912189e7": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_cost___0_OR_IS_NULL.1a1c1a1d38": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_strength___0_OR_IS_NULL.0994cac55d": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_advancement_cost___0_OR_IS_NULL.1abd5a5017": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_netrunner_cards_agenda_points__3__0.d200763bad": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_agenda__is_agenda_false_OR_agenda_points_IS_NOT_NULL.a8fb404302": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_is_ice__is_ice_false_OR_strength_IS_NOT_NULL.7555949034": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards_NOT_is_agenda_true_AND_side_code_runner_.d2a158c7e8": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cards__advancement_cost_IS_NULL_AND_agenda_points_IS_NULL_OR_advancement_cost_IS_NOT_NULL_AND_agenda_points_IS_NOT_NULL_.e96d9d2051": [], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_id.5a10d31533": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_id.6f93485553": [], "test.nerd_facts_dbt.unique_stg_netrunner_factions_faction_code.3416ae5674": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_code.f336d64d9e": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_faction_name.d6bf7db21e": [], "test.nerd_facts_dbt.not_null_stg_netrunner_factions_side_code.6676ebadef": [], "test.nerd_facts_dbt.accepted_values_stg_netrunner_factions_side_code__corp__runner.c8f8bcad6d": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_factions_card_count___0.18ec718d8b": [], "test.nerd_facts_dbt.unique_stg_netrunner_types_type_id.6c0873a4b5": [], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_id.d7e0c6692f": [], "test.nerd_facts_dbt.unique_stg_netrunner_types_type_code.f043eaac08": [], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_code.dd9e128956": [], "test.nerd_facts_dbt.not_null_stg_netrunner_types_type_name.3d8e59b009": [], "test.nerd_facts_dbt.accepted_values_stg_netrunner_types_side_code__corp__runner__None.ea3a9022cf": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_types_card_count___0.fabff6255a": [], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_id.17a6fecf9e": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_id.2eb527422b": [], "test.nerd_facts_dbt.unique_stg_netrunner_packs_pack_code.fcdac2a8e4": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_code.d697381895": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_pack_name.2ffea00bd3": [], "test.nerd_facts_dbt.not_null_stg_netrunner_packs_cycle_code.840c080532": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_release_date___current_date_OR_IS_NULL.b45470f922": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_packs_card_count___0.c1a902beb2": [], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_id.eadb505df5": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_id.62ac352d3f": [], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_cycle_code.4f84a84350": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_code.4c9240e6c1": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_cycle_name.865301e9dd": [], "test.nerd_facts_dbt.unique_stg_netrunner_cycles_position.b1a7d27022": [], "test.nerd_facts_dbt.not_null_stg_netrunner_cycles_position.4a0a7c8342": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_pack_count___0.50541a18a6": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_card_count___0.e1ddce52f3": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_cycles_first_release_date___current_date_OR_IS_NULL.8b14b6468a": [], "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_id.3449a40165": [], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_id.fca108b90f": [], "test.nerd_facts_dbt.unique_stg_netrunner_subtypes_subtype_code.bed6436dd0": [], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_code.7e85af9991": [], "test.nerd_facts_dbt.not_null_stg_netrunner_subtypes_subtype_name.2c8839b12c": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count___0.d00a712176": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_corp_count___0.6f39ee868e": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_runner_count___0.0ea2524870": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_netrunner_subtypes_card_count_corp_count_runner_count.5edd92ae57": [], "test.nerd_facts_dbt.unique_stg_swapi_starships_starship_id.8d2f1e1387": [], "test.nerd_facts_dbt.not_null_stg_swapi_starships_starship_id.33d24c92bc": [], "test.nerd_facts_dbt.not_null_stg_swapi_starships_name.0962a611d5": [], "test.nerd_facts_dbt.unique_stg_swapi_films_film_id.ea5ba181e6": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_film_id.a339ca4379": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_film_title.7e4077bef4": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_episode_id.bc98d1b696": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_films_episode_id__9__1.a5d4199e05": [], "test.nerd_facts_dbt.not_null_stg_swapi_films_release_date.6599c8fb74": [], "test.nerd_facts_dbt.unique_stg_swapi_people_people_id.49907a6ad0": [], "test.nerd_facts_dbt.not_null_stg_swapi_people_people_id.9097a6c93c": [], "test.nerd_facts_dbt.not_null_stg_swapi_people_name.f39acc5c3f": [], "test.nerd_facts_dbt.dbt_utils_expression_is_true_stg_swapi_people_height___0_OR_IS_NULL.fa60c94a6e": [], "test.nerd_facts_dbt.unique_stg_swapi_planets_planet_id.615d4daee0": [], "test.nerd_facts_dbt.not_null_stg_swapi_planets_planet_id.0392ef05b9": [], "test.nerd_facts_dbt.not_null_stg_swapi_planets_name.290277cf78": [], "test.nerd_facts_dbt.dbt_utils_accepted_range_stg_swapi_planets_surface_water__100__0.a9aca03c03": [], "test.nerd_facts_dbt.unique_stg_swapi_species_species_id.eef5924130": [], "test.nerd_facts_dbt.not_null_stg_swapi_species_species_id.037c430261": [], "test.nerd_facts_dbt.not_null_stg_swapi_species_name.72dd894221": [], "test.nerd_facts_dbt.unique_stg_swapi_vehicles_vehicle_id.f42372d3a8": [], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_vehicle_id.44275887db": [], "test.nerd_facts_dbt.not_null_stg_swapi_vehicles_name.f1ef2875b7": [], "test.nerd_facts_dbt.not_null_star_wars_obt_character_id.aa2d5ca904": [], "test.nerd_facts_dbt.not_null_pokemon_obt_pokemon_id.17bc952d9e": [], "test.nerd_facts_dbt.not_null_nerd_universe_obt_universe.51c9e975b4": [], "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_id.f6a71ebb11": [], "test.nerd_facts_dbt.not_null_nerd_universe_obt_entity_name.3b5e13295e": [], "test.nerd_facts_dbt.not_null_nerd_universe_obt_obt_created_at.46390d7480": [], "test.nerd_facts_dbt.unique_column_dim_characters_character_id.84b36a6ff7": [], "test.nerd_facts_dbt.not_null_column_dim_characters_character_id.c97cad84e1": [], "test.nerd_facts_dbt.not_null_column_dim_characters_name.9bb85b23a6": [], "test.nerd_facts_dbt.unique_column_dim_films_film_id.d927909715": [], "test.nerd_facts_dbt.not_null_column_dim_films_film_id.4e6599f0f8": [], "test.nerd_facts_dbt.not_null_column_dim_films_title.db94e0209e": [], "test.nerd_facts_dbt.not_null_column_dim_films_release_date.05bcd8d750": [], "test.nerd_facts_dbt.test_sw_character_data_quality.9079a0b52c": [], "test.nerd_facts_dbt.test_sw_films_freshness.37a43a604d": [], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": [], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": [], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": [], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": [], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": [], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": [], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": [], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": [], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": [], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": [], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": [], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": [], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": [], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": [], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": [], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": [], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": [], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": [], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": [], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": [], "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": [], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": [], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": [], "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11": [], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9": [], "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3": [], "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a": [], "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82": [], "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c": [], "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833": [], "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79": [], "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8": [], "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384": [], "test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5": [], "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a": [], "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799": [], "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b": [], "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f": [], "test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387": [], "test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f": [], "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda": [], "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef": [], "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803": [], "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f": [], "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd": [], "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912": [], "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f": [], "test.nerd_facts_dbt.source_not_null_swapi_films_release_date.cff58563b1": [], "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3": [], "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536": [], "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f": [], "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10": [], "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70": [], "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef": [], "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172": [], "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9": [], "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1": [], "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3": [], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039": [], "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c": [], "source.nerd_facts_dbt.pokeapi.moves": ["model.nerd_facts_dbt.stg_pokeapi_moves", "test.nerd_facts_dbt.source_not_null_pokeapi_moves_id.c4a229cda9", "test.nerd_facts_dbt.source_not_null_pokeapi_moves_name.5721c278f3", "test.nerd_facts_dbt.source_unique_pokeapi_moves_id.d93d417c11"], "source.nerd_facts_dbt.pokeapi.pokemon": [], "source.nerd_facts_dbt.pokeapi.types": [], "source.nerd_facts_dbt.pokeapi.abilities": [], "source.nerd_facts_dbt.pokeapi.items": [], "source.nerd_facts_dbt.pokeapi.generations": [], "source.nerd_facts_dbt.pokeapi.locations": [], "source.nerd_facts_dbt.netrunner.cards": ["model.nerd_facts_dbt.stg_netrunner_cards", "test.nerd_facts_dbt.source_not_null_netrunner_cards_code.b018ea8b82", "test.nerd_facts_dbt.source_not_null_netrunner_cards_title.9384019c8c", "test.nerd_facts_dbt.source_unique_netrunner_cards_code.7f8cacd76a"], "source.nerd_facts_dbt.netrunner.factions": ["model.nerd_facts_dbt.stg_netrunner_factions", "test.nerd_facts_dbt.source_not_null_netrunner_factions_code.a535114c79", "test.nerd_facts_dbt.source_not_null_netrunner_factions_name.4321a60eb8", "test.nerd_facts_dbt.source_unique_netrunner_factions_code.818d947833"], "source.nerd_facts_dbt.netrunner.types": ["test.nerd_facts_dbt.source_not_null_netrunner_types_code.cd58935bd5", "test.nerd_facts_dbt.source_not_null_netrunner_types_name.311e01ac8a", "test.nerd_facts_dbt.source_unique_netrunner_types_code.63fb152384"], "source.nerd_facts_dbt.netrunner.packs": ["model.nerd_facts_dbt.stg_netrunner_packs", "test.nerd_facts_dbt.source_not_null_netrunner_packs_code.a5aa8c198b", "test.nerd_facts_dbt.source_unique_netrunner_packs_code.4fd37b2799"], "source.nerd_facts_dbt.netrunner.cycles": ["test.nerd_facts_dbt.source_not_null_netrunner_cycles_code.1e343fc387", "test.nerd_facts_dbt.source_unique_netrunner_cycles_code.5bfadefe6f"], "source.nerd_facts_dbt.netrunner.subtypes": ["test.nerd_facts_dbt.source_unique_netrunner_subtypes_code.82e267410f"], "source.nerd_facts_dbt.swapi.starships": ["model.nerd_facts_dbt.stg_swapi_starships", "test.nerd_facts_dbt.source_not_null_swapi_starships_id.20f60e38ef", "test.nerd_facts_dbt.source_not_null_swapi_starships_name.14334d5803", "test.nerd_facts_dbt.source_unique_swapi_starships_id.4a35a82bda"], "source.nerd_facts_dbt.swapi.films": ["model.nerd_facts_dbt.stg_swapi_films", "test.nerd_facts_dbt.source_not_null_swapi_films_episode_id.878f8e1d7f", "test.nerd_facts_dbt.source_not_null_swapi_films_id.a8d97fb7bd", "test.nerd_facts_dbt.source_not_null_swapi_films_release_date.cff58563b1", "test.nerd_facts_dbt.source_not_null_swapi_films_title.212e764912", "test.nerd_facts_dbt.source_unique_swapi_films_id.2e4ee95c0f"], "source.nerd_facts_dbt.swapi.people": ["model.nerd_facts_dbt.stg_swapi_people", "test.nerd_facts_dbt.source_not_null_swapi_people_id.f2f7ed0536", "test.nerd_facts_dbt.source_not_null_swapi_people_name.f00750019f", "test.nerd_facts_dbt.source_unique_swapi_people_id.a65a848ed3"], "source.nerd_facts_dbt.swapi.planets": ["model.nerd_facts_dbt.stg_swapi_planets", "test.nerd_facts_dbt.source_not_null_swapi_planets_id.4186af8d70", "test.nerd_facts_dbt.source_not_null_swapi_planets_name.319b74f0ef", "test.nerd_facts_dbt.source_unique_swapi_planets_id.d844490a10"], "source.nerd_facts_dbt.swapi.species": ["model.nerd_facts_dbt.stg_swapi_species", "test.nerd_facts_dbt.source_not_null_swapi_species_id.fe660e97e9", "test.nerd_facts_dbt.source_not_null_swapi_species_name.6420b153a1", "test.nerd_facts_dbt.source_unique_swapi_species_id.1559b8a172"], "source.nerd_facts_dbt.swapi.vehicles": ["model.nerd_facts_dbt.stg_swapi_vehicles", "test.nerd_facts_dbt.source_not_null_swapi_vehicles_id.50e734d039", "test.nerd_facts_dbt.source_not_null_swapi_vehicles_name.20c147bb0c", "test.nerd_facts_dbt.source_unique_swapi_vehicles_id.27e66a26c3"], "source.nerd_facts_dbt.raw.swapi_people": [], "source.nerd_facts_dbt.raw.swapi_planets": [], "source.nerd_facts_dbt.raw.swapi_starships": [], "source.nerd_facts_dbt.raw.swapi_vehicles": [], "source.nerd_facts_dbt.raw.swapi_species": [], "source.nerd_facts_dbt.raw.swapi_films": [], "source.nerd_facts_dbt.raw.pokeapi_pokemon": [], "source.nerd_facts_dbt.raw.pokeapi_types": [], "source.nerd_facts_dbt.raw.pokeapi_abilities": [], "source.nerd_facts_dbt.raw.pokeapi_moves": [], "source.nerd_facts_dbt.raw.pokeapi_items": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}